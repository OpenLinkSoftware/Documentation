<docbook><section><title>VirtAggregateOverMultipleColumnsInSparql</title><title> Running an aggregate like COUNT over multiple columns in SPARQL 1.1</title> Running an aggregate like COUNT over multiple columns in SPARQL 1.1
<para>SPARQL 1.1 added aggregates, but <ulink url="https://www.w3.org/TR/sparql11-query/#rAggregate">it only permits them to be run over a single column, or over all columns in the result set</ulink>.</para>
<para>For instance, this query gets a <ulink url="http://live.dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&amp;qtxt=SELECT+%0D%0A+++DISTINCT++%3Fs+%3Fp+%3Fo+%0D%0AWHERE%0D%0A++%7B+%0D%0A++++VALUES+%3Fs+%7B+%3Chttp%3A%2F%2Fdbpedia.org%2Fresource%2FTreaty_of_Bern%3E+%7D+%0D%0A++++%3Fs+%3Fp+%3Fo%0D%0A++++OPTIONAL+%7B+%3Fs+a+%3Ftype+%7D+.%0D%0A++++FILTER+%28+BOUND+%28+%3Ftype+%29+%29+.%0D%0A++%7D%0D%0A&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=121&amp;CXML_redir_for_hrefs=&amp;timeout=30000&amp;signal_void=on&amp;signal_unconnected=on&amp;run=+Run+Query+">large number of rows</ulink>, and you might want to know how many without running the full query --</para>
<programlisting>SELECT 
   DISTINCT  ?s ?p ?o 
WHERE
  { 
    VALUES ?s { &lt;http://dbpedia.org/resource/Treaty_of_Bern&gt; } 
    ?s ?p ?o
    OPTIONAL { ?s a ?type } .
    FILTER ( BOUND ( ?type ) ) .
  }
</programlisting><para> A simple COUNT(DISTINCT *) includes all variables bound in the WHERE clause -- which here means a Cartesian result set, <ulink url="http://live.dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&amp;qtxt=SELECT+%0D%0A+++%28+COUNT%28+DISTINCT+*+%29+AS+%3FHowManyTriples+%29%0D%0AWHERE%0D%0A++%7B+%0D%0A++++VALUES+%3Fs+%7B+%3Chttp%3A%2F%2Fdbpedia.org%2Fresource%2FTreaty_of_Bern%3E+%7D+%0D%0A++++%3Fs+%3Fp+%3Fo%0D%0A++++OPTIONAL+%7B+%3Fs+a+%3Ftype+%7D+.%0D%0A++++FILTER+%28+BOUND+%28+%3Ftype+%29+%29+.%0D%0A++%7D%0D%0A&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=121&amp;CXML_redir_for_hrefs=&amp;timeout=30000&amp;signal_void=on&amp;signal_unconnected=on&amp;run=+Run+Query+">multiplying the count</ulink> of DISTINCT ?s ?p ?o by the count of DISTINCT ?type.</para>
<para>A workaround is to wrap the aggregate around a sub-query.
 <ulink url="http://live.dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org&amp;qtxt=SELECT+%0D%0A+++%28+COUNT%28+*+%29+AS+%3FHowManyTriples+%29%0D%0AWHERE%0D%0A++%7B+%0D%0A++++%7B+SELECT+%0D%0A+++++++++DISTINCT++%3Fs+%3Fp+%3Fo+%0D%0A++++++WHERE%0D%0A+++++++%7B+%0D%0A+++++++++VALUES+%3Fs+%7B+%3Chttp%3A%2F%2Fdbpedia.org%2Fresource%2FTreaty_of_Bern%3E+%7D+%0D%0A+++++++++%3Fs+%3Fp+%3Fo%0D%0A+++++++++OPTIONAL+%7B+%3Fs+a+%3Ftype+%7D+.%0D%0A+++++++++FILTER+%28+BOUND+%28+%3Ftype+%29+%29+.%0D%0A+++++++%7D%0D%0A++++%7D%0D%0A++%7D%0D%0A%0D%0A%0D%0A&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=121&amp;CXML_redir_for_hrefs=&amp;timeout=30000&amp;signal_void=on&amp;signal_unconnected=on&amp;run=+Run+Query+">The query below returns an accurate count</ulink> of DISTINCT ?s ?p ?o rows.</para>
<programlisting>SELECT 
   ( COUNT( DISTINCT * ) AS ?HowManyTriples )
WHERE
  { 
    { 
      SELECT 
         DISTINCT ?s ?p ?o 
      WHERE
       { 
         VALUES ?s { &lt;http://dbpedia.org/resource/Treaty_of_Bern&gt; } 
         ?s ?p ?o
         OPTIONAL { ?s a ?type } .
         FILTER ( BOUND ( ?type ) ) .
       }
    }
  }
</programlisting></section></docbook>