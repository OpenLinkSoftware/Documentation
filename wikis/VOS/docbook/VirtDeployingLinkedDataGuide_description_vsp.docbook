<docbook><section><title>VirtDeployingLinkedDataGuide_description_vsp</title><para> </para>
<title>Deploying Linked Data Guide - Appendix A: Description.vsp - Rendering RDF as HTML</title>Deploying Linked Data Guide - Appendix A: Description.vsp - Rendering RDF as HTML
 <ulink url="VirtDeployingLinkedDataGuide">Deploying Linked Data Guide - TOC</ulink><bridgehead class="http://www.w3.org/1999/xhtml:h2" />
<para>Description.vsp is a Virtuoso Server Page (Virtuoso&#39;s equivalent of ASP) which provides a hypertext description of RDF Linked Data.
 Its purpose is to provide a default HTML rendering of RDF data, to allow it to be navigated using an HTML, rather than RDF, browser.
 Description.vsp underpins the &#39;Page Description&#39; facility in the <ulink url="http://ode.openlinksw.com/">OpenLink Data Explorer</ulink> (ODE) browser extension.
 (ODE is also available as a hosted service - e.g.
 <ulink url="http://demo.openlinksw.com/ode.)">http://demo.openlinksw.com/ode.)</ulink> The HTML view it provides substitutes RDF hyperdata links with hypertext links.
 The description is tabular, listing the properties of the entity being described and, adjacent, the property values.</para>
<para><figure><graphic fileref="VirtDeployingLinkedDataGuide_description_vsp/fig8.jpg" /></figure></para> <para>Description.vsp is invoked through the Virtuoso &#39;Page Description&#39; service, a proxy service accessed via /about/html.
 For instance, to extract RDF data from an HTML page, <ulink url="http://musicbrainz.org/artist/72c090b6-a68e-4cb9-b330-85278681a714.html">http://musicbrainz.org/artist/72c090b6-a68e-4cb9-b330-85278681a714.html</ulink> describing musician John Cale, and then view the extracted RDF as HTML, the page can be retrieved via the Page Description Service hosted by the Virtuoso instance at linkeddata.uriburner.com.
 viz:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="http://linkeddata.uriburner.com/about/html/http://musicbrainz.org/artist/72c090b6-a68e-4cb9-b330-85278681a714.html">http://linkeddata.uriburner.com/about/html/http://musicbrainz.org/artist/72c090b6-a68e-4cb9-b330-85278681a714.html</ulink></listitem>
</itemizedlist><para>Similarly, when deploying your own Linked Data, you can exploit the power of Virtuoso&#39;s URL rewriting to automatically redirect requests for HTML renditions of the RDF data to the /about/html proxy.</para>
<para>When description.vsp is executed, the Network Resource Source URI is being fetched to extract the RDF data to be displayed.
 Two routes through the <ulink url="http://virtuoso.openlinksw.com/Whitepapers/pdf/sponger_whitepaper_10102007.pdf">Virtuoso Sponger</ulink> are possible:</para>
<orderedlist spacing="compact"><listitem>If the source contains RDF directly, this is used &#39;as is&#39;.
</listitem>
<listitem>If not, the Virtuoso Sponger extracts any available metadata through one or more Sponger cartridges and converts this to RDF.</listitem>
</orderedlist><para>Data from the Northwind RDF view follows route 1.
 Data from the <ulink url="MusicBrainz">MusicBrainz</ulink> page on John Cale follows route 2.
 Whichever route is followed, the Sponger caches the RDF data in the Virtuoso RDF quad store.</para>
<para>With the Northwind demo rewrite rule for HTML requests set up with a Request Path Pattern of /about/html/(.*) and a Destination Path Format of /rdfdesc/description.vsp?g=$U1 , a request for an HTML rendering of http://myhost/Northwind/Customer/ALFKI#this results in description.vsp being called with parameter g set to http://myhost/Northwind/Customer/ALFKI#this.</para>
<para>description.vsp uses Virtuoso&#39;s SPARQL extensions for IRI dereferencing (see the Virtuoso on-line documentation: <ulink url="http://docs.openlinksw.com/virtuoso/rdfiridereferencing.html#rdfinputgrab">IRI Dereferencing for FROM clauses</ulink> ) to invoke the Sponger via the get:soft &quot;soft&quot; option and crawl the URI identified by &#39;g&#39;.
 e.g.
</para>
<programlisting>sparql define get:soft &quot;soft&quot; SELECT * from &lt;http://myhost/Northwind/Customer/ALFKI&gt; where { ?x ?y ?z }
</programlisting><para> The Sponger creates graph &lt;http://myhost/Northwind/Customer/ALFKI&gt; to hold the extracted RDF data describing entity ALFKI.
 Once cached in the quad store, description.vsp then issues a series of SPARQL queries to identify the predicates and predicate values associated with all RDF statements having &lt;http://myhost/Northwind/Customer/ALFKI#this&gt; as the subject.
 These are then displayed in an HTML table.</para>
<emphasis><ulink url="VirtDeployingLinkedDataGuide">Back</ulink></emphasis> to Deploying Linked Data Guide | <emphasis><ulink url="VirtDeployingLinkedDataGuide_TCN">Previous:</ulink></emphasis> Transparent Content Negotiation | <emphasis><ulink url="VirtDeployingLinkedDataGuide_AppendixB">Next:</ulink></emphasis> Appendix B: New Proxy URI Formats </section></docbook>