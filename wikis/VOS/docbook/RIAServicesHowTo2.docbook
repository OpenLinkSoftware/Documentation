<docbook><section><title>RIAServicesHowTo2</title><title> Creating a .Net RIA Services Application That Will Update Virtuoso Data</title> Creating a .Net RIA Services Application That Will Update Virtuoso Data
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Introduction</bridgehead>
<para>This example demonstrates how data in Virtuoso can be updated from a Microsoft .NET RIA Services application.
 The example is a continuation of the first example in <ulink url="RIAServicesHowTo">Creating a Simple .Net RIA Services Application to Display Data From Virtuoso</ulink>.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Pre-requisites</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem>A working copy of the application created in <ulink url="RIAServicesHowTo">Creating a Simple .Net RIA Services Application to Display Data From Virtuoso</ulink>.</listitem>
</itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2"> Creating the Application.</bridgehead>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Add A New Domain Service Class</bridgehead>
<para>The EmployeeService Domain Service Class was only used to display data so was created read only.
 In this example we need to be able to update the data so we need to remove the read only Domain Service Class and create a new on.</para>
<orderedlist spacing="compact"><listitem>In the <emphasis>Server Explorer</emphasis> right click EmployeeService and select <emphasis>Delete</emphasis> </listitem>
<listitem>Right click the server project and <emphasis>Add New Item</emphasis>.
 In the dialog box choose Domain Service Class from the Templates pane and again call it EmployeeService.cs.
 Click Add.
</listitem>
<listitem>Select the Employees entity and tick <emphasis>Enable editing</emphasis>.
 Also tick <emphasis>Generated associated classes for metadata</emphasis>.
<figure><graphic fileref="RIAServicesHowTo2/newdomainserviceclass.png" /></figure> </listitem>
<listitem>Update MainPage.xaml.cs to use EmployeeService2 the new domain service rather than EmployeeContext.</listitem>
</orderedlist><para>We want to create a master detail style page.
 To do this we will use the DomainDataSourceComponent from the Silverlight Components.
But first we will add a pager so only 5 records are displayed at a time.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Add a DataPager</bridgehead>
<orderedlist spacing="compact"><listitem>Add two new namespaces to MainPage.xaml <programlisting>    xmlns:riaControls=&quot;clr-namespace:System.Windows.Controls;assembly=System.Windows.Ria.Controls&quot;  
    xmlns:ds=&quot;clr-namespace:DemoApplication.Web&quot;
</programlisting></listitem>
<listitem>Use a DomainDataSource to provide the data to fill the grid.
 Add the following to MainPage.xaml before the DataGrid. <programlisting>        &lt;riaControls:DomainDataSource x:Name=&quot;EmployeeDataSource&quot;
                                      QueryName=&quot;GetEmployeesQuery&quot;
                                      LoadSize=&quot;10&quot;
                                      AutoLoad=&quot;True&quot;&gt;
            &lt;riaControls:DomainDataSource.DomainContext&gt;
                &lt;ds:EmployeeService2/&gt;
            &lt;/riaControls:DomainDataSource.DomainContext&gt;
        &lt;/riaControls:DomainDataSource&gt;
</programlisting></listitem>
<listitem>Update the MainPage.xaml.cs code behind file.  Using the DomainDataSource means you no longer need to instantiate the context and load the grid in MainPage.xaml.cs so it becomes: <programlisting>    public partial class MainPage : UserControl
    {
        public MainPage()
        {
            InitializeComponent();
        }
    }
</programlisting></listitem>
<listitem>Set the binding source of the DataGrid to the DomainDataSource <programlisting>&lt;data:DataGrid MinHeight=&quot;100&quot;  IsReadOnly=&quot;True&quot; ItemsSource=&quot;{Binding Data, ElementName=EmployeeDataSource}&quot; x:Name=&quot;DataGrid1&quot;&gt;&lt;/data:DataGrid&gt; /&gt;
</programlisting></listitem>
<listitem>Drag a DataPager form the tool box onto MainPage.xaml just after the DataGrid. </listitem>
<listitem>Add a page size and binding element to the DataPager.
<programlisting>&lt;data:DataPager PageSize=&quot;5&quot; Source=&quot;{Binding Data, ElementName=employeeDataSource}&quot;
                      Margin=&quot;0,-1,0,0&quot;&gt;&lt;/data:DataPager&gt;
</programlisting></listitem>
<listitem>Build and run the application.
 The data should be displayed 5 rows at a time.
<figure><graphic fileref="RIAServicesHowTo2/demoapp.png" /></figure> We now need to add a DataForm to display the details.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Add a DataForm</bridgehead>
<orderedlist spacing="compact"><listitem>Add the following namespace to MainPage.xaml <programlisting>xmlns:dataForm=&quot;clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Data.DataForm.Toolkit&quot;
</programlisting></listitem>
<listitem>Add the form to MainPage.xaml <programlisting>        &lt;dataForm:DataForm x:Name=&quot;dataForm1&quot; Header=&quot;Employee Information&quot;  AutoGenerateFields=&quot;False&quot; AutoEdit=&quot;False&quot; AutoCommit=&quot;False&quot; CurrentItem=&quot;{Binding SelectedItem, ElementName=DataGrid1}&quot; Margin=&quot;0,12,0,0&quot;&gt;            
            &lt;dataForm:DataForm.EditTemplate&gt;
                &lt;DataTemplate&gt;
                    &lt;StackPanel&gt;
                        &lt;dataForm:DataField Label=&quot;Employee ID&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding EmployeeID, Mode=TwoWay}&quot; /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;First Name&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding FirstName, Mode=TwoWay}&quot; /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Last Name&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding LastName, Mode=TwoWay}&quot; /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Courtesy Title&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding TitleOfCourtesy, Mode=TwoWay}&quot; /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Hire Date&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding HireDate, Mode=TwoWay}&quot; /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Title&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding Title, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Reports To&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding ReportsTo, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Region&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding Region, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Address&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding Address, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;City&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding City, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Country Code&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding CountryCode, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                        &lt;dataForm:DataField Label=&quot;Postal Code&quot;&gt;
                            &lt;TextBox Text=&quot;{Binding PostalCode, Mode=TwoWay}&quot;  /&gt;
                        &lt;/dataForm:DataField&gt;
                            &lt;/StackPanel&gt;
                &lt;/DataTemplate&gt;
            &lt;/dataForm:DataForm.EditTemplate&gt;
        &lt;/dataForm:DataForm&gt;
</programlisting></listitem>
<listitem>Surround the DomainDataSource, DataGrid and DataForm with <programlisting>        &lt;ScrollViewer BorderThickness=&quot;0&quot;  VerticalScrollBarVisibility=&quot;Auto&quot; Padding=&quot;12,0,12,0&quot; Margin=&quot;-2&quot;&gt;
            &lt;StackPanel Margin=&quot;0,12,0,12&quot; Orientation=&quot;Vertical&quot; &gt;
.
.
.
            &lt;/StackPanel&gt;
        &lt;/ScrollViewer&gt;
</programlisting></listitem>
<listitem>Build and run the application.
 As each employee is selected the data form fill with their details.
<figure><graphic fileref="RIAServicesHowTo2/masterdetail.png" /></figure> By clicking on the pencil symbol in the top right hand corner the data in the form can be edited but it is not propagated back to the database.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2"> Propagate Updates to Virtuoso</bridgehead>
<orderedlist spacing="compact"><listitem>Add a ?Submit? button just after the DataForm in MainPage.xaml by adding the following code.
<programlisting>&lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Right&quot; Margin=&quot;0,12,0,0&quot;&gt;
                &lt;Button x:Name=&quot;submitButton&quot; Width=&quot;75&quot; Height=&quot;23&quot;  Content=&quot;Submit&quot;  Margin=&quot;4,0,0,0&quot; Click=&quot;submitButton_Click&quot;/&gt;
                
            &lt;/StackPanel&gt;
</programlisting></listitem>
<listitem>Handle the button click event in MainPage.xaml.cs by adding the following code: <programlisting>private void submitButton_Click(object sender, RoutedEventArgs e)
        {
            EmployeeDataSource.SubmitChanges();
        }
</programlisting></listitem>
<listitem>Build and run the application.
 If you now edit data in the form and click the submit button the data in Virtuoso will be updated.
<figure><graphic fileref="RIAServicesHowTo2/edit.png" /></figure></listitem>
</orderedlist><para> </para>
</section></docbook>