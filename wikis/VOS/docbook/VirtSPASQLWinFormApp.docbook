<docbook><section><title>VirtSPASQLWinFormApp</title><title> Creating a Windows Forms Application To Access RDF Data Using The Virtuoso ADO.Net Provider</title> Creating a Windows Forms Application To Access RDF Data Using The Virtuoso ADO.Net Provider
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Introduction</bridgehead>
<para>This document will guide you through creating a simple application that allows you to access RDF data in a Virtuoso database as an Entity DataSet and explore that RDF data in an intuitive way by clicking on dereferenceable <ulink url="http://docs.openlinksw.com/virtuoso/rdfdatarepresentation.html#rdfiriidtype">IRIs</ulink>.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Prerequisites</bridgehead>
<orderedlist spacing="compact"><listitem>Microsoft Visual Studio 2008 </listitem>
<listitem>The Virtuoso ADO.Net provider for .Net 3.5 and the Entity Framework </listitem>
<listitem>The example assumes that you have a local Virtuoso server with the Northwind demo database installed.
 If the demo database is not already installed then download the <ulink url="https://virtuoso.openlinksw.com/download/">demo database VAD package</ulink> (demo_dav.vad) and install it.
 The VAD package will create a new database in Virtuoso called demo containing the familiar Northwind tables.
 It will also creates <ulink url="http://docs.openlinksw.com/virtuoso/rdfsparqlintegrationmiddleware.html#rdfviews">Linked Data Views</ulink> of the Northwind tables.
 In the example we assume the database is accessible on a hostname of &quot;demo.openlinksw.com&quot; on the default port 80, where an actually live instance of the Virtuoso Demo database is hosted.
 Users would use the appropriate hostname and port number of their Virtuoso installation to create the sample application, and would be localhost:8890 for a default installation or whatever the <ulink url="http://docs.openlinksw.com/virtuoso/databaseadmsrv.html#ini_URIQA">URIQA DefaultHost</ulink> Virtuoso configuration parameter is set to when the demo database VAD package is installed.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2"> Creating the Application</bridgehead>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 1 - Create a view of the RDF data</bridgehead>
<para>We want to be able to access the RDF data in Visual Studio and the easiest way to do this is to create a view of the data that we are interested in and bind that view to a DataSet.
 This can be considered as using server side <ulink url="http://docs.openlinksw.com/virtuoso/rdfsparql.html">SPARQL</ulink>.
 Virtuoso supports an extension to standard SQL that allows execution of <ulink url="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsparqlinline">SPARQL within a SQL statement</ulink>.
If a SQL query begins with the keyword SPARQL then the rest of the query is interpreted by as SPARQL.
 If a SPARQL query is used as the definition of a view then that view can be manipulated using SQL like any other view.
 In this way the result set from a SPARQL query can be easily accessed from Visual Studio using ADO.Net and the Entity Framework.</para>
<orderedlist spacing="compact"><listitem>To create a view of the customers in the Northwind, first open the Virtuoso Conductor and log in as dba.
<itemizedlist mark="bullet" spacing="compact"><listitem><emphasis>Note:</emphasis> <itemizedlist mark="bullet" spacing="compact"><listitem>If the view is added to the Visual Studio project as user &quot;demo&quot; (or any other than &quot;dba&#39;), then it must be ensured that the &quot;SPARQL_SELECT&quot; and &quot;SPARQL_SPONGE&quot; roles are assigned to this user, which can be done via the Virtuoso Conductor in the &quot;System Admin&quot; -&gt; &quot;User Accounts&quot; tab.
</listitem>
<listitem>Execute permissions will also need to be granted to the following procedure: <programlisting>GRANT  EXECUTE 
  ON  DB.DBA.RDF_MAKE_LONG_OF_SQLVAL 
  TO  &quot;demo&quot;
</programlisting></listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>Then open iSQL from the menu on the left and execute the following statement -- <programlisting>CREATE VIEW Demo.demo.sparqlview AS
  SPARQL
  PREFIX  nwind:  &lt;http://demo.openlinksw.com/schemas/northwind#&gt;
  SELECT DISTINCT  ?s  
    FROM  &lt;http://demo.openlinksw.com/Northwind&gt;
    WHERE  { ?s  a  nwind:Customer }
</programlisting><figure><graphic fileref="VirtSPASQLWinFormApp/CreateView.png" /></figure></listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 2 - Create a simple grid form in Visual Studio</bridgehead>
<orderedlist spacing="compact"><listitem>Open <emphasis>Visual Studio</emphasis> and create a new <emphasis>Windows Forms Application</emphasis> called RDFDemo.
</listitem>
<listitem>In the <emphasis>Form Designer</emphasis> drag a <emphasis>DataGridView</emphasis> on to the form.
</listitem>
<listitem>Click the <emphasis>Choose Data Source</emphasis> drop down and select <emphasis>Add Project Data Source</emphasis>.
<figure><graphic fileref="VirtSPASQLWinFormApp/AddDataSource.png" /></figure> </listitem>
<listitem>In the <emphasis>Data</emphasis> <emphasis>Source</emphasis> <emphasis>Configuration Wizard</emphasis> choose <emphasis>Database</emphasis> and then set up a connection to the demo database on your local Virtuoso server.
</listitem>
<listitem>On the <emphasis>Choose Your Data Objects</emphasis> page expand the <emphasis>Views</emphasis> and select sparqlview.
<figure><graphic fileref="VirtSPASQLWinFormApp/ChooseDataSourceObject.png" /></figure> </listitem>
<listitem>Click <emphasis>Finish</emphasis>.
</listitem>
<listitem>In the <emphasis>Form</emphasis> <emphasis>Designer</emphasis> select dataGridView1 and change the <emphasis>AutoSizeColumnsMode</emphasis> to AllCellsExceptHeader.
</listitem>
<listitem>Select the <emphasis>DefaultCellStyle</emphasis> and click on the ellipsis.
 This will open the <emphasis>CellStyleBuilder</emphasis>.
 Change the <emphasis>ForeColor</emphasis> to Blue.
<figure><graphic fileref="VirtSPASQLWinFormApp/CellStyleBuilder.png" /></figure> </listitem>
<listitem>Expand <emphasis>Font</emphasis> and change <emphasis>Underline</emphasis> to True.
 Click <emphasis>OK</emphasis>.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 3 - Change the mapping of the DataSet</bridgehead>
<orderedlist spacing="compact"><listitem>In the <emphasis>Solution Explorer</emphasis> you will now have a <emphasis>DataSet</emphasis> called DemoDataSet.xsd.
</listitem>
<listitem>If you double click on this it opens the <emphasis>DataSet Designer</emphasis>.
</listitem>
<listitem>Select the column called s in the sparqlview table, and in the <emphasis>Properties</emphasis> pane, change the <emphasis>DataType</emphasis> from System.String to System.Object.
<itemizedlist mark="bullet" spacing="compact"><listitem>The data returned by a SPARQL query can either be an <ulink url="http://docs.openlinksw.com/virtuoso/rdfdatarepresentation.html#rdfiriidtype">IRI</ulink> or a literal value.
 In order to distinguish between the two the Virtuoso ADO.Net provider defines an additional data type, SQLExtendedString.
 By setting the column type to System.Object we can cast the fetched data back to SQLExtendedString and find out if an individual value is an IRI or a literal and handle it appropriately.</listitem>
</itemizedlist></listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 4 - Create the on_click event handler for the cells in the DataGridView</bridgehead>
<orderedlist spacing="compact"><listitem>Return to the <emphasis>Form</emphasis> <emphasis>Designer</emphasis> and double click on the cell of the <emphasis>DataGridView</emphasis>.
 This creates the <emphasis>dataGridView1_CellContentClick</emphasis> method in Form1.cs.
This is the method that handles clicking on IRI objects in the grid.
</listitem>
<listitem>Paste the following block of code into the body of the <emphasis>dataGridView1_CellContentClick</emphasis> method.
<programlisting>int column = e.ColumnIndex;
 object o = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
 Type t = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].ValueType;

 if (o is SqlExtendedString)
 {   
     SqlExtendedString se = (SqlExtendedString) o;                
     ExtendedStringHandler seHandler = new ExtendedStringHandler(se, this.sparqlviewTableAdapter.Connection);
     seHandler.displayData();
 }
 else if (o is SqlRdfBox)
 {   
     //doesn&#39;t do anything at the moment
 }
</programlisting></listitem>
<listitem>As we are using the SQLExtendedString extension from the Virtuoso ADO.Net provider you will also need to add <programlisting>using OpenLink.Data.Virtuoso;
</programlisting>at the top of the file.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 5 - Create a class to handle exploring the RDF data</bridgehead>
<orderedlist spacing="compact"><listitem>Add a new C# class to the project called ExtendedStringHandler, by right-clicking on RDFDemo in the <emphasis>Solution</emphasis> <emphasis>Explorer</emphasis> and <emphasis>Add</emphasis> a <emphasis>Class</emphasis>.
</listitem>
<listitem>Add the following using statements to the top of the file <programlisting>using OpenLink.Data.Virtuoso;
using System.Data;
using System.Windows.Forms;
using System.Drawing;
using System.Data.Mapping;
using System.Data.Common;
</programlisting></listitem>
<listitem>Paste the following block of code into the class definition.
<programlisting>StringBuilder DescribeCommand;
VirtuosoConnection ParentConnection;
List&lt;Label&gt; labelList = new List&lt;Label&gt;();
List&lt;TextBox&gt; textBoxList = new List&lt;TextBox&gt;();
DescribeDataSet describeDataSet = new DescribeDataSet();
Boolean isIRI = false;
 
       public ExtendedStringHandler(SqlExtendedString iri, VirtuosoConnection parentConnetion)
{   
    ParentConnection = parentConnetion;
    if (iri.IriType == SqlExtendedStringType.IRI)
    {   
        isIRI = true;
        DescribeCommand = new StringBuilder(&quot;sparql SELECT * FROM &lt;http://demo.openlinksw.com/Northwind&gt; WHERE {&lt;&quot; + iri.ToString() + &quot;&gt; ?p ?o}&quot;); 
                  // Replace demo.openlinksw.com in line above with your URIQA DefaultHost setting
    }
}

public string describeCommandText
{
    get
    {   
        return DescribeCommand.ToString();
    }
}

public void getDescribeData()
{
     VirtuosoCommand myCommand = new VirtuosoCommand(this.describeCommandText, this.ParentConnection);
    VirtuosoDataAdapter myAdapter = new VirtuosoDataAdapter();
    myAdapter.SelectCommand = myCommand;
    myAdapter.Fill(describeDataSet.DataTable1);
}

public void displayData()
{   
    if (isIRI)
    {   
        getDescribeData();
        Form describeForm = new Form();
        describeForm.AutoScroll = true;
        describeForm.Width = 840;

        Label label1 = new Label();
        label1.AutoSize = true;
        label1.Font = new Font(label1.Font.FontFamily, label1.Font.Size + 3.0F, label1.Font.Style | FontStyle.Bold, label1.Font.Unit);
        describeForm.Controls.Add(label1);

        DataTable table1 = describeDataSet.Tables[0];
        if (table1.Rows.Count == 0)
            label1.Text = &quot;No Details Available&quot;;
        else
        {
            foreach (DataRow row in table1.Rows)
                if (row[0].ToString() == &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;)
                {
                    StringBuilder title = new StringBuilder(row[1].ToString() + &quot; details&quot;);
                    label1.Text = title.ToString();
                    break;
                }

            foreach (DataRow row in table1.Rows)
            {
                Label propertyLabel = new Label();
                TextBox valueBox = new TextBox();
                valueBox.Width = 400;

                object property = row[0];
                object value = row[1];

                if (value is SqlExtendedString)
                {
                    valueBox.ForeColor = Color.Blue;
                    valueBox.Font = new Font(valueBox.Font.FontFamily, valueBox.Font.Size, valueBox.Font.Style | FontStyle.Underline, valueBox.Font.Unit);
                }
                propertyLabel.Text = row[0].ToString();
                propertyLabel.AutoEllipsis = true;
                propertyLabel.AutoSize = false;
                propertyLabel.Width = propertyLabel.PreferredWidth &gt; 380 ? 380 : propertyLabel.PreferredWidth;

                Binding bind = new Binding(&quot;Text&quot;, row[1], &quot;&quot;);
                valueBox.DataBindings.Add(bind);

                labelList.Add(propertyLabel);
                textBoxList.Add(valueBox);
            }

            for (int i = 0; i &lt; table1.Rows.Count; i++)
            {
                textBoxList[i].Click += new EventHandler(this.iri_Click);
                labelList[i].Location = new Point(10, i * 20 + 50);
                textBoxList[i].Location = new Point(400, i * 20 + 50);
                describeForm.Controls.Add(labelList[i]);
                describeForm.Controls.Add(textBoxList[i]);
            }

            describeForm.Height = labelList.Count * 20 + 100 &gt; 500 ? 500 : labelList.Count * 20 + 100;
        }
        describeForm.ShowDialog();
    }
    else
    {
        Form blankForm = new Form();
        Label label1 = new Label();
        label1.Text = &quot;Blank Node&quot;;
        label1.Font = new Font(label1.Font.FontFamily, label1.Font.Size + 3.0F, label1.Font.Style | FontStyle.Bold, label1.Font.Unit);
        blankForm.ShowDialog();
    }
}

public void iri_Click(object sender, EventArgs e)
{
    int boxNum = 0;
   
    for (int i = 0; i &lt; textBoxList.Count; i++)
    {
        if (sender == textBoxList[i])
        {
            boxNum = i;
            break;
        }
    }
    
   Object o = describeDataSet.DataTable1.Rows[boxNum][1];
    if (o is SqlExtendedString)
    {
        SqlExtendedString se = (SqlExtendedString)o;
        ExtendedStringHandler seHandler = new ExtendedStringHandler(se, ParentConnection);
        seHandler.displayData();
    }
    else if (o is SqlRdfBox)
    { 
       //doesn&#39;t do anything at the moment 
   }
}
</programlisting></listitem>
<listitem>The ExtendedStringHandler class creates a new SPARQL query based on the IRI that was clicked.
 This query is executed against Virtuoso using the ADO.Net connection in the same way that any SQL statement would be executed across an ADO.Net connection.
 This can be considered as Client Side SPARQL.
 The result set from the query describes the selected object and is returned as an ADO.Net DataAdapter.
 The DataAdapter  is used to fill a DataTable which is displayed on a new form.
 We now need to add the new DataSet to the project and define the DataTable that will hold the query results.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 6 - Add a new Data Set to hold the query results</bridgehead>
<orderedlist spacing="compact"><listitem>Right click RDFDemo in the <emphasis>Solution</emphasis> <emphasis>Explorer</emphasis> and add a new <emphasis>DataSet</emphasis>.
 Call the new <emphasis>DataSet</emphasis> DescribeDataSet.
<figure><graphic fileref="VirtSPASQLWinFormApp/NewDataSet.png" /></figure> </listitem>
<listitem>Double click on DescribeDataSet in the <emphasis>Solution Explorer</emphasis> to open the  <emphasis>DataSet Designer</emphasis> and  drag a <emphasis>DataTable</emphasis> from the <emphasis>Toolbox</emphasis> into it.
</listitem>
<listitem>Add two columns, p and o, to the <emphasis>DataTable</emphasis> and set the <emphasis>DataType</emphasis> of each column to System.Object.
<figure><graphic fileref="VirtSPASQLWinFormApp/NewDataTable.png" /></figure></listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Step 7 - Build and run the application</bridgehead>
<orderedlist spacing="compact"><listitem>You should see a form displaying all the Northwind customers, like this.
<figure><graphic fileref="VirtSPASQLWinFormApp/Form1.png" /></figure> </listitem>
<listitem>When any customer is clicked it opens a new form showing customer details.
<figure><graphic fileref="VirtSPASQLWinFormApp/CustomerDetails.png" /></figure> </listitem>
<listitem>Clicking on the links in the new form allows you to drill down further to get order, product, location details etc.
<figure><graphic fileref="VirtSPASQLWinFormApp/OrderDetails.png" /></figure> <figure><graphic fileref="VirtSPASQLWinFormApp/OrderLineDetails.png" /></figure></listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2"> Next Steps</bridgehead>
<para>You will notice if you keep clicking on the links that this application will only display data that is held in the Northwind graph.
 Clicking on an external link, for example the link to Berlin in dbpedia, http://dbpedia.org/resource/Berlin, results in a empty window and an error message.
 The next step is to <ulink url="VirtSPASQLRDFDemoExternalDereferencing">extend this application so that it can handle dereferencing external IRIs</ulink>.</para>
</section></docbook>