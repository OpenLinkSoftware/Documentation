<docbook><section><title>VirtCartConfigGooglePlus</title><title>Google+ Cartridge - Configuration Guidelines</title>Google+ Cartridge - Configuration Guidelines
<para>Virtuoso&#39;s Sponger cartridge for Google+ allows you to fetch a Google+ user&#39;s profile and the Activities they post.
 These notes, intended for a &#39;Sponger Administrator&#39;, provide brief configuration guidelines for the cartridge.</para>
<para>The cartridge is written to the <ulink url="https://developers.google.com/+/api/">Google+ API</ulink>.
 The cartridge can be configured to use either: </para>
<orderedlist spacing="compact"><listitem>VAL OAuth (the recommended option) to provide per-user access tokens or </listitem>
<listitem>Google API key (plus an optional OAuth key/secret for Google+ ID detection by the /sponger endpoint)</listitem>
</orderedlist><para>Option 2 pre-dates option 1.
 VAL OAuth is the preferred option.
 Whether configured using OAuth or an API key, only public data is available from the Google+ API.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Configuring the Cartridge for VAL OAuth</bridgehead>
<para>Support for OAuth is provided through the Virtuoso Authentication Layer (VAL).
 All cartridges using VAL as the basis for their OAuth support are configured in a similar manner.
 For an overview of how to configure a cartridge&#39;s VAL OAuth binding, see topic <ulink url="SpongerOAuthSupport">Sponger OAuth Support via VAL</ulink>.</para>
<para>You will need to register OAuth application keys for the Google+ OAuth service in Conductor&#39;s &#39;Login Authentication Keys&#39; panel, accessible through the &#39;Linked Data&#39; and &#39;OAuth Service Binding&#39; tabs.</para>
<figure><graphic fileref="VirtCartConfigGooglePlus/conductor_login_auth_keys_panel.png" /></figure><bridgehead class="http://www.w3.org/1999/xhtml:h3">Obtaining and Setting Google+ OAuth Keys</bridgehead>
<orderedlist spacing="compact"><listitem>Go to the <ulink url="https://console.developers.google.com">Google Developers Console</ulink>.
 Create a project if you don&#39;t already have one, then open it.
</listitem>
<listitem>Under the &#39;APIS &amp; AUTH&#39; section of the side menu, click on the &#39;APIs&#39; link and ensure the Google+ API is enabled with status set to &#39;ON&#39;.
</listitem>
<listitem>Click on the &#39;Credentials&#39; menu item, again under the &#39;APIS &amp; AUTH&#39; section of the side menu.
</listitem>
<listitem>In the &#39;OAuth&#39; area, click the &#39;Create new Client ID&#39; button.
 Set the application type to &#39;Web application&#39; and ensure the Authorized Redirect URI is of the form http://{virtuoso-host}/val/api/thirdparty_callback.
Note the generated client ID and client secret before signing out of the console.
<figure><graphic fileref="VirtCartConfigGooglePlus/google_dev_console_client_id_val.png" /></figure> </listitem>
<listitem>In Conductor&#39;s &#39;Login Authentication Keys&#39; panel, add Google+ as a service, then enter the client ID and client secret in the &#39;Key&#39; and &#39;Secret&#39; fields.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2">Configuring the Cartridge to Use an API key</bridgehead>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Obtaining and Setting the API Key</bridgehead>
<orderedlist spacing="compact"><listitem>Go to the <ulink url="https://console.developers.google.com">Google Developers Console</ulink>.
 Create a project if you don&#39;t already have one, then open it.
</listitem>
<listitem>Click on the &#39;Enable an API&#39; button then ensure the Google+ API is enabled..
</listitem>
<listitem>Click on the &#39;Credentials&#39; menu item under the &#39;APIS &amp; AUTH&#39; section of the side menu.
</listitem>
<listitem>Scroll down the page to the section &#39;Public API access&#39;.
</listitem>
<listitem>Click on &#39;Create new Key&#39;.
 In the &#39;Create a new key&#39; dialog, select &#39;Server key&#39;.
 List the IP addresses requests will be accepted from, or leave this field blank as appropriate, then click &#39;Create&#39; and note the generated API key.
<figure><graphic fileref="VirtCartConfigGooglePlus/google_dev_console_api_key.png" /></figure> </listitem>
<listitem>Now go to your local Conductor at <ulink url="http://your-virtuoso-host:port/conductor">http://your-virtuoso-host:port/conductor</ulink> </listitem>
<listitem>Go to Linked Data -&gt; Sponger -&gt; Extractor Cartridges: <figure><graphic fileref="VirtCartConfigGooglePlus/conductor_extractor_cartridges_panel.png" /></figure> </listitem>
<listitem>Find &quot;Google+&quot; and click on its link in order to edit its properties.
</listitem>
<listitem>As result the cartridge&#39;s configuration details should be shown (with the &#39;Cartridge Name&#39; DB.DBA.RDF_LOAD_GOOGLE_PLUS): <figure><graphic fileref="VirtCartConfigGooglePlus/googleplus_cartridge_config_panel.png" /></figure> </listitem>
<listitem>Enter the API key that was generated from above: <figure><graphic fileref="VirtCartConfigGooglePlus/googleplus_cartridge_config_panel_with_key.png" /></figure> </listitem>
<listitem>Click &#39;Update&quot; to save the &quot;Options&quot; settings.</listitem>
</orderedlist><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">View Your Google+ Profile as Linked Data</bridgehead>
<para>Default installations of a Virtuoso Sponger instance include a Sponger front page, located at http://{virtuoso-host}/sponger, which includes a number of buttons for generating sample Sponger links for particular, typically social site, cartridges.
<figure><graphic fileref="VirtCartConfigGooglePlus/sponger_frontpage_buttons.png" /></figure> You can sponge your Google+ profile, and transform it to Linked Data, by clicking on the Google+ button.</para>
<para>If the cartridge has been configured to use OAuth, you will be asked to authenticate via your Google+ login, after which the Sponger can determine your Google+ ID.
 If the cartridge has been configured to use an API key, you will be prompted to enter your Google+ ID (unless a global OAuth token has been set in the cartridge options solely to enable automatic Google+ ID retrieval for /sponger - see the section <ulink url="#AncUserIdDetectionWhenApiKey">Configuring Google+ User ID Detection when Using an API Key</ulink> for details).
 Once your Google+ ID is known, the Sponger creates sample Sponger links through which you can sponge your Google+ profile.</para>
<para>The cartridge is configured to trigger on the URI pattern https://plus.google.com/.* , i.e.
 the expected starting point for sponging a Google+ user&#39;s profile is a URL of the form https://plus.google.com/{<emphasis>user-id</emphasis>}.
 The generated sample links proxy this base URL.
 For example:</para>
<orderedlist spacing="compact"><listitem>Sponging <ulink url="http://uriburner.com/about/html/https://plus.google.com/112399767740508618350">http://uriburner.com/about/html/https://plus.google.com/112399767740508618350</ulink> using the Sponger proxy /about/html/ yields: <figure><graphic fileref="VirtCartConfigGooglePlus/gplus12.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus13.png" /></figure> </listitem>
<listitem>Clicking on the primary topic value link &quot;Kingsley Idehen&quot; displays: <figure><graphic fileref="VirtCartConfigGooglePlus/gplus14.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus15.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus16.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus17.png" /></figure></listitem>
</orderedlist><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Alternative Follow-Your-Nose friendly view of a Google Data Object that represents a Person</bridgehead>
<para>We can take a look at the /fct variant of the primaryTopic object page:</para>
<orderedlist spacing="compact"><listitem>Click the <emphasis>Facets</emphasis> link from the footer section &quot;Alternative Linked Data Views&quot; of the page from above: <figure><graphic fileref="VirtCartConfigGooglePlus/gplus18.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus19.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus20.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus21.png" /></figure> </listitem>
<listitem>Click &quot;Next&quot; to view the rest of the Attributes and their Values: <figure><graphic fileref="VirtCartConfigGooglePlus/gplus22.png" /></figure> <figure><graphic fileref="VirtCartConfigGooglePlus/gplus23.png" /></figure></listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2">Paging Options</bridgehead>
<para>Because some Google+ user profiles can include hundreds of Activities and associated Comments, the following cartridge options are available to set configurable limits on the number of items returned.</para>
items_per_activity_page: <itemizedlist mark="bullet" spacing="compact"><listitem>Sets the maximum number of activities returned per page of activities, where 1 &lt;= items_per_activity_page &lt;= 100.
 (Default: 50)</listitem>
</itemizedlist>max_activity_pages: <itemizedlist mark="bullet" spacing="compact"><listitem>Limits the number of pages of activities returned.
 (Default: 1) </listitem>
<listitem>A value of 0 indicates no limit; all the user&#39;s activities will be returned.
</listitem>
<listitem>A value of -1 turns off fetching of activities.</listitem>
</itemizedlist>items_per_comment_page: <itemizedlist mark="bullet" spacing="compact"><listitem>Sets the maximum number of comments returned per page of comments, where 1 &lt;= items_per_comment_page &lt;= 100.
 (Default: 50)</listitem>
</itemizedlist>max_comment_pages: <itemizedlist mark="bullet" spacing="compact"><listitem>Limits the number of pages of comments returned for a particular activity.
 (Default: 1) </listitem>
<listitem>A value of 0 indicates no limit; all available activity comments will be returned.
</listitem>
<listitem>A value of -1 turns off fetching of activity comments.</listitem>
</itemizedlist><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Configuring Google+ User ID Detection when Using an API Key</bridgehead>
<para>When the Google+ cartridge is configured to use an API key, setting a client ID and secret (for Google+ user ID detection by the /sponger endpoint) is optional.
 If not set, the /sponger Google+ button requires a user to enter their Google+ ID in order to generate the sample Sponger links.
<figure><graphic fileref="VirtCartConfigGooglePlus/googleplus_id_entry.png" /></figure> When configured, the user&#39;s Google+ ID can be determined automatically.
 The user must simply log into Google (if not already) and grant the Sponger access to their profile.</para>
<para>Note: When the cartridge is using VAL, entering a client-id and secret in the cartridge options as described below is <emphasis>not</emphasis> required.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Configuring Sponger / Google OAuth Handshaking</bridgehead>
<para>To obtain a client-id and secret, return to the &#39;Credentials&#39; section of the Google Developers Console where you obtained an API key as detailed above.
 In the &#39;OAuth&#39; area, click the &#39;Create new Client ID&#39; button.
 Set the application type to &#39;Web application&#39; and ensure the Authorized Redirect URI is of the form http://{virtuoso-host}/google_oauth.
Note the generated Client ID and Client Secret before signing out of the console.
<figure><graphic fileref="VirtCartConfigGooglePlus/google_dev_console_client_id_non_val.png" /></figure></para>
<para>Next, the Client ID and Client Secret must be saved as option values in the Google+ cartridge configuration.
 Select the Google+ cartridge from the Extractor Cartridges tab under the Linked Data / Sponger tab in the Conductor UI.
 In the Options text area, enter options client_id=xxx client_secret=yyy, substituting the Client ID and Client Secret values just noted.
 Click the &#39;Update&#39; button to save the new options.
<figure><graphic fileref="VirtCartConfigGooglePlus/google_oauth_options.png" /></figure></para>
<para>Now, when a user clicks on the Google+ button on the Sponger front page, they should be prompted to log into Google and asked to grant access to the Sponger.
 If granted, the Sponger accesses their profile, determines their Google+ ID and generates sample Sponger links for the Google+ cartridge.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Google Access Token Retention and Use</bridgehead>
<para>In most cases, OAuth-enabled Sponger cartridges retain access tokens for future use to allow an incremental sponge or complete re-sponge of the user&#39;s data (i.e.
 those portions of their data the user has granted access to).
 Google access tokens are always expiring tokens (even if offline access is specified when requesting a token) and must be refreshed through refresh tokens.
 They typically expire after 1 hour.
 Access tokens obtained through VAL are automatically refreshed as needed.
 Those obtained through a client id and client secret configured in the cartridge options are used only for the initial profile retrieval to build the sample Sponger URIs and are not saved for future use by the cartridge.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Related</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="VirtSponger">Virtuoso Sponger</ulink> </listitem>
<listitem><ulink url="VirtConfigureCartridges">Configure Sponger Cartridges Guide</ulink> </listitem>
<listitem><ulink url="http://ode.openlinksw.com/">The OpenLink Data Explorer Extension</ulink> </listitem>
<listitem><ulink url="http://ode.openlinksw.com/GooglePersonProfile.html">Google to Linked Data Transformation Examples</ulink> </listitem>
<listitem><ulink url="http://delicious.com/kidehen/goodrelations">Meshups (links and lookups across Web 2.0 Services and LOD Cloud</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeSupportedDataSources">OpenLink-supplied Virtuoso Sponger Cartridges</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesVendorNonRDF">Complete list of supported Vendor-specific Non-RDF Data Formats</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesNonRDF">Complete list of supported Standard Non-RDF Data Formats</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesMeta">Complete list of supported Meta Cartridges</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesMetaREST">Meta Cartridge Usage via REST Request</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesMetaRESTExamples">Parametrized Examples of Meta Cartridge Usage via REST Request</ulink> </listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist></ulink></ulink></section></docbook>