<docbook><section><title>GitQuickstartTips</title><title> Git Quickstart</title> Git Quickstart
<para>In order to get started with developing follow the simple steps below.
 To learn more about the git policies used for VOS read <ulink url="VOSGitUsage">Git and VOS</ulink>.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Cloning the repository</bridgehead>
<para>Git is a decentralized VCS.
 As such one maintains a complete local copy of the repository - a clone.</para>
<programlisting>&gt; git clone git://github.com/openlink/virtuoso-opensource.git
</programlisting><para> This will clone the repository into sub-folder <computeroutput>virtuoso-opensource</computeroutput>.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Working With Branches</bridgehead>
<para>Git&#39;s main concept is the branch which is essentially just a label for a commit.
The default branch is called master and (following the VOS git policies, other projects may use different policies) always points to the latest stable release.</para>
<para>List the remote and local branches with </para>
<programlisting>&gt; git branch -a
</programlisting><para> In order to start developing we need to checkout another branch.
 Here we use the main development branch of Virtuoso 6, &quot;devel/6&quot;.
 Since this is the first time we check the branch out locally we need to tell git that we want to track the remote branch.</para>
<programlisting>&gt; git checkout -t remotes/origin/devel/6
</programlisting><para>This creates a new local branch &quot;devel/6&quot; which tracks remote branch &quot;remotes/origin/devel/6&quot;.</para>
<para>From here we create a new branch in which we will do our actual development.
Depending on the type of development this branch is prefixed with feature or  bugfix:</para>
<programlisting>&gt; git checkout -b feature/myFancyFeature
</programlisting><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Committing Changes</bridgehead>
<para>Now we do our development and regularly commit to the local branch.
 We try to create nice self-contained commits with good commit messages.
 There are several ways of commiting code.
 The easiest is to specify the files and folders to commit directly.
 However, caution should be taken with commiting whole folders - every file in the folder will be part of the commit, independent of its state.</para>
<programlisting>&gt; git commit &lt;fileA&gt; &lt;fileB&gt; &lt;dirA&gt;
</programlisting><para> Alternatively we can first mark files to include in the commit and files to be removed:</para>
<programlisting>&gt; git add &lt;fileA&gt; &lt;fileB&gt; &lt;dirA&gt;
&gt; git remove &lt;fileC&gt;
</programlisting><para> Verify that all is in order: </para>
<programlisting>&gt; git status
# On branch feature/myFancyFeature
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   fileA
#                   fileB
#                   dirA/fileX
#
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   fileZ
</programlisting><para> And finally commit the files: </para>
<programlisting>&gt; git commit
</programlisting><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Viewing What You&#39;ve Changed</bridgehead>
<para>To see the difference between your tracked but unstaged changes and the current branch (including your not-yet-pushed commits) </para>
<programlisting>&gt; git diff
&gt; git diff &lt;filename&gt;
</programlisting><para> To see the difference between your staged changes and the current branch (including your not-yet-pushed commits): </para>
<programlisting>&gt; git diff --staged
&gt; git diff --staged &lt;filename&gt;
</programlisting><para> To see a list of commits to a branch: </para>
<programlisting>&gt; git log
</programlisting><para> To see the details and diff for a commit </para>
<programlisting>&gt; git show &lt;commit&gt;
</programlisting><bridgehead class="http://www.w3.org/1999/xhtml:h2"> Stashing Changes</bridgehead>
<para>If you have changes you don&#39;t wish to commit but don&#39;t want to lose either while you do something else, you can temporarily &#39;stash&#39; the changes away.
 This could be some frequently used debug code,or just some work in progress you need to move to another branch without committing.
 If the code is just WIP for the current branch we recommend using an interim commit instead.</para>
<para>The stash is a temporary store that holds a stack of uncommitted changes at a repository level.
 Commands given below work by default with the stash at the top of the stack, or you can optionally provide the stack reference.</para>
<para>To store your current changes at the top of the stash stack: </para>
<programlisting>&gt; git stash &lt;optional comment&gt;
</programlisting><para> To see all your stashed items in the stash stack: </para>
<programlisting>&gt; git stash list
</programlisting><para> This will show something like: </para>
<programlisting>stash@{0}: WIP on master: 6ebd0e2... My debug code
stash@{1}: WIP on master: 9cc0589... My stashed changes
</programlisting><para> To see the details of an individual stash (use bash-completion for ease of use): </para>
<programlisting>&gt; git stash show &lt;optional stash ref&gt;
</programlisting><para> To see the changes in a stash: </para>
<programlisting>&gt; git stash show -p &lt;optional stash ref&gt;
</programlisting><para> To restore a stash while keeping a copy in the stack: </para>
<programlisting>&gt; git stash apply &lt;optional stash ref&gt;
</programlisting><para> To restore a stash and remove it from the stack: </para>
<programlisting>&gt; git stash pop &lt;optional stash ref&gt;
</programlisting><para> To remove a single stash from the stack without applying it: </para>
<programlisting>&gt; git stash drop &lt;optional stash ref&gt;
</programlisting><para> To clear out your entire stash stack: </para>
<programlisting>&gt; git stash clear
</programlisting><bridgehead class="http://www.w3.org/1999/xhtml:h2"> A convenient git setup - tips &amp; tricks</bridgehead>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Setup git command shortcuts</bridgehead>
<para>Git supports a lot of commands like checkout or status.
 It also allows to define shortcuts which makes working on the command line faster.
 And isn&#39;t that what we all want?</para>
<para>To set them up simply edit the git config file (typically ~/.gitconfig but it could also be defined globally) and add an alias section like so:</para>
<programlisting>[alias]
    st = status
    ci = commit
    br = branch
    co = checkout
    df = diff
    lg = log -p
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ls = ls-files
    ch = cherry-pick
</programlisting><para> Now you can use the shortcuts like any other git command.
 Example: git st as a shortcut for git status.</para>
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Git commit template</bridgehead>
<para>It is customary to use a specific format for commit messages.
 Git allows to specify a template which reminds the committer of these policies.
 A typical template could look as follows:</para>
<programlisting>#  Please enter the commit message for your changes. Lines starting
#  with &#39;#&#39; will be ignored, and an empty message aborts the commit.
#
#  You MUST wrap all lines at 72 characters.
#
# ==[ Subject: One line only short meaningful description for logs ]===|

# ==[ Blank: Follow the Subject with a blank line, do NOT remove ]=====|

# ==[ Details: Describe what changed and explain why it changed]=======|
</programlisting><para> The template could also contain hints to special fields which are supported like keywords to close bug reports or to CC the commit to a certain email address and so on (the KDE project uses a variety of git commit hooks like these).</para>
<para>To use the template add a new section commit into the git config file (typically ~/.gitconfig but it could also be defined globally):</para>
<programlisting>[commit]
        template = /home/user/dev/git.commit-template
</programlisting><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Bash shell magic</bridgehead>
<para>For those of us who like to work on the shell there is a little command prompt treat available.
 In addition to all the fancy coloring and whatever you want to do with your command prompt you can include information about the git repository in the current folder.</para>
<para>For that you need the git bash completion to be installed (this depends on your system setup and if left as an <ulink url="http://git.kernel.org/?p=git/git.git;a=blob_plain;f=contrib/completion/git-completion.bash;hb=HEAD">exercise</ulink> for the interested reader).
 Then the &quot;__git_ps1&quot; function will be available for you to play with.</para>
<para>Example prompt: </para>
<programlisting>PS1=&quot;\[\033[01;31m\]\u\[\033[00m\]:\[\033[01;34m\]\w \[\033[0;33m\]$(__git_ps1 &quot;(%s)&quot;)\[\033[00m\] \$ \[\033[00m\]&quot;
</programlisting><para> The result can be seen here (without colors): </para>
<programlisting>trueg:~/kde/dev/kde/src/nepomuk-core (libnepomukcore/query/optimization/subQueries) $
</programlisting><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Fix Screw-ups</bridgehead>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Split a commit</bridgehead>
 Imagine you committed a set of changes and realize that you actually wanted to split that into several commits.
 That is no problem at all if nothing has been pushed to a public repo yet.
 We simple need to do a mixed reset and then do the separate commits:<programlisting>&gt; git reset HEAD^
</programlisting><para> This will reset the index to the previous commit and keep the current working dir unchanged.
 Now you can continue with creating your commits the way you originally intended (&quot;git add -p&quot; is your friend).</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Keep In Mind</bridgehead>
 <itemizedlist mark="bullet" spacing="compact"><listitem>Never pull after a merge! It will mess with your history.
</listitem>
<listitem>Never branch from master.
 Branch from a devel or stable branch instead.</listitem>
</itemizedlist><para> </para>
</section></docbook>