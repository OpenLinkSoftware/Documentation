<docbook><section><title>VirtSparqlCxml</title><title>Pivot Collections</title>Pivot Collections
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Contents</bridgehead>
<para>Part 1: Introduction </para>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncIntroduction">Introduction</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncCreatingCollections">Creating Collections</ulink> </listitem>
<listitem><ulink url="#AncVirtuosoSupport">Virtuoso Support for Pivot Collections</ulink> </listitem>
<listitem><ulink url="#AncPivotViewer"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikiPivotViewer</span></ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncPivotViewerCombo">Combining A Human UI with Machine Readable Data</ulink> </listitem>
<listitem><ulink url="#AncPivotViewerHypermedia">A Viewer for Hypermedia-based Structured Data</ulink> </listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem><ulink url="#AncConfiguringVirtuoso">Configuring Virtuoso&#39;s CXML Support</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncVerifyingYourInstallation">Verifying your installation</ulink> </listitem>
<listitem><ulink url="#AncImageMagick"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikiImageMagick</span></ulink> </listitem>
<listitem><ulink url="#AncCxmlGenerationFromSparql">CXML Generation from /sparql</ulink></listitem>
</itemizedlist></listitem>
</itemizedlist><para>Part 2: SparqlCxml </para>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncSparqlCxml"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikiSparqlCxml</span></ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncKeyParts"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikiPivotViewer &amp; Collection XML</span> - Key Parts</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncPivotViewerUI"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikiPivotViewer</span> UI</ulink> </listitem>
<listitem><ulink url="#AncCollectionXml">Collection XML</ulink> </listitem>
</itemizedlist></listitem>
<listitem><ulink url="#AncSparqlEndpointCxmlExtensions">SPARQL Endpoint CXML Extensions</ulink> </listitem>
<listitem><ulink url="#AncRdfToCxmlMappingBasicApproach">RDF to CXML Mapping - The Basic Approach</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncRdfToCxmlMappingSelect">SELECT</ulink> </listitem>
<listitem><ulink url="#AncRdfToCxmlMappingDescribe">DESCRIBE and CONSTRUCT</ulink> </listitem>
</itemizedlist></listitem>
<listitem><ulink url="#AncDefaultSettings">Default Settings</ulink> </listitem>
<listitem><ulink url="#AncFacetTypeAutoDetection">Auto-Detection of Facet Type</ulink> </listitem>
<listitem><ulink url="#AncReservedQueryVariables"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikiSparqlCxml</span> Reserved Query Variables</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncReservedQueryVariablesExamples">Examples</ulink> </listitem>
<listitem><ulink url="#AncQueryVariableOrder">Query Variable Order</ulink> </listitem>
<listitem><ulink url="#AncReservedGeoQueryVariables">Reserved Query Variables for Geodata</ulink> </listitem>
</itemizedlist></listitem>
<listitem><ulink url="#AncGraphVirtCxml">Graph virtcxml</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncVirtcxmlFacetType"><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:nowikivirtcxml:FacetType</span></ulink> </listitem>
<listitem><ulink url="#AncVirtcxmlSetItemImage">Setting an Item&#39;s Image</ulink> </listitem>
<listitem><ulink url="#AncVirtcxmlSetItemName">Setting an Item&#39;s Name</ulink> </listitem>
<listitem><ulink url="#AncVirtcxmlSetItemDescription">Setting an Item&#39;s Description</ulink> </listitem>
<listitem><ulink url="#AncVirtcxmlSetFacetName">Setting a Facet&#39;s Name</ulink> </listitem>
<listitem><ulink url="#AncVirtcxmlSetFacetDatatype">Setting a Facet&#39;s Datatype</ulink> </listitem>
<listitem><ulink url="#AncVirtcxmlSetQrcodeFacet">Setting the Facet Used to Generate a QR code</ulink> </listitem>
<listitem><ulink url="#AncExcludingFacetFilterPanel">Excluding a Facet from the Filter Panel</ulink> </listitem>
</itemizedlist></listitem>
<listitem><ulink url="#AncUsingLabels">Using Labels in Place of URIs</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncExploitingInferencing">Exploiting Inferencing</ulink> </listitem>
<listitem><ulink url="#AncAutoLabels">Automatic Labels</ulink> </listitem>
<listitem><ulink url="#AncLabelLocalization">Label Localization</ulink> </listitem>
</itemizedlist></listitem>
<listitem><ulink url="#AncLinkType">Link Typing</ulink> <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="#AncLinkTypeUIOpts">Link Typing Options</ulink> </listitem>
<listitem><ulink url="#AncLinkTypeQryStringParam">Controlling Link Typing through /sparql Query String Parameters</ulink> </listitem>
<listitem><ulink url="#AncLinkTypeVirtuosoPL">Controlling Link Typing through Virtuoso/PL</ulink></listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist><para>Part 3: <ulink url="VirtSparqlCxmlDzcs">SparqlCxml Deep Zoom Collections</ulink></para>
<para>Part 4: <ulink url="VirtSparqlCxmlPivotViewer">PivotViewer</ulink></para>
<para>Part 5: <ulink url="VirtSparqlCxmlImport">Importing CXML</ulink></para>
<para>Part 6: <ulink url="VirtSparqlCxmlFacetPivotBridge">Facet Pivot Bridge</ulink></para>
<para>Part 7: <ulink url="VirtSparqlCxmlDETs">DETs : Persisting SPARQL Query Results to DAV</ulink></para>
<para>Part 8: <ulink url="VirtSparqlCxmlFAQs">Frequently Asked Questions (FAQs)</ulink></para>
<para>Part 9: <ulink url="VirtSparqlCxmlGlossary">Glossary</ulink></para>
<para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Introduction</bridgehead>
<para>Microsoft&#39;s <ulink url="http://www.silverlight.net/learn/pivotviewer/">PivotViewer</ulink> is a Silverlight control which makes it easy to view, sort and filter huge datasets on the web.
 PivotViewer lets you view thousands of items at once and visualize them in ways that expose relationships, groupings or trends in the data.
 PivotViewer&#39;s powerful sorting and filtering make it simple to drill down into a large dataset to an item of interest with specific features.
 This functionality makes it a powerful tool in application domains such as business intelligence or deep comparison shopping.</para>
<para>Central to PivotViewer is the notion of a Collection.
 Collections combine large groups of similar items on the internet, allowing the web to be viewed as a web of data rather than a series of isolated pages.
 Collections are composed of two parts:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>XML - The items in the collection are described in XML, in a &quot;.cxml&quot; file.
</listitem>
<listitem>Images - The images in the collection are described in Deep Zoom format.</listitem>
</itemizedlist><para>Conceptually, a collection is just like any other web content.
 There?s a set of files on a server, and a local client that knows how to display them.
 In the current web, the files are traditionally HTML and images.
 In the collection case, the files are CXML and Deep Zoom-formatted (DZC) images.
 When the user views the collection from a web browser, a web page hosting the PivotViewer Silverlight Control is used to display the files.</para>
<figure><graphic fileref="VirtSparqlCxml/pivot_architecture.png" /></figure><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Creating Collections</bridgehead>
 Creating a collection has four distinct steps:<orderedlist spacing="compact"><listitem>Pick your data - First, pick a set of data to turn into a collection.
</listitem>
<listitem>Create XML and images - Describe the data in Collection XML (CXML) and transform the images to the Deep Zoom format.
</listitem>
<listitem>Host the collection - To share your collection with others, host it on a web server.
</listitem>
<listitem>View it - View the collection in a browser by downloading a web page which hosts the PivotViewer Silverlight control.</listitem>
</orderedlist><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Virtuoso Support for Pivot Collections</bridgehead>
<para>Virtuoso Universal Application Server is an ideal platform for creating and hosting Pivot collections, combining amongst other things a powerful hybrid RDF/SQL/XML data store and HTTP server, which together support each of the collection creation steps outlined above.
 Virtuoso provides the ability to generate and view dynamic collections created directly from RDF data, with automatic Deep Zoom image generation, using custom or default images, and the option of including <ulink url="http://en.wikipedia.org/wiki/QR_Code">QR codes</ulink> (matrix bar codes).
 The source RDF data may be hosted directly in Virtuoso, or extracted from external RDF and non-RDF data sources using the Virtuoso Sponger, or from SQL data using Linked Data Views or SPASQL.</para>
<para>Though designed from the outset as a viewer for web data, the reach and utility of PivotViewer are enhanced greatly by driving it using RDF as the &quot;data substrate&quot;, the same standards-based data format used by the Data Web and the basis of numerous massive open datasets hosted in the Linked Open Data cloud.</para>
<para>To provide this RDF underpinning, the main components of Virtuoso&#39;s CXML offering comprise: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>SparqlCxml - An extension of Virtuoso&#39;s standard /sparql endpoint functionality to allow serialization of SPARQL query result sets as CXML </listitem>
<listitem>PivotViewer - A cross-browser Pivot collection viewer, hosting the Silverlight PivotViewer control, for viewing Virtuoso-hosted or external 3rd party Pivot collections.
</listitem>
<listitem><ulink url="VirtSparqlCxmlFacetPivotBridge">Facet Pivot Bridge</ulink> - A bridge to PivotViewer from Virtuoso&#39;s Faceted query service for RDF, offering the facility to save Faceted search result sets as Pivot collections.</listitem>
</itemizedlist><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">PivotViewer</bridgehead>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Combining A Human UI with Machine Readable Data</bridgehead>
<para>Part of what makes PivotViewer compelling as a viewer for the Data Web is its use of images in place of raw URIs.
 The RDF browsers available to date typically present little more than lists of entity URIs.
 In contrast, PivotViewer uses an image, rather than an entity URI, as the primary UI representation of the entity, making for a much more intuitive user experience.
 While the image tiles provide visual cues for human interaction, the underlying machine readable RDF data remains accessible via hyperlinks.</para>
<para>To further support this interaction paradigm, Virtuoso&#39;s CXML support includes other refinements not evident in typical Pivot collections.
 These include: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>the ability to generate collections comprising a mix of several entity types, in contrast to Pivot collections from other sources which support only one entity type </listitem>
<listitem>the use of icons to supply default images for entities which do not have their own (custom) image </listitem>
<listitem>an extensible icon ontology to associate different icons with different entity classes</listitem>
</itemizedlist><para>The screenshot below shows a Virtuoso generated collection displayed by the Virtuoso PivotViewer, a small VSP-based (Virtuoso Server Pages) application hosting the Silverlight PivotViewer control.
 The screenshot illustrates the use of a silhouette icon for members of the Frankfurt Semantic Web Meetup group who do not have a foaf:image.</para>
<figure><graphic fileref="VirtSparqlCxml/frankfurt_semweb_meetup.jpg" /></figure><para>The source data for the above collection was supplied by a SPARQL DESCRIBE query: </para>
<programlisting>describe ?s from &lt;http://www.meetup.com/Frankfurt-Semantic-Web-Meetup/members/&gt; where {?s a foaf:Person} limit 2000
</programlisting><para>submitted to the SPARQL endpoint at <ulink url="http://linkeddata.uriburner.com/sparql">http://linkeddata.uriburner.com/sparql</ulink> via the PivotViewer at <ulink url="http://linkeddata.uriburner.com/PivotViewer/.">http://linkeddata.uriburner.com/PivotViewer/.</ulink> The full request URI being: </para>
<programlisting>http://linkeddata.uriburner.com/PivotViewer/?url=http%3A%2F%2Flinkeddata.uriburner.com%2Fsparql%3Fdefault-graph-uri%3D%26query%3Ddescribe%2520%253Fs%2520from%2520%253Chttp%253A%252F%252Fwww.meetup.com%252FFrankfurt-Semantic-Web-Meetup%252Fmembers%252F%253E%2520where%2520%257B%253Fs%2520a%2520foaf%253APerson%257D%2520limit%25202000%250D%250A%26timeout%3D%26should-sponge%3D%26format%3Dtext%252Fcxml%26CXML_redir_for_subj%3D%26CXML_redir_for_hrefs%3D
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">A Viewer for Hypermedia-based Structured Data</bridgehead>
<para>While at first glance PivotViewer might be seen as a viewer for RDF data, the utility of PivotViewer and Virtuoso&#39;s SparqlCxml subsystem extends beyond RDF.
 While intended to be a general method of representing information, RDF is nonetheless a form of EAV (Entity-Attribute-Value) model where data is overtly defined and constrained by a conceptual schema that&#39;s based on first-order logic.
 Thus, PivotViewer should be seen in the broader context as a viewer for EAV model data at intranet or interweb scales.
 The EAV model coupled with the use of dereferenceable identifiers in the entity, attribute or value slots enables the use of hypermedia resources for structured data representation and interchange, more commonly known as Linked Data.
 It&#39;s extremely important to note that Linked Data is not (in any way) inextricably bound to RDF.</para>
<para>In this broader (format agnostic) definition of Linked Data, data definition and description is expressed using EAV tuples where each of the following are uniquely discernible: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>entities (aka subjects) </listitem>
<listitem>entity attributes (aka subject attributes) and </listitem>
<listitem>attribute values (aka subject attribute values)</listitem>
</itemizedlist><para>Each tuple is a proposition (due to its first-order logic grounding) as well as a database record.
 Each entity (object) has a dereferenceable ID, a hypermedia link, that resolves to the address of its representation.
 This representation is negotiable, courtesy of HTTP content-negotiation.</para>
<para>It is important to recognize that RDF defines a data model <emphasis>and</emphasis> Subject-Predicate-Object (or Entity-Attribute-Value) 3-tuples (triples) statements (proposition oriented records) that can be expressed in a wide variety of syntaxes that includes: RDF/XML, Turtle, N3, N-Triples, HTML+RDFa etc.
 At the model level its only tangible distinction from EAV is its overtness with regards to first-order logic foundation.
 At the data expression level SPO or EAV triples are indistinguishable bar RDF&#39;s emphasis on URI/IRI style identifiers in the Subject, Predicate, and Object (optionally) slots.</para>
<para>In the context of PivotViewer as a Linked Data explorer, the CXML data format provides a generalized means of describing Linked Data/EAV data for display, while SPARQL provides a query language for specifying the Linked Data to be contained in the dynamic collection being generated.
 The Linked Data itself can comes from many sources.
 Virtuoso can ingest data from a plethora of data sources associated with a wide variety of formats that includes RDF, XML (including Web Services), SQL, various binary formats (iCalendar, vCard etc).</para>
Pivotviewer, together with SparqlCxml, provides: <itemizedlist mark="bullet" spacing="compact"><listitem>the ability to interact with Linked Data without the distraction of raw URIs.
 URIs are normally replaced by or hidden behind (via a link) the label of the entity they identify </listitem>
<listitem>a powerful tool for drilling down into collections, whether static or dynamically generated from SPARQL queries, and for sharing dynamic collections through query URLs </listitem>
<listitem>a front-end to utilize Virtuoso&#39;s free text search and, through the Pivot Facet Bridge, faceted query capabilities </listitem>
<listitem>a Linked Data viewer with the focus on &#39;whole data&#39; representation.
 Data is displayed at the conceptual level, rather than the logical level as typified by most database exploration tools.
 Whereas at the logical level, data is often split across tables as an artifact of normalization, the conceptual level provides a &#39;whole data&#39; view in which the entities and the concepts they represent are no longer fragmented.
 The concepts remain the focal point of a user&#39;s interaction with the data.</listitem>
</itemizedlist><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Configuring Virtuoso&#39;s CXML Support</bridgehead>
<para>Support for CXML is available in the Virtuoso Commercial Edition Release 6.02.3129 or above.
 It is not included in Virtuoso Open-Source Edition.
 To enable the CXML functionality, the necessary VADs (Virtuoso Application Distribution) must be installed.
 These are:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>sparql_cxml - Supports CXML and Deep Zoom Collection (DZC) generation from a /sparql endpoint </listitem>
<listitem>PivotViewer - A VSP-based collection viewer for viewing Virtuoso generated and 3rd party collections <itemizedlist mark="bullet" spacing="compact"><listitem>Requires: <itemizedlist mark="bullet" spacing="compact"><listitem>c_uri - A URI shortener for creating compressed URIs</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist><para>and optionally: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>fct_pivot_bridge - An extension to the Facets web service for generating collections from snapshots of faceted query result sets <itemizedlist mark="bullet" spacing="compact"><listitem>Requires: <itemizedlist mark="bullet" spacing="compact"><listitem>cartridges - Provides base RDF functionality and the Sponger framework for converting non-RDF data to RDF </listitem>
<listitem>fct - Virtuoso Facets web service.
 A general purpose RDF query facility for facet based browsing </listitem>
<listitem>sparql_cxml, PivotViewer</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist><para>Any VAD listed under &#39;Requires&#39; must be installed before the VAD under which it appears.</para>
<para>In addition, to support Deep Zoom image and QRcode generation, the Virtuoso <ulink url="http://www.imagemagick.org/">ImageMagick</ulink> and <ulink url="http://en.wikipedia.org/wiki/QR_Code">QRcode</ulink> plugins must be installed.
 A Virtuoso distribution includes both the ImageMagick plugin (im.so or im.dll) and QRcode plugin (qrcode.so or qrcode.dll) as standard.
 The plugins should be enabled in the Plugins section of your virtuoso.ini file, e.g.: </para>
<programlisting>[Plugins]
LoadPath=../hosting
Load1=Hosting,hosting_perl.so
...
Load6=plain, im
Load7=plain, qrcode
</programlisting><para> The supporting ImageMagick or QRcode libraries used by these plugins are statically linked, so there is no need to install them separately.</para>
<para>Finally, ensure that the DefaultHost parameter under the URIQA section of your virtuoso.ini file is set appropriately for the host.
 If you anticipate viewing collections served by a host other than the one hosting PivotViewer, cross-domain access must be enabled as detailed in <ulink url="VirtSparqlCxmlPivotViewer">Part 4: PivotViewer</ulink>, section &quot;Cross-domain Collection Browsing&quot;.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Verifying your installation</bridgehead>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">ImageMagick</bridgehead>
<para>To confirm that the ImageMagick plugin is working, execute the following query through Conductor&#39;s ISQL interface and check that the return value is 3.
</para>
<programlisting>select &quot;IM XYtoMorton&quot;(1,1)
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">CXML Generation from /sparql</bridgehead>
<para>The sparql_cxml VAD creates a small amount of test data for verifying the installation.
 In Conductor&#39;s /sparql interface (e.g.
 http://localhost:8890/sparql), enter the query below and select &#39;CXML&#39; from the &#39;Format Results As&#39; dropdown before running it.
<ulink url="">
 </ulink></para>
<programlisting>prefix ski: &lt;http://www.openlinksw.com/ski_resorts/schema#&gt;
prefix camp: &lt;http://www.openlinksw.com/campsites/schema#&gt;

describe ?s where {{ ?s a ski:SkiResort . } union { ?s a camp:Campsite . }}
</programlisting><para> Your browser should display the generated CXML file.
 Copy the URL from your browser&#39;s address bar, open a browser window to /PivotViewer (e.g.
 <ulink url="http://localhost:8890/PivotViewer/)">http://localhost:8890/PivotViewer/)</ulink> and paste the SPARQL query URL into the &#39;Pivot collection URL&#39; textbox.
 After clicking &#39;Submit&#39;, you should see a collection view similar to that below:</para>
<figure><graphic fileref="VirtSparqlCxml/pivot_viewer_tourism.jpg" /></figure> <ulink url="VirtSparqlCxml/pivot_viewer_tourism.jpg">Click to enlarge</ulink><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">SparqlCxml</bridgehead>
<para>A Virtuoso /sparql endpoint can render a SPARQL query result in numerous serialization formats, one of which is CXML.
 The query driving the CXML generation may be a SELECT, DESCRIBE or a CONSTRUCT.
 The CXML generation process essentially consists of mapping the entities, attributes and values contained in the SPARQL result set to CXML Items, Facets and Facet values.
 SparqlCxml allows a high degree of control over the SPARQL to CXML mapping through the use of reserved query variables and a configuration graph virtcxml.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">PivotViewer &amp; Collection XML - Key Parts</bridgehead>
<para>Before describing the Virtuoso RDF to Pivot interface, it&#39;s worthwhile to identify the main components of the PivotViewer UI and Collection XML to establish the terminology for the remainder of the text.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">PivotViewer UI</bridgehead>
<para>The main parts of the PivotViewer UI are identified below:</para>
<figure><graphic fileref="VirtSparqlCxml/pivot_view_components.png" /></figure><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Collection XML</bridgehead>
<para>The following sample XML specifies a simple collection with only one item.</para>
<programlisting>    &lt;?xmlversion=&quot;1.0&quot;?&gt;
    &lt;CollectionName=&quot;Hello World Collection&quot;SchemaVersion=&quot;1.0&quot; 
        xmlns=&quot;http://schemas.microsoft.com/collection/metadata/2009&quot; 
        xmlns:p=&quot;http://schemas.microsoft.com/livelabs/pivot/collection/2009&quot; 
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
        &lt;FacetCategories&gt;
            &lt;FacetCategory Name=&quot;Hello World Facet Category One&quot; Type=&quot;String&quot;/&gt;
        &lt;/FacetCategories&gt;
        &lt;Items ImgBase=&quot;helloworld.dzc&quot;&gt;
            &lt;Item Img=&quot;#0&quot; Id=&quot;0&quot; Href=&quot;http://www.getpivot.com&quot;Name=&quot;Hello World!&quot;&gt;
                &lt;Description&gt;This is the only item in the collection.&lt;/Description&gt;
                &lt;Facets&gt;
                    &lt;Facet Name=&quot;Hello World Facet Category One&quot;&gt;
                        &lt;String Value=&quot;Hello World Facet Value&quot;/&gt;
                    &lt;/Facet&gt;
                &lt;/Facets&gt;
            &lt;/Item&gt;
       &lt;/Items&gt;
    &lt;/Collection&gt;
</programlisting><para> Each part of the XML is surfaced in the PivotViewer as depicted below:</para>
<ulink url="">
<figure><graphic fileref="VirtSparqlCxml/hello_world_surfacing.png" /></figure><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">SPARQL Endpoint CXML Extensions</bridgehead>
<para>The Virtuoso SPARQL protocol endpoint /sparql supports a number of extensions to the SPARQL standard specifically for CXML.</para>
<para>&quot;text/cxml&quot; and &quot;text/cxml+qrcode&quot; have been added to the list of formats recognized by the query string &#39;format&#39; parameter.
 The &quot;text/cxml&quot; output format is available for SELECT, DESCRIBE and CONSTRUCT.
 &quot;text/cxml+qrcode&quot; is available only for DESCRIBE and CONSTRUCT.
 e.g.
</para>
<programlisting>http://uriburner.com/sparql?default-graph-uri=&amp;should-sponge=&amp;query=select+*+WHERE+{%3Fhref+a+foaf%3APerson%3B+foaf%3Aname+%3Fname%3B+foaf%3Adepiction+%3Fimage}+limit+20&amp;format=text%2Fcxml
</programlisting><para> When using the /sparql UI, these format options are activated by selecting either &quot;CXML (Pivot Collection)&quot; or &quot;CXML (Pivot Collection with QRcodes)&quot; from the &quot;Format Results As&quot; dropdown.
 For DESCRIBE and CONSTRUCT, the &quot;text/cxml+qrcode&quot; output option adds a QRcode adjacent to the custom or default image for each item.
 For SELECT, the addition or omission of a QRcode alongside the item image is controlled through the ?qrcode reserved query variable.</para>
<para>Corresponding pragmas &#39; define output:format &quot;CXML&quot; &#39; and &#39; define output:format &quot;CXML;QRCODE&quot; &#39; are available for when executing SPARQL queries directly from Virtuoso PL or from a Virtuoso client.
 e.g.
</para>
<programlisting>sparql define output:format &quot;CXML&quot;
select * WHERE { ?href a foaf:Person; foaf:name ?name; foaf:depiction ?image } limit 20
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">RDF to CXML Mapping - The Basic Approach</bridgehead>
<para>The way in which SPARQL result sets are converted to CXML differs for SELECTs and DESCRIBEs or CONSTRUCTs.
 The broad approach is outlined below to explain the default mapping.
 Options for tailoring the default mapping are described in subsequent sections.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">SELECT</bridgehead>
<para>Each distinct subject URI forms a CXML Item whose Name and Href are the subject URI.
 Each variable in the query which is not a subject URI becomes a facet named virtcxml:Facet<emphasis>variable</emphasis>; where the variable name is converted to title case.
 The variables&#39; values become the values of the corresponding facet.
 The default type of each facet is CXML String.
 A query such as: </para>
<programlisting>prefix ski: &lt;http://www.openlinksw.com/ski_resorts/schema#&gt;
prefix camp: &lt;http://www.openlinksw.com/campsites/schema#&gt;

select * where 
{
  { ?s a ski:SkiResort . ?s ?p ?o . optional { ?s foaf:depiction ?image } }
  union
  { ?s a camp:Campsite . ?s ?p ?o . optional { ?s foaf:depiction ?image } } 
}
</programlisting><para> creates a collection with facet categories virtcxml:FacetP and virtcxml:FacetO, as shown in the CXML document tree fragment below.
 ?image is one of several special variables reserved for controlling the RDF to CXML mapping.
 These reserved variables are not used as facets.</para>
<figure><graphic fileref="VirtSparqlCxml/select_cxml_doc_tree.jpg" /></figure><para>The default facet names generated by a SELECT, in this example virtcxml:FacetP and virtcxml:FacetO, can be changed through graph virtcxml: as described below.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">DESCRIBE and CONSTRUCT</bridgehead>
<para>Like SELECT, each distinct subject URI again forms a CXML Item whose Name and Href are the subject URI.
 Unlike SELECT, no other query variables play a part in determining the facet categories.
 Instead they are derived directly from the DESCRIBE or CONSTRUCT output, whereby each distinct predicate, i.e.
 property, becomes a facet category.
 Each predicate value becomes a facet value.
 The full set of facet categories is a union of the properties of each entity type in the result set.
 Again, the default type of each facet is CXML String.
 The query:</para>
<programlisting>describe ?s where {{ ?s a ski:SkiResort } union { ?s a camp:Campsite . }}
</programlisting><para> creates the facet categories shown below.
 Notice that the reserved variable ?image is not used to identify which entity property will provide the Deep Zoom images.
 Only SELECTs use reserved variables to tailor the CXML mapping.
 DESCRIBE and CONSTRUCT instead use entries in graph virtcxml: to both identify which entity properties supply particular CXML names and attributes and, if automatic facet type detection isn&#39;t possible, to override the default facet type of CXML String.</para>
<figure><graphic fileref="VirtSparqlCxml/describe_cxml_doc_tree.jpg" /></figure><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Default Settings</bridgehead>
<para>The default settings for the CXML generation include the following defaults:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>FacetCategory attributes <itemizedlist mark="bullet" spacing="compact"><listitem>Name <itemizedlist mark="bullet" spacing="compact"><listitem>Defaults to a short property name, without a prefix.
 e.g.
 Predicate http://www.openlinksw.com/campsites/schema#distance_from_calais_km becomes a FacetCategory with Name=&quot;distance_from_calais_km&quot; </listitem>
</itemizedlist></listitem>
<listitem>Type <itemizedlist mark="bullet" spacing="compact"><listitem>Defaults to CXML type &quot;String&quot; if the RDF data is not typed.
 If the data is typed, for example through an RDF typed literal, SparqlCxml sets the appropriate CXML facet type automatically.
</listitem>
</itemizedlist></listitem>
<listitem>IsFilterVisible, IsMetaDataVisible, IsWordWheelVisible <itemizedlist mark="bullet" spacing="compact"><listitem>All default to &quot;true&quot; </listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>Facet attributes <itemizedlist mark="bullet" spacing="compact"><listitem>Name <itemizedlist mark="bullet" spacing="compact"><listitem>As with the FacetCategory Name attribute, defaults to a short property name.
</listitem>
</itemizedlist></listitem>
<listitem>Type <itemizedlist mark="bullet" spacing="compact"><listitem>As with the FacetCategory Type attribute, defaults to &quot;String&quot;.
</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>Item attributes <itemizedlist mark="bullet" spacing="compact"><listitem>Name <itemizedlist mark="bullet" spacing="compact"><listitem>Defaults to the URI of the entity described by the Item element </listitem>
</itemizedlist></listitem>
<listitem>Href <itemizedlist mark="bullet" spacing="compact"><listitem>Defaults to the URI of the entity described by the Item element</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Auto-Detection of Facet Type</bridgehead>
<para>RDF typed literals are automatically mapped to the appropriate CXML type.
 The xsd:integer, xsd:float, xsd:double and xsd:decimal types are mapped to CXML Number, xsd:datetime is mapped to CXML DateTime and strings longer than 100 characters are mapped to CXML LongString.
 e.g.</para>
<programlisting>:Le_Jard oplcamp:last_updated &quot;2010-12-01T00:00:00Z&quot;^^xsd:dateTime .
:La_Plagne oplski:expert_slopes &quot;18&quot;^^xsd:integer .
</programlisting><para> Properties of type CXML Number can be filtered using the PivotViewer &quot;slider filter&quot; (shown below associated with the ski_resort:expert_slopes property/facet) to restrict the displayed items to those within a certain range of the property.</para>
<figure><graphic fileref="VirtSparqlCxml/slider_filter.jpg" /></figure><para> Similarly, PivotViewer enables a date filter for CXML DateTime values.</para>
<figure><graphic fileref="VirtSparqlCxml/pivotviewer_date_filter.jpg" /></figure><para>RDF values which are URIs are handled as a special case.
 They may be mapped to a CXML Link, String or LongString depending on the SparqlCxml link typing options in force.
 These are described in section <ulink url="#AncLinkType">Link Typing</ulink></para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">SparqlCxml Reserved Query Variables</bridgehead>
SparqlCxml defines a list of reserved variables for use in SPARQL SELECTs to identify which predicates are to be used to set particular CXML element and attribute values.
 These reserved variables, or identifiers, are defined in graph virtcxml: which is created when the sparql_cxml VAD is installed.
 Each identifier is prefixed by virtcxml:Facet.
 The table below lists the virtcxml:Facetxxx Facet descriptors defined in virtcxml:, the reserved variable used to denote each Facet descriptor in a SELECT and the corresponding CXML element or attribute whose value is set by the reserved variable.
<table><title /><tgroup><thead /><tbody>
<row><entry> virtcxml Entity		</entry><entry> Reserved SELECT variable	</entry><entry> CXML Element/Attribute	</entry><entry> Description </entry></row>
<row><entry> virtcxml:FacetCopyright        </entry><entry> ?copyright                </entry><entry> Item/d1p1:Copyright       </entry><entry> A facet for a copyright link about the item </entry></row>
<row><entry> virtcxml:FacetDescription	</entry><entry> ?description			</entry><entry> Item/Description		</entry><entry> A facet for a text description of an item to be displayed in the info panel </entry></row>
<row><entry> virtcxml:FacetHref		</entry><entry> ?href				</entry><entry> Item/@Href			</entry><entry> A facet for an URL associated with an item. Double-clicking the item in the Pivot client will navigate the user to this URL </entry></row>
<row><entry> virtcxml:FacetId		</entry><entry> ?id				</entry><entry> Item/@Id			</entry><entry> A facet for an unique id of an item in the item list. If not specified the decimal representation of serial is used </entry></row>
<row><entry> virtcxml:FacetImage		</entry><entry> ?image			</entry><entry> Item/@Img		</entry><entry> A facet for an absolute URI of the image that will be added to an automatically created single-use collection </entry></row>
<row><entry> virtcxml:FacetImg		</entry><entry> ?img				</entry><entry> Item/@Img			</entry><entry> A facet for a relative image URI (for use with a third party Deep Zoom Collection) </entry></row>
<row><entry> virtcxml:FacetItemtype		</entry><entry> ?itemtype				</entry><entry> -			</entry><entry> A facet for an item type that is used, for example, to choose the fallback icon for the item </entry></row>
<row><entry> virtcxml:FacetName		</entry><entry> ?name				</entry><entry> Item/@Name			</entry><entry> A facet for a name of the item which will appear at the top of the info panel </entry></row>
<row><entry> virtcxml:FacetQrcode		</entry><entry> ?qrcode			</entry><entry> Item/@Img		</entry><entry> A facet for QRcode data that should be placed in the image </entry></row>
<row><entry> virtcxml:FacetRelated		</entry><entry> ?related			</entry><entry> Item/d1p1:Related		</entry><entry> A facet for links to web-pages or collections related to the item </entry></row>
</tbody></tgroup></table>
<para>The reserved variables are only used for a SELECT, not a DESCRIBE or CONSTRUCT.
 The last two query forms instead use graph virtcxml: to control the CXML mapping.
 For the moment, we&#39;ll confine our attention to SELECTs.</para>
<para>The following example, which selects a number of products (or services), illustrates the use of the reserved ?name and ?image variables to identify which predicates, i.e.
 product attributes, will act as a product&#39;s name and image - in this case rdfs:label and foaf:depiction respectively.</para>
<programlisting>select distinct * where { ?s a gr:ProductOrServiceModel; foaf:depiction ?image; rdfs:label ?name } limit 500
</programlisting><para> The prefix gr: identifies the GoodRelations namespace, <ulink url="http://purl.org/goodrelations/v1#.">http://purl.org/goodrelations/v1#.</ulink> (An explicit prefix declaration is not needed because this is a well-known namespace predefined in Virtuoso in table DB.DBA.SYS_XML_PERSISTENT_NS_DECL.)</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Examples</bridgehead>
<para>The queries below further illustrate the use of the reserved query variables.
 All can be executed against <ulink url="http://uriburner.com/sparql.">http://uriburner.com/sparql.</ulink> A snippet of the generated CXML is shown to highlight how an element or attribute is influenced by the variable(s).
 Refer to the <ulink url="#AncCxmlSurfacing">graphic</ulink> presented earlier for details of how different CXML elements are surfaced in PivotViewer.</para>
<para> <emphasis>Example 1:</emphasis> </para>
<programlisting>define input:inference &quot;virtrdf-label&quot;
prefix geosp: &lt;http://rdf.geospecies.org/ont/geospecies#&gt;

select distinct * where { ?s a &lt;http://lod.taxonconcept.org/ontology/txn.owl#GeoSpeciesTaxon&gt; ; foaf:depiction ?image ; virtrdf:label ?name ; geosp:hasCommonName ?cn ; geosp:hasClassName &quot;Insecta&quot; .
} limit 2000
</programlisting><para><ulink url="http://uriburner.com/c/DIDNPP">View Pivot collection</ulink></para>
<figure><graphic fileref="VirtSparqlCxml/qry_var_eg1.png" /></figure><para> <emphasis>Example 2:</emphasis> </para>
<programlisting>define input:inference &quot;virtrdf-label&quot;
select * where { ?s a &lt;http://purl.org/ontology/wo/Species&gt; ;
&lt;http://purl.org/ontology/wo/order&gt; &lt;http://www.bbc.co.uk/nature/order/Primate#order&gt; ;
&lt;http://purl.org/ontology/wo/family&gt; ?family ;
&lt;http://purl.org/ontology/wo/livesIn&gt; ?lives_in ;
foaf:depiction ?image; virtrdf:label ?name; dcterms:description ?description. ?href foaf:primaryTopic ?s .
} limit 2000
</programlisting><para><ulink url="http://uriburner.com/c/DH6J27">View Pivot collection</ulink></para>
<figure><graphic fileref="VirtSparqlCxml/qry_var_eg2.png" /></figure>  <emphasis>Example 3:</emphasis> <programlisting>define input:inference &quot;virtrdf-label&quot;
prefix geosp: &lt;http://rdf.geospecies.org/ont/geospecies#&gt;

select distinct * where {?s a &lt;http://lod.taxonconcept.org/ontology/txn.owl#GeoSpeciesTaxon&gt; ; foaf:depiction ?image ; virtrdf:label ?name ; foaf:isPrimaryTopicOf ?href ; rdfs:seeAlso ?related ; geosp:hasCommonName &quot;Tiger&quot; ; geosp:hasClassName ?className . } limit 3000
</programlisting><para><ulink url="http://uriburner.com/c/DIDTV4">View Pivot collection</ulink></para>
<figure><graphic fileref="VirtSparqlCxml/qry_var_eg3.png" /></figure>  <emphasis>Example 4:</emphasis> <programlisting>prefix mtp: &lt;http://www.openlinksw.com/schemas/meetup/&gt;
prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt;

select * from &lt;http://www.meetup.com/semweb-25/members/&gt;  where  {
?href ?p ?o ; foaf:depiction ?image; foaf:name ?name; mtp:id ?id; dc:description ?description .filter (!isBlank(?description)) 
} limit 200
</programlisting><para><ulink url="http://kingsley.idehen.net/PivotViewer/?url=http%3A%2F%2Fkingsley.idehen.net%2Fc%2FMRLBK%23%2524facet0%2524%3Dvirtcxml%253AFacetP%26%2524view%2524%3D1%26%24tab%24%3D0%26%24zoom%24%3D2">View Pivot collection</ulink></para>
<figure><graphic fileref="VirtSparqlCxml/qry_var_eg4.png" /></figure>  <emphasis>Example 5:</emphasis> <programlisting>PREFIX wo: &lt;http://purl.org/ontology/wo/&gt;

SELECT DISTINCT  ?s as ?href ?name ?kname ?image ?hname ?description 
WHERE {?s wo:kingdom ?kingdom; dcterms:description ?description; rdfs:label ?name; wo:livesIn ?habitat.  ?kingdom rdfs:label ?kname. ?habitat rdfs:label ?hname OPTIONAL {?s foaf:depiction ?image.} } limit 2500
</programlisting><para><ulink url="http://uriburner.com/c/DI463N">View Pivot collection</ulink> </para> <emphasis>Example 6:</emphasis> 
<programlisting># Capture subject URI in QR code
# Use foaf:name as anchor text and subject URI as href of main item link in PivotViewer properties panel
# Use foaf:depiction image for Tiles (DZI) for DZC

SELECT DISTINCT ?href 
                ?image 
                ?href as ?qrcode
                ?name ?page
                ?description ?created ?modified
                ?country ?postcode ?region  ?locality ?latitude ?longitude
WHERE { 
       ?href a foaf:Person;
           foaf:depiction ?image; foaf:name ?name; foaf:homepage ?page;
           dc:description ?description; dcterms:created ?created; dcterms:modified ?modified;
           vcard:Country ?country; vcard:Pcode ?postcode; vcard:Region ?region; vcard:Locality ?locality;
           geo:lat ?latitude; geo:long ?longitude.      
      }
</programlisting><para> </para> <emphasis>Example 7:</emphasis>
<para>The next example shows the use of ?image to identify the custom image to be displayed for an item, and ?qrcode to identify the property (in this case the item URI) to be encoded in the QRcode adjacent to the main image.
 It also illustrates the use of Virtuoso&#39;s federated SPARQL capability (SPARQL-FED) via the service keyword.</para>
<programlisting>prefix gr: &lt;http://purl.org/goodrelations/v1#&gt;
prefix icecat: &lt;http://linkedopencommerce.com/schemas/icecat/v1/&gt;

select distinct ?href ?href as ?qrcode ?name ?description ?manufacturer ?image where { service &lt;http://linkeddata.uriburner.com/sparql&gt; {
  ?href a gr:ProductOrServiceModel . 
  ?href icecat:hasModelName ?name .
  ?href icecat:hasLongSummaryDescription ?description .
  ?href gr:hasManufacturer ?manufacturer .
  ?href ?p ?o .
  ?href foaf:depiction ?image .
  ?o bif:contains &#39;(SONY AND CAMCORDER)&#39; . 
}}
</programlisting><para> The following image slice taken from the resulting PivotViewer display shows product images with their generated QRcodes.</para>
<figure><graphic fileref="VirtSparqlCxml/camcorder_qrcode.jpg" /></figure>  <emphasis>Example 8:</emphasis><para>If no custom image can be found for an item, an icon is used instead.
 Here we see the image being provided by the foaf:depiction property which is included in an optional triple pattern so as to include in the collection items without a foaf:depiction.
 These items are depicted by the default icon, the &#39;RDF molecule&#39;, as shown below.</para>
<programlisting>select distinct ?s ?image ?id 
from &lt;http://www.meetup.com/linkeddata/members/&gt; where { 
	service &lt;http://uriburner.com/sparql&gt; {
		?s ?p ?o; foaf:name ?id .
		optional { ?s foaf:depiction ?image }
	} 
} limit 100
</programlisting><figure><graphic fileref="VirtSparqlCxml/select_no_itemtype.jpg" /></figure><para>Rather than use the same icon for all items without an image, it&#39;s possible to display a class-specific icon to give an indication of the item&#39;s type.
 The icon to be displayed is selected from a small extensible set provided by the SparqlCxml VAD, based on the item&#39;s rdfs:type.
 (More details of how this is done can be found in <ulink url="VirtSparqlCxmlDzcs">SparqlCxmlDeep Zoom Collections</ulink> in section &#39;Default Images for Pivot Collections&#39;.)</para>
<para>When generating CXML from a DESCRIBE or CONSTRUCT, an item&#39;s rdfs:type is readily available and the choice of icon is made automatically.
 For a SELECT, it&#39;s necessary to indicate an item&#39;s type through the ?itemtype reserved query variable.
 When the above query is modified to include ?itemtype, the default icon is replaced by a &#39;silhouette&#39; which depicts items of type foaf:Person.
</para>
<programlisting>select distinct ?s ?image ?id ?itemtype 
from &lt;http://www.meetup.com/linkeddata/members/&gt; where { 
	service &lt;http://uriburner.com/sparql&gt; {
		?s ?p ?o; foaf:name ?id ; a ?itemtype .
		optional { ?s foaf:depiction ?image }
	}
} limit 100 
</programlisting><para> <figure><graphic fileref="VirtSparqlCxml/select_with_itemtype.jpg" /></figure> </para> <emphasis>Example 9:</emphasis>
<para>Using a fixed image as the item depiction, with the item&#39;s URI forming the QRcode </para>
<programlisting>prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
prefix frbr: &lt;http://purl.org/vocab/frbr/core#&gt;
prefix dct: &lt;http://purl.org/dc/terms/&gt;

select ?work as ?href ?date ?description ?valid ?subject as ?qrcode ?image ?name
      (&lt;http://i.telegraph.co.uk/telegraph/multimedia/archive/01590/backbenchers-pa_1590370c.jpg&gt;) as ?image
where
{ service &lt;http://gov.tso.co.uk/legislation/sparql&gt; ( define lang:dialect 65535 )
  {{
    select *
    where               
    {
      ?work a frbr:Work .
      ?work dct:title ?description .
      ?work dct:created ?date .
      ?work dct:subject ?subject .
      ?work dct:valid ?valid .
      ?work rdfs:label ?name .
      optional {?work foaf:depiction ?image} .
      filter (?date &gt;= &quot;2010-10-15&quot;^^xsd:date)
    }                
    limit 100
  }}
}
</programlisting><para> or</para>
<programlisting>select ?s as ?href, (&lt;http://www.railaroundbirmingham.co.uk/graphics/crests.jpg&gt;) as ?image, ?p, ?o from &lt;http://spending.lichfielddc.gov.uk/data&gt; where {?s ?p ?o} limit 1000
</programlisting><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Query Variable Order</bridgehead>
<para>If a wildcard SELECT list isn&#39;t used, the query variables in the SELECT list must include one representing the subject URI.
 The variable corresponding to the subject URI must also be <emphasis>first</emphasis> in the select list.
In the next example, ?href is, as well as setting each Item&#39;s Href attribute,  also acting as a placeholder for the subject URI (in place of the more usual ?s).</para>
<programlisting>PREFIX wo: &lt;http://purl.org/ontology/wo/&gt;

SELECT DISTINCT  ?href ?name  ?kingdom ?image ?habitat ?page ?adaptation ?prog
WHERE {?href wo:kingdom ?kingdom; wo:adaptation ?adaptation; wo:livesIn ?habitat; rdfs:label ?name. OPTIONAL {?prog po:subject ?href.} OPTIONAL {?href foaf:depiction ?image.} OPTIONAL {?page foaf:primaryTopic ?href} }  limit 500
</programlisting><para>A re-ordered select list of &#39;SELECT DISTINCT ?name ?href ...&#39; would be rejected by the SPARQL compiler.
</para> <ulink url="">
 
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Reserved Query Variables for Geodata</bridgehead>
PivotViewer&#39;s &quot;Map&quot; tab displays any geo-data contained in the collection as map markers.
 Currently PivotViewer looks for two kinds of facet to find geo-location points: <orderedlist spacing="compact"><listitem>A pair of numeric facets named &quot;latitude&quot; and &quot;longitude&quot; (or which have these substrings in the facet name).
 The facet values are combined to form a geo-marker.
</listitem>
<listitem>Any facet named &quot;location&quot; (or which contains the substring &quot;location&quot;) is used to do geo-location lookups, with some special handing for facet values in the formats below.
 Any other format is passed to the BingMap GeoLocation API to try to retrieve a co-ordinate pair.
<itemizedlist mark="bullet" spacing="compact"><listitem>Twitter coordinates: format - ?t: &lt;double&gt;, &lt;double&gt; </listitem>
<listitem>iPhone co-ordinates: format - iPhone: &lt;double&gt;, &lt;double&gt; </listitem>
<listitem>Generic co-ordinates: format - &lt;double&gt;, &lt;double&gt; </listitem>
<listitem>Generic coordinates: format - &lt;double&gt;?, &lt;double&gt;?</listitem>
</itemizedlist></listitem>
</orderedlist><para>The searches for &quot;latitude&quot;, &quot;longitude&quot; or &quot;location&quot; in a facet name are case-insensitive.
 PivotViewer uses an internal cache to minimize the number of lookups.</para>
<para>Thus ?latitude, ?longitude and ?location can be viewed as special variables specifically for PivotViewer.
 Conversely, the previously mentioned special variables ?image, ?qrcode etc are only for CXML generation.</para>
<para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Graph virtcxml</bridgehead>
<para>Graph &lt;http://www.openlinksw.com/schemas/virtcxml#&gt; can be used to customize the CXML generation for DESCRIBEs and CONSTRUCTs.
 The graph can also be referred to by its short name virtcxml: which is declared in table DB.DBA.SYS_XML_PERSISTENT_NS_DECL (e.g.
 select * from virtcxml: where { ....
 ) The graph is created by the sparql_cxml VAD and populated with some default settings for popular ontologies such as the Dublin Core and FOAF.
 Add entries to this graph as needed for your own collections.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">virtcxml:FacetType</bridgehead>
<para>Customization of the DESCRIBE output is done primarily by associating a virtcxml:FacetType with an entity property.
 The entity property to be modified is declared as being an instance of the class virtcxml:FacetCategoryPattern.
 The property&#39;s datatype can then be set by assigning the desired CXML type to the virtcxml:FacetType property.
 The supported types include the standard CXML datatypes, String, LongString, Number, DateTime and Link; but also some pseudo datatypes for setting certain item attributes from RDF property values.
 These special datatypes correspond to the <ulink url="#AncReservedQueryVariables">reserved query variables</ulink> presented earlier.
 They are:</para>

<table><title /><tgroup><thead /><tbody>
<row><entry> Datatype </entry><entry> Equivalent Reserved SELECT Variable	</entry><entry> CXML Element/Attribute </entry></row>
<row><entry> Item/d1p1:Copyright </entry><entry> ?copyright  </entry><entry> A facet for a copyright link about the item </entry></row>
<row><entry> Item/Description</entry><entry> ?description		</entry><entry> A facet for a text description of an item to be displayed in the info panel </entry></row>
<row><entry> Item/@Href </entry><entry> ?href	</entry><entry> A facet for an URL associated with an item. Double-clicking the item in the Pivot client will navigate the user to this URL </entry></row>
<row><entry> Item/@Id </entry><entry> ?id </entry><entry> A facet for an unique id of an item in the item list. If not specified the decimal representation of serial is used </entry></row>
<row><entry> Item/@virt:Image </entry><entry> ?image </entry><entry> A facet for an absolute URI of the image that will be added to an automatically created single-use collection </entry></row>
<row><entry> Item/@Img </entry><entry> ?img </entry><entry> A facet for an relative URI of the image in the collection </entry></row>
<row><entry> Item/@virt:Itemtype		</entry><entry> ?itemtype	  </entry><entry> A facet for an item type that is used, for example, to choose the fallback icon for the item </entry></row>
<row><entry> Item/@Name </entry><entry> ?name </entry><entry> A facet for a name of the item which will appear at the top of the info panel </entry></row>
<row><entry> Item/@virt:QRcode </entry><entry> ?qrcode </entry><entry> A facet for QRcode data that should be placed in the image </entry></row>
<row><entry> Item/d1p1:Related </entry><entry> ?related	</entry><entry> A facet for links to web-pages or collections related to the item </entry></row>
</tbody></tgroup></table>
<para>Examples of their use follow.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Setting an Item&#39;s Image</bridgehead>
<para>An item&#39;s foaf:depiction property supplies the item&#39;s image: </para>
<programlisting>foaf:depiction
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/@virt:Image&quot; ;
  virtcxml:FacetDescription &quot;A facet for absolute URI of depiction of a collection item&quot; .
</programlisting><para> As with the other pseudo datatypes, more than one property can be declared as being of type &quot;Item/@virt:Image&quot;.
 This would typically be the case where the collections to be generated include more than one entity type.
 In which case, there would be one &quot;Item/@virt:Image&quot; declaration for each included type, except where they share the same image property.
 For any entity type without a &quot;Item/@virt:Image&quot; property, an icon is displayed as a fallback image.</para>
<para>Building on the above definition, graph virtcxml supports a virtcxml:aliasOf property as a shorthand notation for declaring properties as having FacetType &quot;Item/@virt:Image&quot;.
 As an illustration of how the graph can be customized by a developer, the SPARUL insert statement below declares mo:image as an alias of foaf:depiction to enable the use of images available through the mo:image property as custom images (aka ABox images) in the DESCRIBE query which follows.
 The query itself can be executed against endpoint <ulink url="http://lod.openlinksw.com/sparql.">http://lod.openlinksw.com/sparql.</ulink> </para>
<programlisting>sparql
prefix virtcxml: &lt;http://www.openlinksw.com/schemas/virtcxml#&gt; 
prefix mo: &lt;http://purl.org/ontology/mo/&gt;
prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

insert data into virtcxml:
{
  mo:image virtcxml:aliasOf foaf:depiction .
};
</programlisting><para>Without this declaration (which is included in the graph virtcxml by default), only icons (aka TBox images) would be displayed by PivotViewer.
</para>
<programlisting>DESCRIBE ?s FROM &lt;http://www.bbc.co.uk/music/&gt; 
WHERE { ?s a mo:SoloMusicArtist ; mo:image ?img .} LIMIT 100
</programlisting><para>Note: ?img ensures that each artist has a custom image.
 It should not be confused with the reserved query variable ?image, used only by SELECTs.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Setting an Item&#39;s Name</bridgehead>
 If an item has any of the properties foaf:name, rdfs:label, dc:title or dcterms:title, use it as the item&#39;s name: <programlisting>foaf:name
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/@Name&quot; ;
  virtcxml:FacetDescription &quot;A facet for full name of a person&quot; .
  ...
rdfs:label
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/@Name&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for name of item&quot; .
  ...
dc:title
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/@Name&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for name of item&quot; .

dcterms:title
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/@Name&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for name of item&quot; .
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Setting an Item&#39;s Description</bridgehead>
<para>For any item with a Dublin Core description property, use this for the CXML Item/Description element.
 For campsite items, use the camp:description property, and for ski resorts use the ski:description property.
Note that the property to use can have any name, it need not be named <emphasis>prefix:</emphasis>description.
</para>
<programlisting>dc:description
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/Description&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for item description&quot; .

dcterms:description
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/Description&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for item description&quot; .
  ...
camp:description
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/Description&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for campsite description&quot; .
  ...
ski:description
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Item/Description&quot; ;
  virtcxml:FacetDescription &quot;Facet to use for ski resort description&quot; .
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Setting a Facet&#39;s Name</bridgehead>
<para>Use &#39;Type of Resort&#39; in place of &#39;camp:resort_type&#39; as the name of the facet: </para>
<programlisting>camp:resort_type
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetName &quot;Type of Resort&quot; ;
  virtcxml:FacetDescription &quot;Type of resort&quot; .
</programlisting><para> The ability to override a facet&#39;s name is not limited to DESCRIBEs.
 The default facet names generated by a SELECT can also be overridden in the same way.
 For instance, the facet name &#39;virtcxml:FacetO&#39; created for query variable ?o in a SELECT starting: </para>
<programlisting>select ?s ?p ?o where ...
</programlisting><para>can be changed to &#39;Object&#39; with an entry in virtcxml of the form: </para>
<programlisting>virtcxml:FacetO
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetName &quot;Object&quot; ;
  virtcxml:FacetDescription &quot;Renaming of facet associated with ?o&quot; .
</programlisting><para>Likewise for </para>
<programlisting>select ?s ?p ?o as ?loc ...
</programlisting><programlisting>virtcxml:FacetLoc
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetName &quot;Location&quot; ;
  virtcxml:FacetDescription &quot;...&quot; .
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Setting a Facet&#39;s Datatype</bridgehead>
<para>Overriding the default CXML String datatype for item properties:</para>
<para>The following examples show how to set the facet type using the virtcxml:FacetType property.
 However this should not be necessary for numeric and datetime values.
 If the values are RDF typed literals, the facet datatype is set automatically.
</para>
<programlisting>ski:altitude_m
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Number&quot; ;
  virtcxml:FacetDescription &quot;Resort altitude (m)&quot; .
  ...
rdfs:seeAlso
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Link&quot; ;
  virtcxml:FacetDescription &quot;Related item&quot; .
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Setting the Facet Used to Generate a QR code</bridgehead>
<para>For SELECTs, reserved query variable ?qrcode identifies the property to use for generating QR codes.
 However this variable is unavailable for DESCRIBEs and CONSTRUCTs.
 For the latter, two options exist.
 Either designate the property to use through an entry in graph virtcxml: or, in the absence of such an entry, use the default behaviour whereby the subject URI is automatically used as the basis for the QR code, assuming QR code generation has been enabled through the /sparql query string setting &quot;format=text/cxml+qrcode&quot;, or through the SPASQL pragma &#39;define output:format &quot;CXML;QRCODE&quot;&#39; as described above in <ulink url="#AncSparqlEndpointCxmlExtensions">SPARQL Endpoint CXML Extensions</ulink>.</para>
<para>To specify a QR code source-property in virtcxml:, assign the property a virtcxml:FacetType property of &quot;Item/@virt:QRcode&quot;.
 e.g.
</para>
<programlisting>gr:hasEAN_UCC-13
	a virtcxml:FacetCategoryPattern ;
	virtcxml:FacetType &quot;Item/@virt:QRcode&quot; ;
	virtcxml:FacetDescription &quot;Use a product&#39;s GoodRelations EAN-UCC-13 code (Universal Product Code) for it&#39;s QRcode&quot; .
</programlisting><para> In most circumstances it will probably be preferable to QR-encode the item (subject) URI, in which case an entry in virtcxml: is not needed.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Excluding a Facet from the Filter Panel</bridgehead>
<para>There may be occasion where there is little reason to include a facet in the PivotViewer filter panel, for instance if the facet value is unique for each item and you are unlikely to want to filter on this facet.
 To exclude a facet from the filter panel, set its virtcxml:PivotIsFilterVisible property to &quot;false&quot; in virtcxml: e.g.
</para>
<programlisting>foaf:mbox_sha1sum
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetName &quot;SHA1 of a Personal Mailbox&quot; ;
  virtcxml:FacetType &quot;String&quot; ;
  virtcxml:PivotIsFilterVisible &quot;false&quot; .
</programlisting><para> <ulink url="">
 </ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Using Labels in Place of URIs</bridgehead>
<para>In the world of RDF, a URI is the primary currency for naming and identifying classes, properties and individuals.
 In contrast, in PivotViewer items and properties are identified by name, and property values are in the main character strings.
 The screenshot on the left below shows the visual impact of property values which are resource URIs rather than literals, if <ulink url="PivotViewer">PivotViewer</ulink>&#39;s auto-label feature (see below) is disabled.
 (This feature cannot be disabled by end-users, but has been in the following example to illustrate its effect).
 The values for facet virtcxml:FacetHabitat were returned by the query:</para>
<programlisting>SELECT DISTINCT  ?s as ?href ?kingdom ?image ?habitat WHERE {?s &lt;http://purl.org/ontology/wo/kingdom&gt; ?kingdom; &lt;http://purl.org/ontology/wo/livesIn&gt; ?habitat. OPTIONAL {?s foaf:depiction ?image . } } limit 2500
</programlisting><para>  <figure><graphic fileref="VirtSparqlCxml/property_labels1.jpg" /></figure> <figure><graphic fileref="VirtSparqlCxml/property_labels2.jpg" /></figure>  The values for property http://purl.org/ontology/wo/livesIn (corresponding to facet virtcxml:FacetHabitat) are individuals identified by URIs, e.g.
 http://www.bbc.co.uk/nature/habitats/Tropical_and_subtropical_grasslands,_savannas,_and_shrublands#habitat, which while great for machine-readable data does little for end-user readability.
 From a user&#39;s perspective, it&#39;s clearly preferable that URIs should be hidden as far as possible.</para>
<para>One option would be to display a property&#39;s label in place of its URI and keep the property type as CXML String.
 While for some properties, such as rdfs:seeAlso, it may be desirable to  type the property as CXML Link, and use the property label for the anchor text, in most cases using CXML String makes for a better user experience and more searchable collections.
 The reason being that facets of type CXML Link are not exposed in the Filter panel for filtering, whereas facets of type CXML String are.
 In order to achieve the desired effect, the query could be recast to retrieve labels attached to properties through the rdfs:label predicate:</para>
<programlisting>SELECT DISTINCT  ?s as ?href ?name ?kname ?image ?hname WHERE {?s &lt;http://purl.org/ontology/wo/kingdom&gt; ?kingdom; rdfs:label ?name; &lt;http://purl.org/ontology/wo/livesIn&gt; ?habitat. OPTIONAL {?s foaf:depiction ?image.} ?kingdom rdfs:label ?kname. ?habitat rdfs:label ?hname} limit 2500
</programlisting><para><ulink url="http://uriburner.com/c/DIZQEG">View Pivot collection</ulink></para>
<para>The screenshot above right shows the effect of ?hname in the PivotViewer Filter panel.
 (The order of the images is different because PivotViewer orders on virtcxml:FacetHabitat in the first case and virtcxml:FacetHname in the second.) Those below show the impact of ?name on the item name in the Info panel, replacing the aardvark URI by the much more readable &#39;Aardvark&#39;.</para>
 <figure><graphic fileref="VirtSparqlCxml/item_name1.jpg" /></figure><figure><graphic fileref="VirtSparqlCxml/item_name2.jpg" /></figure> <ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Exploiting Inferencing</bridgehead>
 The last example showed rdfs:label being used to supply human-friendly labels for some properties.
 Inferencing provides a more generic approach to the problem, particularly where a collection may consist of more than one entity type.
 Virtuoso defines an inference context, virtrdf-label, specifically for inferring property labels.
 The context, defined in graph virtrdf-label, declares many properties routinely used for labels as being a subproperty of virtrdf:label.
 e.g.
<programlisting>rdfs:label rdfs:subPropertyOf &lt;http://www.openlinksw.com/schemas/virtrdf#label&gt;
dcterms:title rdfs:subPropertyOf &lt;http://www.openlinksw.com/schemas/virtrdf#label&gt;
...
</programlisting><para>By including the pragma &#39;define input:inference &quot;virtrdf-label&quot; before the last query above, label inferencing is enabled and any reference to rdfs:label could be replaced by virtrdf:label.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Automatic Labels</bridgehead>
<para>When handling property values which are URIs, rather than require the query to convert these URIs to labels through the inclusion of additional rdfs:label (or virtrdf:label) patterns, such as &quot;?kingdom rdfs:label ?kname . ?habitat rdfs:label ?hname .&quot; as illustrated above, Virtuoso will attempt to infer such labels automatically.
 Similarly for property URIs, Virtuoso will attempt to find the property&#39;s label and use this for the property (i.e.
 facet) name rather than use the <ulink url="http://en.wikipedia.org/wiki/CURIE">CURIE</ulink> format of the property URI.
 For example, &quot;Creator&quot; is used as a property name is place of &quot;dc:creator&quot;.
 When searching for auto-labels, SparqlCxml looks first in graph virtcxml: for facet names set using the virtcxml:FacetName property, before querying the local quad store for labels revealed through the virtrdf-label inference context.</para>
<para>The next example shows how the aesthetics of a recipe description can be improved using auto-labels.
 Starting from the Conductor&#39;s /sparql UI and executing the illustrated query</para>
<figure><graphic fileref="VirtSparqlCxml/recipe_qry_string_facets.jpg" /></figure><para>generates a query result URI which when passed to PivotViewer results in</para>
<figure><graphic fileref="VirtSparqlCxml/recipe_pvt_string_facets.jpg" /></figure><para>Notice that the values for facet dv:ingredient are labels, not URIs.
 The ingredient URIs have been hidden by the auto-labelling.
 The full RDF description of the ingredient &#39;almonds&#39; is given by:</para>
<programlisting>SELECT * WHERE { &lt;http://kingsley.idehen.net/about/id/entity/http/www.bbc.co.uk/food/recipes/almondymincepies_14566#hrecipe55g%2F2oz%20ground%20almonds%20&gt; ?p ?o}
</programlisting><para>which returns </para>

<table><title /><tgroup><thead /><tbody>
<row />
<row><entry> http://www.w3.org/1999/02/22-rdf-syntax-ns#type </entry><entry>http://rdf.data-vocabulary.org/Ingredient </entry></row>
<row><entry> http://rdf.data-vocabulary.org/name </entry><entry> almonds </entry></row>
<row><entry> http://rdf.data-vocabulary.org/amount </entry><entry> 55g/2oz ground almonds </entry></row>
</tbody></tgroup></table>
<para>and which reveals that the auto-labelling has used property  &lt;http://rdf.data-vocabulary.org/name&gt; in place of the ingredient URI.
 In order for this to happen, the virtrdf-label inference context declares dv:name as an rdfs:subPropertyOf virtrdf:label.</para>
<programlisting>SELECT * from &lt;virtrdf-label&gt; WHERE {?s ?p ?o}
</programlisting><para>includes in its output </para>

<table><title /><tgroup><thead /><tbody>
<row />
<row><entry> http://rdf.data-vocabulary.org/name </entry><entry> http://www.w3.org/2000/01/rdf-schema#subPropertyOf </entry><entry> http://www.openlinksw.com/schemas/virtrdf#label </entry></row>
</tbody></tgroup></table>
<para>Also note that in the above DESCRIBE query, ?image functions as an ordinary variable, not a reserved query variable, as is the case with a SELECT.
 It is used to ensure each returned recipe has an accompanying image.
 For this DESCRIBE, in order to specify that the images for the DZC are provided by dv:photo, an appropriate entry was added to graph virtcxml using a simple <ulink url="http://www.w3.org/Submission/SPARQL-Update/">SPARUL</ulink> statement:</para>
<programlisting>sparql 
prefix dv: &lt;http://rdf.data-vocabulary.org/&gt;

insert data into virtcxml:
{
  dv:photo
    a virtcxml:FacetCategoryPattern ;
    virtcxml:FacetType &quot;Item/@virt:Image&quot; ;
    virtcxml:FacetDescription &quot;A facet for use as an item image&quot; .
}
</programlisting><para>  <emphasis>Note</emphasis>: Auto-label extraction for URIs will <emphasis>not</emphasis> be performed if a facet is explicitly typed as CXML Link in graph virtcxml.
 An entry such as </para>
<programlisting>prefix dv: &lt;http://rdf.data-vocabulary.org/&gt;
. . .
dv:ingredient
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetName &quot;Ingredient&quot; ;
  virtcxml:FacetType &quot;Link&quot; .
</programlisting><para>for facet &quot;Ingredient&quot; will result in the facet values using a URI for both the Link&#39;s anchor text and href, instead of an inferred label for the anchor text.
 Auto-label extraction is only done when <ulink url="#AncFacetTypeAutoDetection">auto-type detection</ulink> takes place.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Label Localization</bridgehead>
<para>In order to exploit URI to label conversion to maximum effect, it is important that ontologies and instance data use language tags in multi-lingual scenarios to localize property values, as illustrated by this made-up extract </para>
<programlisting>:EWD1036 a bibo:Document ;
  dc:creator &quot;E. W. Dijkstra&quot;@en ;
  dc:subject  &quot;computer science&quot;@en ;
  dc:subject  &quot;informatique&quot;@fr ;
  dc:title &quot;The Cruelty of Really Teaching Computer Science&quot;@en .
</programlisting><para> Graph virtrdf-label declares dc:title rdfs:subPropertyOf virtrdf:label; so that dc:title serves as a potential label.
 Queries used for CXML generation can then restrict results, and hence labels, to a particular language by specifying the appropriate language tag.
 e.g.
</para>
<programlisting>DESCRIBE ?s WHERE { ?s a bibo:Document ; dc:subject &quot;computer science&quot;@en }
SELECT * WHERE { ?s dc:subject ?subject ; ... FILTER ( lang(?subject) = &quot;EN&quot; ) }
</programlisting><para> At present the onus is on the query writer to use language tags in the base query, but it is anticipated that SparqlCxml will in future perform this kind of filtering automatically through detection of the locale being used by the user agent.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Link Typing</bridgehead>
<para>The default setting for the auto-label feature is to set the type of the replacement labels to CXML String.
 However, the property URIs can also be typed as CXML Link, if required, with the auto-label acting as the anchor text and the property URI as the href.
 In the /sparql UI the dropdowns &#39;Style for RDF subjects&#39; and &#39;Style for other links&#39; control the target CXML type used by auto-labelling.
 The choice of CXML String as the default is because it isn&#39;t possible to filter on properties typed as CXML Link; PivotViewer does not display Link properties in the filter panel.
 Typing a facet like foaf:topicOfInterest as Link would prevent a user from selecting a group of people with the same interest, e.g.
 http://dbpedia.org/resource/Semantic+Web, via the filter panel.</para>
<para>Our recipe example used &#39;Convert to string facets&#39;, as can be seen in the raw CXML for the dv:ingredient facet</para>
<programlisting>&lt;Collection SchemaVersion=&quot;1.0&quot; Name=&quot;SPARQL Query Results&quot;&gt;
  &lt;FacetCategories&gt;
    &lt;FacetCategory Name=&quot;dv:author&quot; Type=&quot;String&quot;/&gt;
    &lt;FacetCategory Name=&quot;dv:cookTime&quot; Type=&quot;String&quot;/&gt;
    &lt;FacetCategory Name=&quot;dv:ingredient&quot; Type=&quot;String&quot;/&gt;
    &lt;FacetCategory Name=&quot;dv:instructions&quot; Type=&quot;LongString&quot; d1p1:IsFilterVisible=&quot;false&quot;/&gt;
    &lt;FacetCategory Name=&quot;dv:name&quot; Type=&quot;String&quot;/&gt;
    &lt;FacetCategory Name=&quot;dv:yield&quot; Type=&quot;String&quot;/&gt;
    &lt;FacetCategory Name=&quot;Subject Type&quot; Type=&quot;String&quot; d1p1:IsFilterVisible=&quot;true&quot; d1p1:IsMetaDataVisible=&quot;true&quot; d1p1:IsWordWheelVisible=&quot;true&quot;/&gt;
  &lt;/FacetCategories&gt;
  &lt;Items ImgBase=&quot;http://kingsley.idehen.net/DeepZoomCache/cxml35073.dzc&quot;&gt;
    &lt;Item Id=&quot;0&quot; Img=&quot;#0&quot; Href=&quot;http://kingsley.idehen.net/about/id/entity/http/www.bbc.co.uk/food/recipes/almondymincepies_14566#hrecipe&quot; Name=&quot;Almondy mince pies&quot;&gt;
      &lt;Facets&gt;
        &lt;Facet Name=&quot;dv:author&quot;&gt;
          &lt;String Value=&quot;Silvana Franco&quot;/&gt;
        &lt;/Facet&gt;
        &lt;Facet Name=&quot;dv:cookTime&quot;&gt;
          &lt;String Value=&quot;10 to 30 mins&quot;/&gt;
        &lt;/Facet&gt;
        &lt;Facet Name=&quot;dv:ingredient&quot;&gt;
          &lt;String Value=&quot;cream&quot;/&gt;
          . . .
          &lt;String Value=&quot;almonds&quot;/&gt;
          . . .
        &lt;/Facet&gt;
</programlisting><para> If &#39;Style for other links&#39; is set to &#39;Make plain links&#39;, the output for dv:ingredient becomes</para>
<programlisting>&lt;Collection SchemaVersion=&quot;1.0&quot; Name=&quot;SPARQL Query Results&quot;&gt;
  &lt;FacetCategories&gt;
    . . .
    &lt;FacetCategory Name=&quot;dv:ingredient&quot; Type=&quot;Link&quot; d1p1:IsFilterVisible=&quot;false&quot;/&gt;
    . . .
  &lt;/FacetCategories&gt;
        . . .
        &lt;Facet Name=&quot;dv:ingredient&quot;&gt;
          &lt;Link Href=&quot;http://kingsley.idehen.net/about/id/entity/http/www.bbc.co.uk/food/recipes/almondymincepies_14566#hrecipecream%2C%20custard%2C%20or%20brandy%20butter%2C%20to%20serve&quot; 
                Name=&quot;cream&quot;/&gt;
           . . .
           &lt;Link Href=&quot;http://kingsley.idehen.net/about/id/entity/http/www.bbc.co.uk/food/recipes/almondymincepies_14566#hrecipe55g%2F2oz%20ground%20almonds%20&quot;
                 Name=&quot;almonds&quot;/&gt;
           . . .
        &lt;/Facet&gt;
</programlisting><para> Should you want to override the &#39;Style for ...&#39; dropdown settings and force the type of a suitable property to Link, you can do so by adding an entry for the property in graph virtcxml:, assigning it a virtcxml:FacetType of &quot;Link&quot;.
 The installed virtcxml: does this for rdfs:seeAlso,</para>
<programlisting>rdfs:seeAlso
  a virtcxml:FacetCategoryPattern ;
  virtcxml:FacetType &quot;Link&quot; ;
  virtcxml:FacetDescription &quot;Related item&quot; .
</programlisting><para> A property with virtcxml:FacetType &quot;Link&quot; will be typed as Link only if all its values are URIs and none are literals.
 Again, where auto-labels can be found, these provide the anchor text.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Link Typing Options</bridgehead>
<para>The full set of link-typing options available in the /sparql UI are detailed below.
 The Facet Pivot Bridge and PivotViewer (via the &#39;Edit&#39; feature) also expose the same options.
 Pick one of these options when executing SPARQL from any of these services.</para>
<para>&#39;CXML link behavior&#39; Dropdown: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>Sets the CXML type of URIs to String or Link, optionally performing a DESCRIBE on the subject </listitem>
<listitem>Permitted Values: <itemizedlist mark="bullet" spacing="compact"><listitem>Local Faceted Navigation Links <itemizedlist mark="bullet" spacing="compact"><listitem>What? <itemizedlist mark="bullet" spacing="compact"><listitem>Generates links that enable faceted navigation/browsing within the local CXML data island hosted by page.
 If users need to exit the CXML data island they can only do so via the link behind the data item&#39;s name at the top of the info panel on the right of the PivotViewer display.
</listitem>
</itemizedlist></listitem>
<listitem>Why? <itemizedlist mark="bullet" spacing="compact"><listitem>Allows a PivotViewer user to search, sort and filter across image tile, bar graph, data grid and map views to find data items of specific interest.
</listitem>
</itemizedlist></listitem>
<listitem>How? <itemizedlist mark="bullet" spacing="compact"><listitem>Instead of using the URI as the facet value with a facet type of CXML Link, this option changes the facet type to CXML String and replaces the facet value with any label associated with the entity identified by the URI.
 In this context a label is any entity property which is a virtrdf:label, as defined by graph (inference context) virtrdf-label.
</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>External Resource Links <itemizedlist mark="bullet" spacing="compact"><listitem>What? <itemizedlist mark="bullet" spacing="compact"><listitem>Generates links that enable a PivotViewer user to exit the local CXML data island to an external description page for the selected data item reference (URI).
</listitem>
</itemizedlist></listitem>
<listitem>Why? <itemizedlist mark="bullet" spacing="compact"><listitem>Allows a PivotViewer user to search, sort and filter across image tile, bar graph, data grid and map views to find data items of specific interest, and then exit to an external resource via property values.
 This feature provides an additional exit to the data item name link.
</listitem>
</itemizedlist></listitem>
<listitem>How? <itemizedlist mark="bullet" spacing="compact"><listitem>Uses the unadorned URI directly as the link href, keeping the facet type as CXML Link.
</listitem>
<listitem>The URI forms the href of the CXML Link, with the anchor text provided by the entity&#39;s label.
</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>External Faceted Navigation Links <itemizedlist mark="bullet" spacing="compact"><listitem>What? <itemizedlist mark="bullet" spacing="compact"><listitem>Generates links that enable faceted navigation/browsing via object property values (those that have URI/IRI reference values).
</listitem>
</itemizedlist></listitem>
<listitem>Why? <itemizedlist mark="bullet" spacing="compact"><listitem>Allows a PivotViewer user to search, sort and filter across image tile, bar graph, data grid and map views to find data items of specific interest.
 Once the data item of interest is located, you also have the option to open up new PivotViewer pages via properties of your current data item of interest.
</listitem>
</itemizedlist></listitem>
<listitem>How? <itemizedlist mark="bullet" spacing="compact"><listitem>Replaces the entity URI by a wrapper URI to perform a SPARQL DESCRIBE of the entity, returning the result as CXML and launching PivotViewer to display it.
</listitem>
<listitem>The wrapper URI takes the form &#39;http://&lt;localhost&gt;/PivotViewer?url=http://&lt;localhost&gt;//sparql?query=describe+&lt;URI&gt;&amp;format=text/cxml+qrcode&#39; (the full URL encoding is not shown) </listitem>
<listitem>The wrapper URI forms the href of the CXML Link, with the anchor text provided by the entity&#39;s label.
</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>External Description Resource (Turtle) <itemizedlist mark="bullet" spacing="compact"><listitem>What? <itemizedlist mark="bullet" spacing="compact"><listitem>Generates links that provide access to data item description resources in Turtle format.
</listitem>
</itemizedlist></listitem>
<listitem>Why? <itemizedlist mark="bullet" spacing="compact"><listitem>Allows a PivotViewer user to search, sort and filter across image tile, bar graph, data grid and map views to find data items of specific interest.
 Once the data item of interest is located, you can use this link to access a data item description resouce (document) in Turtle format.
 Of course, you can simply alter the Turtle URL for other data formats supported by Virtuoso.
</listitem>
</itemizedlist></listitem>
<listitem>How? <itemizedlist mark="bullet" spacing="compact"><listitem>Replaces the entity URI by a wrapper URI to perform a SPARQL DESCRIBE of the entity, returning the result as TTL.
</listitem>
<listitem>The wrapper URI takes the form &#39;http://&lt;localhost&gt;/sparql?query=describe+&lt;URI&gt;&amp;format=text/rdf+n3&#39; (the full URL encoding is not shown) </listitem>
<listitem>The wrapper URI forms the href of the CXML Link, with the anchor text provided by the entity&#39;s label.
</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
<listitem>External Description Resource (CXML) <itemizedlist mark="bullet" spacing="compact"><listitem>What? <itemizedlist mark="bullet" spacing="compact"><listitem>Provides links to access CXML-based resources usable by other PivotViewer instances i.e, Virtuoso or non-Virtuoso hosted.
</listitem>
</itemizedlist></listitem>
<listitem>Why? <itemizedlist mark="bullet" spacing="compact"><listitem>Allows a PivotViewer user to search, sort and filter across image tile, bar graph, data grid and map views to find data items of specific interest.
 Once the data item of interest is located, you can use this link type to access a CXML resource for use elsewhere.
</listitem>
</itemizedlist></listitem>
<listitem>How? <itemizedlist mark="bullet" spacing="compact"><listitem>Replaces the entity URI by a wrapper URI to perform a SPARQL DESCRIBE of the entity, returning the result as CXML.
</listitem>
<listitem>The wrapper URI takes the form &#39;http://&lt;localhost&gt;/sparql?query=describe+&lt;URI&gt;&amp;format=text/cxml+qrcode&#39; (again the full URL encoding is not shown) </listitem>
<listitem>The wrapper URI forms the href of the CXML Link, with the anchor text provided by the entity&#39;s label.</listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist></listitem>
</itemizedlist><ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Controlling Link Typing through /sparql Query String Parameters</bridgehead>
<para>The link styling options provided by the /sparql UI ultimately reduce to two query string parameters in the SPARQL query URI it builds.
 Query string parameter CXML_redir_for_hrefs corresponds to the &#39;CXML link behavior&#39; dropdown.
 It can take one of the following values: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>null : Sets the &quot;Local Faceted Navigation Links&quot; option </listitem>
<listitem>&#39;121&#39; : Sets the &quot;External Resource Links&quot; option </listitem>
<listitem>&#39;LOCAL_PIVOT&#39; : Sets the  &quot;External Faceted Navigation Links&quot; option </listitem>
<listitem>&#39;LOCAL_TTL&#39; : Sets the &quot;External Description Resource (Turtle)&quot; option </listitem>
<listitem>&#39;LOCAL_CXML&#39; : Sets the &quot;External Description Resource (CXML)&quot; option</listitem>
</itemizedlist><para>Parameter CXML_redir_for_subjs is reserved for future use and should be set to null.</para>
<ulink url="">
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Controlling Link Typing through Virtuoso/PL</bridgehead>
<para>When executing a SPARQL query directly from Virtuoso/PL, the controls used by the /sparql and /fct UIs for CXML link styling are not available.
 To specify the required CXML link typing in Virtuoso/PL, set the connection variables SPARQL_CXML_redir_for_subjs and SPARQL_CXML_redir_for_hrefs.
 In the code extract below: </para>
<programlisting>  connection_set (&#39;SPARQL_CXML_redir_for_subjs&#39;, redir_for_subjs);
  connection_set (&#39;SPARQL_CXML_redir_for_hrefs&#39;, redir_for_hrefs);

  qry := &#39;sparql define output:format &quot;CXML;QRCODE&quot; define sql:describe-mode &quot;SPO&quot; describe ?s1 where { . . . } &#39;;
  sqls := &#39;00000&#39;;
  exec (qry, sqls, msg, vector(), 1, meta, result);
  . . .
</programlisting><para> variables redir_for_subjs and redir_for_hrefs take the same values as the CXML_redir_for_subjs and CXML_redir_for_hrefs query string parameters.
</para>
</ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></ulink></section></docbook>