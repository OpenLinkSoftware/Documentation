<docbook><section><title>VirtSpongerNanotation</title><para> </para>
<title>Virtuoso Sponger Nanotation User Guide</title>Virtuoso Sponger Nanotation User Guide
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Situation Analysis</bridgehead>
 Since the advent of blogging, it has been clear to everyone that posts require augmentation in order to truly function as rapid-fire meme vectors.
 For instance, could you imagine early blog posts without tagging?<para>Today, we&#39;ve evolved from early literal tagging (which didn&#39;t scale an iota) to wide use of @handles and #hastags.
 Basically, @handles are social network specific HTTP URIs that denote Agents (People, Organizations, and Bots) while #hashtags are HTTP URIs that denote Topics.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Problem</bridgehead>
 Looking at the picture above, in regards to productively encoding and decoding information via the World Wide Web medium, it should be obvious that @handles and #hashtags are basically the digital equivalents of nouns.
 And as a consequence, we are basically trying to replicate the power of natural language sentences without critical components such as verbs (connectors) and adjectives (classifiers).<bridgehead class="http://www.w3.org/1999/xhtml:h3">A Solution</bridgehead>
  Leverage the power of an existing language, based on open standards, that already delivers the power of natural language without being limited by the physical constraints of paper (as a mechanism for sentence persistence and exchange).<para>This is where RDF comes into play.
 It is an open standards based language for constructing digital sentences that pack the same (or even more power) its natural language equivalents.
 Through the power of RDF it is possible to create micro-annotations (aka.
 Nanotations) that are embeddable in any kind of text based documents.
 Naturally, the aforementioned claim doesn&#39;t apply to every RDF notation, which is why RDF-Turtle is the vehicle we&#39;ve chosen to unleash the full power of RDF and the Semantic Web it enables when digital sentences take the form of Linked Open Data.</para>
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">What is Nanotation?</bridgehead>
 Nanotation is a mechanism for using embedded digital sentences to enhance blog posts, forum discussion posts, tweets (and other micro-blogging posts), HTML, and plain text document.
 In addition, it turns each of the aforementioned document types into end-user oriented conduits for contributing data to public and/or private Linked Open Data clouds, on a piecemeal basis -- i.e., you turn curating and publishing Linked Open Data Cloud into a productive crowd-sourced jigsaw puzzle game.<bridgehead class="http://www.w3.org/1999/xhtml:h2">Why is it important?</bridgehead>
 Being able to say anything, about anything, whenever, and from wherever, in a manner that&#39;s both machine and human comprehensible has always sat at the very foundations of the Semantic Web Project&#39;s value proposition.
 Unfortunately, confusion about RDF -- the powerful language that drives the notion of a global Semantic Web -- lead to a general bottom-up misconception whereby most perceive it as a document content format rather that an abstract language (system of signs, syntax, and semantics) exploitable using a wide variety of notations.<bridgehead class="http://www.w3.org/1999/xhtml:h2">How do I use it?</bridgehead>
 Due to the compact nature of RDF-Turtle notation, it is possible to embed RDF statements into any text based content.
 The only requirements are as follows:<orderedlist spacing="compact"><listitem>Use the following as a marker for embedded RDF-Turtle based RDF statements: <programlisting>## Turtle Start 
## {Trutle-based-RDF-statements} 
## Turtle End ##
</programlisting></listitem>
<listitem>Honor the use of &lt;&gt; to indicate reference identifiers (absolute or relative) </listitem>
<listitem>Optionally treat @handle as an HTTP URIs that denote Agents -- for a given data space (e.g., Twitter, <ulink url="LinkedIn">LinkedIn</ulink>, Facebook, Google+ etc..) </listitem>
<listitem>Optionally tread #hashtag as an HTTP URI that denotes a Topic -- ditto .</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3">Basic Rules (authors and processing engines)</bridgehead>
<para> As per natural language sentences we have the following parts:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>Subject -- statement focal point </listitem>
<listitem>Predicate -- connection, association, link </listitem>
<listitem>Object -- value of the connection, association, link.</listitem>
</itemizedlist><para>Each sentence subject, predicate, object is denoted (named or referred to) using an identifier (word, phrase, or term).
 If you want to generate Linked Data that flows across data spaces your best bet is to denote (refer to) sentence subject, predicate, and object (optionally) using identifiers that function like terms -- by using HTTP URIs.</para>
<para>Use prefixes to shorten RDF-Turtle statements:</para>
<programlisting>@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
</programlisting><para> Enables statements such as:</para>
<programlisting> &lt;&gt; 
a foaf:Document .
</programlisting><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Examples</bridgehead>
<orderedlist spacing="compact"><listitem>Most basic Nanotation: <programlisting>&lt;&gt; a &lt;#Document&gt; .
&lt;&gt; &lt;#topic&gt; &lt;#Nanotation&gt;. 
</programlisting></listitem>
<listitem>More sophisticated Nanotation that leverages terms from existing vocabularies: <programlisting>&lt;&gt; a foaf:Document .
&lt;&gt; foaf:topic &lt;#Nanotation&gt;  .
</programlisting></listitem>
<listitem>More sophisticated Nanotation that leverages commas and semicolons for statement brevity e.g.
 when multiple sentences have a common Subject: <programlisting>&lt;&gt; 
a foaf:Document;
foaf:topic &lt;#Nanotation&gt;.
</programlisting></listitem>
<listitem>When multiple sentences have a common Subject and Predicate but varying list of Objects: <programlisting>&lt;&gt; 
a foaf:Document;
foaf:topic &lt;#Nanotation&gt;, &lt;#SemanticWeb&gt;, &lt;#LinkedData&gt;.
</programlisting></listitem>
<listitem>Incorporation of Pronouns into RDF sentence : <programlisting>&lt;&gt; a foaf:Document .
&lt;&gt; foaf:maker [a foaf:Person;
               foaf:name &quot;Kingsley Idehen&quot;  ] .
</programlisting></listitem>
<listitem>Processor (parser) hint markers that help Nanotation processors negate seriously mangled HTML content: <programlisting>## Turtle Start ##

&lt;&gt; 
a foaf:Document;
foaf:topic &lt;#Nanotation&gt;, &lt;#SemanticWeb&gt;, &lt;#LinkedData&gt;.

## Turtle End ##
</programlisting> </listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3">Nanotation Processor Usage</bridgehead>
<para> A nanotation processer is an application or service that&#39;s capable of consuming text content enhanced with RDF-Turtle based nanotations.
 Virtuoso&#39;s in-built Linked Data Transformation middleware (aka &quot;Sponger&quot;) is an example of an application that supports nanotation.
 Likewise, our URIBurner service which is a free public service driven by an instance of Virtuoso with the Sponger module enabled: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>When using your own instance of <ulink url="http://virtuoso.openlinksw.com">Virtuoso</ulink>, the Sponger service is invoked via the URL pattern: <programlisting>http://{cname-of-virtuoso-host-machine}/sponger
</programlisting></listitem>
<listitem>When using the public <ulink url="http://linkeddata.uriburner.com/">URIBurner service</ulink>, the Sponger services is invoked via the URL: <programlisting>http://linkeddata.uriburner.com/
</programlisting></listitem>
<listitem>Note: Either approach outlined above will lead you to an HTML page that contains an input field into which you can type or paste an HTTP-accessible document URL.
 Alternatively you can use the following URI patterns: <programlisting>http://{cname-of-virtuoso-host-machine}/about/html/{document-http-uri}
</programlisting></listitem>
</itemizedlist><para>In all cases, you will end up with an HTML document that includes RDF statements that describe the processed document in a manner that also reveals all the embedded nanotations.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Virtuoso Sponger Implementation Notes</bridgehead>
<para>The Sponger treats resources transferred over HTTP as a duality of both a container document and a primary entity.
 When a resource is deemed to be an HTML document, the document is treated as the primary entity.
 Otherwise, where the domain is well known, a custom extractor cartridge populates the primary entity with data arising from API calls and the HTML content is regarded as secondary, relegated to the container document.
 For example, G+ posts are recognized and the Sponger concentrates on presenting the timestamp, body, tags and links and other features of a post.</para>
<para>When sponging an HTTP resource, multiple extractor cartridges might be brought to bear.
 Consequently, there may be multiple triples containing the entity&#39;s content.</para>
<para>The Turtle Sniffer is implemented as a Metacartridge, i.e it runs after all the extractor cartridges have run, augmenting data in the graph.
 It uses SPARQL inference to collate predicates that constitute &quot;content&quot; for this purpose, along with the HTTP request content (if any), flattening each to plain text.</para>
<para>Currently, the list of potential content predicates is:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>bibo:content (e.g.
 arising from the HTML+Variants extractor cartridge) </listitem>
<listitem>bibo:abstract </listitem>
<listitem>oplgplus:annotation (used by Google+ for text when sharing items)</listitem>
</itemizedlist><para>For each of these contents, it checks if it matches the patterns:</para>
<programlisting>## Nanotation Start ## .... ## Nannotation End ##
</programlisting><para> </para>
<programlisting>## Turtle Start ## .... ## Turtle Stop ##
</programlisting><para> </para>
<programlisting>{.... } (note: only applies to tweets on Twitter)
</programlisting><para> If a content contains one or more nanotation blocks, each block is parsed in turn as Turtle; if not, it attempts to parse the content item as Turtle in entirety.</para>
<para> The HTTP document content is only inspected in case of no triples having been extracted by prior means.</para>
<para>Optionally (enabled by default) each triple may be reified, i.e an rdf:Statement entity created to describe its subject, predicate and object, so you can identify triples arising from nanotations as entities labelled &#39;Embedded Turtle Statement&#39; and a number in the graph.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h4">Domain-Aware Tag and User Expansion</bridgehead>
<para>The Turtle Sniffer expands the patterns <computeroutput>#word</computeroutput> and <computeroutput>@word</computeroutput> when they appear in URI (&lt;&gt;) or double quotes (&quot;&quot;), in the context of the domain of the URI being sponged.</para>
<para>For example, a Tweet containing the nanotation: </para>
<programlisting>## Nannotation Start ## 
&lt;@kidehen&gt; foaf:name &quot;Kingsley Idehen&quot; ; 
           foaf:knows &lt;@openlink&gt; ; 
           scot:has_tag &lt;#Data&gt; . 
## Nannotation End ##
</programlisting><para> will be expanded to a Turtle string:</para>
<programlisting>&lt;https://twitter.com/kidehen&gt; foaf:name &quot;Kingsley Idehen&quot; ;
  foaf:knows &lt;https://twitter.com/openlink&gt; ;
  scot:has_tag &lt;https://twitter.com/hashtag/Data#this&gt; .
</programlisting><para> We recognize custom URI formats for users and tags in the contexts of Facebook, Twitter, G+, <ulink url="LinkedIn">LinkedIn</ulink> and Delicious.</para>
<para>Note that the word must appear within quotes; this is to avoid confusion with Turtle&#39;s @prefix directive (which is not a user!) and problems that would be caused by performing similar expansions within a quoted sentence.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Live Examples</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="http://twitter.com/kidehen/status/493857326680776705">RDF statement about Privacy</ulink> ; </listitem>
<listitem><ulink url="http://twitter.com/kidehen/status/493848344590966785">RDFs usage re. property/predicate description</ulink> ; </listitem>
<listitem><ulink url="https://plus.google.com/112399767740508618350/posts/hNt1df5G7tk">owl:sameAs relation inserted into a Google+ Post</ulink> ; </listitem>
<listitem><ulink url="https://www.facebook.com/kidehen/posts/10152525312840751">heavy duty RDF statements in a Facebook post</ulink> ; </listitem>
<listitem><ulink url="http://twitter.com/kidehen/status/494089069995896832">another Facebook post that puts Ted Nelsons talk on documents and hypertext into contemporary context</ulink> . </listitem>
<listitem><ulink url="https://twitter.com/OpenLink/status/556128747297193985">A tweet reply demonstrating multiple embedded nanotation blocks and tags</ulink>.</listitem>
</itemizedlist><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Nanotation generated 5-Star Linked Open Data (via URIBurner - a Nanotation Processor) examples:</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="http://bit.ly/nanotations-from-2014-07-28">various Nanotations from 28th July 2014</ulink> ; </listitem>
<listitem><ulink url="http://bit.ly/nanotations-for-2014-07-27">ditto from 27th July 2014</ulink> ; </listitem>
<listitem><ulink url="http://bit.ly/utterances-on-twitter-2014-07-25-by-statement-subject">ditto from 25th July 2014</ulink> . </listitem>
<listitem><ulink url="http://linkeddata.uriburner.com/about/html/https://twitter.com/OpenLink/status/556128747297193985">A tweet reply demonstrating multiple embedded nanotation blocks and tags</ulink>.</listitem>
</itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2"> FCT Examples</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem>Nanotation based RDF statement that describes Nannotation: <ulink url="VirtSpongerNanotation/nanotation-example-about-nanotation.png"><figure><graphic fileref="VirtSpongerNanotation/nanotation-example-about-nanotation.png" /></figure></ulink> </listitem>
<listitem>Nanotation that represents a &quot;Hat Tip&quot; relationship type: <ulink url="VirtSpongerNanotation/nanotation-example-conceptual-graphs.png"><figure><graphic fileref="VirtSpongerNanotation/nanotation-example-conceptual-graphs.png" /></figure></ulink> </listitem>
<listitem>Nanotation generated RDF statements aggregated by Subject: <ulink url="VirtSpongerNanotation/nanotations-for-2014-07-28-aggregated-by-relation-subject.png"><figure><graphic fileref="VirtSpongerNanotation/nanotations-for-2014-07-28-aggregated-by-relation-subject.png" /></figure></ulink> </listitem>
<listitem>Nanotation generated RDF statements by Subject: <ulink url="VirtSpongerNanotation/nanotations-for-2014-07-28-by-relation-subject.png"><figure><graphic fileref="VirtSpongerNanotation/nanotations-for-2014-07-28-by-relation-subject.png" /></figure></ulink></listitem>
</itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2">Related</bridgehead>
 <itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="VirtSponger">Virtuoso Sponger RDFization Middleware</ulink> </listitem>
<listitem><ulink url="VirtSpongerRESTPatterns">Use Sponger Middleware via REST patterns</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeProgrammersGuide_Part3">Interact with Sponger Linked Data Middleware via REST patterns</ulink> </listitem>
<listitem><ulink url="VirtSpongerACL">Setup Virtuoso Sponger Access Control List (ACL)</ulink> </listitem>
</itemizedlist></section></docbook>