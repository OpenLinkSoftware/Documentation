<docbook><section><title>VOSArticleRDFandMappedBI</title><para> </para>
<title> Integrating Open Sources and Relational Data with SPARQL</title> Integrating Open Sources and Relational Data with SPARQL
<para>Orri Erling  (Program Manager, <ulink url="OpenLink">OpenLink</ulink> Virtuoso) and Ivan Mikhailov (Lead Developer, <ulink url="OpenLink">OpenLink</ulink> Virtuoso).</para>
<para><ulink url="OpenLink">OpenLink</ulink> Software, 10 Burlington Mall Road Suite 265 Burlington, MA 01803 U.S.A, {oerling,imikhailov}@openlinksw.com  WWW home page: <ulink url="http://www.openlinksw.com/">http://www.openlinksw.com/</ulink></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Abstract</bridgehead>
 We believe that the possibility to use SPARQL as a frontend to heterogeneous data without significant cost in performance or expressive power is key to RDF taking its rightful place as the <emphasis>lingua franca</emphasis> of data integration.
 To this effect, we demonstrate how RDF and SPARQL can tackle a mix of standard relational workload and data mining in public data sources.<para>We discuss extending SPARQL for business intelligence (BI) workloads and relate experiences on running SPARQL against relational and native RDF databases.
 We use the well known TPC H benchmark as our reference schema and workload.
 We define a mapping of the TPC H schema to RDF and restate the queries as BI extended SPARQL.
 To this effect, we define aggregation and nested queries for SPARQL.
 We demonstrate that it is possible to perform the TPC H workload restated in SPARQL against an existing RDBMS without loss of performance or expressivity and without changes to the RDBMS.
 Finally, we demonstrate how to combine TPC-H or XBRL financial reports with RDF data from CIA factbook and DBpedia.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Introduction and Motivation</bridgehead>
<para>RDF promises to be a top-level representation for data extracted or accessed or demand from any conceivable source.
 Thus, chief promise of RDF is in the field of information integration, analysis and discovery.
 Yet it is difficult to imagine any business reporting, let alone more complex information integration task that would not involve aggregating and grouping.</para>
<para>As a data access and data integration vendor, <ulink url="OpenLink">OpenLink</ulink> has a natural interest in seeing SPARQL succeed as a top level language for answering business questions on data mapped from any present day data warehouse or other repository.</para>
<para>For SPARQL to deliver on this potential, several extension and scalability issues have to be addressed.
These include: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>Expressive power of SPARQL must be at least on par with SQL.
 As of the    present, the SPARQL recommendation is lacking aggregation, grouping,    expressions in result sets, nested subqueries and full text support, to    name a few.
 All these are either part of SQL or universally available in    RDBMS, as in the case of full text.
 The baseline business intelligence    benchmark, TPC H, relies on these all, except for full text.
</listitem>
<listitem>Efficient mapping of SPARQL to relational queries against one or more    relational databases.
 SPARQL&#39;s promise is greatest in combining data    from diverse sources.
 Still, in cases where a straightforward    translation of SPARQL to SQL is possible, the performance should not be    much less than that of the relational back-end when accessed through    SQL.
</listitem>
<listitem>Scalability of RDF storage.
 Parallelization and clustering are needed    for scaling into the tens of billions of triples and beyond.</listitem>
</itemizedlist><para>We intend to demonstrate how we address all these questions with our Virtuoso product.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">The Data and Queries</bridgehead>
<para>We draw on a combination of real-world and synthetic data sets for the demonstration.
 In specific, we use the following:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>DBpedia; </listitem>
<listitem>US Census; </listitem>
<listitem>real world XBRL financial data mapped into RDF; </listitem>
<listitem>various Linking Open Data sets, such as Geonames and the CIA Factbook; </listitem>
<listitem>TPC H benchmark data, a scalable industry standard benchmark data set.</listitem>
</itemizedlist><para>The TPC H data is stored in relational form as well as as RDF triples.
 We demonstrate queries combining these data in novel ways.
 For example:</para>
<itemizedlist mark="bullet" spacing="compact"><listitem>comparing sales figures from the TPC H data with population and GDP figures from the CIA Factbook; </listitem>
<listitem>combining XBRL financial results with geography and DBpedia information on the same companies; </listitem>
<listitem>comparing two TPC H data sets, one as a relational database and one in RDF form.</listitem>
</itemizedlist><para>In addition to aggregate queries such as the above, we show navigation by following data links between these sets.</para>
<para>We also present loading and query times for data sets such as the LUBM benchmark data and the Uniprot data set.</para>
<para>The complete source code of the queries and data definitions and mappings is published at the <ulink url="OpenLink">OpenLink</ulink> web site at the time of the demonstration (<ulink url="http://demo.openlinksw.com/tpc-h/).">http://demo.openlinksw.com/tpc-h/).</ulink> The data itself is either linked open data or synthetic data that can be generated with generally available tools.
 Thus the things demonstrated are readily reproducible.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">SPARQL Extensions</bridgehead>
 We show how we have extended SPARQL with the following: <itemizedlist mark="bullet" spacing="compact"><listitem>Subqueries and derived tables.
</listitem>
<listitem>Aggregates, grouping and expressions in results.
</listitem>
<listitem>Syntax sugar for following chains of references, as in region of country of customer of order X.</listitem>
</itemizedlist><para>The below is the SPARQL version of Q2 from the TPC H queries.</para>
<programlisting>prefix tpcd: &lt;http://www.openlinksw.com/schemas/tpcd#&gt;
select
?supp+&gt;tpcd:acctbal
?supp+&gt;tpcd:name
?supp+&gt;tpcd:has_nation+&gt;tpcd:name as ?nation_name
?part+&gt;tpcd:partkey
?part+&gt;tpcd:mfgr
?supp+&gt;tpcd:address
?supp+&gt;tpcd:phone
?supp+&gt;tpcd:comment
from &lt;http://example.com/tpcd&gt;
where {
?ps a tpcd:partsupp ; tpcd:has_supplier ?supp ; tpcd:has_part ?part .
?supp+&gt;tpcd:has_nation+&gt;tpcd:has_region tpcd:name &#39;EUROPE&#39; .
?part tpcd:size 15 .
?ps tpcd:supplycost ?minsc .
{ select ?part min(?ps+&gt;tpcd:supplycost) as ?minsc
where {
?ps a tpcd:partsupp ;
tpcd:has_part ?part ; tpcd:has_supplier ?ms .
?ms+&gt;tpcd:has_nation+&gt;tpcd:has_region tpcd:name &#39;EUROPE&#39; .
} }
filter (?part+&gt;tpcd:type like &#39;%BRASS&#39;) }
order by
desc (?supp+&gt;tpcd:acctbal)
?supp+&gt;tpcd:has_nation+&gt;tpcd:name
?supp+&gt;tpcd:name
?part+&gt;tpcd:partkey
</programlisting><para> We notice a subquery used for determining the lowest supply cost for a part.
We also notice the pattern </para>
<programlisting>{ ?ms+&gt;tpcd:has_nation+&gt;tpcd:has_region tpcd:name &#39;EUROPE&#39; }
</programlisting><para> which is a shorthand for </para>
<programlisting>{ ?ms tpcd:has_nation ?t1 . ?t1 tpcd:has_region ?t2 .
?t2 tpcd:name &quot;EUROPE&quot; }
</programlisting><para> The notation with +&gt; differs from a join path expressed with [] in that these are allowed in expressions and that common subpaths are guaranteed to be included only once in the evaluation.
 Thus</para>
<programlisting>sum ( ?c+&gt;has_order+&gt;has_line+&gt;l_extendedprice *
(1 - ?c+&gt;has_order+&gt;has_line-&gt;l_discount) )
</programlisting><para> evaluates to the sum of each line&#39;s extendedprice multiplied by the line&#39;s discount whereas</para>
<programlisting>sum ( ?extprice * (1 - ?discount))
...
?c has_order [ has_line [ l_extendedprice ?extprice ] ] .
?c has_order [ has_line [ l_discount ?discount ] ]
</programlisting><para> would mean the sum of every price times every discount.</para>
<para>For brevity we have omitted the declarations for mapping the TPC H schema to its RDF equivalent.
 The mapping is straightforward, with each column mapping to a predicate and each table to a class.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Linked Data</bridgehead>
<para>Virtuoso has an integrated HTTP server used for providing web services end points and web app hosting.
 For presenting the TPC H data as linked data, we have added a virtual collection which presents the data as dereferenceable URIs, redirecting the dereference to a describe query against the SPARQL end point.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">Performance of Mapping</bridgehead>
<para>As a baseline, we take the performance of Virtuoso executing TPC H queries in SQL against Oracle.
 There Virtuoso parses the SQL query, makes a distributed execution plan, finds out the whole query can go to Oracle and finally rewrites the query as a single Oracle SQL query.
 This takes an average of 7 ms per query, including time to send and retrieve results.
 The rest of the real time is spent by Oracle.</para>
<para>Adding the SPARQL to SQL layer on top of this adds another 9 ms to each query.
 The cost of SPARQL is negligible in the cases where the resulting SQL query passes as a single unit to Oracle.</para>
<para>We note that the single most important factor in any distributed query performance as opposed to local query performance is the number of synchronous round trips between the processes involved.</para>
<para>Some SPARQL queries make a suboptimal SQL that does not pass as a unit to Oracle (even if it should), so the execution is divided between Virtuoso and Oracle and there is significant cost from message latency.
 Fixing this is a current work in progress.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">System Demonstrated</bridgehead>
<para>The demonstration databases run on a cluster of X86-64 servers either at our offices or Amazon&#39;s EC2.
 Smaller scale local demonstration can be run on laptops with the same software but less data.</para>
<para>The software demonstrated includes: </para>
<itemizedlist mark="bullet" spacing="compact"><listitem>Virtuoso 6.0 RDBMS and triple store.
</listitem>
<listitem>Oracle 10G RDBMS accessed both directly and through Virtuoso&#39;s RDF to relational mapping.
</listitem>
<listitem>Diverse RDF browsers (Tabulator, <ulink url="OpenLink">OpenLink</ulink> RDF Browser and Zitgist).</listitem>
</itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h2">Conclusions</bridgehead>
<para>Mapping of relational data to RDF has existed for a long time [6][7].
 The work shown here represents its coming of age.
 We can tackle a standard SQL workload without loss of performance or added complexity.
 Basically, we can bring any data warehouse to the world of linked data, giving dereferenceable URI&#39;s and SPARQL while retaining the performace of SQL.</para>
<para>We would point out that bringing SPARQL on par with SQL for decision support queries is not aimed at replacing SQL but at making SPARQL capable of fulfilling its role as a language for integration.</para>
<para>Indeed, we retain all of SPARQL&#39;s and RDF&#39;s flexibility for uniquely identifying entities, for abstracting away different naming conventions, layouts and types of primary and foreign keys and so forth.</para>
<para>In the context of mapping relational data to RDF, we can map several instances of comparable but different schemes to the common terminology and couch all our queries within this terminology.
 Further, we can join from this world of mapped data to native RDF data, such as the data in the Linking Open Data project.</para>
<para>Once we have demonstrated that performance or expressivity barriers do not cripple SPARQL when performing traditional SQL tasks, we have removed a significant barrier from enterprise adoption of RDF and open data.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">References</bridgehead>
 <orderedlist spacing="compact"><listitem>W3C RDF Data Access Working Group: SPARQL Query Language for RDF.
 <ulink url="http://www.w3.org/TR/rdf-sparql-query/">http://www.w3.org/TR/rdf-sparql-query/</ulink> </listitem>
<listitem>Transaction Processing Performance Council: TPC-H  a Decision Support Bench-mark.
 <ulink url="http://www.tpc.org/tpch/">http://www.tpc.org/tpch/</ulink> </listitem>
<listitem>Linking Open Data Project.
 <ulink url="http://linkeddata.org/">http://linkeddata.org/</ulink> </listitem>
<listitem>DBpedia:  A Community Effort to Extract Structured Information From Wikipedia.
 <ulink url="http://dbpedia.org/">http://dbpedia.org/</ulink> </listitem>
<listitem>XBRL - Extensible Business Reporting Language.
 <ulink url="http://www.xbrl.org/Home/">http://www.xbrl.org/Home/</ulink> </listitem>
<listitem>Andy Seaborn: Counting and GROUP BY in ARQ.
 <ulink url="http://seaborne.blogspot.com/2007/09/counting-and-group-by.html">http://seaborne.blogspot.com/2007/09/counting-and-group-by.html</ulink> </listitem>
<listitem>Christian Weiske, S?oren Auer: Implementing SPARQL Support for Relational Databases and Possible Enhancements.
 Proceedings of the 1st Conference on Social Semantic Web.
 Leipzig (CSSW 2007), SABRE.
 LNI 113 GI 2007.
 Bonner Kollen Verlag, ISBN 978-3-88579-207-9.
 <ulink url="http://www.informatik.uni-leipzig.de/auer/publication/sparql-enhancements.pdf">http://www.informatik.uni-leipzig.de/auer/publication/sparql-enhancements.pdf</ulink> </listitem>
<listitem>Orri Erling, Ivan Mikhailov: Adapting an ORDBMS for RDF Storage and Mapping.
 Proceedings of the 1st Conference on Social Semantic Web.
 Leipzig (CSSW 2007), SABRE.
 LNI 113 GI 2007.
 Bonner Kollen Verlag, ISBN 978-3-88579-207-9</listitem>
</orderedlist></section></docbook>