<docbook><section><title>VirtRDFViewTutorialScript</title><bridgehead class="http://www.w3.org/1999/xhtml:h2">Virtuoso Tutorial Linked Data Views Script to set up your own instance</bridgehead>
<programlisting>use DB;

create procedure DB.DBA.exec_no_error (in expr varchar)
{
  declare state, message, meta, result any;
  exec(expr, state, message, vector(), 0, meta, result);
}
;

--GRANT SPARQL_UPDATE TO &quot;SPARQL&quot;;
GRANT SELECT ON &quot;WS&quot;.&quot;WS&quot;.&quot;SYS_DAV_RES&quot; TO &quot;SPARQL&quot;;
GRANT SELECT ON &quot;WS&quot;.&quot;WS&quot;.&quot;SYS_DAV_COL&quot; TO &quot;SPARQL&quot;;
GRANT SELECT ON &quot;WS&quot;.&quot;WS&quot;.&quot;SYS_DAV_PROP&quot; TO &quot;SPARQL&quot;;
GRANT SELECT ON &quot;DB&quot;.&quot;DBA&quot;.&quot;SYS_USERS&quot; TO &quot;SPARQL&quot;;
GRANT SELECT ON &quot;DB&quot;.&quot;DBA&quot;.&quot;TUT_SEARCH&quot; TO &quot;SPARQL&quot;;

create function DB.DBA.TUT_ID_TO_IRI(in _prefix varchar,in _id varchar)
{
  declare iri, uriqa_host any;
  uriqa_host := cfg_item_value(virtuoso_ini_path(), &#39;URIQA&#39;,&#39;DefaultHost&#39;);
  iri := &#39;http://&#39; || uriqa_host || &#39;/tutorial_view/&#39; || _prefix || &#39;/&#39; || _id || &#39;#this&#39;;
  return sprintf (&#39;http://%s/DAV/home/tutorial_view/RDFData/All/iid%%20(%d).rdf&#39;, uriqa_host, iri_id_num (iri_to_id (iri)));
}
;

create function DB.DBA.TUT_IRI_TO_ID(in _iri varchar)
{
    declare parts any;
    parts := sprintf_inverse (_iri, &#39;http://%s/DAV/home/tutorial_view/RDFData/All/iid (%d).rdf&#39;, 1 );
    if (parts is not null)
    {
        declare uriqa_host, iri any;
        uriqa_host := cfg_item_value(virtuoso_ini_path(), &#39;URIQA&#39;,&#39;DefaultHost&#39;);
        if (parts[0] = uriqa_host)
        {
            iri := id_to_iri(iri_id_from_num(parts[1]));
            parts := sprintf_inverse (iri, &#39;http://%s/tutorial_view/%s/%s#this&#39;, 1 );
            if (parts[0] = uriqa_host)
            {
                return parts[2];
            }
        }
    }
    return NULL;
}
;

create function DB.DBA.POST_IRI (in _id integer) returns varchar
{
    return TUT_ID_TO_IRI(&#39;Post&#39;, cast(_id as varchar));
}
;

create function DB.DBA.POST_IRI_INVERSE (in _iri varchar) returns integer
{
    return atoi(DB.DBA.TUT_IRI_TO_ID(_iri));
};

create function DB.DBA.SECTION_IRI (in _id integer) returns varchar
{
    return TUT_ID_TO_IRI(&#39;Section&#39;, cast(_id as varchar));
}
;

create function DB.DBA.SECTION_IRI_INVERSE (in _iri varchar) returns integer
{
    return atoi(DB.DBA.TUT_IRI_TO_ID(_iri));
};

grant execute on DB.DBA.POST_IRI to &quot;SPARQL&quot;;
grant execute on DB.DBA.POST_IRI_INVERSE to &quot;SPARQL&quot;;
grant execute on DB.DBA.COL_IRI to &quot;SPARQL&quot;;
grant execute on DB.DBA.COL_IRI_INVERSE to &quot;SPARQL&quot;;

SPARQL drop quad map graph iri(&quot;http://^{URIQADefaultHost}^/tutorial_view&quot;) .
;

SPARQL drop quad map virtrdf:tutorial .
;

SPARQL
prefix tutorial: &lt;http://demo.openlinksw.com/schemas/tutorial#&gt;
prefix bibo: &lt;http://purl.org/ontology/bibo/&gt;
prefix oplsioc: &lt;http://www.openlinksw.com/schemas/oplsioc#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
prefix sioc: &lt;http://rdfs.org/sioc/ns#&gt;
prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt;
create iri class tutorial:Post &quot;http://^{URIQADefaultHost}^/tutorial_view/Post/%d/%U#this&quot; (in post_id integer not null, in post_name varchar not null) .
create iri class tutorial:Section &quot;http://^{URIQADefaultHost}^/tutorial_view/Section/%d/%U#this&quot; (in col_id integer not null, in col_name varchar not null) .
create iri class tutorial:DocPath &quot;http://^{URIQADefaultHost}^%U#this&quot; (in prop_name varchar not null) .
;

SPARQL
prefix tutorial: &lt;http://demo.openlinksw.com/schemas/tutorial#&gt;
prefix bibo: &lt;http://purl.org/ontology/bibo/&gt;
prefix oplsioc: &lt;http://www.openlinksw.com/schemas/oplsioc#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
prefix sioc: &lt;http://rdfs.org/sioc/ns#&gt;
prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt;
create iri class tutorial:post_iri using
    function DB.DBA.POST_IRI (in customer_id integer) returns varchar,
    function DB.DBA.POST_IRI_INVERSE (in customer_iri varchar) returns integer.
create iri class tutorial:section_iri using
    function DB.DBA.SECTION_IRI (in customer_id integer) returns varchar,
    function DB.DBA.SECTION_IRI_INVERSE (in customer_iri varchar) returns integer.
;

SPARQL
prefix tutorial: &lt;http://demo.openlinksw.com/schemas/tutorial#&gt;
prefix bibo: &lt;http://purl.org/ontology/bibo/&gt;
prefix oplsioc: &lt;http://www.openlinksw.com/schemas/oplsioc#&gt;
prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
prefix sioc: &lt;http://rdfs.org/sioc/ns#&gt;
prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt;
alter quad storage virtrdf:DefaultQuadStorage
from WS.WS.SYS_DAV_RES as resources text literal RES_CONTENT
from WS.WS.SYS_DAV_COL as collections
from DB.DBA.SYS_USERS as users
where (^{collections.}^.COL_ID = ^{resources.}^.RES_COL)
where (^{resources.}^.RES_FULL_PATH LIKE  &#39;/DAV/VAD/tutorial/%&#39;)
where (DB.DBA.DAV_SEARCH_PATH(^{collections.}^.COL_ID, &#39;c&#39;) LIKE &#39;/DAV/VAD/tutorial/%&#39;)
{
        create virtrdf:tutorial as graph iri (&quot;http://^{URIQADefaultHost}^/tutorial_view&quot;) option (exclusive)
        {
                tutorial:Post (resources.RES_ID, resources.RES_NAME)
                        a tutorial:Post
                                as virtrdf:tutPost-RES_ID ;
                        a foaf:Document
                                as virtrdf:tutsiocPost-RES_ID;
                        a bibo:Article
                                as virtrdf:tutBiboPost-RES_ID ;
                        foaf:primaryTopic tutorial:Post (resources.RES_ID, resources.RES_NAME) ;
                        bibo:identifier resources.RES_NAME
                                as virtrdf:tutPost-RES_NAME ;
                        bibo:author users.U_NAME
                                where (^{resources.}^.RES_OWNER = ^{users.}^.U_ID)
                                as virtrdf:tutPost-RES_OWNER ;
                        tutorial:belongs_to_section tutorial:Section(collections.COL_ID, collections.COL_NAME)
                                where (^{resources.}^.RES_COL = ^{collections.}^.COL_ID)
                                as virtrdf:tutPost-RES_COL ;
                        sioc:content resources.RES_CONTENT
                                as virtrdf:tutPost-RES_CONTENT ;
                        sioc:description resources.RES_NAME
                                as virtrdf:tutsiocPost-RES_NAME ;
                        tutorial:type resources.RES_TYPE
                                as virtrdf:tutPost-RES_TYPE ;
                        bibo:presentedAt resources.RES_CR_TIME
                                as virtrdf:tutPost-RES_CR_TIME ;
                        bibo:url tutorial:DocPath(resources.RES_FULL_PATH)
                                as virtrdf:tutPost-RES_FULL_PATH ;
                        rdfs:isDefinedBy tutorial:post_iri (resources.RES_ID) ;
                        rdfs:isDefinedBy tutorial:Post (resources.RES_ID, resources.RES_NAME) ;
                        rdfs:seeAlso tutorial:Section(collections.COL_ID, collections.COL_NAME)
                                where (^{resources.}^.RES_COL = ^{collections.}^.COL_ID)
                                as virtrdf:tutPost-RES_COL2.

                tutorial:DocPath(resources.RES_FULL_PATH)
                        a tutorial:DocPath
                                as virtrdf:tutDocPath-RES_FULL_PATH .

                tutorial:Section (collections.COL_ID, collections.COL_NAME)
                        a tutorial:Section
                                as virtrdf:tutSection-COL_ID ;
                        a sioc:Container
                                as virtrdf:tutsiocSection-COL_ID ;
                        a bibo:Collection
                                as virtrdf:tutBiboSection-COL_ID ;
                        bibo:identifier collections.COL_NAME
                                as virtrdf:tutSection-COL_NAME ;
                        bibo:author users.U_NAME
                                where (^{collections.}^.COL_OWNER = ^{users.}^.U_ID)
                                as virtrdf:tutSection-COL_OWNER ;
                        rdfs:isDefinedBy tutorial:section_iri (collections.COL_ID) ;
                        rdfs:isDefinedBy tutorial:Section (collections.COL_ID, collections.COL_NAME) .

                tutorial:Section (collections.COL_ID, collections.COL_NAME)
                        sioc:is_container_of
                        tutorial:Post(resources.RES_ID, resources.RES_NAME)
                        where (^{resources.}^.RES_COL = ^{collections.}^.COL_ID)
                        as virtrdf:tutsiocSection-COL_ID2 .

        } .
} .
;

delete from db.dba.url_rewrite_rule_list where urrl_list like &#39;tutorial_%&#39;;
delete from db.dba.url_rewrite_rule where urr_rule like &#39;tutorial_%&#39;;

create procedure tutorial_rdf_doc (in path varchar)
{
  declare r any;
  r := regexp_match (&#39;[^/]*\x24&#39;, path);
  return r||&#39;#this&#39;;
};

create procedure tutorial_html_doc (in path varchar)
{
  declare r any;
  r := regexp_match (&#39;[^/]*#&#39;, path);
  return subseq (r, 0, length (r)-1);
};

DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    &#39;tutorial_rule2&#39;,
    1,
    &#39;(/[^#]*)&#39;,
    vector(&#39;path&#39;),
    1,
    &#39;/sparql?query=CONSTRUCT+{+%%3Chttp%%3A//^{URIQADefaultHost}^%U%%23this%%3E+%%3Fp+%%3Fo+}+FROM+%%3Chttp%%3A//^{URIQADefaultHost}^/tutorial_view%%3E+WHERE+{+%%3Chttp%%3A//^{URIQADefaultHost}^%U%%23this%%3E+%%3Fp+%%3Fo+}&amp;format=%U&#39;,
    vector(&#39;path&#39;, &#39;path&#39;, &#39;*accept*&#39;),
    null,
    &#39;(text/rdf.n3)|(application/rdf.xml)&#39;,
    0,
    null
    );

--DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
--    &#39;tutorial_rule1&#39;,
--    1,
--    &#39;(/[^#]*)&#39;,
--    vector(&#39;path&#39;),
--    1,
--    &#39;/rdfbrowser/index.html?uri=http%%3A//^{URIQADefaultHost}^%U%%23this&#39;,
--    vector(&#39;path&#39;),
--    null,
--    &#39;(text/html)|(\\*/\\*)&#39;,
--    0,
--    303
--    );

DB.DBA.exec_no_error(&#39;
DB.DBA.URLREWRITE_DROP_RULELIST (\&#39;tutorial_rule_list1\&#39;)
&#39;);

DB.DBA.exec_no_error(&#39;
DB.DBA.URLREWRITE_DROP_RULE (\&#39;tutorial_rule1\&#39;)
&#39;);


DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    &#39;tutorial_rule3&#39;,
    1,
    &#39;(/[^#]*)/\x24&#39;,
    vector(&#39;path&#39;),
    1,
    &#39;%s&#39;,
    vector(&#39;path&#39;),
    null,
    null,
    0,
    null
    );

create procedure DB.DBA.REMOVE_TUT_RDF_DET()
{
  declare colid int;
  colid := DAV_SEARCH_ID(&#39;/DAV/home/tutorial_view/&#39;, &#39;C&#39;);
  if (colid &lt; 0)
    return;
  update WS.WS.SYS_DAV_COL set COL_DET=null where COL_ID = colid;
}
;

DB.DBA.REMOVE_TUT_RDF_DET();

drop procedure DB.DBA.REMOVE_TUT_RDF_DET;

create procedure DB.DBA.TUT_MAKE_RDF_DET()
{
    declare uriqa_str varchar;
    uriqa_str := cfg_item_value(virtuoso_ini_path(), &#39;URIQA&#39;,&#39;DefaultHost&#39;);
    uriqa_str := &#39;http://&#39; || uriqa_str || &#39;/tutorial_view&#39;;
    DB.DBA.&quot;RDFData_MAKE_DET_COL&quot; (&#39;/DAV/home/tutorial_view/RDFData/&#39;, uriqa_str, NULL);
    VHOST_REMOVE (lpath=&gt;&#39;/tutorial_view/data/rdf&#39;);
    DB.DBA.VHOST_DEFINE (lpath=&gt;&#39;/tutorial_view/data/rdf&#39;, ppath=&gt;&#39;/DAV/home/tutorial_view/RDFData/All/&#39;, is_dav=&gt;1, vsp_user=&gt;&#39;dba&#39;);
}
;

DB.DBA.TUT_MAKE_RDF_DET();

drop procedure DB.DBA.TUT_MAKE_RDF_DET;

-- procedure to convert path to DET resource name
create procedure DB.DBA.TUT_DET_REF (in par varchar, in fmt varchar, in val varchar)
{
  declare res, iri any;
  declare uriqa_str varchar;
  uriqa_str := cfg_item_value(virtuoso_ini_path(), &#39;URIQA&#39;,&#39;DefaultHost&#39;);
  uriqa_str := &#39;http://&#39; || uriqa_str || &#39;/tutorial_view&#39;;
  iri := uriqa_str || val;
  res := sprintf (&#39;iid (%d).rdf&#39;, iri_id_num (iri_to_id (iri)));
  return sprintf (fmt, res);
}
;

DB.DBA.URLREWRITE_CREATE_REGEX_RULE (&#39;tutorial_rdf&#39;, 1,
    &#39;/tutorial_view/(.*)&#39;, vector(&#39;path&#39;), 1,
    &#39;/tutorial_view/data/rdf/%U&#39;, vector(&#39;path&#39;),
    &#39;DB.DBA.TUT_DET_REF&#39;,
    &#39;application/rdf.xml&#39;,
    2,
    303);

DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    &#39;tutorial_rule4&#39;,
    1,
    &#39;/schemas/tutorial#(.*)&#39;,
    vector(&#39;path&#39;),
    1,
    &#39;/sparql?query=DESCRIBE%20%3Chttp%3A//demo.openlinksw.com/schemas/tutorial%23%U%3E%20FROM%20%3Chttp%3A//demo.openlinksw.com/schemas/TutOntology/1.0/%3E&#39;,
    vector(&#39;path&#39;),
    null,
    &#39;(text/rdf.n3)|(application/rdf.xml)&#39;,
    0,
    null
    );

DB.DBA.URLREWRITE_CREATE_RULELIST (
    &#39;tutorial_rule_list1&#39;,
    1,
    vector (
                &#39;tutorial_rule2&#39;,
                &#39;tutorial_rule3&#39;,
                &#39;tutorial_rule4&#39;,
                &#39;tutorial_rdf&#39;
          ));


VHOST_REMOVE (lpath=&gt;&#39;/tutorial_view&#39;);
DB.DBA.VHOST_DEFINE (lpath=&gt;&#39;/tutorial_view&#39;, ppath=&gt;&#39;/DAV/home/tutorial_view/&#39;, vsp_user=&gt;&#39;dba&#39;, is_dav=&gt;1, def_page=&gt;&#39;sfront.vspx&#39;,
          is_brws=&gt;0, opts=&gt;vector (&#39;url_rewrite&#39;, &#39;tutorial_rule_list1&#39;));

create procedure DB.DBA.LOAD_TUT_ONTOLOGY_FROM_DAV()
{
  declare content1, urihost varchar;
  whenever not found goto none;
  select cast (RES_CONTENT as varchar) into content1 from WS.WS.SYS_DAV_RES where RES_FULL_PATH = &#39;/DAV/VAD/tutorial/tutorial.owl&#39;;
  DB.DBA.RDF_LOAD_RDFXML (content1, &#39;http://demo.openlinksw.com/schemas/tutorial#&#39;, &#39;http://demo.openlinksw.com/schemas/TutOntology/1.0/&#39;);
  urihost := cfg_item_value(virtuoso_ini_path(), &#39;URIQA&#39;,&#39;DefaultHost&#39;);
  if (urihost = &#39;demo.openlinksw.com&#39;)
  {
    DB.DBA.VHOST_REMOVE (lpath=&gt;&#39;/schemas/tutorial&#39;);
    DB.DBA.VHOST_DEFINE (lpath=&gt;&#39;/schemas/tutorial&#39;, ppath=&gt;&#39;/DAV/VAD/tutorial/tutorial.owl&#39;, vsp_user=&gt;&#39;dba&#39;, is_dav=&gt;1, is_brws=&gt;0);
    DB.DBA.VHOST_REMOVE (lpath=&gt;&#39;/schemas/tutorial#&#39;);
    DB.DBA.VHOST_DEFINE (lpath=&gt;&#39;/schemas/tutorial#&#39;, ppath=&gt;&#39;/DAV/VAD/tutorial/tutorial.owl&#39;, vsp_user=&gt;&#39;dba&#39;, is_dav=&gt;1, is_brws=&gt;0);
  }
  none:
  ;
};

DB.DBA.LOAD_TUT_ONTOLOGY_FROM_DAV();

drop procedure DB.DBA.LOAD_TUT_ONTOLOGY_FROM_DAV;

create procedure DB.DBA.LOAD_TUT_ONTOLOGY_FROM_DAV2()
{
  declare urihost varchar;
 whenever not found goto none;
  sparql base &lt;http://demo.openlinksw.com/schemas/tutorial#&gt; load bif:concat (&quot;http://&quot;, bif:registry_get(&quot;URIQADefaultHost&quot;), &quot;/DAV/VAD/tutorial/tutorial.owl&quot;)
   into graph &lt;http://demo.openlinksw.com/schemas/TutOntology/1.0/&gt;;
  urihost := cfg_item_value(virtuoso_ini_path(), &#39;URIQA&#39;,&#39;DefaultHost&#39;);
  if (urihost = &#39;demo.openlinksw.com&#39;)
  {
    DB.DBA.VHOST_REMOVE (lpath=&gt;&#39;/schemas/tutorial&#39;);
    DB.DBA.VHOST_DEFINE (lpath=&gt;&#39;/schemas/tutorial&#39;, ppath=&gt;&#39;/DAV/VAD/tutorial/tutorial.owl&#39;, vsp_user=&gt;&#39;dba&#39;, is_dav=&gt;1, is_brws=&gt;0);
    DB.DBA.VHOST_REMOVE (lpath=&gt;&#39;/schemas/tutorial#&#39;);
    DB.DBA.VHOST_DEFINE (lpath=&gt;&#39;/schemas/tutorial#&#39;, ppath=&gt;&#39;/DAV/VAD/tutorial/tutorial.owl&#39;, vsp_user=&gt;&#39;dba&#39;, is_dav=&gt;1, is_brws=&gt;0);
  }
  none:
  ;
};

--DB.DBA.LOAD_TUT_ONTOLOGY_FROM_DAV2();

drop procedure DB.DBA.LOAD_TUT_ONTOLOGY_FROM_DAV2;
</programlisting><para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">References</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="SIOCRefTutorial">Virtuoso Tutorials SIOC Reference</ulink> </listitem>
</itemizedlist></section></docbook>