<docbook><section><title>textsample</title><para>DE3A857A5FFB11DA923AF0924C194AED Cluster Main -- Sample code used in the Text Indexing and Filtering article</para>
<para> create table news (n_id int identity (start with 1), n_date datetime, n_text xmltype,   n_source varchar, n_title varchar,   primary key (n_id));</para>
<para> create text xml index on news (n_text) with key n_id clustered with (n_date, n_source, n_title);</para>
<para>create text trigger on news (n_text);</para>
<para>create procedure news_download (in url varchar) {   declare cnt any;   declare xt, xp any;   declare l int;</para>
<para>  cnt := http_client (url);   xt := xml <emphasis>tree_doc (cnt);</emphasis></para>
<para>  xp := xpath_eval (&#39;[xmlns:atom=&quot;<ulink url="http://www.w3.org/2005/Atom">http://www.w3.org/2005/Atom</ulink>&quot;]  //entry&#39;, xt, 0);   l := length (xp);</para>
<para>  for (declare i int, i := 0; i &lt; l; i := i + 1)     {       declare title, link, dt varchar;       title := xpath_eval (&#39;[xmlns:atom=&quot;<ulink url="http://www.w3.org/2005/Atom">http://www.w3.org/2005/Atom</ulink>&quot;] ./atom:title/text()&#39;, xp[i]);       dt := cast (xpath_eval (&#39;[xmlns:atom=&quot;<ulink url="http://www.w3.org/2005/Atom">http://www.w3.org/2005/Atom</ulink>&quot;] ./atom:published/text()&#39;, xp[i]) as varchar);       link := xpath_eval (&#39;[xmlns:atom=&quot;<ulink url="http://www.w3.org/2005/Atom">http://www.w3.org/2005/Atom</ulink>&quot;] ./atom:id/text()&#39;, xp[i]);       if (not exists (select 1 from news where n_source = link)) 	insert into news (n_date, n_text, n_source, n_title)         values (dt, xml_cut (xp[i]), link, title);       commit work;     } }</para>
<para>news_download (&#39;<ulink url="http://virtuoso.openlinksw.com/blog/gems/atom.xml&quot;);">http://virtuoso.openlinksw.com/blog/gems/atom.xml&#39;);</ulink></para>
<para>select * from news where contains (n_text, &#39;database&#39;);</para>
<para>select search_excerpt (vector (&#39;database&#39;), cast (n_text as varchar), 10000, 500, 80) from news where contains (n_text, &#39;database&#39;);</para>
<para>create procedure  vt <emphasis>words_1 (in tree any, inout res any) {   if (isstring (tree))     {       res := vector_concat (res, vector (tree));     }   else if (isarray (tree))     {       foreach (any elt in tree) do 	vt_words_1 (elt, res);     } }</emphasis></para>
<para>create function vt_words (in q varchar) returns varchar array {   declare v any;   v := vector ();   vt <emphasis>words_1 (vt_parse (q), v);   return v; }</emphasis></para>
<para> select search_excerpt (vt_words(&#39;&quot;open source&quot;&#39;), cast (n_text as varchar), 10000, 500, 80) from  news where contains (n_text, &#39;&quot;open source&quot;&#39;);</para>
<para>Select n_id, n_title, n_source from news where contains (n_text, &#39;openlink&#39;, offband, n_title, offband, n_source);</para>
<para>select n_title from news where xcontains (n_text, &#39;[xmlns:atom=&quot;<ulink url="http://www.w3.org/2005/Atom">http://www.w3.org/2005/Atom</ulink>&quot;] //atom:title[text-contains (., &quot;virtuoso&quot;)]&#39;);</para>
<para>select search_excerpt (vt_words (&#39;&quot;open source&quot;&#39;), cast (n_text as varchar), 10000, 500, 90) from (select top 5 n_id from news where contains (n_text, &#39;&quot;open source&quot;&#39;, offband, n_date) order by n_date desc) f, news n where f.n_id = n.n_id option (order);</para>
<para>select search_excerpt (vt_words (&#39;&quot;open source&quot;&#39;), cast (n_text as varchar), 10000, 500, 90) from (select top 1, 5 n_id from news where contains (n_text, &#39;&quot;open source&quot;&#39;, offband, n_date) order by n_date desc) f, news n where f.n_id = n.n_id option (order);</para>
<para> tt <emphasis>query_news (&#39;&quot;open source&quot;&#39;, 0, &#39;Article on open source software&#39;, &#39;john@example.com&#39;); tt_query_news (&#39;virtuoso&#39;, 1, &#39;Article on Virtuoso software&#39;, &#39;mary@example.com&#39;);</emphasis></para>
<para>delete from news;</para>
<para>news_download (&#39;<ulink url="http://virtuoso.openlinksw.com/blog/gems/atom.xml&quot;);">http://virtuoso.openlinksw.com/blog/gems/atom.xml&#39;);</ulink></para>
<para>select * from news <emphasis>n_text_hit;</emphasis></para>
<para>select search_excerpt (vt_words (tt_query), cast (n_text as varchar), 10000, 400, 80), tt_query, tt_comment, tth_notify from news, news <emphasis>n_text_hit, news_n_text_query    where n_id = tth_d_id and tt_id = tth_t_id;</emphasis></para>
</section></docbook>