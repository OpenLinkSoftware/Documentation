%META:TOPICPARENT{name="OATDOCIndex"}%
---+ rotator.js

Creates a set of 'rotating' elements, which are cyclically displayed in an infinite fashion (1, 2, 3, 1, 2 ...).

%TOC%

---++ Objects

---+++ OAT.Rotator(panelX, panelY, options, callback)

Creates the <tt>Rotator</tt> object. Its elements will have width of <tt>panelX</tt> and height of <tt>panelY</tt>.<tt>Callback</tt> will be executed every time rotation pauses. Parameter <tt>options</tt> is an object of the following properties:

   * <tt>*delay*</tt> - rotation speed (number)
   * <tt>*step*</tt> - animation smoothness (number)
   * <tt>*numLeft*</tt> - how many elements should be rotated before shifting the first one to the end (number)
   * <tt>*pause*</tt> - delay after one animation round (number)
   * <tt>*type*</tt> - <tt>OAT.RotatorData.TYPE_</tt> constant, specifies an animation direction (see [[#Constants][Constants]] section)

---++ Methods

---+++ OAT.Rotator.addPanel(element)

Adds a new <tt>element</tt> to rotating set.

---+++ OAT.Rotator.start()      

Starts the rotation process.

---++ Constants

---+++ OAT.RotatorData.TYPE_

   * <tt><b>OAT.RotatorData.TYPE_LEFT</b></tt> - ToBeDone
   * <tt><b>OAT.RotatorData.TYPE_RIGHT</b></tt> - ToBeDone
   * <tt><b>OAT.RotatorData.TYPE_BOTTOM</b></tt> - ToBeDone
   * <tt><b>OAT.RotatorData.TYPE_TOP</b></tt> - ToBeDone

---++ CSS classes

---+++ .rotator

ToBeDone

---++ Example

<verbatim>
var r = new OAT.Rotator(200, 200, {type:OAT.Rotator.TYPE_RIGHT}, function(){});
r.addPanel("div1");
r.addPanel("div2");
r.addPanel("div3");
r.start();
</verbatim>

CategoryDocumentation CategoryOAT CategoryOpenSource CategoryToBeDone
