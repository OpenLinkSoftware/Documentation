%META:TOPICPARENT{name="OATDOCIndex"}%
---+ tab.js

Provides tab functionality.

%TOC%

---++ Objects

---+++ OAT.Tab(element,options)

Creates Tab object. The <tt>element</tt> specifies a container where the tab contents will be placed.<tt>options</tt> may contain:

   * <tt>*goCallback*</tt> - function to be called when tab switching occurs. Two parameters will be supplied: old index an new index.
   * <tt>*onUnDock*</tt> - function to be called when tab undocks. One parameters will be supplied: tab's index.
   * <tt>*onDock*</tt> - function to be called when tab docks. One parameters will be supplied: tab's index.
   * <tt>*dockMode*</tt> - bool; can tabs can be undocked into standalone windows? default <tt>true</tt>. You need to include the 'windows' library.
   * <tt>*dockElement*</tt> - DOM node (or ID) specifying parent node for tabs; only needed when <tt>dockMode</tt> true
   * <tt>*dockWindowWidth*</tt> - Sets width of dock window
   * <tt>*dockWindowHeight*</tt> - Sets height of dock window

---++ Methods

---+++ OAT.Tab.add(clicker, window)

Adds a new <tt>clicker-window</tt> pair, i.e., when the user clicks <tt>clicker</tt>, <tt>window</tt> will be shown.

---+++ OAT.Tab.remove(clicker)

Removes a <tt>clicker-window</tt> pair.

---+++ OAT.Tab.go(index)

Switches to tab, according to <tt>index</tt>.

---++ CSS classes

---+++ .tab

ToBeDone

---+++ .tab_selected

ToBeDone

---++ Example      

<verbatim>
var t = new OAT.Tab("content");
t.add("header_1","window_1");
t.add("header_2","window_2");
t.go(0);
</verbatim>

CategoryOAT CategoryOpenSource CategoryDocumentation CategoryToBeDone
