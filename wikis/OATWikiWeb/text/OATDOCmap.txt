%META:TOPICPARENT{name="OATDOCIndex"}%
---+ map.js

Abstract API atop various mapping providers.

%TOC%

---++ Objects

---+++ OAT.Map(something, provider, optionsObject, specificOptions)

Creates a <tt>map</tt> as a child of <tt>something</tt>. <tt>provider</tt> is one of <tt>TYPE_</tt> constants. <tt>optionsObject</tt> may contain:
   * <tt>*fix*</tt> - one of <tt>FIX_</tt> constants, used when markers are too close to each other
   * <tt>*fixDistance*</tt> - distance for shifting markers
   * <tt>*fixEpsilon*</tt> - euclidean distance limit of markers to be taken as identical (in degrees). The <tt>specificOptions</tt> object may contain any engine-specific options, such as <tt>{draggableCursor:crosshair}</tt> for Google Maps.   

---++ Methods

---+++ OAT.Map::addTypeControl()

Adds a 'map type' control to the map.

---+++ OAT.Map::addMapControl()

Adds a 'map navigation' control to the map.

---+++ OAT.Map::setMapType(type)

Sets map <tt>type</tt> to one of <tt>MAP_</tt> constants.

---+++ OAT.Map::centerAndZoom(lat, long, zoom)

Pans the map to given <tt>lat</tt> and <tt>long</tt> coordinates and zooms. <tt>zoom</tt> ranges from 0 (far) to 16 (close).

---+++ OAT.Map::setZoom(zoom)

Changes current <tt>zoom</tt> level.

---+++ OAT.Map::getZoom()

Returns current <tt>zoom</tt> level.

---+++ OAT.Map::addMarker(group, lat, long, file, w, h, callback)

Adds a <tt>marker</tt> to the map. Marker belongs to marker <tt>group</tt> group(any internal value) and is located at coordinates specified in <tt>lat</tt> and <tt>long</tt>. <tt>file</tt> specifies an image file name (wandhare its dimensions), false when default image should be used. Finally, <tt>callback</tt> is a function to be executed when user clicks marker.

---+++ OAT.Map::removeMarker(marker)

Removes existing <tt>marker</tt>.

---+++ OAT.Map::removeMarkers(group)

Removes all markers which belong to <tt>group</tt>.

---+++ OAT.Map::openWindow(marker, something)

Opens window, anchored to <tt>marker</tt>. <tt>something</tt> is a DOM node to be appended into window.

---+++ OAT.Map::closeWindow()

Closes opened window.

---+++ OAT.Map::optimalPosition(pointArray)

Zooms map so all points specified in <tt>pointArray</tt> (array of 2-element arrays) can be visible simultaneously.

---+++ OAT.Map::geoCode(address, callback)

Performs a geocoding lookup of <tt>address</tt>. When result is returned, <tt>callback</tt> is executed. Its only argument is false when no result was found, or an array of[lat,long].

---++ Constants

---+++ OAT.MapData.TYPE_

Constants specifying maps provider

   * <tt><b>OAT.MapData.TYPE_G</b></tt> - specifies Google Maps
   * <tt><b>OAT.MapData.TYPE_Y</b></tt> - specifies Yahoo! Maps
   * <tt><b>OAT.MapData.TYPE_MS</b></tt> - specifies Microsoft Virtual Earth Maps
   * <tt><b>OAT.MapData.TYPE_OL</b></tt> - specifies OpenLayers Maps

---+++ OAT.MapData.MAP_

Constants specifying map types.

   * <tt><b>OAT.MapData.MAP_MAP</b></tt> - specifies normal
   * <tt><b>OAT.MapData.MAP_ORTO</b></tt> - specifies orthographic
   * <tt><b>OAT.MapData.MAP_HYB</b></tt> - specifies hybrid

---+++ OAT.MapData.FIX_

Constants specifying how markers that are too close to each other will be handled.

   * <tt><b>OAT.MapData.FIX_NONE</b></tt> - unhandled
   * <tt><b>OAT.MapData.FIX_ROUND1</b></tt> - specifies arranged into a circle, with one marker in the middle
   * <tt><b>OAT.MapData.FIX_ROUND2</b></tt> - specifies arranged into a circle
   * <tt><b>OAT.MapData.FIX_STACK</b></tt> - specifies stacked

---++ Example

<verbatim>
var obj = {
        fix:OAT.MapData.FIX_ROUND1,
        fixDistance:20,
        fixEpsilon:0.5
}
var map = new OAT.Map("myDiv",OAT.MapData.TYPE_G,obj);
map.centerAndZoom(0,0,8); /* africa, middle zoom */
map.addTypeControl();
map.addMapControl();
map.setMapType(OAT.MapData.MAP_ORTO); /* aerial */
</verbatim>

CategoryDocumentation CategoryOAT CategoryOpenSource
