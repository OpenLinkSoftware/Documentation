%META:TOPICPARENT{name="InstallConfigHTML5SQLBridges"}%
= OpenLink HTML5 WebDB-to-ODBC Bridge =

The <nop>OpenLink HTML5 <nop>WebDB-to-ODBC Bridge is a Web browser extension that enables the development of database-driven HTML5 (Javascript) applications, without binding to specific back-end database engines for data storage and access.

%TOC%

== Why use this bridge? ==
Initially, the <nop>WebDB API component of HTML5 confined data access and storage to SQLite. A bridge to ODBC extends the functionality of the <nop>WebDB API to any ODBC- (or JDBC-, via additional ODBC-to-JDBC bridges) -accessible database.  Such RDBMS engines include <nop>OpenLink Virtuoso, Oracle, Microsoft SQL Server, IBM DB2, IBM Informix, Sybase, Ingres, Progress, <nop>MySQL, <nop>PostgreSQL, Firebird, and many more.

It is important to note, each RDBMS engine has its own features and limitations as a Web-accessible Database.  [[http://virtuoso.openlinksw.com/|OpenLink Virtuoso]] brings several additional benefits:
* Virtual/Federated RDBMS access (Commercial Edition only) -- A single ODBC connection to Virtuoso enables access to, and distributed joins across, all ODBC- or JDBC-accessible data sources.
* Graph Database (NoSQL, Triple-store, Quad-store) access -- A single ODBC connection to Virtuoso enables SPARQL access to local and/or remote SPARQL-compliant Graph-model-based DBMS engines via SPASQL (SQL and SPARQL hybrid query language).
* Extra security -- Fine-grained policy-based security [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtFOAFSLLODBCLogin|leverages the WebID protocol]] across ODBC, ODBC-JDBC Bridge, and SPASQL connections.

== Installing the bridge ==

=== Installation Requirements and Prerequisites ===
To use the HTML5 <nop>WebDB-to-ODBC Bridge browser extension, you need to first install an ODBC Bridge Internet Plug-in for Windows or Mac OS X. Once the plug-in is in place, you then install the actual HTML5 <nop>WebDB-to-ODBC Bridge extension(s) for your browser(s) of choice.

Of course, you will also need an ODBC driver for your DBMS of choice.

==== Windows Prerequisite: ODBC Bridge Internet Plug-in ====

# Download and install the generic ODBC browser plugin for [[http://html5-webdb.s3.amazonaws.com/webdb-api/odbc_plugin_installers/Setup_HTML5_iODBC_Plugin.exe| Windows]]

<i><b>Note:</b> Safari, Opera, FireFox, and Chrome are only available as 32-bit applications for Windows. Thus, even if testing on 64-bit Windows, only 32-bit ODBC Drivers will be visible to the HTML5 <nop>WebDB-to-ODBC Bridge in these browsers.</i>
                                                                                         
==== Mac OS X Prerequisite: ODBC Bridge Internet Plug-in ====

# <b>Safari users:</b> download and install the generic ODBC browser plugin for [[http://html5-webdb.s3.amazonaws.com/safari-webdb-extensions/SafariHTML5_iODBC_Plugin.dmg|Safari on Mac OS X]]
# <b>Opera users:</b> download and install the generic ODBC browser plugin for [[http://html5-webdb.s3.amazonaws.com/webdb-api/odbc_plugin_installers/HTML5_iODBC_NPAPI_Plugin.dmg|Opera on Mac OS X]]

==== Linux Prerequisite: iODBC Driver Manager ====

Install the [[http://www.iodbc.org|OpenLink iODBC Driver Manger]] from the Web Site or if your Linux distribution includes the iODBC package it can be installed with a command like {{{apt-get install iodbc}}} or similar depending on distribution.


==== Where can I get ODBC Drivers? ====

* ODBC Driver Vendors such as [[http://uda.openlinksw.com/odbc/|OpenLink Software]]
* [[http://www.SQLSummit.com/ODBCVend.HTM|Other 3rd-party Driver Vendors (including RDBMS engine providers)]].

=== HTML5 WebDB-to-ODBC Bridge Extension Installation ===

==== Firefox Extension Installation ====
# Download the [[https://addons.mozilla.org/en-US/firefox/addon/181056/| ODBC HTML5 Bridge Extension for Firefox]] and follow the steps for installation.
%BR%%BR%<img src="%ATTACHURLPATH%/FFODBCHTML5-01.png" style="wikiautogen"/>%BR%%BR%
# Click the "Install Now" button to commence the installation.
%BR%%BR%<img src="%ATTACHURLPATH%/FFODBCHTML5-02.png" style="wikiautogen"/>%BR%%BR%
# Click the "Restart Firefox" button to complete the installation.

==== Safari Extension Installation ====
# Safari extensions are not allowed to directly perform some functions.  To deliver full features of the HTML5 ODBC Bridge to Safari users, some features must be provided through an additional OS extension. Download and install the appropriate OS-specific [[InstallConfigODBCHTML5BridgesSafariPlugins| ODBC Internet Plugin]] for Safari, for Windows or Mac OS X.
# Download the [[http://html5-webdb.s3.amazonaws.com/safari-webdb-extensions/Safari_iODBC.safariextz| ODBC HTML5 Bridge Extension for Safari]] 
%BR%%BR%<img src="%ATTACHURLPATH%/SafariODBCHTML5-01.png" style="wikiautogen"/>%BR%%BR%
# Double click on the Safari Extension ({{{Safari_iODBC.safariextz}}}) to commence the installation.
%BR%%BR%<img src="%ATTACHURLPATH%/SafariODBCHTML5-02.png" style="wikiautogen"/>%BR%%BR%
# Click on the "Install" button to perform the installation.

==== Opera Extension Installation ====

# If running on Mac OS X, first download and install the [[http://html5-webdb.s3.amazonaws.com/opera-webdb-extensions/HTML5_iODBC_NPAPI_Plugin.dmg| ODBC Internet Plugin]] for Opera.
# On both Mac and Windows, download the [[http://html5-webdb.s3.amazonaws.com/opera-webdb-extensions/Opera_extension.zip| ODBC HTML5 Bridge Extension for Opera]].  
# Extract the zip contents, and double-click the **opera_iodbc.oex** found therein.  You should be prompted, as --
%BR%%BR%<img src="%ATTACHURLPATH%/OperaODBCHTML5-01.png" style="wikiautogen"/>%BR%%BR%
# Click **Install,** and the extension will install.

==== Google Chrome Installation ====

# Download the [[http://www.chromeextensions.org/other/odbc-bridge-for-html5/| ODBC HTML5 Bridge Extension for Google Chrome]] and follow the steps for installation
%BR%%BR%<img src="%ATTACHURLPATH%/ChromeODBCHTML5-01.png" style="wikiautogen"/>%BR%%BR%
# Click the "Install" button to commence the installation.
%BR%%BR%<img src="%ATTACHURLPATH%/ChromeODBCHTML5-02.png" style="wikiautogen"/>%BR%%BR%
# The extension is now installed.

== Using the bridge ==

Simply install an ODBC Driver for your desired target RDBMS, and configure an ODBC DSN. Then perform any of the following tasks:

* [[HTML5ODBCExplorerSampleProg | Use our HTML5+WebDB based ODBC Explorer]] to investigate your chosen data source.
* [[http://html5-webdb.s3.amazonaws.com/webdb-api/ODBCsample1.html| Use our HTML5+WebDB ODBC Sample Application]] to automatically test Synchronous and/or Asynchronous WebDB API calls.
* [[http://dev.w3.org/html5/webdatabase/| Use a third-party HTML5+WebDB compliant application]] -- or develop your own.

=== API Calls ===

==== New General Methods ====
* Returns a list of ODBC DSNs as an array of Strings
{{{
WorkerUtils.getDataSources();
}}}

* Returns the column name of result set
{{{
AString 
  nsISQLResultSetMetaData.getColumnName
  ( IN  unsigned short  aIndex 
  );
}}}

==== New Database Catalog Calls ====

===== For nsISQLTransactionSync  (synchronous transaction execution) =====

{{{
nsISQLResultSet 
  getCatalogs();

nsISQLResultSet 
  getTables
    ( IN  DOMString  catalog   , 
      IN  DOMString  schema    ,
      IN  DOMString  table     , 
      IN  DOMString  tableType
    );

nsISQLResultSet 
  getColumns
    ( IN  DOMString  catalog   , 
      IN  DOMString  schema    ,
      IN  DOMString  table     , 
      IN  DOMString  column
    );

nsISQLResultSet
  getPrimaryKeys
    ( IN  DOMString  catalog   ,
      IN  DOMString  schema    ,
      IN  DOMString  table
    );

nsISQLResultSet
  getForeignKeys
    ( IN  DOMString  pcatalog  , 
      IN  DOMString  pschema   ,
      IN  DOMString  ptable    , 
      IN  DOMString  fcatalog  , 
      IN  DOMString  fschema   ,
      IN  DOMString  ftable
    );

nsISQLResultSet 
  getTypeInfo
    ( IN  short  dataType
    );

nsISQLResultSet
  getProcedures
    ( IN  DOMString  catalog   , 
      IN  DOMString  schema    ,
      IN  DOMString  procedure
    );

nsISQLResultSet
  getProcedureColumns
    ( IN  DOMString  catalog   , 
      IN  DOMString  schema    ,
      IN  DOMString  procedure , 
      IN  DOMString  column
    );
}}}

===== For nsISQLTransaction (asynchronous transaction execution) =====
{{{
void 
  getCatalogs
    ( [optional]  IN  nsISQLStatementCallback       callback       ,
      [optional]  IN  nsISQLStatementErrorCallback  errorCallback
    );

void 
  getTables
    (             IN  DOMString                     catalog       ,
                  IN  DOMString                     schema        ,
                  IN  DOMString                     table         ,
                  IN  DOMString                     tableType     ,
      [optional]  IN  nsISQLStatementCallback       callback      ,
      [optional]  IN  nsISQLStatementErrorCallback  errorCallback
    );

void 
  getColumns
    (             IN  DOMString                     catalog       , 
                  IN  DOMString                     schema        ,
                  IN  DOMString                     table         , 
                  IN  DOMString                     column        ,
      [optional]  IN  nsISQLStatementCallback       callback      ,
      [optional]  IN  nsISQLStatementErrorCallback  errorCallback
    );

void 
  getPrimaryKeys
    (             IN  DOMString                     catalog       , 
                  IN  DOMString                     schema        ,
                  IN  DOMString                     table         ,
      [optional]  IN  nsISQLStatementCallback       callback      ,
      [optional]  IN  nsISQLStatementErrorCallback  errorCallback
    );

void
  getForeignKeys
    (             IN  DOMString                     pcatalog      , 
                  IN  DOMString                     pschema       ,
                  IN  DOMString                     ptable        , 
                  IN  DOMString                     fcatalog      , 
                  IN  DOMString                     fschema       ,
                  IN  DOMString                     ftable        ,
      [optional]  IN  nsISQLStatementCallback       callback      ,
      [optional]  IN  nsISQLStatementErrorCallback  errorCallback
    );

void 
  getTypeInfo
    (             IN  short                         dataType      ,
      [optional]  IN  nsISQLStatementCallback       callback      ,
      [optional]  IN  nsISQLStatementErrorCallback  errorCallback
    );
}}}


== Related Links ==

* [[InstallConfigXMLAHTML5Bridge|HTML5 WebDB-to-XMLA Bridge]]
* [[HTML5ODBCExplorerSampleProg | HTML5+WebDB-based ODBC Explorer]] 
* [[http://html5-webdb.s3.amazonaws.com/webdb-api/ODBCsample1.html| HTML5+WebDB-based ODBC Sample Application]] 
* [[http://dev.w3.org/html5/webdatabase/|WebDB API Specification]]
* [[http://virtuoso.openlinksw.com/|OpenLink Virtuoso Website]]
* [[http://iodbc.org/|Platform-Independent iODBC Project Home Page]]
* [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtFOAFSLLODBCLogin| Using WebID for Virtuoso ODBC login]]