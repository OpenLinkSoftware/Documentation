%META:TOPICPARENT{name="ConfigureUDAFeatures"}%
==Using Progress 4GL/SQL-89 ARRAY fields with SQL-92 drivers==

<p><i>Quoted from <a href="http://webapp.progress.com:6336/dynaweb/psdoc91d/sql9291d/s92/@Generic__BookTextView/61981;cs%3Ddefault;ts%3Ddefault">Progress On-Line documentation</a></i></p>

<h3>C.2 Support for the ARRAY Data Type</h3><p>For compatibility with earlier Progress databases, Progress SQL&ndash;92 provides limited support for the ARRAY data type. </p><h4>C.2.1 Overview</h4><p>Array fields are created using the Progress 4GL Dictionary. Progress SQL&ndash;92 provides a mechanism for referencing and updating these arrays. Subscripted references are not supported. Progress SQL&ndash;92 manages the arrays as NVARCHAR strings, and the string representation is the concatenation of each array element, with a semicolon ( ; ) separating each element.</p><p>To escape an instance of a semicolon in the data of a Progress CHARACTER array, use the escape character tilde before the semicolon ( ~; ). An unquoted question mark represents a NULL element. To distinguish a NULL element from a question mark, use a tilde as an escape character for a question mark in the data ( ~? ). A tilde is also the escape character for a tilde ( ~~ ).</p><p>Progress SQL&ndash;92 supplies three built&ndash;in functions for extracting an element, and for adding escape characters to and removing escape characters from a single element of a character array. The PRO_ELEMENT, PRO_ARR_ESCAPE, and PRO_ARR_DESCAPE functions provide full internationalization support. A description of each function follows.</p><h4>C.2.2 PRO_ELEMENT Function</h4><p>Extracts one or more elements from an array column and returns the NVARCHAR or VARCHAR string between the specified positions, including any internal separator characters and any internal escape characters. </p><h5>SYNTAX</h5><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ELEMENT ( &apos;<i>array_style_expression&apos;</i>, <i>start_position</i>,<i> end_position </i>) ;</tt></p></td></tr></tbody></table><br /><dl><dt><i>array_style_expression</i></dt><dd>A string of datatype VARCHAR or CHAR, with a semi-colon ( ; ) separating each element of the array.</dd></dl><dl><dt><i>start_position</i></dt><dd>The position in the string marking the beginning of the element PRO_ELEMENT is to extract.</dd></dl><dl><dt><i>end_position</i></dt><dd>The position in the string marking the end of the element to be extracted.</dd></dl><h5>EXAMPLES</h5><p>The following example returns the string &apos;bb&apos;:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ELEMENT(&apos;aa;bb;cc&apos;, 2, 2) ;</tt></p></td></tr></tbody></table><br /><p>The next example returns the string &apos;aa;bb&apos;:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ELEMENT(&apos;aa;bb;cc&apos;, 1, 2) ;</tt></p></td></tr></tbody></table><br /><p>The third example returns the string &apos;aa~;aa&apos;:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ELEMENT(&apos;aa~;aa;bb;cc&apos;, 1, 1) ;</tt></p></td></tr></tbody></table><br /><h5>NOTES</h5><ul compact="compact" type="square"><li><p>The <i>array_style_expression</i> must be data type NVARCHAR, VARCHAR, or CHAR.</p></li><li><p>The returned string does not include the leading separator of the first element, or the trailing separator ( ; ) of the last element.</p></li><li><p>Even if you are extracting only one element, the escape characters are included in the result. </p></li><li><p>You must invoke PRO_ARR_DESCAPE to remove any escape characters.</p></li></ul><h4>C.2.3 PRO_ARR_ESCAPE Function</h4><p>Adds required escape characters to a single element of a character array.</p><p>PRO_ARR_ESCAPE scans the <i>char_element </i>looking for the separator character ( ; ) or an escape character ( ~ ). The function<b> inserts</b> an additional escape character, when it finds any of these constructs:</p><ul compact="compact" type="square"><li><p>Escape character followed by a separator character ( ~; )</p></li><li><p>Escape character followed by another escape character ( ~~ )</p></li><li><p>Escape character followed by a NULL terminator ( ~\0 )</p></li></ul><h5>SYNTAX</h5><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_ESCAPE( &apos;<i>char_element&apos;</i> )  ;</tt></p></td></tr></tbody></table><br /><dl><dt><i>char_element</i></dt><dd>The character representation of an array element, without any leading or trailing separators. Must be data type NVARCHAR or VARCHAR or CHAR. </dd></dl><h5>EXAMPLES</h5><p>The following example returns the string &apos;aa~;aa&apos;:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_ESCAPE(&apos;aa;aa&apos;) ;</tt></p></td></tr></tbody></table><br /><p>The following example returns the string &apos;aa~aa&apos;. There is no change, since another special character does not follow the escape character:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_ESCAPE(&apos;aa~aa&apos;) ;</tt></p></td></tr></tbody></table><br /><p>The third example returns the string &apos;aa~~;aa&apos;:</p><p> </p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_ESCAPE(&apos;aa~;aa&apos;) ;</tt></p></td></tr></tbody></table><br /><h5>NOTES</h5><ul compact="compact" type="square"><li><p><i>char_element</i> must be data type NVARCHAR, VARCHAR, or CHAR.</p></li><li><p><i>char_element</i> must not be the name of an array column, since the column contains true separators which would be destroyed by this function.</p></li></ul><h4>C.2.4 PRO_ARR_DESCAPE Function</h4><p>Removes escape characters from a single element of a character array. PRO_ARR_DESCAPE scans the <i>char_element</i> looking for the separator character ( ; ) or an escape character ( ~ ). The function <b>removes</b> an escape character, when it finds any of these constructs:</p><ul compact="compact" type="square"><li><p>Escape character followed by a separator character ( ~; )</p></li><li><p>Escape character followed by another escape character ( ~~ )</p></li><li><p>Escape character followed by a NULL terminator ( ~\0 )</p><p></p><h5>SYNTAX</h5><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_DESCAPE( &apos;<i>char_element&apos;</i> ) ;</tt></p></td></tr></tbody></table><br /></li></ul><dl><dt><i>char_element</i> </dt><dd>The character representation of an array element, without any leading or trailing separators. Must be data type NVARCHAR or VARCHAR or CHAR. </dd></dl><h5>EXAMPLES</h5><p>The following example returns the string &apos;aa;aa&apos;:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_DESCAPE(&apos;aa~;aa&apos;) ;</tt></p></td></tr></tbody></table><br /><p>The following example returns the string &apos;aa~aa&apos;. There is no change, since another special character does not follow the escape character:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_DESCAPE(&apos;aa~aa&apos;) ;</tt></p></td></tr></tbody></table><br /><p>The third example returns the string &apos;aa~;aa&apos;:</p><p> </p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>PRO_ARR_DESCAPE(&apos;aa~~;aa&apos;) ;</tt></p></td></tr></tbody></table><br /><p><b>NOTE: </b><i>char_element</i> should not be the name of an array column, since the column contains true separators which would be destroyed by this function.</p><h4>C.2.5 Unsubscripted Array References</h4><p>When there is a reference to an unsubscripted Progress array column, Progress SQL&ndash;92 performs these operations: </p><ul compact="compact" type="square"><li><p>Extracts each element from the Progress 4GL array</p></li><li><p>Converts the element to a DT_VARCHAR data type</p></li><li><p>Passes the element to the PRO_ARR_ESCAPE function for the addition of  any necessary escape characters</p></li><li><p>Concatenates the result to a composite with the separator character ( ; ) between this element and the next element</p></li></ul><p>This results in dual data types for array fields. The fetch type is TPE_DT_NVARCHAR for the unsubscripted references. The underlying Progress 4GL data type is the native type. </p><h5>EXAMPLES</h5><dl><dt>The first example assumes a character array named ARRAYCHAR containing three elements in a row in the customer table where the cust_num column is equal to 88, and with values:</dt><dd><p>ARRAYCHAR[ 1 ] {{{=}}} &apos;aa&apos;</p><p>ARRAYCHAR[ 2 ] {{{=}}} &apos;bb&apos;</p><p>ARRAYCHAR[ 3 ] {{{=}}} &apos;cc&apos;</p><p>The ARRAYCHAR example returns the value &apos;aa;bb;cc&apos;.</p></dd></dl><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>SELECT arraychar FROM customer WHERE cust_num {{{=}}} 88 ; </tt></p><p><tt> </tt></p><p><tt>ARRAYCHAR</tt></p><p><tt> </tt></p><p><tt>&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;</tt></p><p><tt>aa;bb;cc</tt></p><p><tt> </tt></p><p><tt>1 record selected</tt></p></td></tr></tbody></table><br /><p>To retrieve an individual element from an array with any escape characters removed, use the PRO_ELEMENT and PRO_ARR_DESCAPE functions. For example, ARRAYTYPE[ 2 ] contains the value &apos;aa;bb&apos;. The PRO_ELEMENT function in the ARRAYTYPE example returns &apos;aa~;bb&apos; and PRO_ARR_DESCAPE(&apos;aa~;bb&apos;) removes the escape character ( ~ ), returning the element value &apos;aa;bb&apos;.</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>select pro_arr_descape(pro_element(arraytype,2,2)) from customer  ;</tt></p><p><tt>ARRAYTYPE</tt></p><p><tt> </tt></p><p><tt>&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;&ndash;</tt></p><p><tt>aa;bb</tt></p><p><tt> </tt></p><p><tt>1 record selected</tt></p></td></tr></tbody></table><br /><h4>C.2.6 Unsubscripted Array Updates and Inserts </h4><p>Progress SQL&ndash;92 applies the reverse of the fetch algorithm for updates to unsubscripted Progress 4GL array columns. An SQL-92 operation accepts an NVARCHAR string, complete with separators and any required escape characters. Progress SQL&ndash;92 converts the string to the underlying data type and stores it in the current element of the array in the Progress database. SQL-92 repeats this operation for each element of the array until all elements have been inserted. </p><p>This is the SQL-92 syntax for an unsubscripted array update:</p><p></p><h5>SYNTAX</h5><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>UPDATE <i>table_name </i>SET <i>array_name</i> {{{=}}} (&apos;<i>char_element&apos;</i> ) WHERE <i>where_criteria</i> ;</tt></p></td></tr></tbody></table><br /><h5>EXAMPLE</h5><dl><dt>The ARRAYINT example assumes an integer array named ARRAYINT. The result of the UPDATE operation is:</dt><dd><p>ARRAYINT[ 1 ] {{{=}}} 13</p><p>ARRAYINT[ 2 ] {{{=}}} 15</p><p>ARRAYINT[ 3 ] {{{=}}} 19</p></dd></dl><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>UPDATE customer SET arrayint {{{=}}} &apos;13;15;19&apos; WHERE cust_num {{{=}}} 77 ;</tt></p></td></tr></tbody></table><br /><p>If the number of elements in the NVARCHAR string does not match the number of elements in the target column for the update, Progress SQL&ndash;92 returns an error, unless there is exactly one element in the NVARCHAR string for an INSERT operation.</p><p>If there is a single element in the NVARCHAR string, you can use the Progress SQL&ndash;92 INSERT statement to propagate the value to all elements of the array. </p><p>This is the SQL-92 syntax for this short form of an INSERT assignment:</p><p></p><h5>SYNTAX</h5><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>INSERT INTO <i>table_name</i> ( <i>arr_col_name </i>) VALUES ( &apos;<i>one_value&apos;</i> ) ;</tt></p></td></tr></tbody></table><br /><h5>EXAMPLE</h5><p>The following INSERT example illustrates how you can assign values to an entire date array from a single value in the VALUES clause of an SQL-92 INSERT statement:</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>INSERT INTO customer ( begin_quota_date ) VALUES ( &apos;01/01/00&apos; ) ;</tt></p></td></tr></tbody></table><br /><p>This INSERT  example assigns the value &apos;01/01/00&apos; to every element of the date array &apos;begin_quota_date&apos; column in the customer table.</p><p><b>NOTE: </b>Progress SQL&ndash;92 does <b>not</b> support the assignment of a single value to an entire array using an SQL-92 UPDATE statement.</p><h4>Updating a Single Element of an Array</h4><p>To update a single element of an array, you must construct a string for the entire array, and assign the string to the array using an SQL-92 UPDATE statement.</p><p>This is the SQL-92 syntax for updating a single element of an array:</p><p> </p><h5>SYNTAX</h5><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>UPDATE <i>table_name</i> SET <i>array_col</i> {{{=}}} <i>literal_string</i> ;</tt></p></td></tr></tbody></table><br /><h5>EXAMPLES</h5><p>To assign a value to the first element of an array of size three, construct a literal string that concatenates these components:</p><ul compact="compact" type="square"><li><p>Update value for the first element in the array</p></li><li><p>Semicolon separator</p></li><li><p>Values for elements two and three in the array</p></li></ul><p>Use PRO_ARR_ESCAPE to insert any necessary escape characters into the new value. Use PRO_ELEMENT to extract the values for elements two and three from the array. This example assigns the value &apos;aaa&apos; to the first element of the arraychar array for customer 99, and retains the existing values for elements two and three.</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>UPDATE customer SET arraychar {{{=}}} </tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp; PROARR_ESCAPE(&apos;aaa&apos;)</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| &apos;;&apos;</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| PRO_ELEMENT(arraychar,2,3) </tt></p><p><tt>WHERE cust_num {{{=}}} 99 ;</tt></p></td></tr></tbody></table><br /><p>To assign a value to the second element of an array of size three, construct a string that concatenates these components:</p><ul compact="compact" type="square"><li><p>Value of the first element in the array</p></li><li><p>Semicolon separator</p></li><li><p>Update value for the second element</p></li><li><p>Semicolon separator </p></li><li><p>Value of the third element in the array</p></li></ul><p>Use PRO_ARR_ESCAPE to insert any necessary escape characters into the new value. Use PRO_ELEMENT to extract the first and third elements from the array. This example assigns the value &apos;bbb&apos; to the second element of the arraychar array for customer 99, and retains the existing values for elements one and three in arraychar.</p><p></p><table  border="2"><tbody><tr  valign="top"><td rowspan="1"><p><tt>UPDATE customer SET arraychar {{{=}}}</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRO_ELEMENT(arraychar,1,1)</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| &apos;;&apos;</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| PROARR_ESCAPE(&apos;bbb&apos;)</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| &apos;;&apos;</tt></p><p><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| PRO_ELEMENT(arraychar,3,3)</tt></p><p><tt>WHERE cust_num {{{=}}} 99 ;</tt></p></td></tr></tbody></table><br /><p></p><p></p>