%META:TOPICPARENT{name="PHPDevelopmentResources"}%
==PHP Development Resources==

===PHP's default assignment of dynamic cursor causes miscellaneous SQL query errors===

<p>PHP interrogates ODBC drivers, to see whether the driver supports the <tt>SQLExtendedFetch()</tt> API call.  If that support is present, PHP SQL resultset functions all request a <i>Dynamic (or Bi-Directional Scrollable) Cursor</i>, regardless of any other considerations.</p>  

<p>All SQL queries made using a Dynamic Cursor requires that the SQL table in question have an ODBC-compliant primary key defined (an index is insufficient, whether unique or not).</p>

<p>Additionally, the OpenLink cursor library does not support all queries on scrollable cursors, even when a primary key is defined.  Some queries that OpenLink Support have discovered can be problematic use aggregate functions, have a 'group by' clause, or call stored procedures.  </p>

<p>Error messages include --</p>

<ul><li><tt>No key columns found for table referenced by scrollable cursor. </tt></li>
<li><tt>SELECT statement contains a GROUP BY clause.</tt></li></ul>

<p>An upcoming update to OpenLink drivers (Release 6.x, after September 2006) will resolve this issue for good and all, without any need for recompilation of PHP, nor changes to the database schema.</p>

<p>If you are encountering these problems before this update, and cannot modify the underlying database schema, you will need to modify your PHP source and recompile.  </p>

<p>For PHP 4.2 and below, you can have PHP disable server-side cursor functionality in all SQL statements by making a change in PHP's ODBC handling source. </p>
  
<ul><li><p>Edit the PHP source file <tt>ext/odbc/php_odbc.c</tt></p></li>
<li><p>Change the last two instances of <tt>SQL_CURSOR_DYNAMIC</tt> to <tt>SQL_CURSOR_FORWARD_ONLY</tt></p></li>
<li><p><a href="http://www.iodbc.org/index.php?page=languages%2Fphp%2Fodbc-phpHOWTO">Recompile PHP with iODBC support</a>.</p></li></ul>

<p>For PHP 4.2 and above, you can make this behavior take effect at query-time, by preventing all use of the <tt>SQLExtendedFetch()</tt> API call.</p>
<ul><li><p>Edit the PHP source file <tt>ext/odbc/php_odbc_include.h</tt></p></li>
<li><p>Around line 96 there will be a block of <tt>#ifdef</tt> and <tt>#define</tt> statements pertaining to iODBC . Replace the one that says </p>
<blockquote><pre><tt>#define HAVE_SQL_EXTENDED_FETCH 1</tt></pre></blockquote>
<p>with one that says </p>
<blockquote><pre><tt>#undef HAVE_SQL_EXTENDED_FETCH</tt></pre></blockquote></li>
<li><p><a href="http://www.iodbc.org/index.php?page=languages%2Fphp%2Fodbc-phpHOWTO">Recompile PHP with iODBC support</a>.</p></li></ul>

<p>If none of the above suggestions solves the problem, please <a href="http://support.openlinksw.com/">open a support case</a>, and forward the page source with an ODBC trace showing the page's execution, referencing your case number in the subject header, to <a href="mailto:technical.support@openlinksw.com">technical.support@openlinksw.com</a>.</p>