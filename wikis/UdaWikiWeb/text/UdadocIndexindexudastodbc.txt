
= doc.Index.index.uda.stodbc

%TOC%

   
 [[OpenLink]]  provides ODBC-based Single-Tier Drivers for all databases, using the Type A, B, and C call-level interface formats. The type of driver provided depends on what is publicly available to third-party developers by the vendors of the respective database engines. 

The ODBC Single-Tier drivers are C-based drivers and offer developers an opportunity to develop generic solutions across platforms without prior knowledge of the operating system hosting the Database server. Architectural diagrams showing the different representations of ODBC drivers based on Call Level Interface types are available below. 

These drivers are built using the Type-A call level interfaces of the relevant back-end database engine. Thus, these drivers implement the interfaces of the respective data-access mechanisms (ODBC) with inherent database-specific networking, and a dependency on the database vendor provided networking middleware products. At installation time you simply install the driver with the underlying assumption that remote database-connectivity is already in place (or will be put in place) via the installation of products such as Net8 and SQL*Net, Progress Client Networking, Informix Connect, Ingres Net, DB2 Connect etc. 

 
 [[/images/aodbcst.gif|]]  

 
/Type A Architectural Diagram for ODBC Image scaled down; Click to enlarge./ 

 
 
 [[/images/aodbcstprog.gif|]]  

 
/Type A Architectural Diagram for Progress ODBC Image scaled down; Click to enlarge./ 

 
These drivers are built using the Type-B client networking interface to wire-protocols of the supported back-end database. These drivers are installed one time on a workstation/desktop or application server machine, and after installation are ready for direct communication with the supported backed database. This driver format is only currently available for; Microsoft SQL Server, SYBASE ASE, [[MySQL]]  , [[PostgreSQL]]  , and [[OpenLink]]  Virtuoso. Support for other databases will occur as and when unsupported database engine vendors make their RPC client interfaces available to third party developers. 

 
 [[/images/bodbcst.gif|]]  

 
/Type B Architectural Diagram for ODBC Image scaled down; Click to enlarge./ 

 
These drivers are proxies that sit atop third-party implementations of the relevant data-access mechanisms. The prime purpose to integrate one data access standard implementation with another, and there are a variety of scenarios where this is useful such as: 

*ODBC access to back-end databases that are accessible via JDBC and/or ODBC  
 
 [[/images/codbcst.gif|]]  

 
/Type B Architectural Diagram for ODBC Image scaled down; Click to enlarge./ 

 

----
  