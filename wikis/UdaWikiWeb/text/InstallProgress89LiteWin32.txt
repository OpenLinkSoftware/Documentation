%META:TOPICPARENT{name="SingleTierLiteInstallWin32"}%
= Installation and Configuration of the Lite Edition (Single-Tier) ODBC Driver for Progress SQL-89 Data Sources, for Windows=
**Review Preinstallation Documentation:** [[PreinstallProgressLiteWin32|Pre-Installation Requirements]]
%TOC%

== Installation ==

# The **Lite Edition (Single-Tier) ODBC Driver for Progress SQL-89 for Windows** is distributed in a single <code>.msi</code> file.
%BR%%BR%//**NOTE:** [[InstallProgress92LiteWin32|Different installation and configuration instructions apply to Progress SQL-92 Data Sources]].//%BR%%BR%
# Click the **Open** link that appears in your Downloads dialog.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Open.png" style="wikiautogen"/>%BR%%BR%
# The installer will display a **Welcome** message. Click **Next**.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Welcome.png" style="wikiautogen"/>%BR%%BR%
# The next screen will display the **License Agreement** for the <nop>OpenLink Lite Driver. Please read and check the "I accept the license agreement" checkbox. Then, click **Next.**
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Install.png" style="wikiautogen"/>%BR%%BR%
# The driver needs a license file to operate. Click the Browse button to locate a commercial or evaluation license that you have previously downloaded onto your local hard drive. Alternatively, click the **Try & Buy** button to obtain a commercial or evaluation license. You can also tick the "I don't want to install a license file right now" check box. This option will permit you to install the product; however, you will not be able to use the product until you obtain a commercial or evaluation license key.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Licensing.png" style="wikiautogen"/>%BR%%BR%
# Click **Next.**
# Choose from the **Typical**, **Complete**, and **Custom** installation types.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_InstallOptions.png" style="wikiautogen"/>%BR%%BR%
# Click **Next.**
# Click the **Install** button.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_InstallButton.png" style="wikiautogen"/>%BR%%BR%
# Installation is complete. Click the **Finish** button.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_FinishButton.png" style="wikiautogen"/>%BR%%BR%
# You may be prompted to restart your computer, if you have a pre-existing <nop>OpenLink License Manager running on your computer.  This reboot not always necessary, but is generally recommended.

== Configuration ==

# Launch the **ODBC Administrator** [[Win32vs64OdbcAdmin | appropriate to the bitness (32-bit or 64-bit) of your client application and driver]].
%BR%%BR%<img src="%ATTACHURLPATH%/iODBC.png" style="wikiautogen"/>%BR%%BR%
# Click the **System DSN** tab.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_System.png" style="wikiautogen"/>%BR%%BR%
# Click the **Add** button. Then, select the <nop>OpenLink "Lite" Driver for Progress (SQL-89) from the list of available drivers. //Select the Unicode version of the driver if and only if you are working with multi-byte character sets, as unnecessary translations can significantly affect ODBC performance.//
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Available.png" style="wikiautogen"/>%BR%%BR%
# Click **Finish**.
# The first dialog prompts for a **Data Source Name** and optional description.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_DSNName.png" style="wikiautogen"/>%BR%%BR%
# Click **Next**.
# The second dialog prompts for information that identifies the Progress SQL-89 DBMS and database. It also provides a checkbox that allows you to check your basic connection parameters before setting advanced and optional settings.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_ConnTab.png" style="wikiautogen"/>%BR%%BR%
#* **Session Options** &mdash; This field should be left blank during the evaluation phase of connectivity testing.%BR%%BR%
#* **Database Options** &mdash; Passes Progress socket options and the full path to the Progress database. For example:
{{{
-S pro91d -N tcp -H saturn -db /usr/wrk91d/sports2000.db
}}}
#* **Tableview** &mdash; Passes the full path to a <code>tableview.dat</code> file. [[ConfigureProgressTableview|More]]%BR%%BR%
#* **Connect now to verify that all settings are correct** &mdash; Will attempt to connect to the database, once you click Continue.%BR%%BR%
#* **Login ID** &mdash; A Progress username%BR%%BR%
#* **Password** &mdash; A Progress password%BR%%BR%
# Click **Next** to continue.
# The third dialog takes a combination of database specific and optional parameters.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_DBSpecific.png" style="wikiautogen"/>%BR%%BR%
#* **Field Size Minimum** &mdash; Counterintuitively, the Progress 4GL database engine permits storage of character strings which exceed the SQL width declared in the Progress Data Dictionary. For instance, given a table with a <code>CHAR(16)</code> column, Progress will allow insertion of any number of characters into that column. In addition, the Progress 4GL engine returns a fixed size of 8 for all character expressions in SQL queries, regardless of how long their actual value may be. These two behaviors create problems with client applications that use the <code><nop>SQLDescribeCol()</code> (as they should) to determine the maximum amount of data in a field. Applications are only told about, and may only receive, the Data Dictionary-defined length of data, even though the actual data might be 20 (or 200, or more!) characters long, leading to truncation, buffer overruns, and other issues. %BR%%BR%When **Field Size Minimum** is set, any lower value set in the Data Dictionary for any column (including the value of 8 for character expressions in SQL queries) will be over-ridden; this value will be returned for <code><nop>SQLDescribeCol()</code> calls, and any data values which are shorter than this length will be space-padded to reach it.%BR%%BR%
#* **Field Size Maximum** &mdash; As noted above, the Progress 4GL engine returns a fixed size of 8 for all character expressions in SQL queries, regardless of how long their actual value may be. This creates problems with client applications that use the <code><nop>SQLDescribeCol()</code> (as they should) to determine the maximum amount of data in a field. Applications are only told about, and may only receive, the 8 character length, even though the actual value might be 20 (or 200, or more!) characters long, leading to truncation, buffer overruns, and other issues. %BR%%BR%When **Field Size Maximum** is set, the driver will override Progress, and return this value instead of 8.%BR%%BR%//**NOTE** **Field Size Minimum** over-rides **Field Size Maximum**, if both are set, and **Field Size Minimum** is greater.%BR%%BR%
#* **Expression Precision** &mdash; Expression Precision is a Progress SQL-89/4GL configuration option. It provides an accurate value for Precision, when result sets contain Numeric Expressions. For instance, <code>SELECT 10 + 12</code> will return the result (<code>22</code>) as a numeric expression. [[WhatDoesExpressionPrecisionDo|More]]%BR%%BR%
#* **Expression Scale** &mdash; Expression Scale is a Progress SQL-89/4GL configuration option. It provides an accurate value for Scale, when result sets contain Numeric Expressions. For instance, <code>SELECT 10 + 12</code> will return the result (<code>22</code>) as a numeric expression. [[WhatDoesExpressionScaleDo|More]]%BR%%BR%
#* **Use Space for SQL_QUOTE_CHAR** &mdash; This is a Progress SQL-89 specific option. When set, the driver returns <code>" "</code> rather than <code>""</code> to represent the fact that the database does not have a quoted identifier character. The ODBC specification states that <code>" "</code> should be returned, but some applications (like Crystal Reports) interpret this response to mean that the quoted identifier character is a "space." This obviously fails. Hence, there is a need for this option.%BR%%BR%
#* **Deadlock Timeout** &mdash; Deadlock Timeout sets the number of seconds that <nop>OpenLink's database agents will wait for the Progress server to release its lock before the agents return an error to the client.%BR%%BR%
# Click Next to continue.
# The fourth dialog enables you to set optional ODBC connection parameters.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Options.png" style="wikiautogen"/>%BR%%BR%
#* **Read-only connection** &mdash; Specifies whether the connection is "Read-only." Must be unchecked to {{{INSERT}}}, {{{UPDATE}}}, or {{{DELETE}}} records, and to run some Stored Procedures including some built-in functions.
#* **Defer fetching of long data** &mdash; Defers fetching of {{{LONG}}} ({{{BINARY}}}, {{{BLOB}}}, etc.) fields in wildcard queries. This provides significant performance increases when fields in query do not include LONG data fields.
#* **Disable interactive login** &mdash; Suppresses the ODBC "Username" and "Password" login dialog boxes when interacting with your ODBC DSN from within an ODBC compliant application.
#* **Row Buffer Size** &mdash; This attribute specifies the number of records to be delivered from the driver to the client application in a single batch. Values can range from 1 to 999.
#* **Max Rows Override** &mdash; Allows you to set a limit for the maximum number of rows to be returned from a query. The default value of 0 means no limit.
#* **Initial SQL** &mdash; Lets you specify a file containing SQL statements that will be run automatically against the database upon connection.
#* **Dynamic Cursor Sensitivity** &mdash; Enables or disables the row version cache used with dynamic cursors. When dynamic cursor sensitivity is set **high**, the Cursor Library calculates checksums for each row in the current rowset and compares these with the checksums (if any) already stored in the row version cache for the same rows when fetched previously. If the checksums differ for a row, the row has been updated since it was last fetched and the row status flag is set to {{{SQL_ROW_UPDATED}}}. The row version cache is then updated with the latest checksums for the rowset. From the user's point of view, the only visible difference between the two sensitivity settings is that a row status flag can never be set to {{{SQL_ROW_UPDATED}}} when the cursor sensitivity is low. (The row status is instead displayed as {{{SQL_ROW_SUCCESS}}}.) In all other respects, performance aside, the two settings are the same. Deleted rows don't appear in the rowset. Updates to the row since the row was last fetched are reflected in the row data, and inserted rows appear in the rowset, if their keys fall within the span of the rowset. If your application does not need to detect the row status {{{SQL_ROW_UPDATED}}}, you should leave the **High Cursor Sensitivity** checkbox unchecked, as performance is improved. The calculation and comparison of checksums for each row fetched carries an overhead. If this option is enabled, the table {{{oplrvc}}} must have been created beforehand using the appropriate script for the target database.
#* **Enable logging to the log file** &mdash; Check the checkbox and use the associated textbox to provide the full path to a file in which to log diagnostic information.
# Click **Next** to continue.
# The fifth dialog enables you to set additional parameters to enhance compatibility with applications.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Compatibility.png" style="wikiautogen"/>%BR%%BR%
#* **Enable Microsoft Jet engine options** &mdash; Facilitates translation of certain data types for the Microsoft Jet Engine. If you notice that money and other datatypes are mishandled with Microsoft or other applications, test with Jet fix enabled. 
#* **Disable <nop>Autocommit** &mdash; Changes the commit behavior of the <nop>OpenLink driver. The default mode is <nop>AutoCommit (box unchecked).
#* **Disable rowset size limit** &mdash; Disables a limitation enforced by the cursor library. This limitation is enforced by default. It prevents the driver from claiming all available memory when a resultset (typically generated by an accidental query) is very large. The limit is not normally reached.
#* **Multiple Active Statements Emulation** &mdash; Enables use of Multiple Active statements in an ODBC application even if the underlying database does not allow this,, by emulation within the driver.
#* **SQL_DBMS Name** &mdash; Manually overrides the {{{SQLGetInfo(SQL_DBMS_NAME)}}} response returned by the driver. This is required for products like Microsoft <nop>InfoPath for which the value should be "**{{{SQL Server}}}**".
# Click **Next** to continue.
# The final dialog enables you to test your Data Source. Click the **Test Data Source** button.
%BR%%BR%<img src="%ATTACHURLPATH%/PRO89_Test.png" style="wikiautogen"/>

==Next...==

* [[TestingWindowsODBCDSNs|Test your DSNs with our sample program]].%BR%%BR%
* If anything isn't working as you expect, including errors resulting from the test above, [[UDATroubleshootingResources|see our Troubleshooting Resources]].%BR%%BR%
* Should you decide to purchase a commercial license at the end of your evaluation period, be sure to consult our documentation which explains the placement and uptake of commercial license files and the use of our <b><nop>OpenLink License Manager</b> technology: [[http://wiki.usnet.private/dataspace/dav/wiki/UdaWikiWeb/UDALicenseApplication|License Technology &amp; Application]].
