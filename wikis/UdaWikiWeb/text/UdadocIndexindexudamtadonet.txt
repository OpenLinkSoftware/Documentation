
= doc.Index.index.uda.mtadonet

%TOC%

   
The [[OpenLink]]  Multi-Tier ADO.NET-based Database Agents open-up database avenues for .NET developers looking to embrace different technologies, be it different databases or operating systems, where the .NET architecture is not available. With a client, built using the C# language, direct access to the [[OpenLink]]  Server is achieved, in the process bypassing the native ODBC driver manager for speedier response and manageability. 

At the [[OpenLink]]  Server level, we show the different data-access architectures provided. The server database agents are built using the native Database CLI. 

These drivers are built using the Type-A call level interfaces of the relevant back-end database engine, and the [[OpenLink]]  database-independent networking layer. Thus, this driver format implements the generic interfaces of [[OpenLink]]  Data Access interface using a database vendor-provided CLI. 

Being Type A, this CLI includes data-access and database vendor-provided networking middleware which is optionally usable by the database agent (it is still simply a database client as far as the back-end database is concerned). 

Database Agents are typically installed on the same machine as the database engines that they will be accessing. This is the norm in a typical client-server scenario in which the [[OpenLink]]  Client components are installed on a desktop machine or workstation. 

In reality, there are political, infrastructural, and application-format (application server configuration) barriers that may impede your ability, or desire, to install the Database Agent on the database server machine. In these situations the Database Agents'' ability to use the database vendor-provided networking middleware comes into vital use, and will enable you to setup 3-Tier or N-Tier topologies (sometimes referred to as gateway architectures). 

 
 [[/images/aadonetmt.gif|]]  

 
/Type A Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 
 
 [[/images/aadonetprogmt.gif|]]  

 
/Type A Architectural Diagram for Progress ADO.NET Image scaled down; Click to enlarge./ 

 
This Database Agent format is similar to Type A, the only difference being the format of CLI used to implement the [[OpenLink]]  Data Access Interface. In this case the CLI is a database vendor-provided RPC-client that talks directly to remote database servers. This also means no database vendor-provided networking is required in 3-Tier or N-Tier topologies. 

 
 [[/images/badonetmt.gif|]]  

 
/Type B Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 
(also known as Proxies or Bridges). These drivers are proxies that sit atop third-party implementations of the relevant data access mechanisms. Their prime purpose is to integrate third-party data access drivers into the [[OpenLink]]  Multi-Tier architecture. Proxies are currently available in the following forms: 

*ODBC Agent - an implementation of the [[OpenLink]]  Data Access Interface using ODBC/JDBC databases  
 
 [[/images/cadonetmt.gif|]]  

 
/Type C Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 

----
  