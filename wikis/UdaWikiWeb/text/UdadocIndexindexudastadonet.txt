
= doc.Index.index.uda.stadonet

%TOC%

   
 [[OpenLink]]  provides Single-Tier Drivers built using the Type A, B, and C call-level interface formats, depending on what is publicly available to third-party developers by the vendors of the respective database engines. Architectural diagrams showing the different type representations of ADO.NET drivers available. 

These drivers are built using the Type-A call-level interfaces of the relevant back-end database engine. Thus, these drivers implement the interfaces of the respective data access mechanisms (ADO.NET) with inherent database-specific networking, and a dependency on the database vendor provided networking middleware products. At installation time you simply install the driver with the underlying assumption that remote database connectivity is already in place (or will be put in place) via products such as Net8 and SQL*Net, Progress Client Networking, Informix Connect, Ingres Net, DB2 Connect etc. 

 
 [[/images/aadonetst.gif|]]  

 
/Type A Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 
 
 [[/images/aadonetstprog.gif|]]  

 
/Type A Architectural Diagram for Progress ADO.NET Image scaled down; Click to enlarge./ 

 
These drivers are built using the Type-B client-networking interface to wire-protocols of the supported back-end database. These drivers are installed once on a workstation/desktop or application server machine, and after installation are ready for direct communication with the supported back-end database. This driver format is only currently available for; Microsoft SQL Server, SYBASE ASE, [[MySQL]]  , [[PostgreSQL]]  , and [[OpenLink]]  Virtuoso. Support for other databases will occur as and when unsupported database engine vendors make their RPC client-interfaces available to third-party developers. 

 
 [[/images/badonetst.gif|]]  

 
/Type B Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 
These drivers are proxies sitting atop third-party implementations of the relevant data-access mechanisms. Their prime purpose is to integrate one data-access standard implementation with another. There are a variety of scenarios where this is useful such as: 

*ADO.NET access to back-end databases that are only accessible via ODBC  
 
 [[/images/cadonetst.gif|]]  

 
/Type C Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 

----
  