
= uda.dotnet.mt

%TOC%

  
=  Multi-Tier (Enterprise Edition)

%TOC%

  Multi-Tier (Enterprise Edition) 
The Multi-Tier Drivers comprise client and server components, being uniquely equipped with a built-in high-performance database-independent networking layer and a session rules-book for governing and securing connections. These drivers are network-ready out of the box, and capable of dynamically discovering matching server components anywhere in a LAN/subnet using the "Bonjour" service-discovery protocol (previously known as "Rendezvous", an implementation of [[ZeroConfig]]  ). 

Being Multi-Tier, these drivers include interface implementations at both the client and the server levels. 

In today''s world of client/server and web/application-server-based deployment architectures, with remote clients attempting to access your company''s corporate data from any number of unknown locations, security becomes a major concern of any organization in terms of controlling the access to this information. 

Server-side security features are implemented in the session Rule Book; access-controls take the form of a matrix of incoming connection criteria such as the IP#, Database, User, Application, OS and RDBMS type, so the administrator has maximum flexibility and fine granularity in defining what connections are permitted. 

 
 [[/images/udadotnetmt.gif|]]  

 
/ Image scaled down; Click to enlarge./ 

 
The Multi-Tier Drivers include the following components: 

*Generic Client(the entry for service consumption) this is component that provides the high level implementation of the relevant data-access mechanism (ODBC, JDBC, OLE DB, or .NET Provider) within the multi-tier component stack. By installing this on client machines, they can connect to any Request Broker component elsewhere  
*[[OpenLink]]  RPC Clientthis is the client side of the database-independent networking layer, and it is inextricably associated with the generic client at runtime (so you do not physically see this component as a separate library or class file etc).  
*[[OpenLink]]  Request Brokerone of the server-side components that implements server-side [[OpenLink]]  RPC functionality. This is the part of the Multi-Tier architecture that is responsible for session instantiation, configuration management, and overall system security. It is the heart and soul of the Multi-Tier component stack.  
*Database Agentanother server-side component that implements both the server-side [[OpenLink]]  RPC functionality and the actual [[OpenLink]]  Data Access functionality. This is the only database-specific component in the Multi-Tier component stack (so one generic client and one request broker, many agents for each different kind of database to which you wish to connect); it is also the set of interfaces implemented via the database vendor-provided CLI.  
The architectures of the Multi-Tier and Single-Tier drivers are different, but not as different as instinctively assumed: the Single-Tier database specific driver and the Multi-Tier Database Agent share a common core. What does not change is they both implement the call-level interfaces albeit at different places. The call-level interfaces take the following forms: 

*Type A - C-based dynamic SQL interface that inextricably includes client and server networking components  
*Type B - C-based remote procedure calls (RPC) interface to the wire-protocol of the underlying database. This is a client-only interface that communicates directly with the remote database server. These interfaces are not typically available to third-party developers. To date the Open Source projects such as [[FreeTDS]]  , [[MySQL]]  , [[PostgreSQL]]  , and Interbase are the only publicly accessible and freely available versions of such interfaces.  
*Type C - Generic bridges, these are ODBC, JDBC, OLE DB, and .NET providers that act as implementation proxies, such that bridging can be achieved in the manner depicted in the matrix below:  
[[OpenLink]]  provides Multi-Tier Drivers built using the Type A, B, and C call-level interfaces formats, depending on what is publicly available to third-party developers by the vendors of the respective database engines. 

Please view your respective Data Access Mechanism for more information. 

The [[OpenLink]]  Multi-Tier ADO.NET-based Database Agents open-up database avenues for .NET developers looking to embrace different technologies, be it different databases or operating systems, where the .NET architecture is not available. With a client, built using the C# language, direct access to the [[OpenLink]]  Server is achieved, in the process bypassing the native ODBC driver manager for speedier response and manageability. 

At the [[OpenLink]]  Server level, we show the different data-access architectures provided. The server database agents are built using the native Database CLI. 

These drivers are built using the Type-A call level interfaces of the relevant back-end database engine, and the [[OpenLink]]  database-independent networking layer. Thus, this driver format implements the generic interfaces of [[OpenLink]]  Data Access interface using a database vendor-provided CLI. 

Being Type A, this CLI includes data-access and database vendor-provided networking middleware which is optionally usable by the database agent (it is still simply a database client as far as the back-end database is concerned). 

Database Agents are typically installed on the same machine as the database engines that they will be accessing. This is the norm in a typical client-server scenario in which the [[OpenLink]]  Client components are installed on a desktop machine or workstation. 

In reality, there are political, infrastructural, and application-format (application server configuration) barriers that may impede your ability, or desire, to install the Database Agent on the database server machine. In these situations the Database Agents'' ability to use the database vendor-provided networking middleware comes into vital use, and will enable you to setup 3-Tier or N-Tier topologies (sometimes referred to as gateway architectures). 

 
 [[/images/aadonetmt.gif|]]  

 
/Type A Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 
 
 [[/images/aadonetprogmt.gif|]]  

 
/Type A Architectural Diagram for Progress ADO.NET Image scaled down; Click to enlarge./ 

 
This Database Agent format is similar to Type A, the only difference being the format of CLI used to implement the [[OpenLink]]  Data Access Interface. In this case the CLI is a database vendor-provided RPC-client that talks directly to remote database servers. This also means no database vendor-provided networking is required in 3-Tier or N-Tier topologies. 

 
 [[/images/badonetmt.gif|]]  

 
/Type B Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 
(also known as Proxies or Bridges). These drivers are proxies that sit atop third-party implementations of the relevant data access mechanisms. Their prime purpose is to integrate third-party data access drivers into the [[OpenLink]]  Multi-Tier architecture. Proxies are currently available in the following forms: 

*ODBC Agent - an implementation of the [[OpenLink]]  Data Access Interface using ODBC/JDBC databases  
 
 [[/images/cadonetmt.gif|]]  

 
/Type C Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./ 

 

 |  Platform Support |  Support for client, server, and application server operating systems  |
  

|  32- and 64-bit components |  Enables the development and utilization of 32- or 64-Bit DBMS independent applications.   

 |  Database Engine Support |  Backend database engine support  |
  

|  Broad backend Database Support |  Enables DBMS independent application utilization and deployment across a vast array of industry leading DBMS engines that includes; Oracle (7.x - 10.x), SQL Server (6.x - 2005), DB2 (6.x - 8.x), Sybase (10.x - 12.x), Progress (7.x - 10.x), Ingres (6.4 - II family), Informix (5.x - 9.x & IDS 2000), [[MySQL]]  , and [[PostgreSQL]]  .   
 

 |  Performance  |
  

|  Blistering Performance |  Delivery of data access performance levels across ODBC, JDBC, ADO.NET and OLE DB that don't compromise viability of DBMS independent application development and deployment.  |  Network Aware Record Retrieval |  Enabling the retrieval and insertion of multiple DBMS records in batches over the network with a minimal number of network hops.  |
  
 

 |  Security  |
  

|  Rules Engine Based Security |  Alignment and enforcement of data access policies across facets of enterprise IS infrastructure. This includes any combination of; users, user roles, applications, operating systems, databases, machine aliases, and networks.  |  Secure Data Transmission |  Enables development and utlization of encrypted data transmission between DBMS independent applications and backend databases.  |
  

 |  Administration |  Configuration and Management  |
  

|  Zero Configuration for ODBC DSNs |  Provides a Cross Platform implementation of the Rendezvous service discovery protocol. This enables the configuration of ODBC Data Sources Names (DSNs) to be completely server based with no client side configuration whatsoever. You simply pick a DSN configuration associated with your [[OpenLink]]  Request Broker from combo-box hosted list of [[OpenLink]]  Services.   
 

 |  Usability  |
  

|  Network Ready |  Enables usage of DBMS independent applications on any platform without installation of additional DBMS specific networking products.  |  Generic Drivers |  Install one, as opposed to several, client components per data access standard and driver combination for your database independent applications.  |
  

 |  Administration |  Configuration and Management  |
  

|  Centralized Configuration & Management |  A single point of focus when administering the data sources that serve the data access standards compliant applications.   
 

 |  Standards Compliance  |
  

|  International character support |  Enables the development and deployment of international applications that are independent of underlying database engine.   
 

 |  Performance  |
  

|  Multithreaded |  Enables exploitation of scalability benefits arising from the use of multiple CPUs or Clusters while developing or using DBMS independent applications.   

 |  Standards Compliance  |
  

|  Supports Advanced Data Access API functionality |  Enables the development and utilization of DBMS application with DBMS independent granularity that extends to challenging areas such as scalar function calls, dates and timestamps manipulation, outer join handling, and SQL stored procedure invocation etc.   
 

----
  