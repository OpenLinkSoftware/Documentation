%META:TOPICPARENT{name="JDBC3DriverClasses"}%
11.11.6. Class OPLJdbcRowSet
OPLJdbcRowSet Classes OPLJdbcRowSet

A OPLJdbcRowSet is a connected rowset. The purpose of the OPLJdbcRowSet class is to act like a JavaBean at design time and provide a thin layer that wraps around a JDBC ResultSet at runtime.

When execute() is called a OPLJdbcRowSet object opens a JDBC connection internally which remains open until close() is called, unless a Connection is passed to execute() explicitly, in which case that Connection is used instead. ResultSet operations such as cursor movement, updating, etc. are simply delegated to an underlying JDBC ResultSet object which is maintained internally.
11.11.6.1. Synopsis

public class OPLJdbcRowSet extends BaseRowSet  {
  // Public Constructors
  public OPLJdbcRowSet();
  // Public Methods
  public void finalize() throws java.lang.Throwable;
  public void execute() throws java.sql.SQLException;
  public void execute(java.sql.Connection _conn) throws java.sql.SQLException;
  public void close() throws java.sql.SQLException;
  public void cancelRowUpdates() throws java.sql.SQLException;
  public boolean next() throws java.sql.SQLException;
  public boolean previous() throws java.sql.SQLException;
  public boolean first() throws java.sql.SQLException;
  public boolean last() throws java.sql.SQLException;
  public boolean absolute(int row) throws java.sql.SQLException;
  public boolean relative(int rows) throws java.sql.SQLException;
  public void beforeFirst() throws java.sql.SQLException;
  public void afterLast() throws java.sql.SQLException;
  public boolean isBeforeFirst() throws java.sql.SQLException;
  public boolean isAfterLast() throws java.sql.SQLException;
  public boolean isFirst() throws java.sql.SQLException;
  public boolean isLast() throws java.sql.SQLException;
  public int getRow() throws java.sql.SQLException;
  public boolean rowUpdated() throws java.sql.SQLException;
  public boolean rowInserted() throws java.sql.SQLException;
  public boolean rowDeleted() throws java.sql.SQLException;
  public void refreshRow() throws java.sql.SQLException;
  public void insertRow() throws java.sql.SQLException;
  public void updateRow() throws java.sql.SQLException;
  public void deleteRow() throws java.sql.SQLException;
  public void moveToInsertRow() throws java.sql.SQLException;
  public void moveToCurrentRow() throws java.sql.SQLException;
  public boolean wasNull() throws java.sql.SQLException;
  public SQLWarning getWarnings() throws java.sql.SQLException;
  public void clearWarnings() throws java.sql.SQLException;
  public String getCursorName() throws java.sql.SQLException;
  public ResultSetMetaData getMetaData() throws java.sql.SQLException;
  public int findColumn(java.lang.String columnName) 
      throws java.sql.SQLException;
  public String getString(int columnIndex) throws java.sql.SQLException;
  public boolean getBoolean(int columnIndex) throws java.sql.SQLException;
  public byte getByte(int columnIndex) throws java.sql.SQLException;
  public short getShort(int columnIndex) throws java.sql.SQLException;
  public int getInt(int columnIndex) throws java.sql.SQLException;
  public long getLong(int columnIndex) throws java.sql.SQLException;
  public float getFloat(int columnIndex) throws java.sql.SQLException;
  public double getDouble(int columnIndex) throws java.sql.SQLException;
  public BigDecimal getBigDecimal(int columnIndex) 
      throws java.sql.SQLException;
  public BigDecimal getBigDecimal(int columnIndex, int scale) 
      throws java.sql.SQLException;
  public byte[] getBytes(int columnIndex) throws java.sql.SQLException;
  public Date getDate(int columnIndex) throws java.sql.SQLException;
  public Time getTime(int columnIndex) throws java.sql.SQLException;
  public Timestamp getTimestamp(int columnIndex) throws java.sql.SQLException;
  public InputStream getAsciiStream(int columnIndex) 
      throws java.sql.SQLException;
  public InputStream getUnicodeStream(int columnIndex) 
      throws java.sql.SQLException;
  public InputStream getBinaryStream(int columnIndex) 
      throws java.sql.SQLException;
  public Object getObject(int columnIndex) throws java.sql.SQLException;
  public String getString(java.lang.String columnName) 
      throws java.sql.SQLException;
  public boolean getBoolean(java.lang.String columnName) 
      throws java.sql.SQLException;
  public byte getByte(java.lang.String columnName) 
      throws java.sql.SQLException;
  public short getShort(java.lang.String columnName) 
      throws java.sql.SQLException;
  public int getInt(java.lang.String columnName) throws java.sql.SQLException;
  public long getLong(java.lang.String columnName) 
      throws java.sql.SQLException;
  public float getFloat(java.lang.String columnName) 
      throws java.sql.SQLException;
  public double getDouble(java.lang.String columnName) 
      throws java.sql.SQLException;
  public BigDecimal getBigDecimal(java.lang.String columnName, int scale) 
      throws java.sql.SQLException;
  public byte[] getBytes(java.lang.String columnName) 
      throws java.sql.SQLException;
  public Date getDate(java.lang.String columnName) 
      throws java.sql.SQLException;
  public Time getTime(java.lang.String columnName) 
      throws java.sql.SQLException;
  public Timestamp getTimestamp(java.lang.String columnName) 
      throws java.sql.SQLException;
  public InputStream getAsciiStream(java.lang.String columnName) 
      throws java.sql.SQLException;
  public InputStream getUnicodeStream(java.lang.String columnName) 
      throws java.sql.SQLException;
  public InputStream getBinaryStream(java.lang.String columnName) 
      throws java.sql.SQLException;
  public Object getObject(java.lang.String columnName) 
      throws java.sql.SQLException;
  public Reader getCharacterStream(int columnIndex) 
      throws java.sql.SQLException;
  public Reader getCharacterStream(java.lang.String columnName) 
      throws java.sql.SQLException;
  public BigDecimal getBigDecimal(java.lang.String columnName) 
      throws java.sql.SQLException;
  public void updateNull(int columnIndex) throws java.sql.SQLException;
  public void updateBoolean(int columnIndex, boolean x) 
      throws java.sql.SQLException;
  public void updateByte(int columnIndex, byte x) throws java.sql.SQLException;
  public void updateShort(int columnIndex, short x) 
      throws java.sql.SQLException;
  public void updateInt(int columnIndex, int x) throws java.sql.SQLException;
  public void updateLong(int columnIndex, long x) throws java.sql.SQLException;
  public void updateFloat(int columnIndex, float x) 
      throws java.sql.SQLException;
  public void updateDouble(int columnIndex, double x) 
      throws java.sql.SQLException;
  public void updateBigDecimal(int columnIndex, java.math.BigDecimal x) 
      throws java.sql.SQLException;
  public void updateString(int columnIndex, java.lang.String x) 
      throws java.sql.SQLException;
  public void updateBytes(int columnIndex, byte[] x) 
      throws java.sql.SQLException;
  public void updateDate(int columnIndex, java.sql.Date x) 
      throws java.sql.SQLException;
  public void updateTime(int columnIndex, java.sql.Time x) 
      throws java.sql.SQLException;
  public void updateTimestamp(int columnIndex, java.sql.Timestamp x) 
      throws java.sql.SQLException;
  public void updateAsciiStream(int columnIndex, java.io.InputStream x, 
                                int length) throws java.sql.SQLException;
  public void updateBinaryStream(int columnIndex, java.io.InputStream x, 
                                 int length) throws java.sql.SQLException;
  public void updateCharacterStream(int columnIndex, java.io.Reader x, 
                                    int length) throws java.sql.SQLException;
  public void updateObject(int columnIndex, java.lang.Object x, int scale) 
      throws java.sql.SQLException;
  public void updateObject(int columnIndex, java.lang.Object x) 
      throws java.sql.SQLException;
  public void updateNull(java.lang.String columnName) 
      throws java.sql.SQLException;
  public void updateBoolean(java.lang.String columnName, boolean x) 
      throws java.sql.SQLException;
  public void updateByte(java.lang.String columnName, byte x) 
      throws java.sql.SQLException;
  public void updateShort(java.lang.String columnName, short x) 
      throws java.sql.SQLException;
  public void updateInt(java.lang.String columnName, int x) 
      throws java.sql.SQLException;
  public void updateLong(java.lang.String columnName, long x) 
      throws java.sql.SQLException;
  public void updateFloat(java.lang.String columnName, float x) 
      throws java.sql.SQLException;
  public void updateDouble(java.lang.String columnName, double x) 
      throws java.sql.SQLException;
  public void updateBigDecimal(java.lang.String columnName, 
                               java.math.BigDecimal x) 
      throws java.sql.SQLException;
  public void updateString(java.lang.String columnName, java.lang.String x) 
      throws java.sql.SQLException;
  public void updateBytes(java.lang.String columnName, byte[] x) 
      throws java.sql.SQLException;
  public void updateDate(java.lang.String columnName, java.sql.Date x) 
      throws java.sql.SQLException;
  public void updateTime(java.lang.String columnName, java.sql.Time x) 
      throws java.sql.SQLException;
  public void updateTimestamp(java.lang.String columnName, 
                              java.sql.Timestamp x) 
      throws java.sql.SQLException;
  public void updateAsciiStream(java.lang.String columnName, 
                                java.io.InputStream x, int length) 
      throws java.sql.SQLException;
  public void updateBinaryStream(java.lang.String columnName, 
                                 java.io.InputStream x, int length) 
      throws java.sql.SQLException;
  public void updateCharacterStream(java.lang.String columnName, 
                                    java.io.Reader x, int length) 
      throws java.sql.SQLException;
  public void updateObject(java.lang.String columnName, java.lang.Object x, 
                           int scale) throws java.sql.SQLException;
  public void updateObject(java.lang.String columnName, java.lang.Object x) 
      throws java.sql.SQLException;
  public Statement getStatement() throws java.sql.SQLException;
  public Object getObject(int colIndex, java.util.Map map) 
      throws java.sql.SQLException;
  public Ref getRef(int colIndex) throws java.sql.SQLException;
  public Blob getBlob(int colIndex) throws java.sql.SQLException;
  public Clob getClob(int colIndex) throws java.sql.SQLException;
  public Array getArray(int colIndex) throws java.sql.SQLException;
  public Object getObject(java.lang.String colName, java.util.Map map) 
      throws java.sql.SQLException;
  public Ref getRef(java.lang.String colName) throws java.sql.SQLException;
  public Blob getBlob(java.lang.String colName) throws java.sql.SQLException;
  public Clob getClob(java.lang.String colName) throws java.sql.SQLException;
  public Array getArray(java.lang.String colName) throws java.sql.SQLException;
  public Date getDate(int columnIndex, java.util.Calendar cal) 
      throws java.sql.SQLException;
  public Date getDate(java.lang.String columnName, java.util.Calendar cal) 
      throws java.sql.SQLException;
  public Time getTime(int columnIndex, java.util.Calendar cal) 
      throws java.sql.SQLException;
  public Time getTime(java.lang.String columnName, java.util.Calendar cal) 
      throws java.sql.SQLException;
  public Timestamp getTimestamp(int columnIndex, java.util.Calendar cal) 
      throws java.sql.SQLException;
  public Timestamp getTimestamp(java.lang.String columnName, 
                                java.util.Calendar cal) 
      throws java.sql.SQLException;
  public URL getURL(int columnIndex) throws java.sql.SQLException;
  public URL getURL(java.lang.String columnName) throws java.sql.SQLException;
  public void updateRef(int columnIndex, java.sql.Ref x) 
      throws java.sql.SQLException;
  public void updateRef(java.lang.String columnName, java.sql.Ref x) 
      throws java.sql.SQLException;
  public void updateBlob(int columnIndex, java.sql.Blob x) 
      throws java.sql.SQLException;
  public void updateBlob(java.lang.String columnName, java.sql.Blob x) 
      throws java.sql.SQLException;
  public void updateClob(int columnIndex, java.sql.Clob x) 
      throws java.sql.SQLException;
  public void updateClob(java.lang.String columnName, java.sql.Clob x) 
      throws java.sql.SQLException;
  public void updateArray(int columnIndex, java.sql.Array x) 
      throws java.sql.SQLException;
  public void updateArray(java.lang.String columnName, java.sql.Array x) 
      throws java.sql.SQLException;
}
      

Inheritance Path
java.lang.Object

|
openlink.javax.BaseRowSet

|
openlink.javax.OPLJdbcRowSet


11.11.6.2. Members
11.11.6.2.1. Method absolute(int)
absolute Methods absolute

Synopsis: public boolean absolute(int row) throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or row is 0, or result set type is TYPE_FORWARD_ONLY.

Move to an absolute row number in the result set.

If row is positive, moves to an absolute row with respect to the beginning of the result set. The first row is row 1, the second is row 2, etc.

If row is negative, moves to an absolute row position with respect to the end of result set. For example, calling absolute(-1) positions the cursor on the last row, absolute(-2) indicates the next-to-last row, etc.

An attempt to position the cursor beyond the first/last row in the result set, leaves the cursor before/after the first/last row, respectively.

Note: Calling absolute(1) is the same as calling first(). Calling absolute(-1) is the same as calling last().

11.11.6.2.2. Method afterLast()
afterLast Methods afterLast

Synopsis: public void afterLast() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or result set type is TYPE_FORWARD_ONLY.

Moves to the end of the result set, just after the last row. Has no effect if the result set contains no rows.

11.11.6.2.3. Method beforeFirst()
beforeFirst Methods beforeFirst

Synopsis: public void beforeFirst() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or result set type is TYPE_FORWARD_ONLY

Moves to the front of the result set, just before the first row. Has no effect if the result set contains no rows.

11.11.6.2.4. Method cancelRowUpdates()
cancelRowUpdates Methods cancelRowUpdates

Synopsis: public void cancelRowUpdates() throws java.sql.SQLException;
          

Exceptions

SQLException

if an error occurs.

The cancelRowUpdates() method may be called after calling an updateXXX() method(s) and before calling updateRow() to rollback the updates made to a row. If no updates have been made or updateRow() has already been called, then this method has no effect.

11.11.6.2.5. Method clearWarnings()
clearWarnings Methods clearWarnings

Synopsis: public void clearWarnings() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

After this call getWarnings returns null until a new warning is reported for this ResultSet.

11.11.6.2.6. Method close()
close Methods close

Synopsis: public void close() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

In some cases, it is desirable to immediately release a ResultSet's database and JDBC resources instead of waiting for this to happen when it is automatically closed; the close method provides this immediate release.

Note: A ResultSet is automatically closed by the Statement that generated it when that Statement is closed, re-executed, or is used to retrieve the next result from a sequence of multiple results. A ResultSet is also automatically closed when it is garbage collected.

11.11.6.2.7. Method deleteRow()
deleteRow Methods deleteRow

Synopsis: public void deleteRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or if called when on the insert row.

Delete the current row from the result set and the underlying database. Cannot be called when on the insert row.

11.11.6.2.8. Method execute()
execute Methods execute

Synopsis: public void execute() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

Populates the rowset with data. Execute() may use the following properties: url, data source name, user name, password, transaction isolation, and type map to create a connection for reading data. Execute may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query timeout. If the required properties have not been set, an exception is thrown. If successful, the current contents of the rowset are discarded and the rowset's metadata is also (re)set. If there are outstanding updates, they are ignored.

11.11.6.2.9. Method execute(Connection)
execute Methods execute

Synopsis: public void execute(java.sql.Connection _conn) 
              throws java.sql.SQLException;
          

Parameters

_conn - a Connection to use

Exceptions

SQLException

if a database-access error occurs.

Populates the rowset with data. Uses an existing JDBC connection object. The values of the url/data source name, user, and password properties are ignored. The command specified by the command property is executed to retrieve the data. The current contents of the rowset are discarded and the rowset's metadata is also (re)set. If there are outstanding updates, they are also ignored.

11.11.6.2.10. Method findColumn(String)
findColumn Methods findColumn

Synopsis: public int findColumn(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

return - the column index

Exceptions

SQLException

if a database-access error occurs.

Map a Resultset column name to a ResultSet column index.

11.11.6.2.11. Method first()
first Methods first

Synopsis: public boolean first() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or result set type is TYPE_FORWARD_ONLY.

Moves to the first row in the result set.

11.11.6.2.12. Method getArray(int)
getArray Methods getArray

Synopsis: public Array getArray(int colIndex) throws java.sql.SQLException;
          

Parameters

colIndex - the first column is 1, the second is 2, ...

return - an object representing an SQL array

Get an array column.

11.11.6.2.13. Method getArray(String)
getArray Methods getArray

Synopsis: public Array getArray(java.lang.String colName) 
              throws java.sql.SQLException;
          

Parameters

colName - the column name

return - an object representing an SQL array

Get an array column.

11.11.6.2.14. Method getAsciiStream(int)
getAsciiStream Methods getAsciiStream

Synopsis: public InputStream getAsciiStream(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - a Java input stream that delivers the database column value as a stream of one byte ASCII characters. If the value is SQL NULL then the result is null.

Exceptions

SQLException

if a database-access error occurs.

A column value can be retrieved as a stream of ASCII characters and then read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII.

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. . Also, a stream may return 0 for available() whether there is data available or not.

11.11.6.2.15. Method getAsciiStream(String)
getAsciiStream Methods getAsciiStream

Synopsis: public InputStream getAsciiStream(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - a Java input stream that delivers the database column value as a stream of one byte ASCII characters. If the value is SQL NULL then the result is null.

Exceptions

SQLException

if a database-access error occurs.

A column value can be retrieved as a stream of ASCII characters and then read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII.

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream.

11.11.6.2.16. Method getBigDecimal(int)
getBigDecimal Methods getBigDecimal

Synopsis: public BigDecimal getBigDecimal(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value (full precision); if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.math.BigDecimal object.

11.11.6.2.17. Method getBigDecimal(int, int)
getBigDecimal Methods getBigDecimal

Synopsis: public BigDecimal getBigDecimal(int columnIndex, int scale) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

scale - the number of digits to the right of the decimal

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Deprecated

Get the value of a column in the current row as a java.math.BigDecimal object.

11.11.6.2.18. Method getBigDecimal(String)
getBigDecimal Methods getBigDecimal

Synopsis: public BigDecimal getBigDecimal(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Get the value of a column in the current row as a java.math.BigDecimal object.

11.11.6.2.19. Method getBigDecimal(String, int)
getBigDecimal Methods getBigDecimal

Synopsis: public BigDecimal getBigDecimal(java.lang.String columnName, 
                                          int scale) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

scale - the number of digits to the right of the decimal

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Deprecated

Get the value of a column in the current row as a java.math.BigDecimal object.

11.11.6.2.20. Method getBinaryStream(int)
getBinaryStream Methods getBinaryStream

Synopsis: public InputStream getBinaryStream(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - a Java input stream that delivers the database column value as a stream of uninterpreted bytes. If the value is SQL NULL then the result is null.

Exceptions

SQLException

if a database-access error occurs.

A column value can be retrieved as a stream of uninterpreted bytes and then read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY values.

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. Also, a stream may return 0 for available() whether there is data available or not.

11.11.6.2.21. Method getBinaryStream(String)
getBinaryStream Methods getBinaryStream

Synopsis: public InputStream getBinaryStream(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - a Java input stream that delivers the database column value as a stream of uninterpreted bytes. If the value is SQL NULL then the result is null.

Exceptions

SQLException

if a database-access error occurs.

A column value can be retrieved as a stream of uninterpreted bytes and then read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY values.

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream.

11.11.6.2.22. Method getBlob(int)
getBlob Methods getBlob

Synopsis: public Blob getBlob(int colIndex) throws java.sql.SQLException;
          

Parameters

colIndex - the first column is 1, the second is 2, ...

return - an object representing a BLOB

Get a BLOB column.

11.11.6.2.23. Method getBlob(String)
getBlob Methods getBlob

Synopsis: public Blob getBlob(java.lang.String colName) 
              throws java.sql.SQLException;
          

Parameters

colName - the column name

return - an object representing a BLOB

Get a BLOB column.

11.11.6.2.24. Method getBoolean(int)
getBoolean Methods getBoolean

Synopsis: public boolean getBoolean(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is false

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java boolean.

11.11.6.2.25. Method getBoolean(String)
getBoolean Methods getBoolean

Synopsis: public boolean getBoolean(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is false

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java boolean.

11.11.6.2.26. Method getByte(int)
getByte Methods getByte

Synopsis: public byte getByte(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java byte.

11.11.6.2.27. Method getByte(String)
getByte Methods getByte

Synopsis: public byte getByte(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java byte.

11.11.6.2.28. Method getBytes(int)
getBytes Methods getBytes

Synopsis: public byte[] getBytes(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java byte array. The bytes represent the raw values returned by the driver.

11.11.6.2.29. Method getBytes(String)
getBytes Methods getBytes

Synopsis: public byte[] getBytes(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java byte array. The bytes represent the raw values returned by the driver.

11.11.6.2.30. Method getCharacterStream(int)
getCharacterStream Methods getCharacterStream

Synopsis: public Reader getCharacterStream(int columnIndex) 
              throws java.sql.SQLException;
          

Get the value of a column in the current row as a java.io.Reader.

11.11.6.2.31. Method getCharacterStream(String)
getCharacterStream Methods getCharacterStream

Synopsis: public Reader getCharacterStream(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Get the value of a column in the current row as a java.io.Reader.

11.11.6.2.32. Method getClob(int)
getClob Methods getClob

Synopsis: public Clob getClob(int colIndex) throws java.sql.SQLException;
          

Parameters

colIndex - the first column is 1, the second is 2, ...

return - an object representing a CLOB

Get a CLOB column.

11.11.6.2.33. Method getClob(String)
getClob Methods getClob

Synopsis: public Clob getClob(java.lang.String colName) 
              throws java.sql.SQLException;
          

Parameters

colName - the column name

return - an object representing a CLOB

Get a CLOB column.

11.11.6.2.34. Method getCursorName()
getCursorName Methods getCursorName

Synopsis: public String getCursorName() throws java.sql.SQLException;
          

Exceptions

SQLException

if an error occurs.

Get the name of the SQL cursor used by this ResultSet.

11.11.6.2.35. Method getDate(int)
getDate Methods getDate

Synopsis: public Date getDate(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Date object.

11.11.6.2.36. Method getDate(int, Calendar)
getDate Methods getDate

Synopsis: public Date getDate(int columnIndex, java.util.Calendar cal) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

cal - the calendar to use in constructing the date

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Date object. Use the calendar to construct an appropriate millisecond value for the Date, if the underlying database doesn't store timezone information.

11.11.6.2.37. Method getDate(String)
getDate Methods getDate

Synopsis: public Date getDate(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Date object.

11.11.6.2.38. Method getDate(String, Calendar)
getDate Methods getDate

Synopsis: public Date getDate(java.lang.String columnName, 
                              java.util.Calendar cal) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

cal - the calendar to use in constructing the date

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Date object. Use the calendar to construct an appropriate millisecond value for the Date, if the underlying database doesn't store timezone information.

11.11.6.2.39. Method getDouble(int)
getDouble Methods getDouble

Synopsis: public double getDouble(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java double.

11.11.6.2.40. Method getDouble(String)
getDouble Methods getDouble

Synopsis: public double getDouble(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java double.

11.11.6.2.41. Method getFloat(int)
getFloat Methods getFloat

Synopsis: public float getFloat(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java float.

11.11.6.2.42. Method getFloat(String)
getFloat Methods getFloat

Synopsis: public float getFloat(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java float.

11.11.6.2.43. Method getInt(int)
getInt Methods getInt

Synopsis: public int getInt(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java int.

11.11.6.2.44. Method getInt(String)
getInt Methods getInt

Synopsis: public int getInt(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java int.

11.11.6.2.45. Method getLong(int)
getLong Methods getLong

Synopsis: public long getLong(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java long.

11.11.6.2.46. Method getLong(String)
getLong Methods getLong

Synopsis: public long getLong(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java long.

11.11.6.2.47. Method getMetaData()
getMetaData Methods getMetaData

Synopsis: public ResultSetMetaData getMetaData() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

The number, types and properties of a ResultSet's columns are provided by the getMetaData method.

11.11.6.2.48. Method getObject(int)
getObject Methods getObject

Synopsis: public Object getObject(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - a java.lang.Object holding the column value.

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java object.

This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC spec.

This method may also be used to read database specific abstract data types. JDBC 2.0 New behavior for getObject(). The behavior of method getObject() is extended to materialize data of SQL user-defined types. When the column @column is a structured or distinct value, the behavior of this method is as if it were a call to: getObject(column, this.getStatement().getConnection().getTypeMap()).

11.11.6.2.49. Method getObject(int, Map)
getObject Methods getObject

Synopsis: public Object getObject(int colIndex, java.util.Map map) 
              throws java.sql.SQLException;
          

Parameters

colIndex - the first column is 1, the second is 2, ...

map - the mapping from SQL type names to Java classes

return - an object representing the SQL value

Returns the value of column @i as a Java object. Use the map to determine the class from which to construct data of SQL structured and distinct types.

11.11.6.2.50. Method getObject(String)
getObject Methods getObject

Synopsis: public Object getObject(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - a java.lang.Object holding the column value.

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java object.

This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC spec.

This method may also be used to read database specific abstract data types. JDBC 2.0 New behavior for getObject(). The behavior of method getObject() is extended to materialize data of SQL user-defined types. When the column @columnName is a structured or distinct value, the behavior of this method is as if it were a call to: getObject(columnName, this.getStatement().getConnection().getTypeMap()).

11.11.6.2.51. Method getObject(String, Map)
getObject Methods getObject

Synopsis: public Object getObject(java.lang.String colName, java.util.Map map) 
              throws java.sql.SQLException;
          

Parameters

colName - the column name

map - the mapping from SQL type names to Java classes

return - an object representing the SQL value

Returns the value of column @i as a Java object. Use the map to determine the class from which to construct data of SQL structured and distinct types.

11.11.6.2.52. Method getRef(int)
getRef Methods getRef

Synopsis: public Ref getRef(int colIndex) throws java.sql.SQLException;
          

Parameters

colIndex - the first column is 1, the second is 2, ...

return - an object representing data of an SQL REF type

Get a REF(<structured-type>) column.

11.11.6.2.53. Method getRef(String)
getRef Methods getRef

Synopsis: public Ref getRef(java.lang.String colName) 
              throws java.sql.SQLException;
          

Parameters

colName - the column name

return - an object representing data of an SQL REF type

Get a REF(<structured-type>) column.

11.11.6.2.54. Method getRow()
getRow Methods getRow

Synopsis: public int getRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

Determine the current row number. The first row is number 1, the second number 2, etc.

11.11.6.2.55. Method getShort(int)
getShort Methods getShort

Synopsis: public short getShort(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java short.

11.11.6.2.56. Method getShort(String)
getShort Methods getShort

Synopsis: public short getShort(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is 0

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java short.

11.11.6.2.57. Method getStatement()
getStatement Methods getStatement

Synopsis: public Statement getStatement() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs

Return the Statement that produced the ResultSet.

11.11.6.2.58. Method getString(int)
getString Methods getString

Synopsis: public String getString(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java String.

11.11.6.2.59. Method getString(String)
getString Methods getString

Synopsis: public String getString(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a Java String.

11.11.6.2.60. Method getTime(int)
getTime Methods getTime

Synopsis: public Time getTime(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Time object.

11.11.6.2.61. Method getTime(int, Calendar)
getTime Methods getTime

Synopsis: public Time getTime(int columnIndex, java.util.Calendar cal) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

cal - the calendar to use in constructing the time

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Time object. Use the calendar to construct an appropriate millisecond value for the Time, if the underlying database doesn't store timezone information.

11.11.6.2.62. Method getTime(String)
getTime Methods getTime

Synopsis: public Time getTime(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Time object.

11.11.6.2.63. Method getTime(String, Calendar)
getTime Methods getTime

Synopsis: public Time getTime(java.lang.String columnName, 
                              java.util.Calendar cal) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

cal - the calendar to use in constructing the time

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Time object. Use the calendar to construct an appropriate millisecond value for the Time, if the underlying database doesn't store timezone information.

11.11.6.2.64. Method getTimestamp(int)
getTimestamp Methods getTimestamp

Synopsis: public Timestamp getTimestamp(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Timestamp object.

11.11.6.2.65. Method getTimestamp(int, Calendar)
getTimestamp Methods getTimestamp

Synopsis: public Timestamp getTimestamp(int columnIndex, 
                                        java.util.Calendar cal) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

cal - the calendar to use in constructing the timestamp

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Timestamp object. Use the calendar to construct an appropriate millisecond value for the Timestamp, if the underlying database doesn't store timezone information.

11.11.6.2.66. Method getTimestamp(String)
getTimestamp Methods getTimestamp

Synopsis: public Timestamp getTimestamp(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column


return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Timestamp object.

11.11.6.2.67. Method getTimestamp(String, Calendar)
getTimestamp Methods getTimestamp

Synopsis: public Timestamp getTimestamp(java.lang.String columnName, 
                                        java.util.Calendar cal) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

cal - the calendar to use in constructing the timestamp

return - the column value; if the value is SQL NULL, the result is null

Exceptions

SQLException

if a database-access error occurs.

Get the value of a column in the current row as a java.sql.Timestamp object. Use the calendar to construct an appropriate millisecond value for the Timestamp, if the underlying database doesn't store timezone information.

11.11.6.2.68. Method getUnicodeStream(int)
getUnicodeStream Methods getUnicodeStream

Synopsis: public InputStream getUnicodeStream(int columnIndex) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

return - a Java input stream that delivers the database column value as a stream of two byte Unicode characters. If the value is SQL NULL then the result is null.

Exceptions

SQLException

if a database-access error occurs.

Deprecated

A column value can be retrieved as a stream of Unicode characters and then read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into Unicode.

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. . Also, a stream may return 0 for available() whether there is data available or not.

11.11.6.2.69. Method getUnicodeStream(String)
getUnicodeStream Methods getUnicodeStream

Synopsis: public InputStream getUnicodeStream(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - is the SQL name of the column

return - a Java input stream that delivers the database column value as a stream of two byte Unicode characters. If the value is SQL NULL then the result is null.

Exceptions

SQLException

if a database-access error occurs.

Deprecated

A column value can be retrieved as a stream of Unicode characters and then read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into Unicode.

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream.

11.11.6.2.70. Method getURL(int)
getURL Methods getURL

Synopsis: public URL getURL(int columnIndex) throws java.sql.SQLException;
          

Parameters

columnIndex - the index of the column 1 is the first, 2 is the second,...

return - the column value as a java.net.URL object; if the value is SQL NULL, the value returned is null in the Java programming language

Exceptions

SQLException

if a database access error occurs, or if a URL is malformed

Additional Information

Since

    * 1.4


Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.

11.11.6.2.71. Method getURL(String)
getURL Methods getURL

Synopsis: public URL getURL(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - the SQL name of the column

return - the column value as a java.net.URL object; if the value is SQL NULL, the value returned is null in the Java programming language

Exceptions

SQLException

if a database access error occurs or if a URL is malformed

Additional Information

Since

    * 1.4



Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.

11.11.6.2.72. Method getWarnings()
getWarnings Methods getWarnings

Synopsis: public SQLWarning getWarnings() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

The first warning reported by calls on this ResultSet is returned. Subsequent ResultSet warnings will be chained to this SQLWarning.

The warning chain is automatically cleared each time a new row is read.

Note: This warning chain only covers warnings caused by ResultSet methods. Any warning caused by statement methods (such as reading OUT parameters) will be chained on the Statement object.

11.11.6.2.73. Method insertRow()
insertRow Methods insertRow

Synopsis: public void insertRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database access error occurs, if this method is called when the cursor is not on the insert row, or if not all of non-nullable columns in the insert row have been given a value

Inserts the contents of the insert row into this ResultSet objaect and into the database. The cursor must be on the insert row when this method is called.

11.11.6.2.74. Method isAfterLast()
isAfterLast Methods isAfterLast

Synopsis: public boolean isAfterLast() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

Determine if the cursor is after the last row in the result set.

11.11.6.2.75. Method isBeforeFirst()
isBeforeFirst Methods isBeforeFirst

Synopsis: public boolean isBeforeFirst() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

Determine if the cursor is before the first row in the result set.

11.11.6.2.76. Method isFirst()
isFirst Methods isFirst

Synopsis: public boolean isFirst() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

Determine if the cursor is on the first row of the result set.

11.11.6.2.77. Method isLast()
isLast Methods isLast

Synopsis: public boolean isLast() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

Determine if the cursor is on the last row of the result set. Note: Calling isLast() may be expensive since the JDBC driver might need to fetch ahead one row in order to determine whether the current row is the last row in the result set.

11.11.6.2.78. Method last()
last Methods last

Synopsis: public boolean last() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or result set type is TYPE_FORWARD_ONLY.

Moves to the last row in the result set.

11.11.6.2.79. Method moveToCurrentRow()
moveToCurrentRow Methods moveToCurrentRow

Synopsis: public void moveToCurrentRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or the result set is not updatable

Move the cursor to the remembered cursor position, usually the current row. Has no effect unless the cursor is on the insert row.

11.11.6.2.80. Method moveToInsertRow()
moveToInsertRow Methods moveToInsertRow


Synopsis: public void moveToInsertRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or the result set is not updatable

Move to the insert row. The current cursor position is remembered while the cursor is positioned on the insert row. The insert row is a special row associated with an updatable result set. It is essentially a buffer where a new row may be constructed by calling the updateXXX() methods prior to inserting the row into the result set. Only the updateXXX(), getXXX(), and insertRow() methods may be called when the cursor is on the insert row. All of the columns in a result set must be given a value each time this method is called before calling insertRow(). UpdateXXX()must be called before getXXX() on a column.

11.11.6.2.81. Method next()
next Methods next

Synopsis: public boolean next() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

A ResultSet is initially positioned before its first row; the first call to next makes the first row the current row; the second call makes the second row the current row, etc.

If an input stream from the previous row is open, it is implicitly closed. The ResultSet's warning chain is cleared when a new row is read.

11.11.6.2.82. Method previous()
previous Methods previous

Synopsis: public boolean previous() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or result set type is TYPE_FORWAR_DONLY.

Moves to the previous row in the result set.

Note: previous() is not the same as relative(-1) since it makes sense to call previous() when there is no current row.

11.11.6.2.83. Method refreshRow()
refreshRow Methods refreshRow

Synopsis: public void refreshRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or if called when on the insert row.

Refresh the value of the current row with its current value in the database. Cannot be called when on the insert row. The refreshRow() method provides a way for an application to explicitly tell the JDBC driver to refetch a row(s) from the database. An application may want to call refreshRow() when caching or prefetching is being done by the JDBC driver to fetch the latest value of a row from the database. The JDBC driver may actually refresh multiple rows at once if the fetch size is greater than one. All values are refetched subject to the transaction isolation level and cursor sensitivity. If refreshRow() is called after calling updateXXX(), but before calling updateRow() then the updates made to the row are lost. Calling refreshRow() frequently will likely slow performance.

11.11.6.2.84. Method relative(int)
relative Methods relative

Synopsis: public boolean relative(int rows) throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or there is no current row, or result set type is TYPE_FORWARD_ONLY.

Moves a relative number of rows, either positive or negative. Attempting to move beyond the first/last row in the result set positions the cursor before/after the the first/last row. Calling relative(0) is valid, but does not change the cursor position.

Note: Calling relative(1) is different than calling next() since is makes sense to call next() when there is no current row, for example, when the cursor is positioned before the first row or after the last row of the result set.

11.11.6.2.85. Method rowDeleted()
rowDeleted Methods rowDeleted

Synopsis: public boolean rowDeleted() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs

Additional Information

See Also

    * java.sql.DatabaseMetaData.deletesAreDetected


Determine if this row has been deleted. A deleted row may leave a visible "hole" in a result set. This method can be used to detect holes in a result set. The value returned depends on whether or not the result set can detect deletions.

11.11.6.2.86. Method rowInserted()
rowInserted Methods rowInserted

Synopsis: public boolean rowInserted() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs

Additional Information

See Also

    * java.sql.DatabaseMetaData.insertsAreDetected


Determine if the current row has been inserted. The value returned depends on whether or not the result set can detect visible inserts.

11.11.6.2.87. Method rowUpdated()
rowUpdated Methods rowUpdated

Synopsis: public boolean rowUpdated() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs

Additional Information

See Also

    * java.sql.DatabaseMetaData.updatesAreDetected


Determine if the current row has been updated. The value returned depends on whether or not the result set can detect updates.

11.11.6.2.88. Method updateArray(int, Array)
updateArray Methods updateArray

Synopsis: public void updateArray(int columnIndex, java.sql.Array x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.89. Method updateArray(String, Array)
updateArray Methods updateArray

Synopsis: public void updateArray(java.lang.String columnName, 
                                  java.sql.Array x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.90. Method updateAsciiStream(int, InputStream, int)
updateAsciiStream Methods updateAsciiStream

Synopsis: public void updateAsciiStream(int columnIndex, java.io.InputStream x, 
                                        int length) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

length - the length of the stream

Exceptions

SQLException

if a database-access error occurs

Update a column with an ascii stream value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.91. Method updateAsciiStream(String, InputStream, int)
updateAsciiStream Methods updateAsciiStream

Synopsis: public void updateAsciiStream(java.lang.String columnName, 
                                        java.io.InputStream x, 
                                        int length) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

length - of the stream

Exceptions

SQLException

if a database-access error occurs

Update a column with an ascii stream value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.92. Method updateBigDecimal(int, BigDecimal)
updateBigDecimal Methods updateBigDecimal

Synopsis: public void updateBigDecimal(int columnIndex, java.math.BigDecimal x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a BigDecimal value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.93. Method updateBigDecimal(String, BigDecimal)
updateBigDecimal Methods updateBigDecimal

Synopsis: public void updateBigDecimal(java.lang.String columnName, 
                                       java.math.BigDecimal x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a BigDecimal value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.94. Method updateBinaryStream(int, InputStream, int)
updateBinaryStream Methods updateBinaryStream

Synopsis: public void updateBinaryStream(int columnIndex, 
                                         java.io.InputStream x, int length) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

length - the length of the stream

Exceptions

SQLException

if a database-access error occurs

Update a column with a binary stream value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.95. Method updateBinaryStream(String, InputStream, int)
updateBinaryStream Methods updateBinaryStream

Synopsis: public void updateBinaryStream(java.lang.String columnName, 
                                         java.io.InputStream x, 
                                         int length) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

length - of the stream

Exceptions

SQLException

if a database-access error occurs

Update a column with a binary stream value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.96. Method updateBlob(int, Blob)
updateBlob Methods updateBlob

Synopsis: public void updateBlob(int columnIndex, java.sql.Blob x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.97. Method updateBlob(String, Blob)
updateBlob Methods updateBlob

Synopsis: public void updateBlob(java.lang.String columnName, java.sql.Blob x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.98. Method updateBoolean(int, boolean)
updateBoolean Methods updateBoolean

Synopsis: public void updateBoolean(int columnIndex, boolean x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a boolean value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.99. Method updateBoolean(String, boolean)
updateBoolean Methods updateBoolean

Synopsis: public void updateBoolean(java.lang.String columnName, boolean x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column


x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a boolean value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.100. Method updateByte(int, byte)
updateByte Methods updateByte

Synopsis: public void updateByte(int columnIndex, byte x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a byte value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.101. Method updateByte(String, byte)
updateByte Methods updateByte

Synopsis: public void updateByte(java.lang.String columnName, byte x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a byte value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.102. Method updateBytes(int, byte[])
updateBytes Methods updateBytes

Synopsis: public void updateBytes(int columnIndex, byte[] x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a byte array value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.103. Method updateBytes(String, byte[])
updateBytes Methods updateBytes

Synopsis: public void updateBytes(java.lang.String columnName, byte[] x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a byte array value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.104. Method updateCharacterStream(int, Reader, int)
updateCharacterStream Methods updateCharacterStream

Synopsis: public void updateCharacterStream(int columnIndex, java.io.Reader x, 
                                            int length) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

length - the length of the stream

Exceptions

SQLException

if a database-access error occurs

Update a column with a character stream value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.105. Method updateCharacterStream(String, Reader, int)
updateCharacterStream Methods updateCharacterStream

Synopsis: public void updateCharacterStream(java.lang.String columnName, 
                                            java.io.Reader x, 
                                            int length) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

length - of the stream

Exceptions

SQLException

if a database-access error occurs

Update a column with a character stream value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.106. Method updateClob(int, Clob)
updateClob Methods updateClob

Synopsis: public void updateClob(int columnIndex, java.sql.Clob x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.107. Method updateClob(String, Clob)
updateClob Methods updateClob

Synopsis: public void updateClob(java.lang.String columnName, java.sql.Clob x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.108. Method updateDate(int, Date)
updateDate Methods updateDate

Synopsis: public void updateDate(int columnIndex, java.sql.Date x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Date value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.109. Method updateDate(String, Date)
updateDate Methods updateDate

Synopsis: public void updateDate(java.lang.String columnName, java.sql.Date x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Date value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.110. Method updateDouble(int, double)
updateDouble Methods updateDouble

Synopsis: public void updateDouble(int columnIndex, double x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Double value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.111. Method updateDouble(String, double)
updateDouble Methods updateDouble

Synopsis: public void updateDouble(java.lang.String columnName, double x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a double value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.112. Method updateFloat(int, float)
updateFloat Methods updateFloat

Synopsis: public void updateFloat(int columnIndex, float x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a float value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.113. Method updateFloat(String, float)
updateFloat Methods updateFloat

Synopsis: public void updateFloat(java.lang.String columnName, float x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a float value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.114. Method updateInt(int, int)
updateInt Methods updateInt

Synopsis: public void updateInt(int columnIndex, int x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with an integer value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.115. Method updateInt(String, int)
updateInt Methods updateInt

Synopsis: public void updateInt(java.lang.String columnName, int x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with an integer value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.116. Method updateLong(int, long)
updateLong Methods updateLong

Synopsis: public void updateLong(int columnIndex, long x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a long value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.117. Method updateLong(String, long)
updateLong Methods updateLong

Synopsis: public void updateLong(java.lang.String columnName, long x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a long value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.118. Method updateNull(int)
updateNull Methods updateNull

Synopsis: public void updateNull(int columnIndex) throws java.sql.SQLException;
          


Parameters

columnIndex - the first column is 1, the second is 2, ...

Exceptions

SQLException

if a database-access error occurs

Give a nullable column a null value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.119. Method updateNull(String)
updateNull Methods updateNull

Synopsis: public void updateNull(java.lang.String columnName) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

Exceptions

SQLException

if a database-access error occurs

Update a column with a null value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.120. Method updateObject(int, Object)
updateObject Methods updateObject

Synopsis: public void updateObject(int columnIndex, java.lang.Object x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with an Object value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.121. Method updateObject(int, Object, int)
updateObject Methods updateObject

Synopsis: public void updateObject(int columnIndex, java.lang.Object x, 
                                   int scale) throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

scale - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types this is the number of digits after the decimal. For all other types this value will be ignored.

Exceptions

SQLException

if a database-access error occurs

Update a column with an Object value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.122. Method updateObject(String, Object)
updateObject Methods updateObject

Synopsis: public void updateObject(java.lang.String columnName, 
                                   java.lang.Object x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with an Object value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.123. Method updateObject(String, Object, int)
updateObject Methods updateObject

Synopsis: public void updateObject(java.lang.String columnName, 
                                   java.lang.Object x, int scale) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

scale - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types this is the number of digits after the decimal. For all other types this value will be ignored.

Exceptions

SQLException

if a database-access error occurs

Update a column with an Object value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.124. Method updateRef(int, Ref)
updateRef Methods updateRef

Synopsis: public void updateRef(int columnIndex, java.sql.Ref x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.125. Method updateRef(String, Ref)
updateRef Methods updateRef

Synopsis: public void updateRef(java.lang.String columnName, java.sql.Ref x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database access error occurs

Additional Information

Since

    * 1.4


Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or insertRow methods are called to update the database.

11.11.6.2.126. Method updateRow()
updateRow Methods updateRow

Synopsis: public void updateRow() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs, or if called when on the insert row

Update the underlying database with the new contents of the current row. Cannot be called when on the insert row.

11.11.6.2.127. Method updateShort(int, short)
updateShort Methods updateShort

Synopsis: public void updateShort(int columnIndex, short x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a short value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.128. Method updateShort(String, short)
updateShort Methods updateShort

Synopsis: public void updateShort(java.lang.String columnName, short x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a short value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.129. Method updateString(int, String)
updateString Methods updateString

Synopsis: public void updateString(int columnIndex, java.lang.String x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a String value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.130. Method updateString(String, String)
updateString Methods updateString

Synopsis: public void updateString(java.lang.String columnName, 
                                   java.lang.String x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a String value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.131. Method updateTime(int, Time)
updateTime Methods updateTime

Synopsis: public void updateTime(int columnIndex, java.sql.Time x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Time value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.132. Method updateTime(String, Time)
updateTime Methods updateTime

Synopsis: public void updateTime(java.lang.String columnName, java.sql.Time x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Time value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.133. Method updateTimestamp(int, Timestamp)
updateTimestamp Methods updateTimestamp

Synopsis: public void updateTimestamp(int columnIndex, java.sql.Timestamp x) 
              throws java.sql.SQLException;
          

Parameters

columnIndex - the first column is 1, the second is 2, ...

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Timestamp value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.134. Method updateTimestamp(String, Timestamp)
updateTimestamp Methods updateTimestamp

Synopsis: public void updateTimestamp(java.lang.String columnName, 
                                      java.sql.Timestamp x) 
              throws java.sql.SQLException;
          

Parameters

columnName - the name of the column

x - the new column value

Exceptions

SQLException

if a database-access error occurs

Update a column with a Timestamp value. The updateXXX() methods are used to update column values in the current row, or the insert row. The updateXXX() methods do not update the underlying database, instead the updateRow() or insertRow() methods are called to update the database.

11.11.6.2.135. Method wasNull()
wasNull Methods wasNull

Synopsis: public boolean wasNull() throws java.sql.SQLException;
          

Exceptions

SQLException

if a database-access error occurs.

A column may have the value of SQL NULL; wasNull reports whether the last column read had this special value. Note that you must first call getXXX on a column to try to read its value and then call wasNull() to find if the value was the SQL NULL.

