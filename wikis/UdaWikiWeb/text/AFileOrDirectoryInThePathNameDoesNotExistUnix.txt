%META:TOPICPARENT{name="ErrorMessagesA"}%
==Error Messages (A)==

[[ErrorMessagesA|A]] [[ErrorMessagesB|B]] [[ErrorMessagesC|C]] [[ErrorMessagesD|D]] [[ErrorMessagesE|E]] [[ErrorMessagesF|F]] [[ErrorMessagesG|G]] [[ErrorMessagesH|H]] [[ErrorMessagesI|I]] [[ErrorMessagesJ|J]] [[ErrorMessagesK|K]] [[ErrorMessagesL|L]] [[ErrorMessagesM|M]] [[ErrorMessagesN|N]] [[ErrorMessagesO|O]] [[ErrorMessagesP|P]] [[ErrorMessagesQ|Q]] [[ErrorMessagesR|R]] [[ErrorMessagesS|S]] [[ErrorMessagesT|T]] [[ErrorMessagesU|U]] [[ErrorMessagesV|V]] [[ErrorMessagesW|W]] [[ErrorMessagesX|X]] [[ErrorMessagesY|Y]] [[ErrorMessagesZ|Z]] [[ErrorMessagesSymbols|#]]

===A file or directory in the path name does not exist (Unix)===

"File or directory" errors are common errors. In fact, they are often preceded by another error, which names the actual file or directory that cannot be found. If you receive "file or directory" errors, determine if the file or directory exists. The following command will assist you with this task:
{{{
find / -name missing_file_name_here -print
}}}
For example: 
{{{
find / -name oplodbc.so -print
}}}
If the missing item does exist, add its path to relevant environmental variables. Here are the most common environmental variables associated with this problem:
* {{{LD_LIBRARY_PATH}}} - Missing libraries (e.g., {{{.so}}}, {{{.sl}}}, {{{.la}}}) for most Unix platforms
* {{{LIBPATH}}} - Missing AIX libraries (e.g., {{{.so}}}, {{{.sl}}}, {{{.la}}}) 
* {{{PATH}}} - Missing executables (e.g., {{{oplrqb}}}, {{{_sv}}})
* {{{SHLIB_PATH}}} - Missing HP/UX libraries (e.g., {{{.so}}}, {{{.sl}}}, {{{.la}}}) 

A command like one of these lines may be used to set these or other variables:
{{{
VARIABLE=/path/to/missing/file:$VARIABLE ; export VARIABLE

export VARIABLE=/path/to/missing/file:$VARIABLE
}}}
For example: 
{{{
LIBPATH=/usr/openlink/lib/:$LIBPATH ; export LIBPATH
}}}
Be advised -- If you are relinking a database agent, add the file's path to the script which produced the error. The following instructions will assist you with this task:
# cd into the /lib sub-directory of your <nop>OpenLink server components installation.
# Use a text editor to open the ld script which you have run. For example:
{{{
vi ldora80
}}}
# Pass the path to the file on the cc line after -o. For example:
{{{
cc -L $ORACLE_HOME/lib -o /your_new_path_here
}}}
ex: {{{cc -L $ORACLE_HOME/lib -o /usr/lib/libsocket}}}
# Test.
    
===Evidence===

* Names of .taz files
* Output of {{{set}}}
* Request Broker Log 
* {{{uname -a}}}