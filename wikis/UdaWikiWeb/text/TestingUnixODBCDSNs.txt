%META:TOPICPARENT{name="InstallConfigODBC"}%
= Testing ODBC DSNs on Unix-like OS, with iODBCTest/ODBCTest =

Originally named <code>odbctest</code> (as found in Release 5 and earlier installations), <code>iodbctest</code> is a simple 'C' based, ODBC-compliant Interactive SQL processor. The binary executable of this sample application will be found in at least one of the following directories:
{{{
<OPENLINK_INSTALLATION_DIRECTORY>/samples/ODBC/
<OPENLINK_INSTALLATION_DIRECTORY>/bin/
}}}
More recent installations should include a Unicode (sometimes called "wide") variant, <code>iodbctestw</code>, for use with multi-byte character sets.  Note that will only work properly when supported by suitably configured login and shell sessions and terminal emulators.   These configurations can be tricky to get all lined up right!

The source code for this application (both single- and multi-byte variants) is installed as part of the iODBC SDK, and then may be found in the following directory:
{{{
<OPENLINK_INSTALLATION_DIRECTORY>/odbcsdk/examples/
}}}

== Steps ==

# Set the <nop>OpenLink environment by running the appropriate script for your shell.  The following will work in most environments, but your required command may differ --
| *shell* | *command* |
| <code>sh, bash, zsh</code> and related | <code><nowiki>. ./openlink.sh</nowiki></code> |
| <code>ksh</code> and related | <code><nowiki>source ./openlink.sh</nowiki></code> |
| <code>csh, tcsh</code> and related | <code><nowiki>source ./openlink.csh</nowiki></code> |
# Start {{{iODBCTest}}} by executing the binary name as a command:
{{{
iodbctest
}}}
# When prompted for a connect string, you can enter "{{{?}}}" to see a list of ODBC DSNs on your machine, or you can immediately enter a valid ODBC Connect String following the form --
{{{
DSN=<dsn name>[;UID=<username>[;PWD=<password>]][;<connect string attribute>=<value>]
}}}
For instance, if you have an Oracle DSN named "Marketing", you might enter:
{{{
DSN=Marketing;UID=scott;PWD=tiger
}}}
#* <i><b>Note:</b> If there is a username but no password, you must include a semicolon at the end of the connect string, as:</i>
{{{
DSN=Marketing;UID=sa;PWD=;
}}}
# If you know the ODBC Connect String before starting iODBCTest, you can pass that string as an argument to the binary command.  The Connect String must be wrapped in quotes, to prevent the Unix shell from processing the semicolons or other elements of that string:
{{{
iodbctest "DSN=Marketing;UID=scott;PWD=tiger"
}}}
# Once connected, you can execute any valid SQL or ODBC statement.  You can also call on several built-in functions, which interrogate the back-end for --
#* {{{datatypes}}}
#* {{{owners}}}
#* {{{qualifiers}}}
#* {{{tables}}}
#* {{{types}}}
