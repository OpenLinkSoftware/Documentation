<docbook><section><title>Udaudajdbcst</title><para> </para><title> uda.jdbc.st</title> uda.jdbc.st
<para> </para><bridgehead class="http://www.w3.org/1999/xhtml:h1">  Single-Tier (Lite Edition)</bridgehead>
<para>  Single-Tier (Lite Edition) The Single-Tier JDBC Drivers are a single component installed on a data-consuming machine - depending on the architecture in which the driver is deployed, either a client such as a desktop, a workstation or an application-server machine.
 No components need be installed on the database server.</para><para>The <ulink url="OpenLink">OpenLink</ulink>  Single-Tier suite, being installed only on client machines, is ideal for a variety of situations: if you only have one or a small number of machines on which you want to access data (e.g.
 you&#39;&#39;re a home user, or deploying in application-server architecture), then you don&#39;&#39;t need to install anything on the server machine, just the client.
 To the developer writing an application, there is no requirement to know on which server it resides: you can write your application for any environment, regardless of where it will end.</para><para>There are also performance benefits gained by employing this single solution, which in some cases exceeds that provided by the native drivers.
 Being able to integrate your solution simply into your organization with its plethora of internal and disparate systems means your <ulink url="RoI">RoI</ulink>  increases significantly.</para><para>These drivers are built by implementing the JDBC data-access interface specifications using a database-vendor-provided Call Level Interface (CLI).
 Thus, the capabilities and architecture of the CLI significantly affect the functional outcome of a driver.</para><para>  [[/images/udajdbcst.gif|]]</para><para> / Image scaled down; Click to enlarge./</para><para> JDBC, and any other data-access drivers for that matter, are developed using the call-level interface (CLI) of the respective databases that they support.
 These call level interfaces take the following forms:</para><itemizedlist mark="bullet" spacing="compact"><listitem>Type A - C-based dynamic SQL interface that inextricably includes client and server networking components </listitem>
<listitem>Type B - C-based remote procedure calls (RPC) interface to the wire-protocol of the underlying database.
 This is a client-only interface that communicates directly with the remote database server.
 These interfaces arenÂ’t typically available to third-party developers.
 To date the Open Source projects such as <ulink url="FreeTDS">FreeTDS</ulink>  , <ulink url="MySQL">MySQL</ulink>  , <ulink url="PostgreSQL">PostgreSQL</ulink>  , and Interbase are the only publicly accessible and freely available versions of such interfaces.
</listitem>
<listitem>Type C - Generic bridges: these are JDBC drivers that act as implementation proxies, such that bridging can be achieved in the manner depicted in the matrix below: <ulink url="OpenLink">OpenLink</ulink>  provides Single-Tier Drivers built using the Type A, B, and C call-level interfaces formats, depending on what is publicly available to third-party developers by the vendors of the respective database engines.</listitem>
</itemizedlist><para>Please view your respective Data Access Mechanism for more information.</para><para>Java developers have always enjoyed the freedom of being able to write cross-platform applications.
 To complement this, <ulink url="OpenLink">OpenLink</ulink>  Software provides Java built Single-Tier Drivers built using the Type A, B, and C call-level interface formats together with the Java JDBC technology.</para><para>The type of JDBC Single-Tier driver available depends on what is publicly available by the vendors of the respective database engines.
 Furthermore, on occasions when Java developers require access to ODBC-only databases, such as Microsoft Access, the Type C CLI bridge technology is available, thereby extending the reach of the developer looking to explore new avenues.
 Architectural diagrams showing the different representations of JDBC drivers based on Call-Level Interface types are available below.</para><para>These drivers are built using the Type-A call level interfaces of the relevant back-end database engine.
 Thus, these drivers implement the interfaces of the respective data-access mechanisms (JDBC) with inherent database specific networking, and a dependency on the database vendor-provided networking middleware products.
 At installation-time you simply install the driver with the underlying assumption that remote database connectivity is already in place (or will be put in place) via the installation of products such as Net8 and SQL*Net, Progress Client Networking, Informix Connect, Ingres Net, DB/2 Connect etc.</para><para>  [[/images/ajdbcst.gif|]]</para><para> /Type A Architectural Diagram for JDBC Image scaled down; Click to enlarge./</para><para> [[/images/ajdbcstprog.gif|]]</para><para> /Type A Architectural Diagram for Progress JDBC Image scaled down; Click to enlarge./</para><para> These drivers are built using the Type-B client networking interface to wire-protocols of the supported back-end database.
 These drivers are installed one time on a workstation/desktop or application server machine, and after installation are ready for direct communication with the supported backed database.
 This driver format is only currently available for; Microsoft SQL Server, SYBASE ASE, <ulink url="MySQL">MySQL</ulink>  , <ulink url="PostgreSQL">PostgreSQL</ulink>  , and <ulink url="OpenLink">OpenLink</ulink>  Virtuoso.
 Support for other databases will occur as and when unsupported database engine vendors make their RPC client interfaces available to third party developers.</para><para>  [[/images/bjdbcst.gif|]]</para><para> /Type B Architectural Diagram for JDBC Image scaled down; Click to enlarge./</para><para> These drivers are proxies that sit atop third-party implementations of the relevant data-access mechanisms.
 The prime purpose to integrate one data-access standard implementation with another, and there are a variety of scenarios where this is useful such as:</para><itemizedlist mark="bullet" spacing="compact"><listitem>JDBC access to back-end databases that are only accessible via ODBC</listitem>
</itemizedlist><para> [[/images/cjdbcst.gif|]]</para><para> /Type C Architectural Diagram for Progress JDBC Image scaled down; Click to enlarge./
</para><table><title /><tgroup><thead /><tbody><entry>  Standards Compliance  </entry>
</tbody></tgroup></table>
<para> 
</para><table><title /><tgroup><thead /><tbody>
<row><entry>  JDBC 3.0 Datatype Enhancements support </entry><entry>  The DATALINK and BOOLEAN datatypes are additions to java.sql.Types. the DATALINK type provides access to external resources (URLs) from within a resultset using the new getURL() methods. While the BOOLEAN type is the logical equivalent of the BIT type with additional semantics, and is retrieved from a resultset using the getBoolean() method.  </entry><entry>  JDBC Metadata Enhancements support </entry><entry>  The JDBC metadata APIs have been enhanced in JDBC 3.0, with the <ulink url="DatabaseMetaData">DatabaseMetaData</ulink>  interface now able to retrieve SQL type hierarchies. There is also a new <ulink url="ParameterMetaData">ParameterMetaData</ulink>  interface to describe the types and properties of the parameters in <ulink url="PreparedStatement">PreparedStatement</ulink>  objects.  </entry></row>
</tbody></tgroup></table>

<table><title /><tgroup><thead /><tbody><entry>  Platform Support </entry><entry>  Support for client, server, and application server operating systems  </entry>
</tbody></tgroup></table>
<para> |  32- and 64-bit components |  Enables the development and utilization of 32- or 64-Bit DBMS independent applications.
</para><table><title /><tgroup><thead /><tbody><entry>  Database Engine Support </entry><entry>  Backend database engine support  </entry>
</tbody></tgroup></table>
<para> |  Broad backend Database Support |  Enables DBMS independent application utilization and deployment across a vast array of industry leading DBMS engines that includes; Oracle (7.x - 10.x), SQL Server (6.x - 2005), DB2 (6.x - 8.x), Sybase (10.x - 12.x), Progress (7.x - 10.x), Ingres (6.4 - II family), Informix (5.x - 9.x &amp; IDS 2000), <ulink url="MySQL">MySQL</ulink>  , and <ulink url="PostgreSQL">PostgreSQL</ulink>  .</para><para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Performance  </entry>
</tbody></tgroup></table>
<para> 
</para><table><title /><tgroup><thead /><tbody>
<row><entry>  Blistering Performance </entry><entry>  Delivery of data access performance levels across ODBC, JDBC, ADO.NET and OLE DB that don&#39;t compromise viability of DBMS independent application development and deployment.  </entry><entry>  Network Aware Record Retrieval </entry><entry>  Enabling the retrieval and insertion of multiple DBMS records in batches over the network with a minimal number of network hops.  </entry></row>
</tbody></tgroup></table>

<table><title /><tgroup><thead /><tbody><entry>  Administration </entry><entry>  Configuration and Management  </entry>
</tbody></tgroup></table>
<para> |  Single Component Installation Process |  In situations where DBMS vendor networking is already in place, Single-Tier Drivers provide ease of installation and configuration since you are only required to install a single client component that inherently depends on existing DBMS specific networking for remote data access.
</para><table><title /><tgroup><thead /><tbody><entry>  Packaging </entry><entry>  The manner in which product components are packaged  </entry>
</tbody></tgroup></table>
<para> |  Miniature Driver Size |  Driver size is minimal with the smallest variant (Megathin) under 60K in size.</para><para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Standards Compliance  </entry>
</tbody></tgroup></table>
<para> |  International character support |  Enables the development and deployment of international applications that are independent of underlying database engine.</para><para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Performance  </entry>
</tbody></tgroup></table>
<para> 
</para><table><title /><tgroup><thead /><tbody>
<row><entry>  Multithreaded </entry><entry>  Enables exploitation of scalability benefits arising from the use of multiple CPUs or Clusters while developing or using DBMS independent applications.  </entry><entry>  Array Bound <ulink url="RowSets">RowSets</ulink>  </entry><entry>  As part of the new <ulink url="RowSet">RowSet</ulink>  class. It is now possible to bind data arrays to the columns of the <ulink url="OpenLink">OpenLink</ulink>   <ulink url="RowSet">RowSet</ulink>  object, and retrieve the data directly into the arrays with a single invocation of the RowSet.next() method.  </entry></row>
</tbody></tgroup></table>
<para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Standards Compliance  </entry>
</tbody></tgroup></table>
<para> 
</para><table><title /><tgroup><thead /><tbody>
<row><entry>  Supports Advanced Data Access API functionality </entry><entry>  Enables the development and utilization of DBMS application with DBMS independent granularity that extends to challenging areas such as scalar function calls, dates and timestamps manipulation, outer join handling, and SQL stored procedure invocation etc.  </entry><entry>  ODBC and JDBC Scrollable Cursor Support </entry><entry>  Enables the development of JDBC based DBMS independent applications that are capable of exploiting the ODBC style (Attached <ulink url="RowSet">RowSet</ulink>  extension to JDBC by <ulink url="OpenLink">OpenLink</ulink>  ) and JDBC style (Detached <ulink url="RowSet">RowSet</ulink>  ) scrollable cursor models from a single driver. This approach provides the application developer with maximum flexibiity and control over the degree of database change sensitivity expressed by a JDBC based application.  </entry></row>
<row><entry>  JDBC 3.0 Connection Pooling support </entry><entry>  JDBC 3.0 standardizes connection pooling configuration properties thereby alleviating complexity from the myriad vendor-specific properties in JDBC 2.0. This enables higher interchangeability across JDBC Drivers for JDBC compliant application and service developers. Additionally, the properties allow administrators to fine tune the connection pool to maximize performance characteristics of the application or service. The following properties are implemented by our drivers; maxStatements, initialPoolSize, minPoolSize, maxPoolSize, maxIdleTime, and propertyCycle  </entry></row>
<row><entry>  Named Parameters in Callable Statements </entry><entry>  Prior to JDBC 3.0, the way to set a parameter in a SQL Stored Procedure was by specifying the parameter&#39;s index, not its name. The <ulink url="CallableStatement">CallableStatement</ulink>  interface has been enhanced in JDBC 3.0 so that you can now specify parameters by their names.  </entry></row>
<row><entry>  Resultset Holdability </entry><entry>  A holdable cursor, or result, is one that does not automatically close when the transaction that contains the cursor is committed. JDBC 3.0 adds support for specifying cursor holdability. To specify the holdability of your <ulink url="ResultSet">ResultSet</ulink>  , you must do so when preparing a statement using the createStatement(), prepareStatement(), or prepareCall() methods. The holdability may be one of the following constants: HOLD <emphasis>CURSORS_OVER_COMMIT or CLOSE_CURSORS_AT_COMMIT. Note it is more efficient to close CURSOR at the end of transactions (after the COMMIT). JDBC doesn&#39;t specifiy a default HOLD_CURSOR behavour but for resource expediency we have chosen CLOSE_CURSORS_AT_COMMIT as the default. </emphasis>  </entry></row>
<row><entry>  Prepared Statement Pooling support </entry><entry>  A prepared statement allows you to take a commonly used SQL statement and pre-compile it, thereby dramatically improving performance if the statement is executed multiple times. If your applications has many queries that are reused with only parametic changes occuring, then it is beneficial to pool this statements and retain control over their life span. JDBC 3.0 delivers as solution to this need via Prepared Statement Pooling, which enables the life span of a prepared statement to be handled at the driver level thereby alleviating the JDBC application or service developer of this responsibility.  </entry></row>
<row><entry>  Transaction Savepoints support </entry><entry>  JDBC 3.0 provides the ability to have increased granularity over the control of database transactions. The new Savepoint interface allows you to partition a transaction into logical breakpoints, providing control over how much of the transaction gets rolled back.  </entry></row>
</tbody></tgroup></table>
</section></docbook>