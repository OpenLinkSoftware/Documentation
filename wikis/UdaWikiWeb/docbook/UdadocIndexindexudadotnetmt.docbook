<docbook><section><title>UdadocIndexindexudadotnetmt</title><para> </para><title> doc.Index.index.uda.dotnet.mt</title> doc.Index.index.uda.dotnet.mt
<para> The Multi-Tier Drivers comprise client and server components, being uniquely equipped with a built-in high-performance database-independent networking layer and a session rules-book for governing and securing connections.
 These drivers are network-ready out of the box, and capable of dynamically discovering matching server components anywhere in a LAN/subnet using the &quot;Bonjour&quot; service-discovery protocol (previously known as &quot;Rendezvous&quot;, an implementation of <ulink url="ZeroConfig">ZeroConfig</ulink>  ).</para><para>Being Multi-Tier, these drivers include interface implementations at both the client and the server levels.</para><para>In today&#39;&#39;s world of client/server and web/application-server-based deployment architectures, with remote clients attempting to access your company&#39;&#39;s corporate data from any number of unknown locations, security becomes a major concern of any organization in terms of controlling the access to this information.</para><para>Server-side security features are implemented in the session Rule Book; access-controls take the form of a matrix of incoming connection criteria such as the IP#, Database, User, Application, OS and RDBMS type, so the administrator has maximum flexibility and fine granularity in defining what connections are permitted.</para><para>  [[/images/udadotnetmt.gif|]]</para><para> / Image scaled down; Click to enlarge./</para><para> The Multi-Tier Drivers include the following components:</para><itemizedlist mark="bullet" spacing="compact"><listitem>Generic Client(the entry for service consumption) this is component that provides the high level implementation of the relevant data-access mechanism (ODBC, JDBC, OLE DB, or .NET Provider) within the multi-tier component stack.
 By installing this on client machines, they can connect to any Request Broker component elsewhere </listitem>
<listitem><ulink url="OpenLink">OpenLink</ulink>  RPC Clientthis is the client side of the database-independent networking layer, and it is inextricably associated with the generic client at runtime (so you do not physically see this component as a separate library or class file etc).
</listitem>
<listitem><ulink url="OpenLink">OpenLink</ulink>  Request Brokerone of the server-side components that implements server-side <ulink url="OpenLink">OpenLink</ulink>  RPC functionality.
 This is the part of the Multi-Tier architecture that is responsible for session instantiation, configuration management, and overall system security.
 It is the heart and soul of the Multi-Tier component stack.
</listitem>
<listitem>Database Agentanother server-side component that implements both the server-side <ulink url="OpenLink">OpenLink</ulink>  RPC functionality and the actual <ulink url="OpenLink">OpenLink</ulink>  Data Access functionality.
 This is the only database-specific component in the Multi-Tier component stack (so one generic client and one request broker, many agents for each different kind of database to which you wish to connect); it is also the set of interfaces implemented via the database vendor-provided CLI.
The architectures of the Multi-Tier and Single-Tier drivers are different, but not as different as instinctively assumed: the Single-Tier database specific driver and the Multi-Tier Database Agent share a common core.
 What does not change is they both implement the call-level interfaces albeit at different places.
 The call-level interfaces take the following forms:</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem>Type A - C-based dynamic SQL interface that inextricably includes client and server networking components </listitem>
<listitem>Type B - C-based remote procedure calls (RPC) interface to the wire-protocol of the underlying database.
 This is a client-only interface that communicates directly with the remote database server.
 These interfaces are not typically available to third-party developers.
 To date the Open Source projects such as <ulink url="FreeTDS">FreeTDS</ulink>  , <ulink url="MySQL">MySQL</ulink>  , <ulink url="PostgreSQL">PostgreSQL</ulink>  , and Interbase are the only publicly accessible and freely available versions of such interfaces.
</listitem>
<listitem>Type C - Generic bridges, these are ODBC, JDBC, OLE DB, and .NET providers that act as implementation proxies, such that bridging can be achieved in the manner depicted in the matrix below: <ulink url="OpenLink">OpenLink</ulink>  provides Multi-Tier Drivers built using the Type A, B, and C call-level interfaces formats, depending on what is publicly available to third-party developers by the vendors of the respective database engines.</listitem>
</itemizedlist><para>Please view your respective Data Access Mechanism for more information.</para><para> </para></section></docbook>