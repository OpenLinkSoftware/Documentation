<docbook><section><title>UsingProgress4GLSQL-89ARRAYFieldsWithSQL-92Drivers</title><para> </para><bridgehead class="http://www.w3.org/1999/xhtml:h2">Using Progress 4GL/SQL-89 ARRAY fields with SQL-92 drivers</bridgehead>
<para><emphasis>Quoted from <ulink url="http://webapp.progress.com:6336/dynaweb/psdoc91d/sql9291d/s92/@Generic__BookTextView/61981;cs%3Ddefault;ts%3Ddefault">Progress On-Line documentation</ulink></emphasis></para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3">C.2 Support for the ARRAY Data Type</bridgehead><para>For compatibility with earlier Progress databases, Progress SQL–92 provides limited support for the ARRAY data type.
 </para><bridgehead class="http://www.w3.org/1999/xhtml:h4">C.2.1 Overview</bridgehead><para>Array fields are created using the Progress 4GL Dictionary.
 Progress SQL–92 provides a mechanism for referencing and updating these arrays.
 Subscripted references are not supported.
 Progress SQL–92 manages the arrays as NVARCHAR strings, and the string representation is the concatenation of each array element, with a semicolon ( ; ) separating each element.</para><para>To escape an instance of a semicolon in the data of a Progress CHARACTER array, use the escape character tilde before the semicolon ( ~; ).
 An unquoted question mark represents a NULL element.
 To distinguish a NULL element from a question mark, use a tilde as an escape character for a question mark in the data ( ~? ).
 A tilde is also the escape character for a tilde ( ~~ ).</para><para>Progress SQL–92 supplies three built–in functions for extracting an element, and for adding escape characters to and removing escape characters from a single element of a character array.
 The PRO_ELEMENT, PRO_ARR_ESCAPE, and PRO_ARR_DESCAPE functions provide full internationalization support.
 A description of each function follows.</para><bridgehead class="http://www.w3.org/1999/xhtml:h4">C.2.2 PRO_ELEMENT Function</bridgehead><para>Extracts one or more elements from an array column and returns the NVARCHAR or VARCHAR string between the specified positions, including any internal separator characters and any internal escape characters.
 </para><bridgehead class="http://www.w3.org/1999/xhtml:h5">SYNTAX</bridgehead><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ELEMENT ( &#39;<emphasis>array_style_expression&#39;</emphasis>, <emphasis>start_position</emphasis>,<emphasis> end_position </emphasis>) ;</computeroutput></para></entry></row></tbody></tgroup></table><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtarray_style_expression</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddA string of datatype VARCHAR or CHAR, with a semi-colon ( ; ) separating each element of the array.</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtstart_position</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddThe position in the string marking the beginning of the element PRO_ELEMENT is to extract.</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtend_position</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddThe position in the string marking the end of the element to be extracted.</span><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLES</bridgehead><para>The following example returns the string &#39;bb&#39;:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ELEMENT(&#39;aa;bb;cc&#39;, 2, 2) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>The next example returns the string &#39;aa;bb&#39;:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ELEMENT(&#39;aa;bb;cc&#39;, 1, 2) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>The third example returns the string &#39;aa~;aa&#39;:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ELEMENT(&#39;aa~;aa;bb;cc&#39;, 1, 1) ;</computeroutput></para></entry></row></tbody></tgroup></table><bridgehead class="http://www.w3.org/1999/xhtml:h5">NOTES</bridgehead><itemizedlist mark="bullet" spacing="compact"><listitem><para>The <emphasis>array_style_expression</emphasis> must be data type NVARCHAR, VARCHAR, or CHAR.</para></listitem><listitem><para>The returned string does not include the leading separator of the first element, or the trailing separator ( ; ) of the last element.</para></listitem><listitem><para>Even if you are extracting only one element, the escape characters are included in the result.
 </para></listitem><listitem><para>You must invoke PRO_ARR_DESCAPE to remove any escape characters.</para></listitem></itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h4">C.2.3 PRO_ARR_ESCAPE Function</bridgehead><para>Adds required escape characters to a single element of a character array.</para><para>PRO_ARR_ESCAPE scans the <emphasis>char_element </emphasis>looking for the separator character ( ; ) or an escape character ( ~ ).
 The function<emphasis> inserts</emphasis> an additional escape character, when it finds any of these constructs:</para><itemizedlist mark="bullet" spacing="compact"><listitem><para>Escape character followed by a separator character ( ~; )</para></listitem><listitem><para>Escape character followed by another escape character ( ~~ )</para></listitem><listitem><para>Escape character followed by a NULL terminator ( ~\0 )</para></listitem></itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h5">SYNTAX</bridgehead><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_ESCAPE( &#39;<emphasis>char_element&#39;</emphasis> )  ;</computeroutput></para></entry></row></tbody></tgroup></table><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtchar_element</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddThe character representation of an array element, without any leading or trailing separators.
 Must be data type NVARCHAR or VARCHAR or CHAR.
 </span><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLES</bridgehead><para>The following example returns the string &#39;aa~;aa&#39;:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_ESCAPE(&#39;aa;aa&#39;) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>The following example returns the string &#39;aa~aa&#39;.
 There is no change, since another special character does not follow the escape character:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_ESCAPE(&#39;aa~aa&#39;) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>The third example returns the string &#39;aa~~;aa&#39;:</para><para> </para><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_ESCAPE(&#39;aa~;aa&#39;) ;</computeroutput></para></entry></row></tbody></tgroup></table><bridgehead class="http://www.w3.org/1999/xhtml:h5">NOTES</bridgehead><itemizedlist mark="bullet" spacing="compact"><listitem><para><emphasis>char_element</emphasis> must be data type NVARCHAR, VARCHAR, or CHAR.</para></listitem><listitem><para><emphasis>char_element</emphasis> must not be the name of an array column, since the column contains true separators which would be destroyed by this function.</para></listitem></itemizedlist><bridgehead class="http://www.w3.org/1999/xhtml:h4">C.2.4 PRO_ARR_DESCAPE Function</bridgehead><para>Removes escape characters from a single element of a character array.
 PRO_ARR_DESCAPE scans the <emphasis>char_element</emphasis> looking for the separator character ( ; ) or an escape character ( ~ ).
 The function <emphasis>removes</emphasis> an escape character, when it finds any of these constructs:</para><itemizedlist mark="bullet" spacing="compact"><listitem><para>Escape character followed by a separator character ( ~; )</para></listitem><listitem><para>Escape character followed by another escape character ( ~~ )</para></listitem><listitem><para>Escape character followed by a NULL terminator ( ~\0 )</para><para /><bridgehead class="http://www.w3.org/1999/xhtml:h5">SYNTAX</bridgehead><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_DESCAPE( &#39;<emphasis>char_element&#39;</emphasis> ) ;</computeroutput></para></entry></row></tbody></tgroup></table></listitem></itemizedlist><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtchar_element </span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddThe character representation of an array element, without any leading or trailing separators.
 Must be data type NVARCHAR or VARCHAR or CHAR.
 </span><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLES</bridgehead><para>The following example returns the string &#39;aa;aa&#39;:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_DESCAPE(&#39;aa~;aa&#39;) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>The following example returns the string &#39;aa~aa&#39;.
 There is no change, since another special character does not follow the escape character:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_DESCAPE(&#39;aa~aa&#39;) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>The third example returns the string &#39;aa~;aa&#39;:</para><para> </para><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>PRO_ARR_DESCAPE(&#39;aa~~;aa&#39;) ;</computeroutput></para></entry></row></tbody></tgroup></table><para><emphasis>NOTE: </emphasis><emphasis>char_element</emphasis> should not be the name of an array column, since the column contains true separators which would be destroyed by this function.</para><bridgehead class="http://www.w3.org/1999/xhtml:h4">C.2.5 Unsubscripted Array References</bridgehead><para>When there is a reference to an unsubscripted Progress array column, Progress SQL–92 performs these operations: </para><itemizedlist mark="bullet" spacing="compact"><listitem><para>Extracts each element from the Progress 4GL array</para></listitem><listitem><para>Converts the element to a DT_VARCHAR data type</para></listitem><listitem><para>Passes the element to the PRO_ARR_ESCAPE function for the addition of  any necessary escape characters</para></listitem><listitem><para>Concatenates the result to a composite with the separator character ( ; ) between this element and the next element</para></listitem></itemizedlist><para>This results in dual data types for array fields.
 The fetch type is TPE_DT_NVARCHAR for the unsubscripted references.
 The underlying Progress 4GL data type is the native type.
 </para><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLES</bridgehead><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtThe first example assumes a character array named ARRAYCHAR containing three elements in a row in the customer table where the cust_num column is equal to 88, and with values:</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddARRAYCHAR[ 1 ] = &#39;aa&#39;ARRAYCHAR[ 2 ] = &#39;bb&#39;ARRAYCHAR[ 3 ] = &#39;cc&#39;The ARRAYCHAR example returns the value &#39;aa;bb;cc&#39;.</span><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>SELECT arraychar FROM customer WHERE cust_num <computeroutput>=</computeroutput> 88 ; </computeroutput></para><para><computeroutput> </computeroutput></para><para><computeroutput>ARRAYCHAR</computeroutput></para><para><computeroutput> </computeroutput></para><para><computeroutput>–––––––––</computeroutput></para><para><computeroutput>aa;bb;cc</computeroutput></para><para><computeroutput> </computeroutput></para><para><computeroutput>1 record selected</computeroutput></para></entry></row></tbody></tgroup></table><para>To retrieve an individual element from an array with any escape characters removed, use the PRO_ELEMENT and PRO_ARR_DESCAPE functions.
 For example, ARRAYTYPE[ 2 ] contains the value &#39;aa;bb&#39;.
 The PRO_ELEMENT function in the ARRAYTYPE example returns &#39;aa~;bb&#39; and PRO_ARR_DESCAPE(&#39;aa~;bb&#39;) removes the escape character ( ~ ), returning the element value &#39;aa;bb&#39;.</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>select pro_arr_descape(pro_element(arraytype,2,2)) from customer  ;</computeroutput></para><para><computeroutput>ARRAYTYPE</computeroutput></para><para><computeroutput> </computeroutput></para><para><computeroutput>–––––––––</computeroutput></para><para><computeroutput>aa;bb</computeroutput></para><para><computeroutput> </computeroutput></para><para><computeroutput>1 record selected</computeroutput></para></entry></row></tbody></tgroup></table><bridgehead class="http://www.w3.org/1999/xhtml:h4">C.2.6 Unsubscripted Array Updates and Inserts </bridgehead><para>Progress SQL–92 applies the reverse of the fetch algorithm for updates to unsubscripted Progress 4GL array columns.
 An SQL-92 operation accepts an NVARCHAR string, complete with separators and any required escape characters.
 Progress SQL–92 converts the string to the underlying data type and stores it in the current element of the array in the Progress database.
 SQL-92 repeats this operation for each element of the array until all elements have been inserted.
 </para><para>This is the SQL-92 syntax for an unsubscripted array update:</para><para /><bridgehead class="http://www.w3.org/1999/xhtml:h5">SYNTAX</bridgehead><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>UPDATE <emphasis>table_name </emphasis>SET <emphasis>array_name</emphasis> <computeroutput>=</computeroutput> (&#39;<emphasis>char_element&#39;</emphasis> ) WHERE <emphasis>where_criteria</emphasis> ;</computeroutput></para></entry></row></tbody></tgroup></table><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLE</bridgehead><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:dtThe ARRAYINT example assumes an integer array named ARRAYINT.
 The result of the UPDATE operation is:</span><span style="color: red">
      UNKNOWN tag:
      http://www.w3.org/1999/xhtml:ddARRAYINT[ 1 ] = 13ARRAYINT[ 2 ] = 15ARRAYINT[ 3 ] = 19</span><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>UPDATE customer SET arrayint <computeroutput>=</computeroutput> &#39;13;15;19&#39; WHERE cust_num <computeroutput>=</computeroutput> 77 ;</computeroutput></para></entry></row></tbody></tgroup></table><para>If the number of elements in the NVARCHAR string does not match the number of elements in the target column for the update, Progress SQL–92 returns an error, unless there is exactly one element in the NVARCHAR string for an INSERT operation.</para><para>If there is a single element in the NVARCHAR string, you can use the Progress SQL–92 INSERT statement to propagate the value to all elements of the array.
 </para><para>This is the SQL-92 syntax for this short form of an INSERT assignment:</para><para /><bridgehead class="http://www.w3.org/1999/xhtml:h5">SYNTAX</bridgehead><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>INSERT INTO <emphasis>table_name</emphasis> ( <emphasis>arr_col_name </emphasis>) VALUES ( &#39;<emphasis>one_value&#39;</emphasis> ) ;</computeroutput></para></entry></row></tbody></tgroup></table><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLE</bridgehead><para>The following INSERT example illustrates how you can assign values to an entire date array from a single value in the VALUES clause of an SQL-92 INSERT statement:</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>INSERT INTO customer ( begin_quota_date ) VALUES ( &#39;01/01/00&#39; ) ;</computeroutput></para></entry></row></tbody></tgroup></table><para>This INSERT  example assigns the value &#39;01/01/00&#39; to every element of the date array &#39;begin_quota_date&#39; column in the customer table.</para><para><emphasis>NOTE: </emphasis>Progress SQL–92 does <emphasis>not</emphasis> support the assignment of a single value to an entire array using an SQL-92 UPDATE statement.</para><bridgehead class="http://www.w3.org/1999/xhtml:h4">Updating a Single Element of an Array</bridgehead><para>To update a single element of an array, you must construct a string for the entire array, and assign the string to the array using an SQL-92 UPDATE statement.</para><para>This is the SQL-92 syntax for updating a single element of an array:</para><para> </para><bridgehead class="http://www.w3.org/1999/xhtml:h5">SYNTAX</bridgehead><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>UPDATE <emphasis>table_name</emphasis> SET <emphasis>array_col</emphasis> <computeroutput>=</computeroutput> <emphasis>literal_string</emphasis> ;</computeroutput></para></entry></row></tbody></tgroup></table><bridgehead class="http://www.w3.org/1999/xhtml:h5">EXAMPLES</bridgehead><para>To assign a value to the first element of an array of size three, construct a literal string that concatenates these components:</para><itemizedlist mark="bullet" spacing="compact"><listitem><para>Update value for the first element in the array</para></listitem><listitem><para>Semicolon separator</para></listitem><listitem><para>Values for elements two and three in the array</para></listitem></itemizedlist><para>Use PRO_ARR_ESCAPE to insert any necessary escape characters into the new value.
 Use PRO_ELEMENT to extract the values for elements two and three from the array.
 This example assigns the value &#39;aaa&#39; to the first element of the arraychar array for customer 99, and retains the existing values for elements two and three.</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>UPDATE customer SET arraychar <computeroutput>=</computeroutput> </computeroutput></para><para><computeroutput>     PROARR_ESCAPE(&#39;aaa&#39;)</computeroutput></para><para><computeroutput>     || &#39;;&#39;</computeroutput></para><para><computeroutput>     || PRO_ELEMENT(arraychar,2,3) </computeroutput></para><para><computeroutput>WHERE cust_num <computeroutput>=</computeroutput> 99 ;</computeroutput></para></entry></row></tbody></tgroup></table><para>To assign a value to the second element of an array of size three, construct a string that concatenates these components:</para><itemizedlist mark="bullet" spacing="compact"><listitem><para>Value of the first element in the array</para></listitem><listitem><para>Semicolon separator</para></listitem><listitem><para>Update value for the second element</para></listitem><listitem><para>Semicolon separator </para></listitem><listitem><para>Value of the third element in the array</para></listitem></itemizedlist><para>Use PRO_ARR_ESCAPE to insert any necessary escape characters into the new value.
 Use PRO_ELEMENT to extract the first and third elements from the array.
 This example assigns the value &#39;bbb&#39; to the second element of the arraychar array for customer 99, and retains the existing values for elements one and three in arraychar.</para><para /><table><title /><tgroup><thead /><tbody><row><entry><para><computeroutput>UPDATE customer SET arraychar <computeroutput>=</computeroutput></computeroutput></para><para><computeroutput>     PRO_ELEMENT(arraychar,1,1)</computeroutput></para><para><computeroutput>     || &#39;;&#39;</computeroutput></para><para><computeroutput>     || PROARR_ESCAPE(&#39;bbb&#39;)</computeroutput></para><para><computeroutput>     || &#39;;&#39;</computeroutput></para><para><computeroutput>     || PRO_ELEMENT(arraychar,3,3)</computeroutput></para><para><computeroutput>WHERE cust_num <computeroutput>=</computeroutput> 99 ;</computeroutput></para></entry></row></tbody></tgroup></table><para /><para /> 
</section></docbook>