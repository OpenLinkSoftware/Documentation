<docbook><section><title>ClassBaseRowSet</title><bridgehead class="http://www.w3.org/1999/xhtml:h3">Class BaseRowSet</bridgehead>
<para>BaseRowSet Classes BaseRowSet</para><bridgehead class="http://www.w3.org/1999/xhtml:h4">Synopsis</bridgehead>
<programlisting>
abstract public class BaseRowSet implements RowSet,Serializable {
  // Public Constructors
  public BaseRowSet();
  // Public Methods
  public void close() throws java.sql.SQLException;
  public void addRowSetListener(javax.sql.RowSetListener rowsetlistener);
  public void removeRowSetListener(javax.sql.RowSetListener rowsetlistener);
  public void clearParameters() throws java.sql.SQLException;
  public String getCommand();
  public int getConcurrency() throws java.sql.SQLException;
  public String getDataSourceName();
  public boolean getEscapeProcessing() throws java.sql.SQLException;
  public int getFetchDirection() throws java.sql.SQLException;
  public int getFetchSize() throws java.sql.SQLException;
  public int getMaxFieldSize() throws java.sql.SQLException;
  public int getMaxRows() throws java.sql.SQLException;
  public Object[] getParams() throws java.sql.SQLException;
  public String getPassword();
  public int getQueryTimeout() throws java.sql.SQLException;
  public int getTransactionIsolation();
  public int getType() throws java.sql.SQLException;
  public Map getTypeMap() throws java.sql.SQLException;
  public String getUrl() throws java.sql.SQLException;
  public String getUsername();
  public boolean isReadOnly();
  public void setArray(int parameterIndex, java.sql.Array x) 
      throws java.sql.SQLException;
  public void setAsciiStream(int parameterIndex, java.io.InputStream x, 
                             int length) throws java.sql.SQLException;
  public void setBigDecimal(int parameterIndex, java.math.BigDecimal x) 
      throws java.sql.SQLException;
  public void setBinaryStream(int parameterIndex, java.io.InputStream x, 
                              int length) throws java.sql.SQLException;
  public void setBlob(int parameterIndex, java.sql.Blob x) 
      throws java.sql.SQLException;
  public void setBoolean(int parameterIndex, boolean x) 
      throws java.sql.SQLException;
  public void setByte(int parameterIndex, byte x) throws java.sql.SQLException;
  public void setBytes(int parameterIndex, byte[] x) 
      throws java.sql.SQLException;
  public void setCharacterStream(int parameterIndex, java.io.Reader x, 
                                 int length) throws java.sql.SQLException;
  public void setClob(int parameterIndex, java.sql.Clob x) 
      throws java.sql.SQLException;
  public void setDate(int parameterIndex, java.sql.Date x) 
      throws java.sql.SQLException;
  public void setDate(int parameterIndex, java.sql.Date x, 
                      java.util.Calendar cal) throws java.sql.SQLException;
  public void setDouble(int parameterIndex, double x) 
      throws java.sql.SQLException;
  public void setFloat(int parameterIndex, float x) 
      throws java.sql.SQLException;
  public void setInt(int parameterIndex, int x) throws java.sql.SQLException;
  public void setLong(int parameterIndex, long x) throws java.sql.SQLException;
  public void setRef(int parameterIndex, java.sql.Ref x) 
      throws java.sql.SQLException;
  public void setShort(int parameterIndex, short x) 
      throws java.sql.SQLException;
  public void setString(int parameterIndex, java.lang.String x) 
      throws java.sql.SQLException;
  public void setTime(int parameterIndex, java.sql.Time x) 
      throws java.sql.SQLException;
  public void setTime(int parameterIndex, java.sql.Time x, 
                      java.util.Calendar cal) throws java.sql.SQLException;
  public void setTimestamp(int parameterIndex, java.sql.Timestamp x) 
      throws java.sql.SQLException;
  public void setTimestamp(int parameterIndex, java.sql.Timestamp x, 
                           java.util.Calendar cal) 
      throws java.sql.SQLException;
  public void setUnicodeStream(int parameterIndex, java.io.InputStream x, 
                               int length) throws java.sql.SQLException;
  public void setNull(int parameterIndex, int sqlType) 
      throws java.sql.SQLException;
  public void setNull(int parameterIndex, int sqlType, 
                      java.lang.String typeName) throws java.sql.SQLException;
  public void setObject(int parameterIndex, java.lang.Object x) 
      throws java.sql.SQLException;
  public void setObject(int parameterIndex, java.lang.Object x, 
                        int targetSqlType) throws java.sql.SQLException;
  public void setObject(int parameterIndex, java.lang.Object x, 
                        int targetSqlType, int scale) 
      throws java.sql.SQLException;
  public void setCommand(java.lang.String s) throws java.sql.SQLException;
  public void setConcurrency(int i) throws java.sql.SQLException;
  public void setDataSourceName(java.lang.String s) 
      throws java.sql.SQLException;
  public void setEscapeProcessing(boolean flag) throws java.sql.SQLException;
  public void setFetchDirection(int direction) throws java.sql.SQLException;
  public void setFetchSize(int rows) throws java.sql.SQLException;
  public void setMaxFieldSize(int max) throws java.sql.SQLException;
  public void setMaxRows(int max) throws java.sql.SQLException;
  public void setQueryTimeout(int seconds) throws java.sql.SQLException;
  public void setReadOnly(boolean value) throws java.sql.SQLException;
  public void setPassword(java.lang.String s) throws java.sql.SQLException;
  public void setTransactionIsolation(int value) throws java.sql.SQLException;
  public void setType(int value) throws java.sql.SQLException;
  public void setTypeMap(java.util.Map value) throws java.sql.SQLException;
  public void setUrl(java.lang.String s) throws java.sql.SQLException;
  public void setUsername(java.lang.String s) throws java.sql.SQLException;
}

</programlisting><para> Inheritance Path java.lang.Object</para><para> openlink.javax.BaseRowSet</para><para> </para><bridgehead class="http://www.w3.org/1999/xhtml:h4">Members</bridgehead>
<emphasis>Method addRowSetListener(<ulink url="RowSetListener">RowSetListener</ulink>)</emphasis>
<para>addRowSetListener Methods addRowSetListener<computeroutput> Synopsis: public void addRowSetListener(                         javax.sql.RowSetListener rowsetlistener);           </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> listener - an event listener</listitem>
</itemizedlist><para>RowSet listener registration.
 Listeners are notified when an event occurs.</para><para><emphasis>Method clearParameters()</emphasis></para><para>clearParameters Methods clearParameters <computeroutput> Synopsis: public void clearParameters() throws java.sql.SQLException;     </computeroutput></para><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>In general, parameter values remain in force for repeated use of a <ulink url="RowSet">RowSet</ulink>.
 Setting a parameter value automatically clears its previous value.
 However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling clearParameters.</para><para><emphasis>Method getCommand()</emphasis></para><para>getCommand Methods getCommand<computeroutput> Synopsis: public String getCommand();     </computeroutput></para>
<para>Get the rowset&#39;s command property.
 The command property contains a command string that can be executed to fill the rowset with data.
 The default value is null.</para><para><emphasis>Method getConcurrency()</emphasis></para><para>getConcurrency Methods getConcurrency<computeroutput> Synopsis: public int getConcurrency() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Get the rowset concurrency.</para><para><emphasis>Method getDataSourceName()</emphasis></para><para>getDataSourceName Methods getDataSourceName<computeroutput> Synopsis: public String getDataSourceName();     </computeroutput></para>
<para>The JNDI name that identifies a JDBC data source.
 Users should set either the url or data source name properties.
 The most recent property set is used to get a connection.</para><para><emphasis>Method getEscapeProcessing()</emphasis></para><para>getEscapeProcessing Methods getEscapeProcessing<computeroutput> Synopsis: public boolean getEscapeProcessing() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>If escape scanning is on (the default), the driver will do escape substitution before sending the SQL to the database.</para><para><emphasis>Method getFetchDirection()</emphasis></para><para>getFetchDirection Methods getFetchDirection<computeroutput> Synopsis: public int getFetchDirection() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs</para><para>Determine the fetch direction.</para><para><emphasis>Method getFetchSize()</emphasis> getFetchSize Methods getFetchSize<computeroutput> Synopsis: public int getFetchSize() throws java.sql.SQLException;     </computeroutput></para>
<para>Determine the default fetch size.</para><para><emphasis>Method getMaxFieldSize()</emphasis></para><para>getMaxFieldSize Methods getMaxFieldSize<computeroutput> Synopsis: public int getMaxFieldSize() throws java.sql.SQLException;    </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>The maxFieldSize limit (in bytes) is the maximum amount of data returned for any column value; it only applies to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR columns.
 If the limit is exceeded, the excess data is silently discarded.</para><para><emphasis>Method getMaxRows()</emphasis></para><para>getMaxRows Methods getMaxRows<computeroutput> Synopsis: public int getMaxRows() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>The maxRows limit is the maximum number of rows that a <ulink url="RowSet">RowSet</ulink> can contain.
 If the limit is exceeded, the excess rows are silently dropped.</para><para><emphasis>Method getParams()</emphasis></para><para>getParams Methods getParams<computeroutput> Synopsis: public Object[] getParams() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Get the parameters that were set on the rowset.</para><para>1.2.12.
 Method getPassword() getPassword Methods getPassword</para><para>Synopsis: public String getPassword();</para><para> The password used to create a database connection.
 The password property is set at runtime before calling execute().
 It is not usually part of the serialized state of a rowset object.</para><para>1.2.13.
 Method getQueryTimeout() getQueryTimeout Methods getQueryTimeout</para><para>Synopsis: public int getQueryTimeout() throws java.sql.SQLException;</para><para> Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>The queryTimeout limit is the number of seconds the driver will wait for a Statement to execute.
 If the limit is exceeded, a SQLException is thrown.</para><para><emphasis>Method getTransactionIsolation()</emphasis></para><para>getTransactionIsolation Methods getTransactionIsolation<computeroutput> Synopsis: public int getTransactionIsolation();     </computeroutput></para>
<para>The transaction isolation property contains the JDBC transaction isolation level used.</para><para><emphasis>Method getType()</emphasis></para><para>getType Methods getType<computeroutput> Synopsis: public int getType() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs</para><para>Return the type of this result set.</para><para><emphasis>Method getTypeMap()</emphasis></para><para>getTypeMap Methods getTypeMap<computeroutput> Synopsis: public Map getTypeMap() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Get the type-map object associated with this rowset.
 By default, the map returned is empty.</para><para><emphasis>Method getUrl()</emphasis></para><para>getUrl Methods getUrl<computeroutput> Synopsis: public String getUrl() throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Get the url used to create a JDBC connection.
 The default value is null.</para><para><emphasis>Method getUsername()</emphasis></para><para>getUsername Methods getUsername<computeroutput> Synopsis: public String getUsername();     </computeroutput></para>
<para>The username used to create a database connection.
 The username property is set at runtime before calling execute().
 It is not usually part of the serialized state of a rowset object.</para><para><emphasis>Method isReadOnly()</emphasis></para><para>isReadOnly Methods isReadOnly<computeroutput> Synopsis: public boolean isReadOnly();     </computeroutput></para>
<para>A rowset may be read-only.
 Attempts to update a read-only rowset will result in an SQLException being thrown.
 Rowsets are updateable, by default, if updates are possible.</para><para><emphasis>Method removeRowSetListener(<ulink url="RowSetListener">RowSetListener</ulink>)</emphasis></para><para>removeRowSetListener Methods removeRowSetListener<computeroutput> Synopsis: public void removeRowSetListener(                         javax.sql.RowSetListener rowsetlistener);     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> listener - an event listener</listitem>
</itemizedlist><para>RowSet listener deregistration.</para><para><emphasis>Method setArray(int, Array)</emphasis></para><para>setArray Methods setArray<computeroutput> Synopsis: public void setArray(int parameterIndex, java.sql.Array x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> i - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - an object representing an SQL array</listitem>
</itemizedlist><para>Set an Array parameter.</para><para><emphasis>Method setAsciiStream(int, <ulink url="InputStream">InputStream</ulink>, int)</emphasis></para><para>setAsciiStream Methods setAsciiStream<computeroutput> Synopsis: public void setAsciiStream(int parameterIndex, java.io.InputStream x,                                      int length)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the java input stream which contains the ASCII parameter value</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> length - the number of bytes in the stream</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream.
 JDBC will read the data from the stream as needed, until it reaches end-of-file.</para><para>Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.</para><para><emphasis>Method setBigDecimal(int, <ulink url="BigDecimal">BigDecimal</ulink>)</emphasis></para><para>setBigDecimal Methods setBigDecimal<computeroutput> Synopsis: public void setBigDecimal(int parameterIndex, java.math.BigDecimal x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.lang.BigDecimal value.</para><para><emphasis>Method setBinaryStream(int, <ulink url="InputStream">InputStream</ulink>, int)</emphasis></para><para>setBinaryStream Methods setBinaryStream<computeroutput> Synopsis: public void setBinaryStream(int parameterIndex,                                       java.io.InputStream x, int length)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the java input stream which contains the binary parameter value</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> length - the number of bytes in the stream</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream.
 JDBC will read the data from the stream as needed, until it reaches end-of-file.</para><para>Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.</para><para><emphasis>Method setBlob(int, Blob)</emphasis></para><para>setBlob Methods setBlob<computeroutput> Synopsis: public void setBlob(int parameterIndex, java.sql.Blob x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> i - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - an object representing a BLOB</listitem>
</itemizedlist><para>Set a BLOB parameter.</para><para><emphasis>Method setBoolean(int, boolean)</emphasis></para><para>setBoolean Methods setBoolean<computeroutput> Synopsis: public void setBoolean(int parameterIndex, boolean x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java boolean value.</para><para><emphasis>Method setByte(int, byte)</emphasis></para><para>setByte Methods setByte<computeroutput> Synopsis: public void setByte(int parameterIndex, byte x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java byte value.</para><para><emphasis>Method setBytes(int, byte[])</emphasis></para><para>setBytes Methods setBytes<computeroutput> Synopsis: public void setBytes(int parameterIndex, byte[] x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java array of bytes.</para><para><emphasis>Method setCharacterStream(int, Reader, int)</emphasis></para><para>setCharacterStream Methods setCharacterStream<computeroutput> Synopsis: public void setCharacterStream(int parameterIndex, java.io.Reader x,                                          int length)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the java reader which contains the UNICODE data</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> length - the number of characters in the stream</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader.
 JDBC will read the data from the stream as needed, until it reaches end-of-file.</para><para>Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.</para><para><emphasis>Method setClob(int, Clob)</emphasis></para><para>setClob Methods setClob<computeroutput> Synopsis: public void setClob(int parameterIndex, java.sql.Clob x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> i - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - an object representing a CLOB</listitem>
</itemizedlist><para>Set a CLOB parameter.</para><para><emphasis>Method setCommand(String)</emphasis></para><para>setCommand Methods setCommand<computeroutput> Synopsis: public void setCommand(java.lang.String s)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> cmd - a command string, may be null</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the rowset&#39;s command property.
 This property is optional.
 The command property may not be needed when a rowset is produced by a data source that doesn&#39;t support commands, such as a spreadsheet.</para><para><emphasis>Method setConcurrency(int)</emphasis></para><para>setConcurrency Methods setConcurrency<computeroutput> Synopsis: public void setConcurrency(int i) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> concurrency - a value from ResultSet.CONCUR_XXX</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the rowset concurrency.</para><para><emphasis>Method setDataSourceName(String)</emphasis></para><para>setDataSourceName Methods setDataSourceName<computeroutput> Synopsis: public void setDataSourceName(java.lang.String s)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> name - a data source name</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the data source name.</para><para><emphasis>Method setDate(int, Date)</emphasis></para><para>setDate Methods setDate<computeroutput> Synopsis: public void setDate(int parameterIndex, java.sql.Date x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.sql.Date value.</para><para><emphasis>Method setDate(int, Date, Calendar)</emphasis></para><para>setDate Methods setDate<computeroutput> Synopsis: public void setDate(int parameterIndex, java.sql.Date x,                               java.util.Calendar cal)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.sql.Date value.
 The driver converts this to a SQL DATE value when it sends it to the database.</para><para><emphasis>Method setDouble(int, double)</emphasis></para><para>setDouble Methods setDouble<computeroutput> Synopsis: public void setDouble(int parameterIndex, double x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java double value.</para><para><emphasis>Method setEscapeProcessing(boolean)</emphasis></para><para>setEscapeProcessing Methods setEscapeProcessing<computeroutput> Synopsis: public void setEscapeProcessing(boolean flag)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> enable - true to enable; false to disable</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>If escape scanning is on (the default), the driver will do escape substitution before sending the SQL to the database.</para><para><emphasis>Method setFetchDirection(int)</emphasis></para><para>setFetchDirection Methods setFetchDirection<computeroutput> Synopsis: public void setFetchDirection(int direction)               throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs, or the result set type is TYPE_FORWARD_ONLY and direction is not FETCH_FORWARD.</para><para>Give a hint as to the direction in which the rows in this result set will be processed.
 The initial value is determined by the statement that produced the result set.
 The fetch direction may be changed at any time.</para><para><emphasis>Method setFetchSize(int)</emphasis></para><para>setFetchSize Methods setFetchSize<computeroutput> Synopsis: public void setFetchSize(int rows) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> rows - the number of rows to fetch</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs, or the condition 0 &lt;</para><para> rows &lt;</para><para> this.getMaxRows() is not satisfied.</para><para>Give the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this result set.
 If the fetch size specified is zero, then the JDBC driver ignores the value, and is free to make its own best guess as to what the fetch size should be.
 The default value is set by the statement that creates the result set.
 The fetch size may be changed at any time.
<emphasis>Method setFloat(int, float)</emphasis></para><para>setFloat Methods setFloat<computeroutput> Synopsis: public void setFloat(int parameterIndex, float x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java float value.
 The driver converts this to a SQL FLOAT value when it sends it to the database.</para><para><emphasis>Method setInt(int, int)</emphasis></para><para>setInt Methods setInt<computeroutput> Synopsis: public void setInt(int parameterIndex, int x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java int value.</para><para><emphasis>Method setLong(int, long)</emphasis></para><para>setLong Methods setLong<computeroutput> Synopsis: public void setLong(int parameterIndex, long x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java long value.</para><para><emphasis>Method setMaxFieldSize(int)</emphasis></para><para>setMaxFieldSize Methods setMaxFieldSize<computeroutput> Synopsis: public void setMaxFieldSize(int max) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> max - the new max column size limit; zero means unlimited</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>The maxFieldSize limit (in bytes) is set to limit the size of data that can be returned for any column value; it only applies to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR fields.
 If the limit is exceeded, the excess data is silently discarded.
 For maximum portability use values greater than 256.</para><para><emphasis>Method setMaxRows(int)</emphasis></para><para>setMaxRows Methods setMaxRows<computeroutput> Synopsis: public void setMaxRows(int max) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> max - the new max rows limit; zero means unlimited</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>The maxRows limit is set to limit the number of rows that any <ulink url="RowSet">RowSet</ulink> can contain.
 If the limit is exceeded, the excess rows are silently dropped.</para><para><emphasis>Method setNull(int, int)</emphasis></para><para>setNull Methods setNull<computeroutput> Synopsis: public void setNull(int parameterIndex, int sqlType)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> sqlType - SQL type code defined by java.sql.Types</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to SQL NULL.</para><para>Note: You must specify the parameter&#39;s SQL type.</para><para><emphasis>Method setNull(int, int, String)</emphasis></para><para>setNull Methods setNull<computeroutput> Synopsis: public void setNull(int parameterIndex, int sqlType,                               java.lang.String typeName)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><para> </para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> sqlType - a value from java.sql.Types</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> typeName - the fully-qualified name of an SQL user-named type, ignored if the parameter is not a user-named type or REF</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database access error occurs</para><para>Sets the designated parameter to SQL NULL.
 This version of setNull should be used for user-named types and REF type parameters.
 Examples of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types.</para><para>Note: To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter.
 In the case of a user-named type the name is the type name of the parameter itself.
 For a REF parameter the name is the type name of the referenced type.
 If a JDBC driver does not need the type code or type name information, it may ignore it.
 Although it is intended for user-named and Ref parameters, this method may be used to set a null parameter of any JDBC type.
 If the parameter does not have a user-named or REF type, the given typeName is ignored.</para><para><emphasis>Method setObject(int, Object)</emphasis></para><para>setObject Methods setObject<computeroutput> Synopsis: public void setObject(int parameterIndex, java.lang.Object x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - The first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - The object containing the input parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the value of a parameter using an object; use the java.lang equivalent objects for integral values.</para><para>The JDBC specification specifies a standard mapping from Java Object types to SQL types.
 The given argument java object will be converted to the corresponding SQL type before being sent to the database.</para><para>Note that this method may be used to pass datatabase specific abstract data types, by using a Driver specific Java type.
 If the object is of a class implementing SQLData, the rowset should call its method writeSQL() to write it to the SQL data stream.
 else If the object is of a class implementing Ref, Blob, Clob, Struct, or Array then pass it to the database as a value of the corresponding SQL type.
 Raise an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of those interfaces.</para><para><emphasis>Method setObject(int, Object, int)</emphasis></para><para>setObject Methods setObject<computeroutput> Synopsis: public void setObject(int parameterIndex, java.lang.Object x,                                 int targetSqlType)               throws java.sql.SQLException;     </computeroutput></para>
<para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>This method is like setObject above, but the scale used is the scale of the second parameter.
 Scalar values have a scale of zero.
 Literal values have the scale present in the literal.
 While it is supported, it is not recommended that this method not be called with floating point input values.</para><para><emphasis>Method setObject(int, Object, int, int)</emphasis></para><para>setObject Methods setObject<computeroutput> Synopsis: public void setObject(int parameterIndex, java.lang.Object x,                                 int targetSqlType, int scale)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - The first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - The object containing the input parameter value</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> targetSqlType - The SQL type (as defined in java.sql.Types) to be sent to the database.
 The scale argument may further qualify this type.</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> scale - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types this is the number of digits after the decimal.
 For all other types this value will be ignored,</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Additional Information</para><para>See Also</para><itemizedlist mark="bullet" spacing="compact"><listitem> java.sql.Types</listitem>
</itemizedlist><para> Set the value of a parameter using an object; use the java.lang equivalent objects for integral values.</para><para>The given Java object will be converted to the targetSqlType before being sent to the database.
 If the object is of a class implementing SQLData, the rowset should call its method writeSQL() to write it to the SQL data stream.
 else If the object is of a class implementing Ref, Blob, Clob, Struct, or Array then pass it to the database as a value of the corresponding SQL type.</para><para>Note that this method may be used to pass datatabase- specific abstract data types.</para><para><emphasis>Method setPassword(String)</emphasis></para><para>setPassword Methods setPassword<computeroutput> Synopsis: public void setPassword(java.lang.String s)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> password - the password string</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the password.</para><para><emphasis>Method setQueryTimeout(int)</emphasis></para><para>setQueryTimeout Methods setQueryTimeout<computeroutput> Synopsis: public void setQueryTimeout(int seconds)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> seconds - the new query timeout limit in seconds; zero means unlimited</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>The queryTimeout limit is the number of seconds the driver will wait for a Statement to execute.
 If the limit is exceeded, a SQLException is thrown.</para><para><emphasis>Method setReadOnly(boolean)</emphasis></para><para>setReadOnly Methods setReadOnly<computeroutput> Synopsis: public void setReadOnly(boolean value) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> value - true if read-only, false otherwise</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the read-onlyness of the rowset</para><para><emphasis>Method setRef(int, Ref)</emphasis></para><para>setRef Methods setRef<computeroutput> Synopsis: public void setRef(int parameterIndex, java.sql.Ref x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> i - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - an object representing data of an SQL REF Type</listitem>
</itemizedlist><para>Set a <computeroutput>REF(&lt;structured-type&gt;)</computeroutput> parameter.</para><para><emphasis>Method setShort(int, short)</emphasis></para><para>setShort Methods setShort<computeroutput> Synopsis: public void setShort(int parameterIndex, short x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java short value.</para><para><emphasis>Method setString(int, String)</emphasis></para><para>setString Methods setString<computeroutput> Synopsis: public void setString(int parameterIndex, java.lang.String x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a Java String value.</para><para><emphasis>Method setTime(int, Time)</emphasis></para><para>setTime Methods setTime<computeroutput> Synopsis: public void setTime(int parameterIndex, java.sql.Time x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.sql.Time value.</para><para><emphasis>Method setTime(int, Time, Calendar)</emphasis></para><para>setTime Methods setTime<computeroutput> Synopsis: public void setTime(int parameterIndex, java.sql.Time x,                               java.util.Calendar cal)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.sql.Time value.
 The driver converts this to a SQL TIME value when it sends it to the database.</para><para><emphasis>Method setTimestamp(int, Timestamp)</emphasis></para><para>setTimestamp Methods setTimestamp<computeroutput> Synopsis: public void setTimestamp(int parameterIndex, java.sql.Timestamp x)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.sql.Timestamp value.</para><para><emphasis>Method setTimestamp(int, Timestamp, Calendar)</emphasis></para><para>setTimestamp Methods setTimestamp<computeroutput> Synopsis: public void setTimestamp(int parameterIndex, java.sql.Timestamp x,                                    java.util.Calendar cal)               throws java.sql.SQLException;     </computeroutput></para>
<para> Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the parameter value</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set a parameter to a java.sql.Timestamp value.
 The driver converts this to a SQL TIMESTAMP value when it sends it to the database.</para><para><emphasis>Method setTransactionIsolation(int)</emphasis></para><para>setTransactionIsolation Methods setTransactionIsolation<computeroutput> Synopsis: public void setTransactionIsolation(int value)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> level - the transaction isolation level</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the transaction isolation.</para><para><emphasis>Method setType(int)</emphasis></para><para>setType Methods setType<computeroutput> Synopsis: public void setType(int value) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> value - may be TYPE_FORWARD_ONLY, TYPE_SCROLL_INSENSITIVE, or TYPE_SCROLL_SENSITIVE</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs</para><para>Set the type of this result set.</para><para><emphasis>Method setTypeMap(Map)</emphasis></para><para>setTypeMap Methods setTypeMap<computeroutput> Synopsis: public void setTypeMap(java.util.Map value)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> map - a map object</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Install a type-map object as the default type-map for this rowset.</para><para><emphasis>Method setUnicodeStream(int, <ulink url="InputStream">InputStream</ulink>, int)</emphasis></para><para>setUnicodeStream Methods setUnicodeStream<computeroutput> Synopsis: public void setUnicodeStream(int parameterIndex,                                        java.io.InputStream x, int length)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> parameterIndex - the first parameter is 1, the second is 2, ...</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> x - the java input stream which contains the UNICODE parameter value</listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem> length - the number of bytes in the stream</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Deprecated</para><para>When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream.
 JDBC will read the data from the stream as needed, until it reaches end-of-file.
 The JDBC driver will do any necessary conversion from UNICODE to the database char format.</para><para>Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.</para><para><emphasis>Method setUrl(String)</emphasis></para><para>setUrl Methods setUrl<computeroutput> Synopsis: public void setUrl(java.lang.String s) throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> url - a string value, may be null</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the url used to create a connection.
 Setting this property is optional.
 If a url is used, a JDBC driver that accepts the url must be loaded by the application before the rowset is used to connect to a database.
 The rowset will use the url internally to create a database connection when reading or writing data.
 Either a url or a data source name is used to create a connection, whichever was specified most recently.</para><para><emphasis>Method setUsername(String)</emphasis></para><para>setUsername Methods setUsername<computeroutput> Synopsis: public void setUsername(java.lang.String s)               throws java.sql.SQLException;     </computeroutput></para>
<para>Parameters</para><itemizedlist mark="bullet" spacing="compact"><listitem> name - a user name</listitem>
</itemizedlist><para>Exceptions</para><para>SQLException</para><para>if a database-access error occurs.</para><para>Set the user name.</para></section></docbook>