<docbook><section><title>Udaudadotnetst</title><para> </para><title> uda.dotnet.st</title> uda.dotnet.st
<para> </para><bridgehead class="http://www.w3.org/1999/xhtml:h1">  Single-Tier (Lite Edition)</bridgehead>
<para>  Single-Tier (Lite Edition)  <ulink url="OpenLink">OpenLink</ulink>  Single-Tier ADO.NET drivers are installed on one data-consuming machine (a client, workstation or application-server, depending on architecture), providing connectivity to local or remote databases.</para><para>The <ulink url="OpenLink">OpenLink</ulink>  Single-Tier is a client-only installation and goes some way to ensure the job for developers, administrators and end-users is simplified.
 There is no server-side administration so the user is provided with a single point of entry for installation and administration.
 In the majority of cases, knowing the database is all that is required.</para><para>To the developer writing an application, there is no requirement to know on which server it resides: you can write your application for any environment, regardless of where it will end.
 There are also performance benefits gained by employing this single solution, which in some cases exceeds that provided by the native drivers.
 Being able to integrate your solution simply into your organization with its plethora of internal and disparate systems means your return on investment increases significantly.</para><para>These drivers are built by implementing the ADO.NET data-access interface specifications using a database-vendor-provided Call Level Interface (CLI).
 Thus, the capabilities and architecture of the CLI significantly affect the functional outcome of a driver.</para><para>  [[/images/udadotnetst.gif|]]</para><para> / Image scaled down; Click to enlarge./</para><para> ADO.Net drivers are developed using the call-level interface (CLI) of the respective databases that they support.
 These call-level interfaces take the following forms:</para><itemizedlist mark="bullet" spacing="compact"><listitem>Type A - C-based dynamic SQL interface that inextricably includes client and server networking components </listitem>
<listitem>Type B - C-based remote procedure calls (RPC) interface to the wire-protocol of the underlying database.
 This is a client-only interface that communicates directly with the remote database server.
 These interfaces arenÂ’t typically available to third-party developers.
 To date the Open Source projects such as <ulink url="FreeTDS">FreeTDS</ulink>  , <ulink url="MySQL">MySQL</ulink>  , <ulink url="PostgreSQL">PostgreSQL</ulink>  , and Interbase are the only publicly accessible and freely available versions of such interfaces.
</listitem>
<listitem>Type C - Generic bridges: these are ADO.NET providers that act as implementation proxies, such that bridging can be achieved in the manner depicted in the matrix below: <ulink url="OpenLink">OpenLink</ulink>  provides Single-Tier Drivers built using the Type A, B, and C call-level interfaces formats, depending on what is publicly available to third-party developers by the vendors of the respective database engines.</listitem>
</itemizedlist><para>Please view your respective Data Access Mechanism for more information.</para><para> <ulink url="OpenLink">OpenLink</ulink>  provides Single-Tier Drivers built using the Type A, B, and C call-level interface formats, depending on what is publicly available to third-party developers by the vendors of the respective database engines.
 Architectural diagrams showing the different type representations of ADO.NET drivers available.</para><para>These drivers are built using the Type-A call-level interfaces of the relevant back-end database engine.
 Thus, these drivers implement the interfaces of the respective data access mechanisms (ADO.NET) with inherent database-specific networking, and a dependency on the database vendor provided networking middleware products.
 At installation time you simply install the driver with the underlying assumption that remote database connectivity is already in place (or will be put in place) via products such as Net8 and SQL*Net, Progress Client Networking, Informix Connect, Ingres Net, DB2 Connect etc.</para><para>  [[/images/aadonetst.gif|]]</para><para> /Type A Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./</para><para> [[/images/aadonetstprog.gif|]]</para><para> /Type A Architectural Diagram for Progress ADO.NET Image scaled down; Click to enlarge./</para><para> These drivers are built using the Type-B client-networking interface to wire-protocols of the supported back-end database.
 These drivers are installed once on a workstation/desktop or application server machine, and after installation are ready for direct communication with the supported back-end database.
 This driver format is only currently available for; Microsoft SQL Server, SYBASE ASE, <ulink url="MySQL">MySQL</ulink>  , <ulink url="PostgreSQL">PostgreSQL</ulink>  , and <ulink url="OpenLink">OpenLink</ulink>  Virtuoso.
 Support for other databases will occur as and when unsupported database engine vendors make their RPC client-interfaces available to third-party developers.</para><para>  [[/images/badonetst.gif|]]</para><para> /Type B Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./</para><para> These drivers are proxies sitting atop third-party implementations of the relevant data-access mechanisms.
 Their prime purpose is to integrate one data-access standard implementation with another.
 There are a variety of scenarios where this is useful such as:</para><itemizedlist mark="bullet" spacing="compact"><listitem>ADO.NET access to back-end databases that are only accessible via ODBC</listitem>
</itemizedlist><para> [[/images/cadonetst.gif|]]</para><para> /Type C Architectural Diagram for ADO.NET Image scaled down; Click to enlarge./
</para><table><title /><tgroup><thead /><tbody><entry>  Platform Support </entry><entry>  Support for client, server, and application server operating systems  </entry>
</tbody></tgroup></table>
<para> |  32- and 64-bit components |  Enables the development and utilization of 32- or 64-Bit DBMS independent applications.
</para><table><title /><tgroup><thead /><tbody><entry>  Database Engine Support </entry><entry>  Backend database engine support  </entry>
</tbody></tgroup></table>
<para> |  Broad backend Database Support |  Enables DBMS independent application utilization and deployment across a vast array of industry leading DBMS engines that includes; Oracle (7.x - 10.x), SQL Server (6.x - 2005), DB2 (6.x - 8.x), Sybase (10.x - 12.x), Progress (7.x - 10.x), Ingres (6.4 - II family), Informix (5.x - 9.x &amp; IDS 2000), <ulink url="MySQL">MySQL</ulink>  , and <ulink url="PostgreSQL">PostgreSQL</ulink>  .</para><para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Performance  </entry>
</tbody></tgroup></table>
<para> 
</para><table><title /><tgroup><thead /><tbody>
<row><entry>  Blistering Performance </entry><entry>  Delivery of data access performance levels across ODBC, JDBC, ADO.NET and OLE DB that don&#39;t compromise viability of DBMS independent application development and deployment.  </entry><entry>  Network Aware Record Retrieval </entry><entry>  Enabling the retrieval and insertion of multiple DBMS records in batches over the network with a minimal number of network hops.  </entry></row>
</tbody></tgroup></table>

<table><title /><tgroup><thead /><tbody><entry>  Administration </entry><entry>  Configuration and Management  </entry>
</tbody></tgroup></table>
<para> |  Single Component Installation Process |  In situations where DBMS vendor networking is already in place, Single-Tier Drivers provide ease of installation and configuration since you are only required to install a single client component that inherently depends on existing DBMS specific networking for remote data access.</para><para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Standards Compliance  </entry>
</tbody></tgroup></table>
<para> |  International character support |  Enables the development and deployment of international applications that are independent of underlying database engine.</para><para> 
</para><table><title /><tgroup><thead /><tbody><entry>  Performance  </entry>
</tbody></tgroup></table>
<para> |  Multithreaded |  Enables exploitation of scalability benefits arising from the use of multiple CPUs or Clusters while developing or using DBMS independent applications.
</para><table><title /><tgroup><thead /><tbody><entry>  Standards Compliance  </entry>
</tbody></tgroup></table>
<para> |  Supports Advanced Data Access API functionality |  Enables the development and utilization of DBMS application with DBMS independent granularity that extends to challenging areas such as scalar function calls, dates and timestamps manipulation, outer join handling, and SQL stored procedure invocation etc.</para><para> </para></section></docbook>