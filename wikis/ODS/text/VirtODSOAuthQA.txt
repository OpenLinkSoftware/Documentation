%META:TOPICPARENT{name="ODSIndex"}%

---++OAuth QA

%TOC% 

---+++<nowiki>MySpace</nowiki> Tools

   In order to use the [[http://developer.myspace.com/community/myspace/oauthintro.aspx][MySpace OAuth Testing Tool]]:
   1. Need to have registered myspace account.
   1. Need to apply to build apps on the <nowiki>MySpace</nowiki> Developer Platform. 

---+++Google Tools

   [[http://code.google.com/apis/gdata/articles/oauth.html#OAuthPlayground][<nowiki>Google?s</nowiki> OAuth playground tool]] can be tried [[http://googlecodesamples.com/oauth_playground/][here]].


---++++Register your domain in Google

In order to use the tool, you need to register the web application as domain:


   1. Login at your gmail account
   1. Go to https://www.google.com/accounts/ManageDomains
   1. Enter in the field for ex. the QA server ec2-67-202-42-146.compute-1.amazonaws.com and click the "Add Domain" button.
      1. Note: for now registered domains cannot be deleted ( not supported from the Google UI)
   1. As result the domain will be created and the manage domain page will be opened. Here you need to verify you have admin privileges by choosing verification method
   1. Choose "Upload an HTML file" and follow further the instructions.
   1. Once the file is put in the correct server root, you should get the confirmation page: 
      * <img src="%ATTACHURLPATH%/g1.png" style="wikiautogen"/>
   1. Click the "Agree .." buttons.
   1. As result will be additional setting page you need to change. Type in for "Target URL path prefix:": http://ec2-67-202-42-146.compute-1.amazonaws.com/ods
      * <img src="%ATTACHURLPATH%/g2.png" style="wikiautogen"/>
   1. Click the "Save" button.
   1. As result will be shown the generated OAuth Consumer Secret for the  OAuth Consumer Key:  	 ec2-67-202-42-146.compute-1.amazonaws.com:
<verbatim>
OAuth Consumer Key:  	 ec2-67-202-42-146.compute-1.amazonaws.com
OAuth Consumer Secret: 	uEkfBvpMhTTT/VyFItEnEYt4 
</verbatim>
   1. Also will be shown "test" link  "Test your AuthSub registration here". Click it.   
   1. As result will be opened new window with OAuth request
   1. Click the "Grant Access" button.
      * <img src="%ATTACHURLPATH%/g4.png" style="wikiautogen"/>
   1. As result will be redirected to http://ec2-67-202-42-146.compute-1.amazonaws.com/ods/
   1. Now lets return to our initial window and click there the button "Save".
   1. Note that already is shown for the domain that is "Active":
      * <img src="%ATTACHURLPATH%/g3.png" style="wikiautogen"/>  

---++++The Playground Tool qa steps

Let's try the playground tool:

   1 Go to http://googlecodesamples.com/oauth_playground/
   1 Select Scope, for ex. check the check-box for "Blogger".
   1. Change <nowiki>oauth_signature_method</nowiki> to HMAC-SHA1
   1. Enter for <nowiki>"oauth_consumer_key"</nowiki>: ec2-67-202-42-146.compute-1.amazonaws.com
   1. Enter for "consumer secret" the value generated from above.
   1. Click the "Request token" button.
   1. As result will get Response with Status Ok
      * <img src="%ATTACHURLPATH%/g5.png" style="wikiautogen"/>  
      * here is the <b>Signature base string</b>:
<verbatim>
GET&amp;https%3A%2F%2Fwww.google.com%2Faccounts%2FOAuthGetRequestToken&amp;oauth_consumer_key
%3Dec2-67-202-42-146.compute-.amazonaws.com%26oauth_nonce%3D60f50c8800b2f52807732ca1ae3855ef
%26oauth_signature_method%3DHMACSHA1%26oauth_timestamp%3D1224191856%26oauth_version%3D1.0
%26scope%3Dhttp%253A%252F%252Fwww.blogger.com%252Ffeeds%252F
</verbatim>

      * here is the Authorization header:
<verbatim>
Authorization: OAuth oauth_version="1.0",
oauth_nonce="60f50c8800b2f52807732ca1ae3855ef",
oauth_timestamp="1224191856", 
oauth_consumer_key="ec2-67-202-42-146.compute-1.amazonaws.com", 
oauth_signature_method="HMAC-SHA1", 
oauth_signature="nohPMCw%2BMrO8%2FwslS4oEm2wfuhg%3D"
</verbatim>
      * here is the Response body:
<verbatim>
HTTP/1.1 200 OK  
Content-Type: text/plain; charset=UTF-8  
Date: Thu, 16 Oct 2008 21:17:37 GMT  
X-Content-Type-Options: nosniff  
Expires: Thu, 16 Oct 2008 21:17:37 GMT  
Cache-Control: private, max-age=0  
Content-Length: 76  
Server: GFE/1.3     
 oauth_token=COW3iN_7HxCXqfuzAQ&amp;oauth_token_secret=ulsD7N5SuY16qC%2FvY2Sdk3AS 
</verbatim>

   1. And also in the "Get the Token" section now will be active the "Authorize" button. Click it.
      * <img src="%ATTACHURLPATH%/g6.png" style="wikiautogen"/>  
   1. As result will be shown the authentication page where you need to click the "Grant Access" button:
      * <img src="%ATTACHURLPATH%/g7.png" style="wikiautogen"/>  
   1. As result now in the "Get the Token" section will be active the "Access token" button. Click it.
      * <img src="%ATTACHURLPATH%/g8.png" style="wikiautogen"/>     
   1. As result the access_token will be obtained:
      * <img src="%ATTACHURLPATH%/g9.png" style="wikiautogen"/>     
   1. Click the "available feeds" button marked as 6.
   1. As result in the "Response" body section will be shown:
<verbatim>
Blogger  
http://www.blogger.com/feeds/default/blogs  
http://www.blogger.com/feeds/<blogID>/posts/default  
http://www.blogger.com/feeds/<blogID>/[<postID>]/comments/default 
</verbatim>
   1. Copy the 1st URL and paste in the field after the method GET.
   1. Click "execute".
   1. As result will find your blogs, post, info at Blogger, surprised? :) :
      * <img src="%ATTACHURLPATH%/g10.png" style="wikiautogen"/>  



---++References

   * [[http://danbri.org/words/2008/10/15/380][OpenID, OAuth UI and tool links]]
   * [[http://code.google.com/apis/accounts/docs/RegistrationForWebAppsAuto.html][Register Web Application in Google as domain]]
   * [[http://code.google.com/apis/gdata/articles/oauth.html#OAuthPlayground][Google OAuth Playground Tutorial]]
   * [[http://virtuoso.openlinksw.com/wiki/main/Main/OAuth][OpenLink's explanation of OAuth]]
   * [[http://virtuoso.openlinksw.com/wiki/main/Main/VirtuosoOAuthServer][Virtuoso OAuth server]]
   * [[VirtOAuthControllers][Using OAuth with ODS]]
   * [[VirtuosoOdsUbiquity][ODS Ubiquity Commands]]
   * [[http://virtuoso.openlinksw.com/wiki/main/Main/VirtOAuth][Virtuoso OAuth Implementation]]
   * [[VirtuosoOdsControllers][ODS Controllers]]      
   * [[VirtuosoOdsUbiquityTutorialsOAuth][OAuth Ubiquity Tutorial]]
   * [[VirtOAuthTestTool][Virtuoso OAuth Test Tool for ODS Controllers]]
   * [[http://virtuoso.openlinksw.com/wiki/main/Main/VirtOAuthSPARQL][Virtuoso SPARQL OAuth Tutorial]]
   * [[VirtuosoOdsUbiquityTutorials][ODS Ubiquity Tutorials]]
   * [[VirtOAuthExamples][OAuth Applications Authentication examples]]
   * [[http://oauth.net/core/1.0/][OAuth API]]
   * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtAuthServerUI][Virtuoso Authentication Server UI]].
   * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLEndpointProtection][Safeguarding your Virtuoso-hosted SPARQL Endpoint]]
   * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtTipsAndTricksGuideSPARQLEndpointProtection][SPARQL Endpoint Protection Methods Collection]]
   * [[http://docs.openlinksw.com/virtuoso/][Virtuoso documentation]]
      * [[http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpoint][SPARQL Service Endpoint]] 
      * [[http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri][Service Endpoint Security]] 
      * [[http://docs.openlinksw.com/virtuoso/rdfsparql.html#sparqwebservicetbl][Managing a SPARQL Web Service Endpoint]] 
      * [[http://docs.openlinksw.com/virtuoso/rdfsparql.html][SPARQL]]
   * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtTipsAndTricksGuide][Virtuoso Tips and Tricks Collection]]
      * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLDET][SPARQL Endpoint DET Configuration Guide]]       
      * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLSecurityWebID][WebID Protocol & SPARQL Endpoint ACLs Tutorial]]
      * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtTipsAndTricksGuideSPARQLEndpoints][Securing SPARQL endpoints]]
   * [[OdsSPARQLAuth][SPARUL over SPARQL using the http://cname:port/sparql-auth endpoint]]
   * [[http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLSSL][Manage a SPARQL-WebID based Endpoint]]
   * [[VirtODSSecurityWebID][WebID Protocol Support in OpenLink Data Spaces]].
   * Manage ODS Datadspaces Objects WebID Access Control Lists (ACLs):
      * [[ODSBriefcaseWebID][ODS Briefcase WebID based ACL Guide]]
         * [[ODSBriefcaseWebIDPerson][Person Entity WebID based ACL Guide]]
         * [[ODSBriefcaseWebIDGroup][Group Entity WebID based ACL Guide]]
         * [[ODSBriefcaseWebIDPublic][Public WebID based ACL Guide]]      
      * [[ODSFeedManagerWebIDACL][ODS Feed Manager WebID based ACL Guide]]
         * [[ODSFeedManagerWebIDACLPerson][Person Entity Specific ACL]]
         * [[ODSFeedManagerWebIDACLGroup][Group Entity Specific ACL]]
         * [[ODSFeedManagerWebIDACLPublic][Public Specific ACL for anyone with a WebID]]
      * [[ODSCalendarWebIDACL][ODS Calendar WebID based ACL Guide]]
         * [[ODSCalendarWebIDACLPerson][Person Entity Specific ACL]]
         * [[ODSCalendarWebIDACLGroup][Group Entity Specific ACL]]
         * [[ODSCalendarWebIDACLPublic][Public Specific ACL for anyone with a WebID]]
      * [[ODSBookmarksWebIDACL][ODS Bookmark Manager WebID based ACL Guide]]
         * [[ODSBookmarksWebIDACLPerson][Person Entity Specific ACL]]
         * [[ODSBookmarksWebIDACLGroup][Group Entity Specific ACL]]
         * [[ODSBookmarksWebIDACLPublic][Public Specific ACL for anyone with a WebID]]
      * [[ODSAddressBookWebIDACL][ODS Addressbook  WebID based ACL Guide]]
         * [[ODSAddressBookWebIDACLPerson][Person Entity Specific ACL]]
         * [[ODSAddressBookWebIDACLGroup][Group Entity Specific ACL]]
         * [[ODSAddressBookWebIDACLPublic][Public Specific ACL for anyone with a WebID]]
   * [[ODSPkiSetup][Guide for Set up a X.509 certificate issuer and HTTPS listener and generate ODS user certificates.]]
   * [[VirtODSPubSubHub][Setting up PubSubHub in ODS]]
   * [[VirtPubSubHub][PubSubHubBub Demo Client Example]]
   * [[VirtFeedPubSubHub][Feed subscription via PubSubHub protocol Example ]]
   * [[VirtPubSubHubACL][Setting Up PubSubHub to use WebID Protocol or IP based control lists]]
   * [[OdsKeyImport][CA Keys Import using Conductor]]
   * [[ODSGenerateX509Certificate][Generate an X.509 Certificate hosted WebID Guide]]
   * [[ODSGenerateWebIDX509CertOSKeystore][Generate an X.509 Certificate (with a WebID watermark) to be managed by host operating system keystore]]
   * [[ODSGenerateWebIDX509CertBrsKeystore][Generate an X.509 Certificate (with a WebID watermark) to be managed by a browser-based keystore]]
   * [[ODSWebIDIdP][Using Virtuoso's WebID Verification Proxy Service with a WebID-bearing X.509 certificate]]
   * [[ODSWebIDIdpProxy][Using Virtuoso's WebID Identity Provider (IdP) Proxy Service with an X.509 certificate]]
   * [[ODSBriefcaseWebIDShareFile][ODS Briefcase WebID Protocol Share File Guide]]
   * [[http://esw.w3.org/topic/foaf+ssl][WebID Protocol Specification]]
   * [[https://foaf.me/simpleLogin.php][Test WebID Protocol Certificate page]]
   * [[http://test.foafssl.org/cert/][WebID Protocol Certificate Generation page]]



CategoryVirtuoso CategoryODS