<docbook><section><title>VirtTimezoneLessDateTime</title><title> Timezoneless Datetimes</title> Timezoneless Datetimes
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> Why</bridgehead>
<para>Some traditional relational databases keep all values of DATETIME type as combination of time and timezone data.
 Others treat all time values as if they&#39;re in a single timezone (which might be specified by configuration, or inferred from local environment), which may mean conversion of submitted values which include timezone information or simple omission of that information upon storage.</para>
<para>In RDF, incoming triples may contain literals of types like xsd:dateTime with arbitrary values matching <ulink url="http://dbpedia.org/page/ISO_8601">ISO 8601</ulink>, and this standard makes inclusion of timezone optional, i.e., both timezoned and timezoneless values may be included.</para>
<para>This mix makes it necessary to handle both &quot;timezoned&quot; and &quot;timezoneless&quot; datetimes inside one database.
 Virtuoso servers support this starting from version 07.20.3213.</para>
<emphasis><emphasis>Important:</emphasis> the use of timezoneless datetimes may result in subtle errors in data processing.
 Applications that worked fine with timezoned datetimes may work incorrectly when timezoneless datetimes are used.
 Such application errors may stay unnoticed during local testing and only be revealed after worldwide use.</emphasis><para>To stay on safe side, the use of timezoneless datetimes remains blocked with databases created pre-07.20.3213, even after the server executable is upgraded, so old applications will continue to work as before.
 When developing new applications, please pay attention to the check-list at the end of this section.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> What</bridgehead>
<para>As of version 07.20.3213, Virtuoso supports DATETIMEand xsd:dateTime values both with and without timezone information, i.e., both &quot;timezoned&quot; and &quot;timezoneless&quot;.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2"> How</bridgehead>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Enabling Timezoneless Support</bridgehead>
<para>Different applications may require different behavior when input data contains timezoneless values.</para>
<para>In some cases, it is better to simply CAST all values to timezoned than to upgrade existing application code.</para>
<para>Virtuoso offers five different modes of support for timezoneless values.
 The mode is selected by setting the &quot;TimezonelessDatetimes&quot; parameter in [Parameters] section of virtuoso.ini.
 This should be set before creating the database and the set value is stored in the database.</para>
<para>After database is created, an attempt to change the mode by changing the setting in the virtuoso.ini, will have no effect and the virtuoso.log will contain a warning about mismatch between setting in the virtuoso.ini file and the database file.</para>
<para>The possible variants are:</para>

<table><title /><tgroup><thead /><tbody>
<row><entry>  <emphasis>TimezonelessDatetimes setting</emphasis>  </entry><entry>  <emphasis>effect</emphasis>  </entry></row>
<row><entry>  <emphasis>0</emphasis>  (or unset)  </entry><entry> Never use timezoneless, as it was in old databases. Always set local timezone on parsing strings if no timezone specified. An attempt to set timezoneless by calling function forget_timezone() will signal an error. Timezoneless values still may come from outside as deserializations of timezoneless DATETIME values, serialized by other database instances, but not in any other way. </entry></row>
<row><entry>  <emphasis>1</emphasis>  </entry><entry> When parsing strings, set timezoneless if ISO format tells so.  </entry></row>
<row><entry>  <emphasis>2</emphasis>  </entry><entry> Set timezoneless always, exception when the parsed string contains explicit timezone or when RFC requires the use of GMT or when timezone is set by the function adjust_timezone(). This is default for new databases if TimezonelessDatetimes parameter is missing in virtuoso.ini.  </entry></row>
<row><entry>  <emphasis>3</emphasis>  </entry><entry> Never use timezoneless. Always set local timezone on parsing strings if not timezone specified. An attempt to set timezoneless by calling function forget_timezone() will signal an error. Timezoneless values still may come from outside as deserializations of timezoneless DATETIME values, serialized by other database instances, but not in any other way. The difference with TimezonelessDatetimes=0 is that timezones are always printed on cast datetimes to strings etc. so timezoneless-aware clients will get unambiguous data.  </entry></row>
<row><entry>  <emphasis>4</emphasis>  </entry><entry> On parsing string, set timezone to GMT if no timezone was specified. However, timezoneless can be set by calling function forget_timezone(). This mode can be convenient for global web services when real &quot;local&quot; timezones of specific users are not known.  </entry></row>
</tbody></tgroup></table>
<para> For most new applications, we recommend TimezonelessDatetimes = 2, with TimezonelessDatetimes = 1 as the second-best.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Formats of Datetime Strings</bridgehead>
<para>Traditional SQL strings are of format &quot;YYYY-MM-DD hh:mm:ss&quot; with optional decimal fraction at the end and then optional tinmezone data.
 Depending on software, the timezone can be specified as &quot;timezone offset&quot;, i.e., the difference with GMT in minutes, or as &quot;timezone label&quot;, i.e., an identifier of timezone in special system dictionary that contains not only an offset in minutes but also information about daylight saving changes of the offset.
<emphasis>Virtuoso does not support timezone labels, only numerical timezone offsets.</emphasis> Depending on the system, notation without timezone data at the end may mean timezoneless value or, more probably, the value in some &quot;default&quot; timezone, such as the server&#39;s local timezone or GMT.</para>
<para>ISO 8601 introduced format &quot;YYYY-MM-DDThh:mm:ss&quot;, with &quot;T&quot; character between the &quot;date&quot; and &quot;time&quot; parts.
It also prescribed an unambiguous difference between timezoneless and timezoned values: an absent timezone means a timezoneless value.</para>
<para>The timezone offset is written as &quot;+hh:mm&quot; or &quot;-hh:mm&quot;, the &quot;+00:00&quot; is usually shortened to &quot;Z&quot;.</para>
<para>Oracle Java may use 1 to 4 digits without delimiting &quot;:&quot;; in that case, 1 or 2 digits mean whole hours whereas 3 or 4 digits mean 1 or 2 digits of hour and two digits of minutes.
 For historical reasons, &quot;-00:00&quot; notation differs from &quot;+00:00&quot; and means timezoneless, not GMT datetime.</para>
<bridgehead class="http://www.w3.org/1999/xhtml:h3"> Comparison of Datetimes</bridgehead>
<para>ISO 8601 explicitly warns that comparison of timezoned and timezoneless datetime is not always possible.
 Valid timezones vary from -14:00 to +14:00; the fact that the span can exceed 24 hours may not be immediately obvious.</para>
<para>Nevertheless, storing rows in a database table require some unambiguous order; any order is OK as long as it does not break the rules and common sense, but it should be well-defined.</para>
<para>Virtuoso&#39;s ordering for a mix of timezoned and timezoneless datetimes is very simple:</para>
<orderedlist spacing="compact"><listitem>All timezoned datetimes are sorted in natural chronological order, based on their GMT equivalence.
 The value of timezone offset does not matter.
</listitem>
<listitem>All timezoneless datetimes are sorted in natural chronological order, as if in GMT.
</listitem>
<listitem>For each GMT calendar day, all timezoned datetimes are placed before all timezoneless datetimes.</listitem>
</orderedlist><bridgehead class="http://www.w3.org/1999/xhtml:h3"> Related Functions</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem><emphasis>integer is_timezoneless (in dt datetime)</emphasis> The function returns 1 for timezoneless arguments, zero for timezoned.
 </listitem>
<listitem><emphasis>integer timezone (in dt datetime [, in ignore_tzl integer])</emphasis> The function returns timezone offset of its first argument, as an integer value in minutes.
<itemizedlist mark="bullet" spacing="compact"><listitem>if the first argument is timezoneless and second argument is missing or zero then the returned value is NULL.
</listitem>
<listitem>if the first argument is timezoneless and second argument is nonzero then the returned value is 0.
 </listitem>
</itemizedlist></listitem>
</itemizedlist><itemizedlist mark="bullet" spacing="compact"><listitem><emphasis>datetime adjust_timezone (in dt datetime, in tz_offset integer [, in ignore_tzl integer])</emphasis> The function returns its first argument with unchanged GMT value but new timezone offset, as it is specified by the second argument.
<itemizedlist mark="bullet" spacing="compact"><listitem>if the first argument is timezoneless and third argument is missing or zero then error 22023 is signaled.
</listitem>
<listitem>if the first argument is timezoneless and third argument is nonzero then no error is signalled and the argument is handled like it is a GMT value.
 </listitem>
</itemizedlist></listitem>
<listitem><emphasis>datetime dt_set_tz (in dt datetime, in tz_offset integer)</emphasis> The function returns its first argument with unchanged GMT value but new timezone offset.
 Unlike adjust_timezone(), if the argument is timezoneless then no error is signalled.
 </listitem>
<listitem><emphasis>datetime forget_timezone (in dt datetime [, in ignore_timezone integer])</emphasis> The function returns its first argument as a timezoned value.
<itemizedlist mark="bullet" spacing="compact"><listitem>if the first argument is timezoneless, then it is returned unchanged.
</listitem>
<listitem>if the first argument is timezoned and second argument is missing or zero, then the result is a timezoneless value that &quot;looks like&quot; local time notation.
</listitem>
<listitem>if the first argument is timezoned and second argument is nonzero, then the value is first made GMT and then it becomes timezoneless.
 </listitem>
</itemizedlist></listitem>
<listitem><emphasis>datetime now ()</emphasis> </listitem>
<listitem><emphasis>datetime rdf_now_impl ()</emphasis> </listitem>
<listitem><emphasis>datetime getdate ()</emphasis> </listitem>
<listitem><emphasis>datetime get_timestamp ()</emphasis> </listitem>
<listitem><emphasis>datetime current_timestamp ()</emphasis> All these names refer to one function that returns the timestamp of current transaction.
 It is the datetime of the beginning of current transaction with the fractional part of seconds replaced with serial number of a transaction within the second.
<itemizedlist mark="bullet" spacing="compact"><listitem>If TimezonelessDatetimes=0 then the time has local timezone offset (as it was set at the time of last server start); otherwise it is timezoneless.
 </listitem>
</itemizedlist></listitem>
<listitem><emphasis>datetime curdatetime ([in fraction_microseconds integer])</emphasis> The function returns current datetime, like now(), but fractional part of seconds can be adjusted by providing the number of &quot;microseconds&quot; as the argument.
 </listitem>
<listitem><emphasis>datetime curdatetimeoffset ([in fraction_microseconds integer])</emphasis> The function is like curdatetime(), but the returned datetime is in GMT timezone.
 </listitem>
<listitem><emphasis>datetime curutcdatetime ([in fraction_microseconds integer])</emphasis> and  <emphasis>datetime sysutcdatetime ([in fraction_microseconds integer])</emphasis> These two names refer to one function that is similar to curdatetime(), but the returned datetime is in GMT timezone.
</listitem>
</itemizedlist><para> </para>
</section></docbook>