%META:TOPICPARENT{name="VirtAdoNet35Provider"}%

==  Using Microsoft Entity Frameworks to Access <nop>PostgreSQL Schema Objects with Virtuoso==

This document details the steps required to provide Microsoft Entity Framework access to <nop>PostgreSQL Schema Objects using the <nop>OpenLink Virtuoso Universal Server. This is achieved by linking the required <nop>PostgreSQL Schema objects into Virtuoso using its built-in Virtual Database engine, and then using the Virtuoso ADO.NET Entity Framework provider to query the remote <nop>PostgreSQL Schema objects linked into the Virtuoso Server.

=== Prerequisites===

The following prerequisites must be in place for this solution to be possible.

==== <nop>PostgreSQL DBMS====

A <nop>PostgreSQL DBMS hosting the required Schema Objects needs to be available. In this document a  <b>Northwind database imported into <nop>PostgreSQL</b> will be used to demonstrate this process.

==== ODBC Driver for <nop>PostgreSQL====

A <nop>PostgreSQL ODBC Driver is required for linking the <nop>PostgreSQL Schema Objects into the Virtuoso Server. The <b><nop>OpenLink ODBC Driver for <nop>PostgreSQL</b> will be used in this document, for which a functional ODBC Data source name of **<code>pgr8ma</code>** will be assumed to exist on the machine hosting the Virtuoso Server.

==== Virtuoso Universal Server ====

A Virtuoso installation including the Virtuoso Universal Server and ADO.NET Entity Framework Provider is required. The Virtuoso components used must be Release 5.10.x or above, this being the minimum version containing support for Microsoft Entity Frameworks.

==== Microsoft Visual Studio 2008 SP1====

Microsoft Visual Studio 2008 Service Pack 1 is required, this being the only version containing the necessary Entity Framework support available at the time of writing.

=== Tasks===

==== Ensure <nop>PostgreSQL Primary Keys (PKs) are not nullable  ====

The Visual Studio 2008 Entity Data Model (EDM) requires that all primary keys are  **NOT** Nullable. Visual Studio 2008 will fail to generate an EDM if any are. Therefore, ensure any tables to be used are defined as not nullable in the <nop>PostgreSQL database schema before attempting to generate an EDM. In the case of our <nop>PostgreSQL database, all primary keys are non nullable. Thus, this should not be an issue in this case.

==== Install and configure <nop>OpenLink ODBC Driver for <nop>PostgreSQL ====

The Virtuoso Virtual Database engine uses ODBC as the connectivity mechanism for linking remote database objects into its local schema. Thus, a <nop>PostgreSQL ODBC Driver must be available with a suitably configured DSN for connecting to the target database. The <nop>OpenLink ODBC Drivers for <nop>PostgreSQL have been used in this document, although in theory any <nop>PostgreSQL ODBC Driver can be used.

Installation instructions for the <nop>OpenLink ODBC Driver for <nop>PostgreSQL are available from:

* [[http://wikis.openlinksw.com/dataspace/owiki/wiki/UdaWikiWeb/InstallConfigODBC|Product Installation & Basic Configuration (ODBC)]] 

==== Install and configure <nop>OpenLink Virtuoso Universal Server====

* [[VirtADOClientServInstall|Install and configure OpenLink Virtuoso Universal Server]]

==== Linking <nop>PostgreSQL tables into Virtuoso====

* [[VirtPGRLinkingObjects|Linking PostgreSQL tables into OpenLink Virtuoso]]

==== Creating a Visual Studio hosted Entity Data Model (EDM)====

* [[VirtPGREDM|Creating EDM in Visual Studio 2008]]

====Using <nop>EDM to create Entity Framework based applications====

Now that a Microsoft Entity Data Model has been created for our <nop>PostgreSQL database, Entity Framework applications can be created to make use of it.

===== Entity Frameworks based ADO.NET Data Service====

* [[VirtEntityFrameworkPGRDatService|Entity Framework Data Service]]

===== Visual Studio Windows Form Application=====

* [[VirtPGRVisualStudioDataGridFormsApp|Windows DataGrid Form Application]]