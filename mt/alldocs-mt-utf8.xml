<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="mt">
  <?dbhtml dir="mt" ?>
  <title>OpenLink ODBC Driver (Multi-Tier Edition) Documentation</title>
  <info>
    <authorgroup>
      <author>
        <orgname>OpenLink Software Documentation Team
</orgname>
        <email>docs@openlinksw.com</email>
      </author>
    </authorgroup>
    <copyright>
      <year>1999 - 2018
</year>
      <holder>OpenLink Software
</holder>
    </copyright>
    <keywordset>
      <keyword>documentation</keyword>
      <keyword>openlink</keyword>
      <keyword>openlink software</keyword>
      <keyword>database</keyword>
      <keyword>SQL</keyword>
    </keywordset>
  </info>
  <toc/>

  <!-- 
  $Id: preface.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <preface>
    <title>Preface</title>
    <section xml:id="mt_docuventions">
      <title>Conventions</title>
      <para>A note on the typographical conventions that have been used in this text:</para>
      <para>This is the normal font type used for ordinary text.</para>
      <programlisting><![CDATA[This monospaced font is used to describing program code.]]></programlisting>
      <screen><![CDATA[This monospaced font is used to describe screen output, differentiated from code if required.]]></screen>
      <tip>
        <title>This See Also:</title>
        <para>is a tip used for cross-referencing 
    meterial either within the documentation, or externally.</para>
      </tip>
      <note>
        <title>This Note:</title>
        <para>is a note used for revealing a point of 
    interest or special feature</para>
      </note>
      <para>Special formatting is used to highlight <function>functions()</function> 
    and their <parameter>parameters</parameter> above the rest of the text.</para>
      <para>Important keywords are <emphasis>emphasised</emphasis> using bolding 
    (or strong character typing) and text that 
    is <important><remark>very important and must be noticed</remark></important> is displayed 
    in a traditional red warning color</para>
    </section>
    <section xml:id="mt_thecopyright">
      <title>Copyright</title>
      <para>
All intellectual property rights in the Software and user documentation
are owned by OpenLink Software or its suppliers and are protected by the
United Kingdom and USA copyright laws, other applicable copyright laws
and international treaty provisions. OpenLink Software retains all rights
not expressly granted.</para>
      <para>Any names of companies, trademarks, logos mentioned or published are
registered trademarks of respected owner(s) or companies.</para>
    </section>
  </preface>

  <!-- 
  $Id: overview.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_overview">
    <title>Overview</title>
    <info>
      <abstract>
        <para>ODBC, and further developments such as JDBC, OLEDB, define a low-level 
    set of calls which allow client applications 
    and servers applications to exchange instructions and share data without 
    needing to know anything about each other.  It applies to any Client-Server 
    operation, whether or not the client and server applications are resident 
    on the same machine, or on different PC's, or even if the server is on a 
    remote machine running a different operating system.</para>
        <para>This chapter introduces OpenLink's offerings to provide these 
    technologies to you.</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>UDA</keyword>
        <keyword>Multi-Tier</keyword>
        <keyword>Single-Tier</keyword>
        <keyword>OLEDB Provider</keyword>
        <keyword>JDBC</keyword>
        <keyword>Proxy</keyword>
      </keywordset>
    </info>
    <para>OpenLink Universal Data Access (UDA) Multi Tier consists of three main 
  components, of varying types:</para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Generic Client</title>
          <para>One client driver connecting to a variety of data sources.</para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <para>ODBC</para>
          </listitem>
          <listitem>
            <para>UDBC</para>
          </listitem>
          <listitem>
            <para>JDBC</para>
          </listitem>
          <listitem>
            <para>OLE-DB</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <formalpara>
          <title>Request Broker</title>
          <para>Responsible for managing connections 
      between Generic Clients and Server Agents.  The Request Broker is 
      completely configurable and its responses to incoming requests from Clients 
      controlled by the <emphasis>Sessions Rules Book</emphasis> (oplrqb.ini).</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Server Agents</title>
          <para>Task specific applications exclusively launched by the Request Broker 
      for Generic Clients to communicate with, and facilitate their needs.</para>
        </formalpara>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>Database Agents</title>
              <para>one specific for each database and major version as required: 
          Oracle, Progress, Ingres, Postgres, SQL Server, etc...</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>Proxy Agent</title>
              <para>special agent for forwarding requests to another Request Broker, 
          particularly useful on firewalls.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>ODBC Agent</title>
              <para>Special case of Database Agent where another ODBC datasource 
          is the database.</para>
            </formalpara>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>The Request Broker and Server Agents are typical addressed as the 
  server components.  This is a logical distinction because the client and 
  server can be the same machine.  In testing environments this is often the 
  case.</para>
    <para>The Request Broker is responsible for brokering the services of 
  OpenLink Data Access and Service Providing Agents.  It is also the component 
  responsible for coordinating and controlling your entire OpenLink Data Access 
  session irrespective of Data Access mechanism being used.  This is the heart 
  and soul of the OpenLink Database Independent Communications Layer.  It is 
  the technology that enables the OpenLink Data Access drivers to communicate 
  with your backend database engines alleviating the need to acquire additional 
  database specific networking software from your backend database vendor(s).  
  More than one Broker may exist on a system if each instance is defined 
  separately.</para>
    <para>One or more Database Agents (one for each supported database engine) 
  are database specific components that provide the actual backend database 
  connectivity and data access services to your OpenLink Data Access Clients 
  (ODBC, JDBC, UDBC, OLE-DB etc.).  These components are actually clients from 
  the perspective of each supported backend database, this is because they are 
  built using the Call Level Interfaces (CLIs) or Embedded SQL interfaces of 
  these backend databases.</para>
    <para>Service Provider Agents (ODBC, JDBC, PROXY) are generic agents that 
  provide Distributed Data Access Protocol handling services to OpenLink Data 
  Access Drivers.  The data access protocols supported are as follows:</para>
    <itemizedlist mark="dash">
      <listitem>
        <para><emphasis>ODBC Agent</emphasis> - enabling OpenLink Multi-Tier 
    ODBC Drivers to connect to local or remote non OpenLink ODBC Drivers</para>
      </listitem>
      <listitem>
        <para><emphasis>JDBC Agent</emphasis> - enabling OpenLink JDBC 
    Drivers to connect local or remote OpenLink or non OpenLink ODBC or UDBC 
    Drivers</para>
      </listitem>
      <listitem>
        <para><emphasis>PROXY Agent</emphasis> - enabling all OpenLink 
    Data Access Clients to connect to OpenLink Database Agents that do not 
    reside on the same server machine as the prime OpenLink Request Broker.  
    The prime Broker being the Request Broker that all your OpenLink Clients 
    are configured to request data access services from.  This enables you to 
    configure your OpenLink Database Agents for use in N-Tier distributed 
    computing environments.</para>
      </listitem>
    </itemizedlist>
    <para>An architectural overview of the OpenLink Multi-tier Data Access 
  infrastructure is available at: 
  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.openlinksw.com/info/mtproduct.htm">www.openlinksw.com/info/mtproduct.htm</link>.
  Note that the OpenLink Request Broker is the core component that makes up the 
  OpenLink Database Independent Communications Layer in this illustration.</para>
    <para>The components listed above are presented to you for download at the 
  end of your interaction with the OpenLink Software 
  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.openlinksw.com/main/softdld.htm">Download Wizard.</link></para>
  </chapter>

  <!-- 
  $Id: newfeatures.xml,v 1.8.4.25 2005/06/15 21:36:55 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_newfeatures">
    <title>New Features in OpenLink UDA</title>
    <info>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>new features</keyword>
        <keyword>changelog</keyword>
      </keywordset>
    </info>
    <section xml:id="mt_newfeatures60">
      <title>New Features in OpenLink UDA v6.0</title>
      <para>The following are new features in the Universal Data Access Suite
version 6.0:</para>
      <orderedlist>
        <listitem>
          <para>Oracle:</para>
          <simplelist type="vert">
            <member>
              <link linkend="mt_udauserrac">
            Real Application Cluster (RAC) Support
        </link>
            </member>
            <member>
              <link linkend="mt_oraconcpoolgeneric">Connection-Pooling</link>
            </member>
            <member><link linkend="mt_orainstantclient">Direct Connectivity to
          Oracle</link> without Net8|9|10 or SQL*Net (Single Tier Drivers)
          </member>
          </simplelist>
        </listitem>
        <listitem>
          <para>Ingres / OpenIngres:</para>
          <simplelist type="vert">
            <member>Ingres Native ADO.Net Provider </member>
          </simplelist>
        </listitem>
        <listitem>
          <para>Generic, cross-database features:</para>
          <simplelist type="vert">
            <member>
              <link linkend="mt_xa">Distributed Transaction Support</link>
            </member>
            <member>PAM, LDAP &amp; Active Directory support</member>
            <member>Support for XML Types</member>
          </simplelist>
        </listitem>
      </orderedlist>
    </section>
    <section xml:id="mt_newfeatures52">
      <title>New Features in OpenLink UDA v5.2</title>
      <para>The following are new features of the Universal Data Access
Suite version 5.2:</para>
      <simplelist type="vert">
        <member><!-- <link linkend="mt64bitinst">-->
64-bit<!-- </link> -->
 ODBC Drivers for
Windows, Linux, FreeBSD, Solaris, AIX, HP-UX, Tru64 Linux, IRIX across
Itanium, Opteron, PA-RISC, IBM Risc, and PowerPC processors </member>
        <member>
Addition of <link linkend="mt_uda52ssl">SSL support</link> to the
existing data encryption functionality in our Multi-Tier Drivers
</member>
        <member> 
New ADO.NET managed providers for all supported databases
</member>
        <member>
New ODBC.NET provider that facilitates compatability between ADO.NET
clients and third-party ODBC Drivers
</member>
        <member>
Enhanced ODBC-JDBC Bridge Driver that provides JDBC connectivity to
any ODBC or ADO.NET client application
</member>
        <member>
JDBC-to-ODBC Bridge Driver that provides ODBC connectivity to Java
Application
</member>
        <member>
A compatibility layer for Microsoft InfoPath that provides
connectivity to non SQL Server and ACCESS databases via ODBC
</member>
        <member>
JDBC 3.0-compliant Drivers for version 1.5 of the Java Virtual Machine
and SDK
</member>
      </simplelist>
    </section>
  </chapter>

  <!--
  $Id: clientcompinstall.xml,v 1.10.4.8 2005/06/15 16:35:46 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_clientcompinstall">
    <title>OpenLink ODBC Driver (Multi-Tier Edition) Client Component</title>
    <info>
      <abstract>
        <para>
This chapter describes the ODBC client component of OpenLink Universal Data Access (UDA).</para>
        <para>ODBC stands for Open Database Connectivity, a data-access API implementation
from Microsoft that conforms to the X/Open SQL CLI specification. ODBC links ODBC compliant
applications to ODBC Drivers via the ODBC Driver Manager.</para>
        <para>ODBC Driver Managers exist on other platforms such as Mac, Unix and Linux.
These platforms usually make use of the "iODBC Driver Manager".
Additional information regarding iODBC can be obtained from:
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.iodbc.org/">www.iodbc.org</link>.</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Generic Client</keyword>
        <keyword>Client</keyword>
        <keyword>Install</keyword>
        <keyword>Installation Guide</keyword>
        <keyword>Unix</keyword>
        <keyword>Mac</keyword>
        <keyword>OS X</keyword>
        <keyword>Windows</keyword>
        <keyword>Lite</keyword>
      </keywordset>
    </info>

    <!-- ======================================== -->
    <section xml:id="mt_clientcompw32">
      <info>
        <keywordset>
          <keyword>Windows Client</keyword>
        </keywordset>
        <title>Generic Client for Windows</title>
      </info>
      <anchor xml:id="mt_clientcompinstallclientcompw32cci"/>

      <!-- For Menu.Ini -->
      <section xml:id="mt_cci">
        <title>Installation (32-bit)</title>
        <orderedlist>
          <listitem>
            <para>After downloading the OpenLink Data Access Driver Suite client
components from our Website, Unzip the contents of the ZIP format archive
into a temporary installation directory on your client machine.</para>
          </listitem>
          <listitem>
            <para>Run the setup.exe installer program from the temporary
installation directory and then follow the on screen prompts.</para>
          </listitem>
          <listitem>
            <para>After installation you will be able to safely remove the files
in the temporary directory.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt64bitinstsect">
        <title>Installation (64-bit)</title>
        <para>The OpenLink Multi-Tier Generic ODBC client is distributed in a
      single windows msi file. Simply run the required installer
      wao3zzzz.msi or wio3zzzz.msi for Opteron (AMD64) and Itanium (IA64)
      respectively, which will display the following Welcome
      message:</para>
        <figure xml:id="mt_win64instmt1" floatstyle="normal">
          <title>win64instmt1.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt1.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The next screen will display the License Agreement for use with the
      OpenLink Multi-Tier Driver product. Please read this. If you agree, then
      select the accept checkbox and continue:
</para>
        <figure xml:id="mt_win64instmt2" floatstyle="normal">
          <title>win64instmt2.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt2.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Chooses the type of installation to perform, noting that typical and
      complete will immediately install the default or complete components
      respectively, otherwise select the custom option which also the
      compenents to be installed to be chosen:
</para>
        <figure xml:id="mt_win64instmt3" floatstyle="normal">
          <title>win64instmt3.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt3.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Assuming you chosen the custom installation option you will then be
      promptied with the option to change the installation directory if
      required:
</para>
        <figure xml:id="mt_win64instmt4" floatstyle="normal">
          <title>win64instmt4.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt4.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Next you have presented with the option to choose which components
      are to be installed:
</para>
        <figure xml:id="mt_win64instmt5" floatstyle="normal">
          <title>win64instmt5.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt5.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>A final confirmation screen is displayed for review prior to
      performing the installation:
</para>
        <figure xml:id="mt_win64instmt6" floatstyle="normal">
          <title>win64instmt6.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt6.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The installer status bar is then displayed indicating the progress
      and status of the the installation:
</para>
        <figure xml:id="mt_win64instmt7" floatstyle="normal">
          <title>win64instmt7.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt7.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>If the installation is successful a final dialog with be displayed
      indicating this:
</para>
        <figure xml:id="mt_win64instmt8" floatstyle="normal">
          <title>win64instmt8.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="win64instmt8.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_dsnconfigw">
        <title>Data Source Configuration</title>
        <para>Once you have completed the installation process, proceed to create a
new ODBC Data Source Name (DSN) using the ODBC Driver Manager.</para>
        <para>The ODBC Driver Manager is in the Windows Control panel. Windows 2000 and
Windows XP have it within Administrative tools. The figure below depicts
ODBC v3.5 Driver Manager displaying a list of installed ODBC Drivers.</para>
        <figure xml:id="mt_odbccl2" floatstyle="normal">
          <title>Data Source Configuration</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="odbccl2.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_Confudsn">
        <title>ODBC System &amp; User Data Sources</title>
        <para>ODBC Driver Manager can create User, System, and File DSNs.
Here are the steps for creating a User or System DSN:</para>
        <orderedlist>
          <listitem>
            <para>Decide whether the DSN should be a USER DSN so that it is
available for all users, or a USER DSN is required for access by the current
user only.</para>
            <para>In the ODBC Driver Manager pick the SYSTEM or USER tab.
In this example the SYSTEM tab is chosen, and the current System DSNs are shown:</para>
            <figure xml:id="mt_odbccl3" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl3.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Pick the ODBC Driver to be used to create your ODBC DSN, in the
case of the OpenLink Universal Data Access Driver Suite 5.0, this would be the Driver
identified below as "OpenLink Generic ODBC Driver".</para>
            <figure xml:id="mt_odbccl4" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl4.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>The ODBC Driver manager now launches the selected driver
code so that the DSN may be configured. In this example it will present the
OpenLink ODBC Data Source Configuration dialog (depicted below).</para>
            <figure xml:id="mt_dsn05" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn05.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Configure the fields of the ODBC "System" or "User" DSN
Configuration dialog in the manner explained below:</para>
            <formalpara>
              <title>Name</title>
              <para>(Datasource) The name of the ODBC DSN, this is how you will
interact with the OpenLink ODBC Driver from within ODBC compliant applications
once your ODBC DSN has been created.</para>
            </formalpara>
            <formalpara>
              <title>Description</title>
              <para>Additional information that further describes the ODBC DSN that
you are creating.</para>
            </formalpara>
            <formalpara>
              <title>Server</title>
              <para>Selected Zero Configuration service name or
<computeroutput>&lt;hostname or IP address&gt;:&lt;port&gt;</computeroutput>
of running Broker.</para>
            </formalpara>
            <para>The easiest way to complete this field is to select a machine
from the drop-down list-box. This list of servers is automatically generated
by the Zero Configuration service, so you only need to chose which machine
you wish to reach.</para>
            <para>Alternatively, enter the hostname or IP address that identifies a Server
Machine running OpenLink Server Components, that speak the OpenLink Data Access
Protocol. Follow this with a colon and the TCP/IP Port number of the Broker
to contact. This corresponds to the Listen parameter on the target Broker.</para>
            <para>This example shall now assume the selection of a server from a picklist.</para>
            <figure xml:id="mt_odbccl5" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl5.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Now select the database and configuration details:</para>
            <para>
              <bridgehead>Domain</bridgehead>
            </para>
            <para>This is how you pick the Database Engine Type that your ODBC DSN
is to be associated with e.g. Informix 7, Oracle 7, Progress 7 etc.</para>
            <para>The default offered from the Zero Configuration is typically accepted.
An alternative compatable Domain may be chosen for a specific customisation.</para>
            <formalpara>
              <title>Database</title>
              <para>This is how an actual database
name within the Provider Type Domain is identified, for instance "stores7"
indicates an "Informix 7" database called "stores7".  This option corresponds to
the Database parameter in the preference files.</para>
            </formalpara>
            <formalpara>
              <title>Connection Options</title>
              <para>This is where you place any database specific database connection
options. This field in a majority of cases should be left blank by
default.</para>
            </formalpara>
            <para>
              <bridgehead>Connect now..</bridgehead>
            </para>
            <para>When this tick box is checked, a test connection
is made to verify the Data Source connection.</para>
            <para>If there is no check then the Login ID and Password fields are
ignored, and no test is performed.</para>
            <formalpara>
              <title>Login ID</title>
              <para>The default database UserID to use when logging on to a remote
database engine (identified by the Domain above).</para>
            </formalpara>
            <formalpara>
              <title>Password</title>
              <para>The Password for the login of the above UserID.</para>
            </formalpara>
            <figure xml:id="mt_dsn06" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn06.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>When a test connection fails, the error message
is now displayed:</para>
            <figure xml:id="mt_dsn07" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn07.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Now define additonal connection parameters:</para>
            <formalpara>
              <title>Read-only connection</title>
              <para>Specify whether the connection is to be "Read-only".
Make sure the checkbox is unchecked to request a "Read/Write" connection.</para>
            </formalpara>
            <formalpara>
              <title>Defer fetching of long data</title>
              <para>Check this box to defer the fetching of long data.</para>
            </formalpara>
            <formalpara>
              <title>Disable interactive login</title>
              <para>Suppress the ODBC "Username" and "Password" login
dialog box when interacting with your ODBC DSN from within an ODBC compliant
application.</para>
            </formalpara>
            <formalpara>
              <title>Row Buffer Size</title>
              <para>This attribute specifies the number of records to be
transported over the network in a single network hop. Values can range from 1
to 99.</para>
            </formalpara>
            <figure xml:id="mt_dsn08" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn08.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>The list of parameters for the DSN are now shown.
The Test Data Source button will trigger a test of the DSN using the
existing login parameters.</para>
            <figure xml:id="mt_dsn08b" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn08b.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>If a test is requested, the results are shown:</para>
            <figure xml:id="mt_dsn08c" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn08c.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Press the Finish button to save the DSN.</para>
          </listitem>
          <listitem>
            <para>This completes the DSN configuration.
It will be listed in the ODBC Driver Manager.</para>
            <figure xml:id="mt_dsn09" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn09.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <section xml:id="mt_manualdsn">
          <title>Manual Selection of Server</title>
          <para>The previous example used a server that was picked from the
list constructed by the zero configuration. The server you wish to
use might not be in this list if it is not a local machine that
can be discovered. In this case it is necessary to complete the
server field manually with the host name or IP number, and the
port number.</para>
          <orderedlist>
            <listitem>
              <para>Complete the fields for Data Source Name and Description as
before. In the server field, enter the TCPIP address and port of the server
machine.</para>
              <figure xml:id="mt_dsn10" floatstyle="normal">
                <title>Data Source Configuration</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="dsn10.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The connection parameter page will load without any
fields completed.</para>
              <figure xml:id="mt_dsn11" floatstyle="normal">
                <title>Data Source Configuration</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="dsn11.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <para>Complete the fields for database connection.</para>
              <figure xml:id="mt_dsn12" floatstyle="normal">
                <title>Data Source Configuration</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="dsn12.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Complete the fields for additional connection parameters.</para>
              <figure xml:id="mt_dsn13" floatstyle="normal">
                <title>Data Source Configuration</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="dsn13.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>This completes the DSN configuration.
It will be listed in the ODBC Driver Manager.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_Creatfdsn">
        <title>Creating a File Data Source</title>
        <para>This format of ODBC DSN enables the creation of centralized ODBC DSNs on
a designated NT or Windows 95 Server machine, thereby reducing the
administrative overhead of ODBC DSN configuration for every single machine
within your infrastructure.</para>
        <para>The steps for creating an ODBC File DSN are as follows:</para>
        <orderedlist>
          <listitem>
            <para>Select the File DSN Tab from the ODBC Driver Manger.
Press the Add button.</para>
            <figure xml:id="mt_filedsn01" floatstyle="normal">
              <title>File Data Sources</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="filedsn01.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Pick the ODBC Driver to be used to create your ODBC DSN, in the
case of the OpenLink Universal Data Access Driver Suite 5.0, this would be the Driver
identified below as "OpenLink Generic ODBC Driver".</para>
            <figure xml:id="mt_odbccl4_01" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl4.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a name that describes your File DSN (e.g. "Sales by Region"
as depicted below) for future use when interacting with it from ODBC compliant
application and environments. At present to get full compatability within the
Admin Assistant, you must end your dsn name with the extension ".dsn".
So for this example the DSN name would be "Sales by Region.dsn".</para>
            <figure xml:id="mt_odbccl6" floatstyle="normal">
              <title>File Data Sources</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl6.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Verify the displayed paramters are correct, and confirm
by hitting Finish button.</para>
            <figure xml:id="mt_odbccl7" floatstyle="normal">
              <title>File Data Sources</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl7.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a Description and define the location of the
server either by selection, or enter it manually.</para>
            <para>Note the name is not defined here as the filename defines
the DSN.</para>
            <figure xml:id="mt_odbccl8" floatstyle="normal">
              <title>File Data Sources</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl8.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Complete the fields of the ODBC File DSN.
Enter Domain, Database, Server. See above for details of each.</para>
            <para>The File DSN must be verified immediately, so the
Login ID and password are required. The Next button will be
disabled until login details are provided.</para>
            <figure xml:id="mt_odbccl9" floatstyle="normal">
              <title>File Data Sources</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="odbccl9.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Complete the fields for additional connection parameters.</para>
            <figure xml:id="mt_dsn13_01" floatstyle="normal">
              <title>Data Source Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dsn13.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>This concludes the File DSN generation.
The DSN will appear in the list under the File DSN Tab of
the ODBC Driver Manger.</para>
            <figure xml:id="mt_filedsn04" floatstyle="normal">
              <title>File Data Sources</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="filedsn04.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_Advanced_Settings">
        <title>Advanced Settings</title>
        <para>The settings in this section have default values which are recommended
in most situations.</para>
        <para>If you run a complex query through the database it may take a long time
before any data is actually returned. In this situation you may need to
increase the ReceiveTimeout value, described below, only to cater for it. 2
Minutes (default) is usually more than adequate.</para>
        <para>
          <bridgehead>32bit Client Advanced Settings.</bridgehead>
        </para>
        <para>Client global configuration information is contained in the sub section
OPENLINK.INI of the registry. Windows 32bit platforms use the registry to store
all configuration information. To edit or view to registry, run the
regedit program. To view the OpenLink settings expand the following
section:</para>
        <screen><![CDATA[HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\OPENLINK.INI]]></screen>
        <para>Important values that you may need to change are listed in the table
below. The default values are recommended in most cases:</para>
        <table>
          <title>  </title>
          <tgroup cols="1">
            <thead>
              <row>
                <entry>
                  <para>Sub Section</para>
                </entry>
                <entry>
                  <para>Key</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Communications</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry/>
                <entry>
                  <para>BrokerTimeout</para>
                </entry>
                <entry>
                  <para>The amount of time the client will wait for a connection to an agent.
The default value is 30. Value is measured in seconds.</para>
                </entry>
              </row>
              <row>
                <entry/>
                <entry>
                  <para>ReceiveTimeout</para>
                </entry>
                <entry>
                  <para>The amount of time the client will wait for a query to return with
data. The default value is 120. Value is measured in seconds.</para>
                </entry>
              </row>
              <row>
                <entry/>
                <entry>
                  <para>ShowErrors</para>
                </entry>
                <entry>
                  <para>With this set to yes any OpenLink messages will be displayed in
a dialog box. If this is set to no, OpenLink messages will not be
displayed.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ServerTypes</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry/>
                <entry>
                  <para>&lt;Name&gt;=</para>
                </entry>
                <entry>
                  <para>Each key name in this section represents a different provider
type. To add a provider type simply add a new line using the same syntax as
the default types.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>

    <!-- ======================================== -->
    <section xml:id="mt_macinstall">
      <info>
        <title>Generic Client For Macintosh OS 8.6+</title>
        <keywordset>
          <keyword>Mac Client</keyword>
          <keyword>Mac Classic</keyword>
        </keywordset>
      </info>
      <para>There are several ODBC Driver Managers distributed for the Classic
Macintosh OS. OpenLink Software distributes iODBC, an
Open Source, Cross-Platform, LGPL and BSDI licensed, ODBC 3.5-compliant Driver
Manager maintained by OpenLink. Additional information regarding iODBC can be
obtained from <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.iodbc.org/">http://www.iodbc.org</link>.</para>
      <para>The iODBC Driver Manager requires Mac OS 9 or later; the OpenLink Generic
Client Driver for ODBC may be used on System 7 through Mac OS 9, with any
ODBC 2.x- or 3.x-compliant Driver Manager.</para>
      <para>The OpenLink ODBC Client Components for Macintosh Classic comprise the
following:</para>
      <table>
        <title>  </title>
        <tgroup cols="1">
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Purpose</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>iODBC Driver Manager</entry>
              <entry>A shared library that links ODBC compliant applications to ODBC
  Drivers</entry>
            </row>
            <row>
              <entry>Generic ODBC Driver</entry>
              <entry>A shared library that provides database connectivity and data access
  services to ODBC compliant applications</entry>
            </row>
            <row>
              <entry>Sample ODBC Applications</entry>
              <entry>Simple programs that can be used to verify your ODBC installation
  and working environment</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <section xml:id="mt_maccci">
        <title>Installation</title>
        <para>After downloading the OpenLink Data Access Driver Suite client components
from our Website, uncompress the contents of the Stuffit format archive into a
temporary location on your client machine. The Desktop is often best.</para>
        <figure xml:id="mt_MacOSClass01jpg" floatstyle="normal">
          <title>MacOSClass01.jpg</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass01.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Double click the 'OpenLink MacOS ODBC Client 5.0' icon to launch the
installer. Click OK at the splash screen.</para>
        <figure xml:id="mt_MacOSClass02gif" floatstyle="normal">
          <title>MacOSClass02.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass02.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Check the contents of the 'Read Me'. Then click Continue.</para>
        <figure xml:id="mt_MacOSClass03gif" floatstyle="normal">
          <title>MacOSClass03.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass03.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Read and Agree to the Software License.</para>
        <figure xml:id="mt_MacOSClass04gif" floatstyle="normal">
          <title>MacOSClass04.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass04.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>There are two types of installation. The Easy Install option is best
for most users, and will install the iODBC Driver Manager, if no
other Driver Manager is present.</para>
        <figure xml:id="mt_MacOSClass05gif" floatstyle="normal">
          <title>MacOSClass05.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass05.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>If you need to replace an older Driver Manager (Merant, Visigenic,
Intersolv), select the Custom Install, and check off all appropriate
components. The iODBC Driver Manager will only run on PowerPC machines, under
Mac OS 9 or later.  If you're installing on an older Mac, running Mac OS 8.1 or
earlier, you can use Custom Install to get the 68K components you'll need.</para>
        <figure xml:id="mt_MacOSClass06gif" floatstyle="normal">
          <title>MacOSClass06.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass06.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Press the Install button to start the installation.
You will be prompted to select a location for Sample Applications and
other files.</para>
        <figure xml:id="mt_MacOSClass07gif" floatstyle="normal">
          <title>MacOSClass07.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass07.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You Macintosh will need to be restarted after installation has completed.
You will be given the opportunity to save any open documents. </para>
        <figure xml:id="mt_MacOSClass08gif" floatstyle="normal">
          <title>MacOSClass08.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass08.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Installation will proceed.</para>
        <figure xml:id="mt_MacOSClass09gif" floatstyle="normal">
          <title>MacOSClass09.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass09.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>After installation you
may safely delete the files in the temporary location ('OpenLink MacOS ODBC
Client 4.1', 'OplMacClient-4.1.sit', mmoczzzz.hqx).</para>
        <figure xml:id="mt_MacOSClass10jpg" floatstyle="normal">
          <title>MacOSClass10.jpg</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacOSClass10.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_macdsn">
        <title>Data Source Configuration</title>
        <para>Once you have completed the installation process, proceed to create a
new ODBC DSN using the OpenLink ODBC Administrator (formerly ODBC Setup PPC)
control panel.</para>
        <para>The OpenLink ODBC Administrator for Mac Classic currently supports the creation
of User and File DSNs.</para>
        <para>If in Multiple Users mode, a User DSN is only available to the user who creates the
data source.  Its parameters are stored in that user's settings file:
<computeroutput>Preferences/ODBC Preferences PPC</computeroutput>. </para>
        <para>If in Single User mode, a User DSN is only available to the whole system so that
any user, including the system itself, will be able to use that data source.
Its parameters are stored in the System settings file:
<computeroutput>System Folder/Preferences/ODBC Preferences PPC</computeroutput>. </para>
        <para>A File DSN is a special 'mobile' data source that stores the data source
information associated with the Driver in a file, which may then be copied and
shared among different users and ODBC application host machines. </para>
        <para>File DSNs are usually created when the same DSN needs to be used by many
different users, from many different workstations.  File DSNs may be passed
from Macintosh to Macintosh, or User to User in Multiple Users mode, and will
be usable by anyone with the same ODBC Drivers installed.  By default, File
DSNs are found in: <computeroutput>System Folder/Preferences/ODBC
File Data Sources.</computeroutput>
      </para>
        <para>Most often, a User DSN will be appropriate for use on a Macintosh running
the Classic Mac OS.</para>
        <section xml:id="mt_configusermacdsn">
          <title>User Data Source Names</title>
          <para>To create a new User DSN, open the ODBC Setup PPC control panel. Hit
the Add button.</para>
          <figure xml:id="mt_MacOSClass11gif" floatstyle="normal">
            <title>MacOSClass11.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass11.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Pick the ODBC Driver to be used to create your ODBC DSN, in the case
of the OpenLink Universal Data Access Driver Suite 5.0, this would be the
Driver identified below as "OpenLink Generic ODBC PPC".</para>
          <figure xml:id="mt_MacOSClass12gif" floatstyle="normal">
            <title>MacOSClass12.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass12.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Once you have selected
the "OpenLink Generic 32 Bit Driver v5.0", you will be presented with the
OpenLink ODBC Data Source Configuration dialog (depicted below).</para>
          <figure xml:id="mt_MacOSClass13gif" floatstyle="normal">
            <title>MacOSClass13.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass13.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>The Datasource settings are only important to your Client
machine; the OpenLink Server, Database, and Optional Server settings should
be provided by your Database Administrator, or whoever is handling the Server-side
components of the OpenLink Universal Data Access Suite.</para>
          <note>
            <title>Note:</title>
            <para>The connections will not succeed until Server-side components
are installed and properly configured.</para>
          </note>
          <para>Explanations of each field follows:</para>
          <formalpara>
            <title>Datasource Name</title>
            <para>The name of the ODBC DSN. This is how you will interact with the
OpenLink ODBC Driver from within ODBC compliant applications once your ODBC
DSN has been created.</para>
          </formalpara>
          <formalpara>
            <title>Comment</title>
            <para>Additional information that further describes the ODBC DSN that
you are creating. This is generally visible whenever a list of DSNs is
generated.  This option corresponds to the Description parameter in the
preference files.</para>
          </formalpara>
          <formalpara>
            <title>Domain</title>
            <para>This is how you pick the Database Engine Type (also called a DBMS, or
DataBase Management System) that your ODBC DSN is to be associated with, e.g.
Informix 7, Oracle 9, Progress 8.3B, etc.  This option corresponds to the ServerType
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Protocol</title>
            <para>Select the network transport protocol used to connect your ODBC DSN
with a remote database engine. This will be TCP/IP in most installations.
This option corresponds to the Protocol parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Hostname</title>
            <para>Enter the hostname or IP address that identifies a Server Machine
running OpenLink Server Components, that speak the OpenLink Data Access
Protocol.  This option corresponds to the Host parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Port</title>
            <para>Enter the TCP port number of the Broker to contact. This corresponds
to the Listen parameter on the target Broker.  This option corresponds to the
Port parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Database Name</title>
            <para>This is how an actual database
name within the Provider Type Domain is identified, for instance "stores7"
indicates an "Informix 7" database called "stores7".  This option corresponds to
the Database parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Username</title>
            <para>The default database UserID to be used when logging on to a remote
database engine (identified by the Provider Type above).
Generally left blank on shared machines.  This option corresponds to the User
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Server Name</title>
            <para>This is where you place any database specific database connection
options. This field in a majority of cases should be left blank by default.
Your Database Administrator (DBA) should give you any special
settings.  This option corresponds to the Options parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Read-only connection</title>
            <para>Forces the connection is to be "Read-only". Make sure the checkbox
is unchecked to request a "Read/Write" connection.  This option corresponds to
the ReadOnly parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>No Login Dialog Box</title>
            <para>Suppress the ODBC "Username" and "Password" login dialog box when
interacting with your ODBC DSN from within an ODBC compliant application.
This should be unchecked if the database requires this
information.  This option corresponds to the NoLoginBox parameter in the
preference files.</para>
          </formalpara>
          <formalpara>
            <title>Defer fetching of long data</title>
            <para>Check this box to defer the fetching of long data. See the Release
Notes section for more details.  This option corresponds to the DeferLongFetch
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Row Buffer Size</title>
            <para>This attribute specifies the number of records to be transported over
the network in a single network hop. Values can range from 1 to 999.
Smaller values are generally appropriate when each row contains large
records; larger values are generally appropriate for smaller record sizes.
Adjusting this value up and down can improve or degrade performance
substantially, both for your own connection and for other users of the same
Database, so check with your DBA before changing it from the default (30).
This option corresponds to the FetchBufferSize parameter in the preference
files.</para>
          </formalpara>
          <para>Click OK, and you'll see your new DSN in the list.</para>
          <figure xml:id="mt_MacOSClass14gif" floatstyle="normal">
            <title>MacOSClass14.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass14.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Now, to verify that your settings are correct and all is functional,
select the new DSN, and click Test. You'll be presented with the
following dialog.</para>
          <figure xml:id="mt_MacOSClass15gif" floatstyle="normal">
            <title>MacOSClass15.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass15.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Input the correct password for the username shown.
You can connect as another user, if you wish, by simply typing a
different username in the field. To verify that your settings have all
"stuck", you can click the Database tab:</para>
          <figure xml:id="mt_MacOSClass16gif" floatstyle="normal">
            <title>MacOSClass16.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass16.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>The "About" tab shows
you basic information about the Driver on which the DSN is
based.</para>
          <figure xml:id="mt_MacOSClass17gif" floatstyle="normal">
            <title>MacOSClass17.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass17.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>When you click OK, your Mac will think for a moment, while it makes
a connection to the remote Data Source. If all is well, you will be
presented with this Success message:</para>
          <figure xml:id="mt_MacOSClass18gif" floatstyle="normal">
            <title>MacOSClass18.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass18.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section xml:id="mt_configfilemacdsn">
          <title>Configuring File Data Sources</title>
          <para>To create a new File DSN, open the ODBC Setup PPC control panel.
Click on the File DSN tab, and follow the steps below:</para>
          <para>Click the Add button.</para>
          <figure xml:id="mt_MacOSClass19gif" floatstyle="normal">
            <title>MacOSClass19.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass19.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Pick the ODBC Driver to be used to create your ODBC DSN.
As with the User DSN, this would be the Driver identified below as
"OpenLink Generic ODBC PPC". Input a name for the File DSN, and any
description. Click "Finish" or "OK".</para>
          <figure xml:id="mt_MacOSClass20gif" floatstyle="normal">
            <title>MacOSClass20.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass20.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>File DSNs are configured through the login screens, as if you were
connecting through a User DSN. Starting with the Identity
tab, input the appropriate Username and Password. (The Password will not be
saved in the DSN, as this would present a significant security risk.)</para>
          <figure xml:id="mt_MacOSClass21gif" floatstyle="normal">
            <title>MacOSClass21.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass21.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>The OpenLink Server, Database, and Optional Server settings seen in
the User DSN configuration screen are combined into the Database tab.
Again, these should be provided by your Database Administrator, or
whoever is handling the Server-side components of the OpenLink Universal Data
Access Suite.</para>
          <note>
            <title>Note:</title>
            <para>The connections will not succeed until Server-side components
are installed and properly configured.</para>
          </note>
          <figure xml:id="mt_MacOSClass16gif_01" floatstyle="normal">
            <title>MacOSClass16.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass16.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Explanations of each field in the Database tab follows:</para>
          <formalpara>
            <title>Domain</title>
            <para>This is how you pick the Database Engine Type (also called a DBMS, or
DataBase Management System) that your ODBC DSN is to be associated with,
e.g. Informix 7, Oracle 9, Progress 8.3B, etc.  This option corresponds to the ServerType
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Name</title>
            <para>This is how an actual database name within the Provider Type Domain is
identified, for instance "stores7" indicates an "Informix 7" database called
"stores7".  This option corresponds to the Database
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Server</title>
            <para>This is where you place any database specific database connection
options. This field in a majority of cases should be left blank by default.
Your Database Administrator (DBA) should give you any special settings.
This option corresponds to the Options
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Hostname</title>
            <para>Enter the hostname or IP address that identifies a Server Machine
running OpenLink Server Components, that speak the OpenLink Data Access
Protocol.  This option corresponds to the Host
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Protocol</title>
            <para>Select the network transport protocol used to connect your ODBC DSN
with a remote database engine. This will be TCP/IP in most installations.
This option corresponds to the Protocol
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Port</title>
            <para>Enter the TCP port number of the Broker to contact. This corresponds
to the Listen parameter on the target Broker.
This option corresponds to the Port
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Defer fetching of long data</title>
            <para>Check this box to defer the fetching of long data. See the Release
Notes section for more details.  This option corresponds to the DeferLongFetch
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Read-only connection</title>
            <para>Forces the connection is to be "Read-only". Make sure the checkbox
is unchecked to request a "Read/Write" connection.
This option corresponds to the ReadOnly
parameter in the preference files.</para>
          </formalpara>
          <formalpara>
            <title>Row Buffer Size</title>
            <para>This attribute specifies the number of records to be transported over
the network in a single network hop. Values can range from 1 to 999. Smaller
values are generally appropriate when each row contains large records; larger
values are generally appropriate for smaller record sizes. Adjusting this
value up and down can improve or degrade performance substantially, both
for your own connection and for other users of the same Database, so check
with your DBA before changing it from the default (30).
This option corresponds to the FetchBufferSize
parameter in the preference files.</para>
          </formalpara>
          <para>The About tab, here, refers to the Driver you've selected for this
DSN.</para>
          <figure xml:id="mt_MacOSClass17gif_01" floatstyle="normal">
            <title>MacOSClass17.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass17.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Click OK when all settings are correct, and you will see the
new DSN available in the File DSN list. Sharing this DSN with
other users and machines may be accomplished by going to the 'ODBC File Data
Sources' folder, found in the 'Preferences' folder, within your System
Folder.  Other Macintosh Classic OpenLink clients may use the file by placing it in
the same location on their machine.</para>
          <figure xml:id="mt_MacOSClass22gif" floatstyle="normal">
            <title>MacOSClass22.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass22.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>
      <section xml:id="mt_tracemacdsn">
        <title>Tracing Data Sources</title>
        <para>From the Tracing Tab of the iODBC Data Source Administrator,
the level of Tracing can be configured.</para>
        <figure xml:id="mt_MacTracegif" floatstyle="normal">
          <title>MacTrace.gif</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="MacTrace.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <formalpara>
          <title>When to trace</title>
          <para>Use this option to turn tracing off or on. For a One-time only trace, the
trace is made for the duration of the next connection. Click the Apply button
to make your selection active. This option corresponds to the Trace and
TraceAutoStop parameters in the preference files.</para>
        </formalpara>
        <formalpara>
          <title>Custom trace library</title>
          <para>Use the Select Library button to browse the machine for a library file that
contains the code to intercept the trace output. This field should generally be left
blank. When setting this parameter, you may use the Browse button to locate
the library, or specify it manually. If specified manually, note that the location
must be specified as it would be in a Terminal session. You may use ~/ as a
shortcut to your user Home directory. This option corresponds to the TraceDLL
parameter in the preference files.</para>
        </formalpara>
        <formalpara>
          <title>Log file path</title>
          <para>Specify the complete location of the file to which you wish to write the
trace. You may use the Browse button to locate or create the file, or specify it
manually. If specified manually, note that the location must be specified as it
would be in a Terminal session. You may use ~/ as a shortcut to your user
Home directory. This option corresponds to the TraceFile parameter in the
preference files.</para>
        </formalpara>
        <section xml:id="mt_mactraceparams">
          <title>Trace Parameters in ODBC.INI</title>
          <para>When the ODBC tracing parameters are changed, they are saved in
the [ODBC] section of the ODBC.preference or odbc.ini file, whichever is
active on your system.
</para>
          <para>The following example is for a one time trace to sql.log file on the
active user's desktop.</para>
          <programlisting><![CDATA[[ODBC]
Trace         = 1
TraceAutoStop = 1
TraceDLL      =
TraceFile     = ~/Desktop/sql.log
]]></programlisting>
          <para>Once the tracing of a connection is complete, the Trace and TraceAutoStop
parameters will both be set to 0.</para>
        </section>
      </section>
      <section xml:id="mt_testmacdsn">
        <title>Testing Data Sources</title>
        <section xml:id="mt_macodbctest">
          <title>ODBC SDK C++ Sample</title>
          <para>Use the 'ODBC SDK 2.0 C++ Sample PPC' application to test a DSN:</para>
          <figure xml:id="mt_MacOSClass23gif" floatstyle="normal">
            <title>MacOSClass23.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass23.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>From the Environment menu, select "Open Connection...".</para>
          <figure xml:id="mt_MacOSClass24gif" floatstyle="normal">
            <title>MacOSClass24.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass24.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Choose a User DSN, or press the File DSN tab, and select a File DSN.</para>
          <figure xml:id="mt_MacOSClass25gif" floatstyle="normal">
            <title>MacOSClass25.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass25.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>With a DSN highlighted, press OK. Input
Username and Password as appropriate, and click OK.</para>
          <figure xml:id="mt_MacOSClass15gif_01" floatstyle="normal">
            <title>MacOSClass15.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass15.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>From the SQL menu select Execute SQL... </para>
          <figure xml:id="mt_MacOSClass26gif" floatstyle="normal">
            <title>MacOSClass26.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass26.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Enter an SQL query in the dialog.</para>
          <figure xml:id="mt_MacOSClass27gif" floatstyle="normal">
            <title>MacOSClass27.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass27.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>With success, the results will be shown.</para>
          <figure xml:id="mt_MacOSClass28gif" floatstyle="normal">
            <title>MacOSClass28.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass28.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>When you QUIT the application, you will see a warning message about
your DSN connection. Please note you will continue to
consume one licensed connection until the application is
terminated.</para>
          <figure xml:id="mt_MacOSClass29gif" floatstyle="normal">
            <title>MacOSClass29.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass29.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section xml:id="mt_testmacdsniodbc">
          <title>iODBC Test PPC</title>
          <para>Use the 'iODBC Test PPC' application to test a DSN:</para>
          <figure xml:id="mt_MacOSClass30gif" floatstyle="normal">
            <title>MacOSClass30.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass30.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Type a question mark ('?') and hit &lt;return&gt; to get a list of
available User DSNs.</para>
          <figure xml:id="mt_MacOSClass31gif" floatstyle="normal">
            <title>MacOSClass31.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass31.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Type a connect string,
using one of the listed User DSNs, following the format
DSN=&lt;DSN&gt;;UID=&lt;username&gt;;PWD=&lt;password&gt;. You may leave the
UID and/or PWD parameters out of your string; if you do, you will be
presented with the usual log-in dialog:</para>
          <figure xml:id="mt_MacOSClass32gif" floatstyle="normal">
            <title>MacOSClass32.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass32.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>If you do not wish to type so much, need to add a DSN, or wish to
connect to a File DSN, type anything else, and hit the &lt;return&gt; key.
You will be presented with the DSN Chooser dialog, in which you may do
select an existing User or File DSN, or create a new DSN of either type.
Instructions on creation may be found earlier in this chapter.</para>
          <figure xml:id="mt_MacOSClass33gif" floatstyle="normal">
            <title>MacOSClass33.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass33.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>When the 'SQL&gt;' prompt comes up, you can enter any SQL statement,
including UPDATE, INSERT, DELETE, or SELECT, followed by &lt;return&gt;.</para>
          <figure xml:id="mt_MacOSClass34gif" floatstyle="normal">
            <title>MacOSClass34.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass34.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Results are returned in plain text, to your query window.</para>
          <figure xml:id="mt_MacOSClass35gif" floatstyle="normal">
            <title>MacOSClass35.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass35.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Type 'exit&lt;return&gt;' to close your DSN connection. The prompt
'Again (y/n) ?' is asking whether you wish to connect to another DSN.
Respond y(es) or n(o) and hit &lt;return&gt;. Yes brings you back
to the 'Enter ODBC string' prompt; no returns 'Have a nice day.'</para>
          <para>When you QUIT the application, you will be prompted to save the
output text. Default is "Don't save".</para>
          <figure xml:id="mt_MacOSClass38gif" floatstyle="normal">
            <title>MacOSClass38.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="MacOSClass38.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>
    </section>
    <section xml:id="mt_cliinstmacosx">
      <title>Mac OS X</title>
      <info>
        <keywordset>
          <keyword>Mac Client</keyword>
          <keyword>Mac OS X</keyword>
        </keywordset>
      </info>
      <para>OpenLink Software's components are fully supported on Mac OS X
  versions 10.1.x through 10.4.x ("Puma" to "Tiger"). In most ways, these look
  the same to users. However, there are some significant differences to be
  aware of between these Operating Systems.</para>
      <para>As shipped from Apple, Mac OS X did not include any ODBC support until
 Jaguar.  The ODBC Driver Manager, Data Source Administrator, etc. - all had
 to be delivered with the Drivers.  When Apple introduced Darwin, an Open-Source
 project meant to form the kernel of Mac OS X, OpenLink were determined to port its
 open-source iODBC Driver Manager to the new platform.  With the introduction
 of the Preview Release of Mac OS X, the traditional set of dynamic libraries
 was broadened to include a system of Frameworks to encourage the development
 of fully ODBC compliant, native Mac OS X drivers and client applications.   </para>
      <para>That set of Frameworks, along with the OpenLink ODBC Administrator
 (then known as the iODBC Administrator), has been included with all OpenLink
 installations for Mac OS X since 10.0. The OpenLink ODBC Administrator
 supports all core features of ODBC, and presents driver-specific DSN
 configuration panels, as defined by the Driver developer, through the use of
 Setup Libraries.</para>
      <para>Jaguar's release marked Apple's recognition that Data Access was an
 important part of an Enterprise Operating System.  Already part of the standard
 distribution of Darwin, the basic iODBC dynamic libraries are now a part of the
 standard installation of Mac OS X 10.2.  Apple also included their own version
 of an ODBC Administrator, as a proof-of-concept.  Apple's Administrator permits
 Driver Registration, Tracing, and all other core features of ODBC; however,
 among other hard edges, all DSN configuration must be done by manually entering
 Keyword-Value pairs. Further, the user must know what Keywords to use, along
 with their acceptable Values.</para>
      <para>The OpenLink Generic Multi-Tier Driver for ODBC for Mac OS X is
 distributed in a single disk image (.dmg) file, which contains a Macintosh Installer
 mpkg. </para>
      <para>The OpenLink ODBC Client Components for Mac OS X comprise the
 following:</para>
      <table>
        <title>  </title>
        <tgroup cols="1">
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Purpose</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>iODBC Driver Manager</entry>
              <entry>A shared library that links ODBC compliant applications to ODBC
  Drivers</entry>
            </row>
            <row>
              <entry>Generic ODBC Driver</entry>
              <entry>A shared library that provides database connectivity and data access
  services to ODBC compliant applications</entry>
            </row>
            <row>
              <entry>Sample ODBC Applications</entry>
              <entry>Simple programs that can be used to verify your ODBC installation
  and working environment</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <section xml:id="mt_cliinstmacxinstall">
        <title>Installation</title>
        <para>Double-click the mpkg to start the installation process. </para>
        <figure xml:id="mt_MacOSX01" floatstyle="normal">
          <title>OpenLinkUDA-4.5.dmg</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX01.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You must have an Administration username and password to install the
 OpenLink Generic Multi-Tier Driver for ODBC.  The Jaguar Installer will
 immediately prompt you to enter your Mac OS X Username and Password. </para>
        <figure xml:id="mt_MacOSX02" floatstyle="normal">
          <title>Authentication</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX02.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The installer will display a "Welcome" message. Click "Continue". </para>
        <figure xml:id="mt_MacOSX03" floatstyle="normal">
          <title>Welcome</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX03.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The next screen will display the Read-Me file, including any
 last-minute updates to these documents.  Please read carefully, and click
 "Continue" when finished. </para>
        <figure xml:id="mt_MacOSX04" floatstyle="normal">
          <title>Read Me </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX04.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The next screen will display the License Agreement for the OpenLink
 Single-Tier Driver for ODBC. Please read, and click "Continue". </para>
        <figure xml:id="mt_MacOSX05" floatstyle="normal">
          <title>Software License Agreement</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX05.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <!--
  NEED NEW GRAPHIC
-->
        <para>You will be prompted to "Agree" to continue the installation, or
 "Diagree" to abort. </para>
        <figure xml:id="mt_MacOSX06" floatstyle="normal">
          <title>Agree or Disagree to Licensing</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX06.png"/>
            </imageobject>
          </mediaobject>
        </figure>

        <!--
  NEED NEW GRAPHIC
-->
        <para>You will be asked to select a Destination Volume. Generally, this should
 be your Mac OS X boot volume. Click on the desired disk icon, and then
 click "Continue". </para>
        <figure xml:id="mt_MacOSX07" floatstyle="normal">
          <title>Choose Destination</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX07.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You may now choose the Easy Install, or if you are an experienced user,
 you may Customize which components are installed. OpenLink generally
 recommends the Easy Install.   If you have installed OpenLink or iODBC
 components in the past, click "Upgrade" to continue; otherwise, click
 "Install". </para>
        <figure xml:id="mt_MacOSX08" floatstyle="normal">
          <title>Easy Install</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX08.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure xml:id="mt_MacOSX09" floatstyle="normal">
          <title>Custom Install</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX09.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You will be shown a graphical progress bar as Installation progresses,
 followed by System Optimization. </para>
        <figure xml:id="mt_MacOSX10" floatstyle="normal">
          <title>Installation Progress </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX10.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>When the process is complete, you will be told that the software was
 successfully installed.  Click "Close" and your new database driver for ODBC is
 ready for use! </para>
        <figure xml:id="mt_MacOSX11" floatstyle="normal">
          <title>Installation Proceeds</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX11.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_cliinstmacxdsnconf">
        <title>Data Source Configuration</title>
        <para>The OpenLink ODBC Administrator for Mac OS X currently supports creation
 of User and System Data Source Names (DSNs). Support for File DSNs will be
 delivered in a future release. </para>
        <para>A User DSN is only available to the user who creates the data source.  Its
 parameters are stored in that user's settings file
 <computeroutput>~/Library/Preferences/ODBC.preference</computeroutput>. </para>
        <para>A System DSN is available to the whole system so that any user, including
 the system itself, will be able to use that data source.  Its parameters are stored
 in the System settings file <computeroutput>/Library/Preferences/ODBC.preference</computeroutput>.</para>
        <para>A File DSN is a special 'mobile' data source that stores the data source
 information associated with the Driver in a file, which may then be copied and
 shared among different users and ODBC application host machines. </para>
        <section xml:id="mt_cliinstmacxusrsysdsns">
          <title>Creating User or System Data Sources</title>
          <para>The steps for creating a DSN are as follows:</para>
          <orderedlist>
            <listitem>
              <para>Launch the OpenLink ODBC Administrator, found in the
  <computeroutput>/Applications/Utilities/</computeroutput> directory.</para>
              <figure xml:id="mt_MacOSX12" floatstyle="normal">
                <title>OpenLink ODBC Administrator icon</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/MacOSX12.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click the tab for the kind of DSN you wish to
  create - User or System.  Press the Add button to begin creating a new
  Data source. </para>
              <figure xml:id="mt_MacOSX13" floatstyle="normal">
                <title>OpenLink ODBC Administrator, User DSN tab</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/MacOSX13.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Select the Driver to be used to create your ODBC DSN.  In
  this example make sure "OpenLink Generic ODBC Driver" is highlighted.  Then click
  the Finish button. </para>
              <figure xml:id="mt_MacOSX14" floatstyle="normal">
                <title>Choose an ODBC Driver</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/MacOSX14.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <note>
                <title>Note:</title>
                <para>The connections will not succeed until Server-side components are
  installed and properly configured.</para>
              </note>
            </listitem>
            <listitem>
              <para>The ODBC Driver manager now launches the selected driver
code so that the DSN may be configured. In this example it will present the
OpenLink ODBC Data Source Configuration dialog (depicted below).</para>
              <para>Configure the fields of the ODBC "System" or "User" DSN
Configuration dialog in the manner explained below:</para>
              <formalpara>
                <title>Name</title>
                <para>(Datasource) The name of the ODBC DSN, this is how you will
interact with the OpenLink ODBC Driver from within ODBC compliant applications
once your ODBC DSN has been created.</para>
              </formalpara>
              <formalpara>
                <title>Description</title>
                <para>Additional information that further describes the ODBC DSN that
you are creating.</para>
              </formalpara>
              <formalpara>
                <title>Server</title>
                <para>Selected Zero Configuration service name or
<computeroutput>&lt;hostname or IP address&gt;:&lt;port&gt;</computeroutput>
of running Broker.</para>
              </formalpara>
              <para>The easiest way to complete this field is to select a machine
from the drop-down list-box. This list of servers is automatically generated
by the Zero Configuration service, so you only need to chose which machine
you wish to reach.</para>
              <para>Alternatively, enter the hostname or IP address that identifies a Server
Machine running OpenLink Server Components, that speak the OpenLink Data Access
Protocol. Follow this with a colon and the TCP/IP Port number of the Broker
to contact. This corresponds to the Listen parameter on the target Broker.</para>
              <para>This example shall now assume the selection of a server from a picklist.</para>
              <figure xml:id="mt_macdsn01" floatstyle="normal">
                <title>OpenLink Generic ODBC Setup Dialog</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/macdsn01.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the Next button or the Connection tab.
Now select the database and configuration details:</para>
              <para>
                <bridgehead>Domain</bridgehead>
              </para>
              <para>This is how you pick the Database Engine Type that your ODBC DSN
is to be associated with e.g. Informix 7, Oracle 7, Progress 7 etc.</para>
              <para>The default offered from the Zero Configuration is typically accepted.
An alternative compatable Domain may be chosen for a specific customisation.</para>
              <formalpara>
                <title>Database</title>
                <para>This is how an actual database
name within the Provider Type Domain is identified, for instance "stores7"
indicates an "Informix 7" database called "stores7".  This option corresponds to
the Database parameter in the preference files.</para>
              </formalpara>
              <formalpara>
                <title>Connection Options</title>
                <para>This is where you place any database specific database connection
options. This field in a majority of cases should be left blank by
default.</para>
              </formalpara>
              <para>
                <bridgehead>Connect now..</bridgehead>
              </para>
              <para>When this tick box is checked, a test connection
is made to verify the Data Source connection.</para>
              <para>If there is no check then the Login ID and Password fields are
ignored, and no test is performed.</para>
              <formalpara>
                <title>Login ID</title>
                <para>The default database UserID to use when logging on to a remote
database engine (identified by the Domain above).</para>
              </formalpara>
              <formalpara>
                <title>Password</title>
                <para>The Password for the login of the above UserID.</para>
              </formalpara>
              <figure xml:id="mt_macdsn02" floatstyle="normal">
                <title>OpenLink Generic ODBC Setup Dialog</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/macdsn02.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the Next button or the Options tab.</para>
              <para>Now define additonal connection parameters:</para>
              <formalpara>
                <title>Read-only connection</title>
                <para>Specify whether the connection is to be "Read-only".
Make sure the checkbox is unchecked to request a "Read/Write" connection.</para>
              </formalpara>
              <formalpara>
                <title>Defer fetching of long data</title>
                <para>Check this box to defer the fetching of long data.</para>
              </formalpara>
              <formalpara>
                <title>Disable interactive login</title>
                <para>Suppress the ODBC "Username" and "Password" login
dialog box when interacting with your ODBC DSN from within an ODBC compliant
application.</para>
              </formalpara>
              <formalpara>
                <title>Row Buffer Size</title>
                <para>This attribute specifies the number of records to be
transported over the network in a single network hop. Values can range from 1
to 99.</para>
              </formalpara>
              <figure xml:id="mt_macdsn03" floatstyle="normal">
                <title>OpenLink Generic ODBC Setup Dialog</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/macdsn03.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The list of parameters for the DSN are now shown.
The Test Data Source button will trigger a test of the DSN using the
existing login parameters.</para>
              <para>Click on the Next button or the Test tab.</para>
              <figure xml:id="mt_macdsn04" floatstyle="normal">
                <title>OpenLink Generic ODBC Setup Dialog</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/macdsn04.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>
  Click Finish to save your DSN, which will then be visible in the OpenLink ODBC
  Administrator's listing. </para>
              <figure xml:id="mt_MacOSX17" floatstyle="normal">
                <title>OpenLink ODBC Administrator, User DSN tab</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="mac10/MacOSX17.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_cliinstmacxtsts">
        <title>Testing Data Sources</title>
        <para>Any DSN can be tested for basic connectivity, to ensure that the basic
 parameters have been set correctly, through the OpenLink ODBC Administrator.</para>
        <orderedlist>
          <listitem>
            <para>Click anywhere on the graphic to dismiss the About box.  Click
  OK to save your DSN, which will then be seen in the OpenLink ODBC
  Administrator's listing.
</para>
            <figure xml:id="mt_MacOSX18" floatstyle="normal">
              <title>OpenLink ODBC Administrator, User DSN tab</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX18.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Now, to verify that your settings are correct and all is
  functional, select the new DSN, and click Test. You'll be presented with the
  following dialog:</para>
            <figure xml:id="mt_MacOSX19" floatstyle="normal">
              <title>OpenLink Login Dialog, Identity tab</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX19.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Input the correct password for the username shown. You can
  connect as another user, if you wish, by simply typing a different username in the
  field. To verify that your settings have all "stuck", you can click the
  Database tab: </para>
            <figure xml:id="mt_MacOSX20" floatstyle="normal">
              <title>OpenLink Login Dialog, Database tab</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX20.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>The "About" tab shows you basic information about the
  Driver on which the DSN is based. </para>
            <figure xml:id="mt_MacOSX21" floatstyle="normal">
              <title>OpenLink Login Dialog, About tab</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX21.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>When you click OK, your Mac will think for a moment,
  while it makes a connection to the remote Data Source.  If there is a problem
  with the connection, you will be presented with an error message, such as
  this, resulting from a bad password: </para>
            <figure xml:id="mt_MacOSX22" floatstyle="normal">
              <title>OpenLink ODBC Administrator, DSN Test, Initial Error Message</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX22.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>If you receive two error messages, the first will usually
  provide the clues to resolution; the second is typically a generic error,
  such as this rejected connection notice: </para>
            <figure xml:id="mt_MacOSX23" floatstyle="normal">
              <title>OpenLink ODBC Administrator, DSN Test, Secondary Error Message</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX23.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>If the DSN connects as expected, you will be presented
  with this Success message: </para>
            <figure xml:id="mt_MacOSX24" floatstyle="normal">
              <title>OpenLink ODBC Administrator, DSN Test, Success Message</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="mac10/MacOSX24.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <section xml:id="mt_cliinstmacxodbctest">
          <title>iODBC Test.command (or /usr/bin/odbctest)</title>
          <para>For more thorough testing, you can use iODBC Test, a sample
  application installed along with the OpenLink Generic Driver for
  ODBC. iODBC Test is a simple command-line, ODBC compliant,
  Interactive SQL client. </para>
          <para>Either double-click the
  <computeroutput>/Applications/iODBC/iODBC Test.command</computeroutput>
  script or manually launch the Terminal application (found in
  <computeroutput>/Applications/Utilities/</computeroutput>). </para>
          <figure xml:id="mt_MacOSX25" floatstyle="normal">
            <title/>
            <mediaobject>
              <imageobject>
                <imagedata fileref="mac10/MacOSX25.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>If you used the script, you can skip ahead to the next paragraph;
  otherwise, ensure that the environment variables ODBCINI and ODBCINSTINI
  are set correctly and enter the command /usr/bin/odbctest. </para>
          <para>At the prompt, type a question-mark (?) followed by the ENTER key,
  to show a list of available DSNs. Enter a connect string at the next prompt,
  using the syntax:</para>
          <programlisting><![CDATA[
DSN=<DSN Name>[;UID=<username>[;PWD=<password>]]
]]></programlisting>
          <para>Text enclosed in angle brackets &lt; &gt; should be replaced by your
  environment's specifics; text enclosed in square brackets [ ] is optional. The
  only mandatory parameter is the <computeroutput>"DSN="</computeroutput>.
  All other connect parameters may be set within the DSN itself.  User
  authentication in the connect string will override similar information stored
  in the DSN.  The following connect strings are all valid, assuming a DSN
  named test_dsn exists:</para>
          <programlisting><![CDATA[
DSN=test_dsn
DSN=test_dsn;UID=;PWD=
DSN=test_dsn;UID=fred
DSN=test_dsn;UID=fred;PWD=
DSN=test_dsn;UID=fred;PWD=derf
]]></programlisting>
          <para>A successful connection will cause display of the Driver's full version
  string, as it reports to any client application, followed by a SQL&gt; prompt.</para>
          <programlisting><![CDATA[
Enter ODBC connect string (? shows list, or DSN=...):
DSN=test_dsn;UID=fred;PWD=derf
Driver: 04.20.0402 OpenLink SQL Server Lite Driver
SQL>
]]></programlisting>
          <para>Once the connection is made, any valid SQL query conforming to
  ODBC syntax (where applicable) may be executed. Use the command
  "quit" to close the connection.</para>
          <para>If the query executes successfully you will see a table of the
  data returned by the query; if unsuccessful, you will see the entire
  error message returned from the back-end DBMS. </para>
          <para>Use the command "quit" to close the connection. The
  prompt Again (y/n)?  is asking whether you wish to connect to
  another DSN. Respond y(es) or n(o) and hit &lt;return&gt;. Yes
  brings you back to the Enter ODBC string prompt; no returns "Have a
  nice day".</para>
          <programlisting><![CDATA[
SQL>quit
Again (y/n) ? n
Have a nice day.
]]></programlisting>
        </section>
      </section>
      <section xml:id="mt_cliinstmacxtracedsn">
        <title>Troubleshooting ODBC Connections and Sessions</title>
        <para>From the Tracing Tab of the OpenLink ODBC Administrator, the level of
 Tracing can be configured. </para>
        <figure xml:id="mt_MacOSX26" floatstyle="normal">
          <title>OpenLink ODBC Administrator, Tracing tab</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSX26.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <formalpara>
          <title>When to trace</title>
          <para>Use this option to turn tracing off or on. For a One-time only trace, the
   trace is made for the duration of the next connection. Click the Apply button to
   make your selection active. This option corresponds to the Trace and
   TraceAutoStop parameters in the preference files.</para>
        </formalpara>
        <formalpara>
          <title>Custom trace library</title>
          <para>Use the Select Library button to browse the machine for a library file
   that contains the code to intercept the trace output. This field should generally
   be left blank. When setting this parameter, you may use the Browse button to
   locate the library, or specify it manually. If specified manually, note that the
   location must be specified as it would be in a Terminal session. You may use
   <computeroutput>~/</computeroutput> as a shortcut to your user Home
   directory. This option corresponds to the TraceDLL parameter in the preference
   files.</para>
        </formalpara>
        <formalpara>
          <title>Log file path</title>
          <para>Specify the complete location of the file to which you wish to write the
   trace. You may use the Browse button to locate or create the file, or specify
   it manually. If specified manually, note that the location must be specified as
   it would be in a Terminal session. You may use ~/ as a shortcut to your
   user Home directory. This option corresponds to the TraceFile
   parameter in the preference files.</para>
        </formalpara>
        <formalpara>
          <title>Trace Parameters in Preference Files</title>
          <para>When the ODBC tracing parameters are changed, they are saved in the
   [ODBC] section of the ODBC.preference or odbc.ini file, whichever is active on
   your system.</para>
        </formalpara>
        <para>The following example shows the settings for a one-time trace to a
   sql.log on the active user's Desktop.</para>
        <programlisting><![CDATA[
[ODBC]
Trace         = 1
TraceAutoStop = 1
TraceDLL      =
TraceFile     = ~/Desktop/sql.log
]]></programlisting>
        <para>Once the tracing of a connection is complete, the Trace and
   TraceAutoStop parameters will both be set to 0.</para>
        <formalpara>
          <title>Trace</title>
          <para>This parameter corresponds to the When to trace option in the
   Tracing tab. Set to 1, tracing is on; set to 0, tracing is off.</para>
        </formalpara>
        <formalpara>
          <title>TraceAutoStop</title>
          <para>This parameter corresponds to the One-time only option in the
   tracing tab. Set to 1, tracing will automatically stop after the next
   connection is closed; set to 0, tracing must be manually stopped. When
   tracing is automatically stopped, the Driver Manager will set both
   Trace and TraceAutoStop parameters to 0.</para>
        </formalpara>
        <formalpara>
          <title>TraceDLL</title>
          <para>This parameter corresponds to the Custom trace library option in
   the tracing tab. When setting this parameter, note that the file must be fully
   specified as it would be in a Terminal session. You may use
   <computeroutput>~/</computeroutput> as a shortcut to your user
   Home directory.</para>
        </formalpara>
        <para>
          <bridgehead>TraceFile</bridgehead>
        </para>
        <para>This parameter corresponds
      to the Log file path option in the tracing tab. When setting this
      parameter, note that the file must be fully specified as it would be in
      a Terminal session. You may use <computeroutput>~/</computeroutput> as a
      shortcut to your user Home directory.</para>
        <para>As of iODBC 3.51.0, there are now more variables that may be
        included in the filename: </para>
        <formalpara>
          <title>$P</title>
          <para>This is the process-id (pid) of
        the application invoking the driver manager - allowing for per-process
        log-files</para>
        </formalpara>
        <formalpara>
          <title>$U</title>
          <para>This is the user-id under which
        the process is currently running</para>
        </formalpara>
        <formalpara>
          <title>$T</title>
          <para>This is the timestamp in YYYYMMDDHHmmSS format</para>
        </formalpara>
        <formalpara>
          <title>$H</title>
          <para>This is the home-directory of the
        user as whom the process is running</para>
        </formalpara>
        <para>These options are case-insensitive. Hence you can specify
        <programlisting><![CDATA[TraceFile=/tmp/iodbc-$U-$T-$P.log]]></programlisting>
        if you wish.
        </para>
      </section>
    </section>
    <section xml:id="mt_occunix">
      <title>Generic Client for UNIX</title>
      <info>
        <keywordset>
          <keyword>Unix Client</keyword>
        </keywordset>
      </info>
      <para>ODBC Driver Manager exists in various forms under UNIX, but the
definitive Driver Manager for UNIX is known as the "iODBC Driver
Manager".  Additional information regarding iODBC can be obtained
from:  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.iodbc.org/">www.iodbc.org</link>.</para>
      <para>The OpenLink ODBC Client Components for UNIX comprise the following :</para>
      <itemizedlist mark="bullet">
        <listitem>
          <para>iODBC Driver Manager - A shared library that links ODBC
applications to ODBC Drivers</para>
        </listitem>
        <listitem>
          <para>Generic ODBC Driver - A shared library (the file "oplodbc.so"
or "oplodbc.sl") that provides database connectivity and data access services
to ODBC-based clients (these can be applications written and compiled using
the iODBC SDK)</para>
        </listitem>
        <listitem>
          <para>Sample ODBC Application - A simple program that can be used to
verify your ODBC installation and working environment.</para>
        </listitem>
      </itemizedlist>
      <section xml:id="mt_uocintro">
        <title>Installation</title>
        <para>The OpenLink ODBC Client Components for UNIX are contained within a
compressed TAR archive file in the format "XXoczzzz.taz", where the "XX"
represents a two-letter platform-specific code.</para>
        <para>In addition, the optional ODBC Data Source Administrator and
JDBC Samples are contained in an archive of format "XXl5adzz.taz"
(availability varies by platform).</para>
        <para>Note: The ODBC Data Source Administrator offered for configuring the
Client Component is a stripped down version of the OpenLink Admin Assistant
used for configuring the server components.</para>
        <para>These files are automatically presented to you via the OpenLink Software
Download wizard when you enter UNIX as your client operating system.</para>
        <para>The steps that follow describe the installation process:</para>
        <orderedlist>
          <listitem>
            <para>Move the "install.sh" and all downloaded *.taz" files to an
installation directory of your choice</para>
          </listitem>
          <listitem>
            <para>Type in one of the following commands to extract the contents
of the compressed TAR archive files:</para>
            <programlisting><![CDATA[
sh install.sh
]]></programlisting>
            <para>or</para>
            <programlisting><![CDATA[
install.sh
]]></programlisting>
            <para>or</para>
            <programlisting><![CDATA[
./install.sh
]]></programlisting>
          </listitem>
          <listitem>
            <para>Setup your operating environment by executing the command:</para>
            <programlisting><![CDATA[. openlink.sh]]></programlisting>
            <para>you can also place the following entry in your ".profile" file:</para>
            <programlisting><![CDATA[
. openlink.sh
]]></programlisting>
          </listitem>
          <listitem>
            <para>Proceed to the configuration stage of this process.</para>
          </listitem>
        </orderedlist>
        <anchor xml:id="mt_clientcompinstalloccunixsetodbc"/>

        <!-- Used For Menu.Ini -->
        <anchor xml:id="mt_setodbc"/>

        <!-- Used For Menu.Ini -->
        <anchor xml:id="mt_unixsetodbc"/>

        <!-- Used For Menu.Ini -->
      </section>
      <section xml:id="mt_unixconfiguration">
        <title>Configuration</title>
        <para>The main configuration activity involves setting up logical references
  to the actual backend database engines that you wish to access via your UNIX
  based ODBC Driver. These local references are called Universal Data Source
  Names (UDSNs) and they are responsible for linking ODBC clients with actual
  OpenLink Data Access Drivers.</para>
        <para>The OpenLink Admin Assistant is a Server Based HTML utility that enables
  you to manage UDSNs via your Web Browser. This utility provides wizards and a
  forms based user interface for performing it's tasks.</para>
        <para>During the installation for Unix, the install.sh script will generate
  a file called bin/iodbc-admin-httpd.sh.  This is a shell script used to start
  and stop the HTTP based iODBC Administrator.  The usage is as follows:</para>
        <programlisting><![CDATA[
$ sh iodbc-admin-httpd.sh start  # Starts the HTTP based iODBC Administrator
$ sh iodbc-admin-httpd.sh stop   # Tries to stop the HTTP based iODBC Administrator
$ sh iodbc-admin-httpd.sh status # Shows if the program is running
]]></programlisting>
        <para>In the sections that follow, a step by guide and illustrative screen
  shots are used to demonstrate both approaches to setting up ODBC DSNs.</para>
        <para>In the examples below lets presume that we are trying to create a UNIX
  based ODBC DSN on our machine called "opllinux" that will connect us to a
  Microsoft SQL Database on a Windows 95/98/NT Server. The critical database
  connection and network information for this setup (aka connection attributes)
  are as follows:</para>
        <para>Network Alias of a Windows 95/98/NT/2000 Server machine (typically
  your application server) running OpenLink Server Components: "ntappserver"</para>
        <para>Network Alias of a Windows 95/98/NT/2000 Server machine running
  Microsoft SQL Server: "pluto"</para>
        <para>Microsoft SQL Server Database Name: "pubs"</para>
        <section xml:id="mt_WizardBasedDSNs">
          <title>Wizard Based Data Source Management</title>
          <orderedlist>
            <listitem>
              <para>Start up the web-based Admin Assistant available for use,
  if not already started:</para>
              <programlisting><![CDATA[bash$ sh iodbc-admin-httpd.sh start ]]></programlisting>
            </listitem>
            <listitem>
              <para>Open up your Internet Browser and then enter the following
  URL: http://localhost:8000/ (note the OpenLink Web Assistant listens at
  port 8000 by default, this value is set at installation time).</para>
            </listitem>
            <listitem>
              <para>Expand the menu by clicking on the "Client Components
  Administration", then "Data Source Name Configuration", and "Edit Data
  Sources by Wizard".</para>
              <figure xml:id="mt_image16" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image16.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Edit ODBC Data Sources" hyperlink, this takes
  you into the actual ODBC Data Source configuration wizard.</para>
              <figure xml:id="mt_dsn01" floatstyle="normal">
                <title>Data Source Wizard</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="dsn01.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click the "Add" button to commence the process of creating
  a new ODBC DSN, the wizard presents you with a list of ODBC Drivers installed
  on your system, select the driver identified as "OpenLink Generic ODBC Driver"
  and then click on the "Create DSN" button.</para>
              <figure xml:id="mt_image17" floatstyle="normal">
                <title>Data Source Wizard</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image17.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Enter values into the "Name", "Description" and "Server" fields as
  follows:</para>
              <formalpara>
                <title>Name</title>
                <para>Enter values that uniquely identify the DSN being created, our example
  uses the name "SQL Server on NT" to indicate that this DSN will be
  connecting you to a SQL Server database on an NT server.</para>
              </formalpara>
              <formalpara>
                <title>Description</title>
                <para>Enter values that provide additional information that helps in
  describing the purpose of the DSN that you are creating.</para>
              </formalpara>
              <formalpara>
                <title>Server</title>
                <para>Enter the hostname or IP address that identifies a Server
Machine running OpenLink Server Components, that speak the OpenLink Data Access
Protocol. Follow this with a semicolon and a TCPIP Port number of the Broker
to contact if the default of 5000 is not used. This field corresponds to the
Listen parameter on the target Broker.</para>
              </formalpara>
              <para>Once completed click on the "Next" button.</para>
              <figure xml:id="mt_image18" floatstyle="normal">
                <title>Data Source Wizard</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image18.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Now select the database and configuration details:</para>
              <para>
                <bridgehead>Domain</bridgehead>
              </para>
              <para>This is how you pick the Database Engine Type that your ODBC DSN
is to be associated with e.g. Informix 7, Oracle 7, Progress 7 etc.</para>
              <para>The default offered from the Zero Configuration is typically accepted.
An alternative compatable Domain may be chosen for a specific customisation.</para>
              <para>
                <bridgehead>Database</bridgehead>
              </para>
              <para>This is how an actual database
name within the Provider Type Domain is identified, for instance "stores7"
indicates an "Informix 7" database called "stores7".  This option corresponds to
the Database parameter in the preference files.</para>
              <para>In this case our example uses the database "pubs"</para>
              <formalpara>
                <title>Connection Options</title>
                <para>This is where you place any database specific database connection
options. This field in a majority of cases should be left blank by
default. In this case enter valid SQL Server database server
  connection values (where "-s pluto" represent an actual SQL Server instance
  currently available on your network).</para>
              </formalpara>
              <para>
                <bridgehead>Connect now..</bridgehead>
              </para>
              <para>When this tick box is checked, a test connection
is made to verify the Data Source connection.</para>
              <para>If there is no check then the Login ID and Password fields are
ignored, and no test is performed.</para>
              <formalpara>
                <title>Login ID</title>
                <para>The default database UserID to use when logging on to a remote
database engine (identified by the Domain above).</para>
              </formalpara>
              <formalpara>
                <title>Password</title>
                <para>The Password for the login of the above UserID.</para>
              </formalpara>
              <figure xml:id="mt_image19" floatstyle="normal">
                <title>Data Source Wizard</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image19.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <para>Click on the "Next" button.</para>
            </listitem>
            <listitem>
              <para>Now define additonal connection parameters:</para>
              <formalpara>
                <title>Read-only connection</title>
                <para>Specify whether the connection is to be "Read-only".
Make sure the checkbox is unchecked to request a "Read/Write" connection.</para>
              </formalpara>
              <formalpara>
                <title>Defer fetching of long data</title>
                <para>Check this box to defer the fetching of long data.</para>
              </formalpara>
              <formalpara>
                <title>Disable interactive login</title>
                <para>Suppress the ODBC "Username" and "Password" login
dialog box when interacting with your ODBC DSN from within an ODBC compliant
application.</para>
              </formalpara>
              <formalpara>
                <title>Row Buffer Size</title>
                <para>This attribute specifies the number of records to be
transported over the network in a single network hop. Values can range from 1
to 99.</para>
              </formalpara>
              <figure xml:id="mt_image20" floatstyle="normal">
                <title>Data Source Wizard</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image20.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The list of parameters for the DSN are now shown.
The Test Data Source button will trigger a test of the DSN using the
existing login parameters.</para>
              <figure xml:id="mt_image21" floatstyle="normal">
                <title>Data Source Wizard</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image21.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You have now completed entering all the values that make up
  your new ODBC DSN, these values are collectively known as your ODBC DSN
  Attributes. Click on the "Finish" button in order to store these values
  permanently on your hard disk.</para>
            </listitem>
            <listitem>
              <para>Click on the "exit" button to exit the ODBC DSN configuration wizard</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_FormBasedDSNs">
          <title>Form Based Data Source Management</title>
          <para>The OpenLink Admin assistant also allows the more experience OpenLink
ODBC user to manage ODBC DSNs via a forms based interface. Like the wizard
based approach this is done entirely from within your browser. In the sections
that follow, a step by guide and illustrative screen shots are used to
demonstrate the process of creating the same ODBC DSN created in the prior
section using the Wizard approach.</para>
          <orderedlist>
            <listitem>
              <para>Start up the web-based Admin Assistant available for use,
  if not already started:</para>
              <programlisting><![CDATA[bash$ sh iodbc-admin-httpd.sh start ]]></programlisting>
            </listitem>
            <listitem>
              <para>Enter the following URL into your Web Browser (if the Admin
Assistant isn't already initialized): http://localhost:8000 You will be
presented with a screen similar to the one below. Notice that the "Client
Component Administration", "Data Source Names Configuration" and "Edit Data
Sources By Form" hyperlinks have been expanded.</para>
              <para>Click on the "Edit ODBC Data Sources" hyperlink to commence the process
of creating a new ODBC DSN.</para>
              <figure xml:id="mt_image25" floatstyle="normal">
                <title>Data Source Forms</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image25.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>On the right side of the Admin Assistant pane is your start
page for configuring ODBC DSNs using the Forms approach. This page presents
to you a list of currently configured ODBC DSNs on the machine. Click the
"Add" hyperlink in the Action Column</para>
              <figure xml:id="mt_image26" floatstyle="normal">
                <title>Data Source Forms</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image26.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You are now presented with a table listing that comprises
ODBC Drivers installed on your system, move on to the row that identifies
the ODBC Driver that you will be creating your DSN for, then click on the
"New" hyperlink.</para>
              <figure xml:id="mt_image27" floatstyle="normal">
                <title>Data Source Forms</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image27.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Enter values into the fields presented on the ODBC DSN form
as follows:</para>
              <formalpara>
                <title>Name</title>
                <para>enter values that uniquely identify the DSN being created, our example
uses the name "SQL Server on NT" to indicate that this DSN will be connecting
you to a SQL Server database on an NT server.</para>
              </formalpara>
              <formalpara>
                <title>Comment</title>
                <para>enter values that provide additional information that helps in describing
the purpose of the DSN that you are creating.</para>
              </formalpara>
              <formalpara>
                <title>UserName</title>
                <para>enter a valid username for the database that you are connecting to, you
can leave this blank and be prompted for values at actual database connect time.</para>
              </formalpara>

              <!--
<formalpara><title>Password</title>
<para>enter a default password to use, in most cases leave this blank and be
prompted for values at actual database connect time.</para>
</formalpara>
 -->
              <formalpara>
                <title>Database Name</title>
                <para>enter the name of an actual SQL Server database, in this case our example
uses the database "pubs"</para>
              </formalpara>
              <formalpara>
                <title>Read-only connection</title>
                <para>check this box if you require a read only session.</para>
              </formalpara>
              <formalpara>
                <title>No Login Dialog Box</title>
                <para>check this box if you do not to be prompted by your ODBC Driver for
username and password dialog box at connect time.</para>
              </formalpara>
              <formalpara>
                <title>Defer fetching of long data</title>
                <para>Check this box to defer the fetching of long data.
See the Release Notes section for more details.</para>
              </formalpara>
              <formalpara>
                <title>Database Server</title>
                <para>enter database server connection values for the database that your are
connecting to, in this case enter valid SQL Server database server connection
values (where "-s pluto" represent an actual SQL Server instance currently
available on your network).</para>
              </formalpara>
              <formalpara>
                <title>Server Type</title>
                <para>enter a value that identifies the type of OpenLink Agent that will serve
your ODBC client.</para>
              </formalpara>
              <formalpara>
                <title>Protocol</title>
                <para>Chose the type of network connection to be used from TCP/IP, SPX/IPX
and DECnet. Note some operating systems do not support all the choices.
In most cases uses TCP/IP.</para>
              </formalpara>
              <formalpara>
                <title>Hostname</title>
                <para>enter a value that identifies the server machine running your OpenLink
Server Components.</para>
              </formalpara>
              <formalpara>
                <title>Port</title>
                <para>Enter the TCP port number of the Broker to contact.
This corresponds to the Listen parameter on the target Broker.</para>
              </formalpara>
              <formalpara>
                <title>Row Buffer Size</title>
                <para>enter a value that represents the number of records that you would like
your ODBC driver to retrieve during each network hop. A network hop represents
the number of times your OpenLink ODBC send a message across the network to
retrieve records from your remote database server. The feature can be used to
improve ODBC record retrieval performance.</para>
              </formalpara>
              <para>
Note: The screen shot below is a snapshot of the ODBC DSN for, click on the
right-hand scroll bar to see all the fields described above.
</para>
              <figure xml:id="mt_image28" floatstyle="normal">
                <title>Data Source Forms</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image28.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Add" button at the foot of the page to complete
the creation of your new ODBC DSN.</para>
            </listitem>
            <listitem>
              <para>The DSN may then be tested, or you can return to the DSN
list.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_ODBCDriverSettings">
          <title>ODBC Driver Session Settings</title>
          <para>A number of configuration session parameters are available to
adminstrators of OpenLink ODBC Drivers, these parameters can be managed via
the Web Browser based Admin Assistant or by manually editing the file
"udbc.ini" situated in the "bin" sub-directory of your OpenLink installation
directory.  These parameter enable you tailor the behaviour of your ODBC Drivers
for UNIX in line with the requirements of your ODBC based solutions and any
general infrastructural requirements that you may have.</para>
          <para>The list of configurable session parameters and their descriptions are
as follows:</para>
          <table>
            <title>  </title>
            <tgroup cols="1">
              <thead>
                <row>
                  <entry>
                    <para>Parameter</para>
                  </entry>
                  <entry>
                    <para>Default Value</para>
                  </entry>
                  <entry>
                    <para>Description</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>BrokerTimeout</para>
                  </entry>
                  <entry>
                    <para>30</para>
                  </entry>
                  <entry>
                    <para>The time (in secs) that the OpenLink ODBC client application will
wait for the OpenLink Request Broker to accept or reject a database
connection.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>ReceiveTimeout</para>
                  </entry>
                  <entry>
                    <para>60</para>
                  </entry>
                  <entry>
                    <para>The time (in secs) that the OpenLink ODBC client will wait for
an ODBC request to be completed.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>RetryTimeout</para>
                  </entry>
                  <entry>
                    <para>5</para>
                  </entry>
                  <entry>
                    <para>The amount of wait time (in secs) before the OpenLink ODBC client
attempts to re-execute a failed call. After each attempt this value is
doubled.</para>
                    <para>The life time of this value never exceeds the BrokerTimeout
during intial connection establishment, and never exceeds the ReceiveTimeout
when sessions have been established.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SendSize</para>
                  </entry>
                  <entry>
                    <para>4096</para>
                  </entry>
                  <entry>
                    <para>The size (in kilobytes) of the OpenLink ODBC client's outward bound
message packets.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>ReceiveSize</para>
                  </entry>
                  <entry>
                    <para>16000</para>
                  </entry>
                  <entry>
                    <para>The size (in kilobytes) of the OpenLink ODBC client's server bound
message packets.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DebugFile</para>
                  </entry>
                  <entry>
                    <para>empty</para>
                  </entry>
                  <entry>
                    <para>When this variable contains a valid file and path reference, all
ODBC API calls will be logged and stored in the file name referenced.
</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
      <section xml:id="mt_Sample_App">
        <title>Sample Application</title>
        <para>OpenLink also provides a sample ODBC based dynamic SQL application that
enables you verify usability of your ODBC installation.  The sample application
is situated within the "samples" sub-directory below your OpenLink installation
directory. The ODBC sample application is called "odbctest".</para>
        <para>The following steps guide you through the process of successfully utilising
this sample application. This exercise presumes that we are connecting to a
DSN called "SQL Server on NT", which connects us to a remote SQL Server
Database hosted on a machine called "pluto" via the OpenLink Server components
on an Windows 95/98/NT/2000 application server called "ntappserver".</para>
        <orderedlist>
          <listitem>
            <para>Ensure that your OpenLink Request Broker is up and running on
the machine "ntappserver" (you can quickly confirm this by opening up your
browser and entering the following URL: http://ntappserver:8000 )</para>
          </listitem>
          <listitem>
            <para>At your UNIX command prompt type in the following command:</para>
            <programlisting><![CDATA[
odbctest
]]></programlisting>
          </listitem>
          <listitem>
            <para>Enter a full or partial ODBC connect string at the ODBC
applications command prompt, some examples are listed below:</para>
            <itemizedlist>
              <listitem>
                <para>for a list of DSNs on your system enter "?"</para>
              </listitem>
              <listitem>
                <para>to connect to the DSN called "SQL Server on NT" type (this is
    a partial connect string): DSN=SQL Server On NT</para>
              </listitem>
              <listitem>
                <para>to enter a username and a blank password combination along with
    the DSN type (this is a partial connect string only because we have a seperate
    server hosting the OpenLink Server and Microsoft SQL Server components): DSN=SQL
    Server on NT;UID=sa;PWD=</para>
              </listitem>
              <listitem>
                <para>to enter a directive that instructs the OpenLink Server
    components to connect to the remote SQL Server hosted on the machine called
    "pluto", type the following (this is a full connect string for this
    particular scenario): DSN=SQL Server on NT;UID=sa;PWD=;OPTIONS=-s pluto</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>If the previous step is successful you are now ready to execute
SQL interactively against your remote database, to do this enter the following
SQL command:</para>
            <programlisting><![CDATA[
select * from authors
]]></programlisting>
          </listitem>
          <listitem>
            <para>To quit this application type in "exit" at the SQL command
line prompt.</para>
          </listitem>
        </orderedlist>
        <anchor xml:id="mt_SettingUpUDSNs"/>
      </section>

      <!-- Used For Menu.Ini -->
      <section xml:id="mt_clientcompinstallClient_Comp_Installucconf">
        <title>UDBC Data Source Configuration</title>
        <para>UDBC shares its API with ODBC, and is provided for platforms
  that do not have a suitable ODBC driver manager - it is for legacy
  unix systems which did not support dynamic library functions. As
  such, it is deprecated, and documented here only for
  completeness.</para>
        <para>UDBC, like ODBC, is based on the notion of logical references to
  database backends through the use of Data Source Names.  Under UDBC, these
  are described as Universal Data Source Names (UDSNs) due to the cross data
  access standard nature of these Data Source Names (they are usable by
  OpenLink Drivers for ODBC and JDBC).</para>
        <para>The OpenLink Universal Data Access Driver Suite includes an HTTP
  based utility called the OpenLink Admin Assistant that enables you create,
  configure, and manage UDSNs via a Web Browser.  Since this is HTTP based, you
  can even do this remotely, security measures exist avoid unwanted
  tampering.  The Admin Assistant provides a wizards and HTML forms based
  user interfaces.</para>
        <para>You identify your UDSN file to UDBC Drivers via the Environment
  Variable "UDBCINI".  Your OpenLink UDBC SDK installation process will place
  a sample of this file in the 'doc' installation subdirectory.  The OpenLink
  shell script ("openlink.sh") will look for the runtime copy of this file in
  the 'bin' directory of your installation, and export it to the $UDBCINI
  environment variable.  Manually, the UDBCINI environment variable is set
  using the command:</para>
        <programlisting><![CDATA[
UDBCINI=/usr/openlink/bin/udbc.ini ; export UDBCINI
]]></programlisting>
        <para>The above presumes that your OpenLink installation's base directory
  is: /usr/openlink.  Use an appropriate directory in its place.</para>
        <tip>
          <title>See Also:</title>
          <para>The <!-- <link linkend="mt_udbcsdk">-->
UDBC Client Components SDK<!-- </link> -->
 chapter.</para>
          <para>Configuring UDBC data sources using:




  <!-- <link linkend="mt_WizardBasedUDSNs">-->
Wizards Based Assistant<!-- </link> -->
 or




  <!-- <link linkend="mt_udbcformsdsnadmin">-->
Forms Based Assistant<!-- </link> -->

        </para>
        </tip>
      </section>
    </section>

    <!-- 
  $Id: features_odbc.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_features">
      <info>
        <title>New Features</title>
        <keywordset>
          <keyword>ODBC New Features</keyword>
          <keyword>Features</keyword>
          <keyword>Database support; Oracle; SQL Server; DB2; Informix; Sybase; Progress</keyword>
        </keywordset>
      </info>
      <itemizedlist>
        <listitem>
          <para>
            <bridgehead>Unicode Driver support</bridgehead>
          </para>
          <para>Database agents support the latest releases of all supported database engines this includes:
<orderedlist><listitem><para>Oracle 8i &amp; 9i</para></listitem><listitem><para>Microsoft SQL Server 2000</para></listitem><listitem><para>DB/2 v7</para></listitem><listitem><para>ODBC Agent</para></listitem><listitem><para>JDBC Agent</para></listitem><listitem><para>Informix 9</para></listitem><listitem><para>Sybase Adaptive Server 12.5</para></listitem><listitem><para>Progress 9 (SQL-92)</para></listitem></orderedlist>
</para>
          <para>Note that there are two Multi-tier generic ODBC clients:</para>
          <orderedlist>
            <listitem>
              <para>With Unicode support olod5032u.dll (OpenLink Generic ODBC Driver (Unicode))</para>
            </listitem>
            <listitem>
              <para>Without Unicode support olod5032.dll (OpenLink Generic ODBC Driver)</para>
            </listitem>
          </orderedlist>
          <para>Both of these ODBC clients can be used with a Unicode enabled agent.</para>
        </listitem>
        <listitem>
          <formalpara>
            <title>Zero Configuration</title>
            <para>The OpenLink Request Broker can now be configured to Broadcast ZeroConfig services of available Database agents on the network, which then can be discovered by the the OpenLink Multi-Tier ODBC client. Enabling ODBC Datasources to be configured and/or connections made with no knowledge of network topology.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Significant SQL Server and SYBASE Driver Enhancements</title>
            <para>Our Drivers are now built to communicate directly with Microsoft SQL Server and SYBASE ASE using the TDS protocol (the native wire protocol for both database servers). This also implies that no additional software is required post installation in order for our ODBC Drivers to communicate with these Drivers (this applies to the Single Tier format Drivers only). The use of TDS has also enabled us to double the performance of both our Single Tier and Multi-Tier Drivers for these databases.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Array Optimisations on Select Queries</title>
            <para>All drivers now support the SQLSetStmtAttr(SQL_ARRAY_SIZE) call for batch select statements, providing improved performance when re-execute select statements with bound paramters.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Deferred Fetching</title>
            <para>The Release 4 OpenLink driver family brings marked communications 
layer improvements. Central to these are improved implementation of the 
<computeroutput>SQLGetData</computeroutput> and <computeroutput>SQLPutData</computeroutput>
ODBC function calls.</para>
          </formalpara>
          <formalpara>
            <title>Wholesale vs. Piecemeal Data Transfer</title>
            <para>In previous releases of the drivers, parameter data at query execution 
was assembled in the OpenLink driver's client component and transferred to its 
server component in a single network hop. (The client and server components 
apply to both the Single- and Multi-Tier drivers; they refer to different layers within 
the driver entity.) Similarly, when fetching from a "long", or large binary data 
column, data was transferred from the driver's server component to the client 
component in a single network transfer. The only way data could manipulated in a 
piecemeal fashion, was within the ODBC application from the driver's client 
component (client side only).</para>
          </formalpara>
          <para>The Release 4 driver family now allow transferring parameter data 
in parts over the network between the client and server driver components. Once 
transferred, the fragmented column data are re-pieced together in their entirety 
within the client and server portions of the driver.</para>
          <formalpara>
            <title>Deferred Fetching</title>
            <para>When fetching, data from columns with "long" data are only transferred 
between the server and client components if one of the following applies to 
that column:</para>
          </formalpara>
          <simplelist type="vert">
            <member>It has been "bound" by the application via the SQLBindCol API call</member>
            <member>It has been retrieved via the SQLGetData API call</member>
          </simplelist>
          <para>This mechanism is referred to as deferred fetching. In this method, 
as "long" column data is not reassembled within the OpenLink ODBC client itself 
(rather, within the application), driver memory overhead incurred is dramatically 
reduced. Deferred fetching applies to the following "long" database column types:</para>
          <variablelist>
            <varlistentry>
              <term>ODBC agent</term>
              <listitem>
                <para>SQL_LONGVARCHAR</para>
                <para>SQL_LONGVARBINARY</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>DB/2 agent</term>
              <listitem>
                <para>SQL_BLOB</para>
                <para>SQL_CLOB</para>
                <para>SQL_DBCLOB</para>
                <para>If the long data compatibility option has been specified in the DB2 database</para>
                <para>SQL_LONGVARCHAR</para>
                <para>SQL_LONGVARBINARY</para>
                <para>SQL_LONGVARGRAPHIC</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Oracle agent</term>
              <listitem>
                <para>SQLT_BLOB</para>
                <para>SQLT_CLOB</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Sybase agent</term>
              <listitem>
                <para>CS_IMAGE_TYPE</para>
                <para>CS_TEXT_TYPE</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>However, if a table contains a column defined as one of these 
"long" types, but the actual data stored in the column only fills a small 
proportion of the available space, deferred fetching is of no benefit.  In 
these cases, performance may be improved by switching off the deferred 
fetching mechanism using the control in the OpenLink Generic Client data 
source setup dialog.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="mt_oraconcpoolgeneric">
      <title>Oracle Connection Pooling Support</title>
      <section xml:id="mt_oraconpoolwhat">
        <title>What it is</title>
        <para>Oracle Connection-Pooling gives you the ability to retain a pool of
    open connections to the database within the ODBC Driver, thereby avoiding
    costly connection-establishment overhead for every connection from the
    client. Being implemented in the ODBC Driver means you do not have to rely
    on the Driver Manager component implementing connection-pooling for you,
    and have finer control over how it behaves too.</para>
        <figure>
          <title>orapooling.png</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="orapooling.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_oraconpooladvant">
        <title>Benefits</title>
        <para>OCI separates the concept of database sessions (user logins) from
    physical connections (server attachments). By pooling connections, it is
    possible for an application to multiplex several sessions over fewer
    physical connections. Because the number of physical connections is less
    than the number of database sessions in use by the application and because
    the shared pool of physical connections typically has a corresponding
    back-end server pool containing an identical number of dedicated server
    processes; the number of back-end server processes is also reduced by
    connection pooling. Thus many more database sessions can be multiplexed.
    If the number of back-end server processes may cause scaling problems on
    the database, OCI connection pooling can be of benefit.</para>
        <para>Client-side connection pooling by the driver manager may be done on
    a per-process basis. For instance, on Unix each application gets its own
    driver-manager instance in its process. In contrast, in a multi-threaded
    OpenLink agent with connection re-use enabled, an agent connection pool
    can span different client processes. Cross-client connection pooling may
    be preferable to client-side connection pooling in certain application
    domains and may offer better scalability. For instance, if the agent is
    used by an application server or web server.</para>
      </section>
      <section xml:id="mt_oraconpoolhow">
        <title>How it Works</title>
        <para>If OCI connection pooling is enabled, a separate connection pool is
    created for each Oracle instance connected to. All connections specifying
    the same server instance (i.e. the same TNS service name) share the same
    connection pool. The connection pool is reference counted and only
    destroyed when the last Lite/agent connection using it is closed
    down.</para>
        <para>Each agent connection holds a reference to an OCI connection pool
    record or OCPR. The OCPR contains a handle to the OCI connection pool
    associated with the Oracle instance connected to. The agent maintains a
    hash table of OCPRs, keyed by instance name. Each OCPR is reference
    counted. The reference count for an OCPR is incremented each time an agent
    uses the connection pool to connect to the associated Oracle instance, and
    decremented when the agent connection is closed. The OCPR is destroyed,
    and the connection pool closed, when the last agent connection using it is
    closed.</para>
        <para>When an agent is about to establish a connection to an Oracle
    instance, it searches for an OCPR for the instance. If one exists, a
    connection pool for that instance already exists. The agent requests an
    OCI connection from this pool and increments the reference count of the
    OCPR. If one doesn't exist, the agent creates an OCI connection pool for
    the instance by registering a new OCPR.</para>
        <para>Note: different ODBC DSNs, using this driver and the same server
    instance, may specify different pool settings (max pool size, min pool
    size etc.) The settings of the first DSN to connect fixes the
    characteristics of the pool.</para>
        <para>The maximum number of connection pools supported by an Oracle agent
    or Lite driver is 100. Each connection pool allows up to 500 connections,
    depending on the value set in the environment variable OCI_CONNPOOL_MAX or
    the Lite driver setup dialog. The maximum linger time is 300
    seconds.</para>
      </section>
      <section xml:id="mt_oraconpooloplhow">
        <title>The OpenLink Perspective: what you do to use it</title>
        <para>When an OCI connection pool is created, it is characterised by
    several parameters:</para>
        <itemizedlist mark="bullet" spacing="compact">
          <listitem>
            <para>the minimum number of connections to be opened when the
    pool is created;</para>
          </listitem>
          <listitem>
            <para>the maximum number of connections that can be opened in the
    pool;
      </para>
            <itemizedlist mark="bullet" spacing="compact">
              <listitem>
                <para>When the maximum number of connections are open in the
        pool, and all the connections are busy, if a call needs a
        connection, it will wait until it gets one if connWait is
        TRUE, if FALSE an error is returned.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <itemizedlist mark="bullet" spacing="compact">
          <listitem>
            <para>the incremental number of connections to be opened when all
    the connections are busy and a call needs a connection.
      </para>
            <itemizedlist mark="bullet" spacing="compact">
              <listitem>
                <para>This increment
      is used only when the total number of open connections is less than the
      maximum number of connections that can be opened in that
      pool.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <itemizedlist mark="bullet" spacing="compact">
          <listitem>
            <para>whether, when all
    connections in the pool are found to be busy and the number of connections
    has already reached the maximum, to wait for a connection or report an
    error.</para>
          </listitem>
        </itemizedlist>
        <itemizedlist mark="bullet" spacing="compact">
          <listitem>
            <para>how long the last
    connection in the pool should linger before the pool is destroyed (this
    option is available for the single-tier WIN32 drivers only)</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id="mt_oraconpoolmtspecific">
      <title>Multi-Tier-specific Connection-Pooling</title>
      <section xml:id="mt_oraconcpoolmt">
        <title>Multi-Tier-specific configuration</title>
        <para>The required parameters are configured through environment-variables -
  either use the web-based Administrative Assistant (normally located at
  &lt;http://server:8000/&gt;) navigating through `Server Components
  Administration', `Database Agent Administration', `Database Agent Settings
  by Form', select the name of the agent section used, and scroll to the
  section `OpenLink Agent Startup Parameters', or edit the rulebook file
  (oplrqb.ini) directly, to assert settings for the OCI_CONNPOOL_* settings
  below:</para>
        <programlisting><![CDATA[
[Environment ORACLE90]
ORACLE_HOME        = /dbs/oracle90
ORACLE_SID         = ORCL
;ORACLE_SERVER      = T
;TWO_TASK           = P:
;ODBC_CATALOGS      = Y         ; Uncomment after loading odbccat9.sql
;MULTIPLEX_LDA      = 5         ; Allow 5 OpenLink clients on a single lda
;OPL_USR_TBLS_FIRST = Y         ; Sort SQLTables starting with user tables
SHOW_REMARKS       = N  ; Retrieve SQLColumns REMARKS field
CURSOR_SENSITIVITY = LOW        ; Set to HIGH after loading odbccat9.sql
;OCI_PREFETCH_ROWS  = 100       ; Number of rows to prefetch
;OCI_PREFETCH_MEMORY = 65535    ; Amount of memory to use for prefetching
;LD_LIBRARY_PATH = /dbs/oracle81/lib    ; Find shared libraries
;SHLIB_PATH      = /dbs/oracle81/lib    ; Find HP/UX shared libraries
;LIBPATH         = /dbs/oracle81/lib    ; Find AIX shared libraries
;NLS_LANG        = AMERICAN_AMERICA.UTF8 ; Uncomment for Unicode connections
OCI_CONNPOOL_MIN = 0         ; minimum initial connections in pool
OCI_CONNPOOL_INCR = 1        ; number of new connections when others busy
OCI_CONNPOOL_MAX = 1         ; sum of MIN+INCR
OCI_CONPOOL_WAIT = TRUE      ; whether new query waits or errors when all busy
OCI_CONNPOOL_LINGER = 0      ; seconds to linger after last connection cleared
]]></programlisting>
        <para>OCI connection pooling is disabled by setting a minimum connection
  pool size of 0.</para>
      </section>
    </section>
    <section xml:id="mt_orainstantclient">
      <title>Oracle 10g Instant Client: Connection String Formats</title>
      <para>The Oracle 10g Instant Client can be used in OpenLink single-tier and
  multi-tier environments. In a three-tier configuration, an OpenLink Oracle
  10g agent residing on the middle-tier can use the Instant Client to connect
  to an Oracle instance on the third tier.</para>
      <para>Instant Client allows you to run applications
  <emphasis>without installing the standard Oracle client</emphasis> (SQL*Net
  or Net8) or having an ORACLE_HOME. It supports two basic 
  connection string formats:</para>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem>
          <para>//host:[port][/service name]
</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>e.g.
      //dbase-server-5:4321/ORDERS</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>an Oracle Net keyword-value pair such as
</para>
          <programlisting><![CDATA[(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp) (HOST=dlsun242)
    (PORT=5521)) (CONNECT_DATA=(SERVICE_NAME=bjava21)))]]></programlisting>
        </listitem>
      </itemizedlist>
      <para>Naming methods that require a configuration
    file (such as tnsnames.ora or sqlnet.ora) for name translation can also be
    used if the environment variable TNS_ADMIN is set to point to the
    directory containing the file. 
  </para>
      <section xml:id="mt_orainstclientmt">
        <title>OpenLink Multi-Tier Connections using Instant Client</title>
        <para>In this scenario, the Instant Client need only be installed on the
  machine hosting the OpenLink Oracle agent. The valid combinations of
  connection parameters (NET 10 Service Name, Login ID and Password) accepted
  by the OpenLink Multi-Tier DSN Configuration Wizard are the same as detailed
  above for the Single-Tier driver, with the 'NET 10 Service Name' field in
  the multi-tier wizard taking the same values as the 'Connection String'
  field in the single-tier wizard. The environment variables ORACLE_HOME and
  ORACLE_SID need not be set in the rulebook. However, TNS_ADMIN must be set
  in the rulebook if translation of a local NET service name is
  required.</para>
      </section>
      <section xml:id="mt_orainstclientrelatedlinks">
        <title>Oracle Client Installation related links        </title>
        <simplelist type="vert">
          <member>
    Oracle documentation: 
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technology/tech/oci/instantclient/ic-faq.html#A4428">
  connection string formats</link>
      </member>
          <member>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technology/tech/oci/instantclient/instantclient.html">
  Oracle 10g Instant Client</link>
          </member>
        </simplelist>
      </section>
    </section>
  </chapter>

  <!--  &udbcsdk; -->

  <!--
  $Id: dotnet.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_dotnet">
    <title>OpenLink ADO.NET Data Providers</title>
    <info>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>ADO</keyword>
        <keyword>.Net</keyword>
        <keyword>ADO.Net</keyword>
        <keyword>Microsoft.NET</keyword>
        <keyword>Framework</keyword>
        <keyword>Microsoft.NET Framework</keyword>
        <keyword>Managed Provider</keyword>
      </keywordset>
      <abstract>
        <para>ADO.NET is the new feature-rich, data access Model used within the Microsoft.NET framework.  It supports the data access requirements of the loosely coupled, multi-tier Web and Web services based applications of today.  ADO.NET relies on the services of .NET Data Providers. These provide access to the underlying data source through four key objects: <computeroutput>Connection</computeroutput>, <computeroutput>Command</computeroutput>, <computeroutput>DataReader</computeroutput>, and <computeroutput>DataAdapter</computeroutput>. </para>
        <para>The OpenLink .Net Data Providers are available as a suite of Managed and Unmanaged Data Providers providing a natural extension of our Universal Data Access Driver Suite.  Thus providing .Net connectivity to the full range of Databases support in our Universal Data Access Driver suite. Two generic .Net Data Providers are available each exposing a common namespace/interface for accessing remote data sources as explained in the component architecture section below.</para>
      </abstract>
    </info>
    <section xml:id="mt_dnetarch">
      <title>Architecture</title>
      <para>From the outset one of the main design goals of the .Net Data Provider was to implement a generic client layer enabling the re-use of our existing data access components for connecting to remote data sources. This has been achieved with both our Managed and Unmanaged .Net Data Providers, each of which have a common namespace that eliminates the need to recompile applications should the need arise to change the remote data source.</para>
      <section xml:id="mt_dnetmanage">
        <title>Managed Data Provider</title>
        <para>The UDA managed .NET Data Provider delivers robust and secure data connectivity across all Databases support in the Universal Data Access suite, including all major databases - Microsoft SQL Server, Oracle, DB2, Sybase, Ingres II, Informix and Progress. The .NET Data Provider is built with managed code, enabling it to running completely within the .NET Framework runtime delivering better security and performance. This Generic managed .Net Data Provider connects to the remote data source via one of two forms currently:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>Multi-Tier Database Agents</emphasis>
            - The OpenLink VDB(Virtual Database) layer has been ported to C# and linked into the Provider, enabling it to communicate directly with the OpenLink Multi-Tier Database agents installed on the remote machine (or via 3-Tier connection) as indicated in the diagram below:
    </para>
            <figure xml:id="mt_dnetjpg1">
              <title>Managed VDB .Net Data Provider</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dnetmanage.jpg"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para> The diagram above lists all the databases current supported in our Multi-Tier Data Access suite, but note that ODBC is also included which if chosen would enabled connectivity to any third party ODBC driver also via our ODBC agent(bridge).</para>
          </listitem>
          <listitem>
            <para><emphasis>TDS Protocol</emphasis>
            - The TDS protocol has been ported to C# and linked into the Provider, enabling two 100% Managed Providers to be created capable of direct connectivity to Microsoft and Sybase SQLServer Databases without the need for any additional components on the Server, as indicated in the diagram below:
    </para>
            <figure xml:id="mt_dnetjpg2">
              <title>Managed SQLServer .Net Data Provider</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dnetmantdsms.jpg"/>
                </imageobject>
              </mediaobject>
            </figure>
            <figure xml:id="mt_dnetjpg21">
              <title>Managed Sybase .Net Data Provider</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="dnetmantdsyb.jpg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="mt_dnetunmanage">
        <title>Unmanaged Data Provider</title>
        <para>The UDA Unmanaged .NET Data Provider enables connectivity to any ODBC Data Source by acting as a Bridge between ADO.Net and ODBC. This Provider is provided as a stop-gap solution enabling connectivity to Data source for which managed .Net Providers are not already available as indicated in the diagram below, and as such does not provide the benefits of security and performance available from its Managed counterpart:</para>
        <figure xml:id="mt_dnetjpg3">
          <title>Unmanaged ODBC .Net Data Provider</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="dnetunmanage.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>
    <section xml:id="mt_dnetdevel">
      <title>Developing .NET Data Provider Application</title>
      <info>
        <keywordset>
          <keyword>Develop .Net</keyword>
        </keywordset>
      </info>
      <para>The namespaces for the OpenLink .Net Data Providers are: </para>
      <programlisting><![CDATA[
	OpenLink.Data.GenericClient	; Managed VDB Generic Multi-Tier
]]></programlisting>
      <programlisting><![CDATA[
	OpenLink.Data.SQLServer		; Managed Microsoft SQLServer
]]></programlisting>
      <programlisting><![CDATA[
	OpenLink.Data.Sybase		; Managed Sybase SQLServer
]]></programlisting>
      <programlisting><![CDATA[
	OpenLink.Data.OdbcClient	; Unmanaged ODBC based
]]></programlisting>
      <para>A .NET data provider provides functionality for connecting to a data source, executing commands, and retrieving results. Those results can be processed directly, or placed in an ADO.NET DataSet for further processing while in a disconnected state. While in the DataSet, data can be exposed to the user, combined with other data from multiple sources, or passed remotely between tiers. Any processing performed on the data while in the DataSet can then be reconciled to the data source.</para>
      <para>All .NET data providers are designed to be lightweight. They consist of a minimal layer between the data source and your code. This extends functionality without sacrificing performance.</para>
      <para>There are four core objects that make up a .NET data provider. The following table describes those objects and their function.</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Core Classes</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Object</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Connection</entry>
              <entry>Establishes a connection to a specific data source and can begin a Transaction.</entry>
            </row>
            <row>
              <entry>Command</entry>
              <entry>Executes a command at a data source, and exposes Parameters.</entry>
            </row>
            <row>
              <entry>DataReader</entry>
              <entry>Exposes and reads a forward-only stream of data from a data source.</entry>
            </row>
            <row>
              <entry>DataAdapter</entry>
              <entry>Populates a DataSet and resolves updates with the data source.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Along with the core classes listed in the preceding table, a .NET data provider also contains the classes listed in the following table.</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Additional Classes</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Object</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ClientPermission</entry>
              <entry>Provided for .NET data provider code access security attributes.</entry>
            </row>
            <row>
              <entry>CommandBuilder</entry>
              <entry>A helper object that will automatically generate command properties of a DataAdapter or will derive parameter information from a stored procedure and populate the Parameters collection of a Command object. </entry>
            </row>
            <row>
              <entry>Error</entry>
              <entry>Exposes the information from a warning or error returned by a data source.</entry>
            </row>
            <row>
              <entry>Exception</entry>
              <entry>Returned when an error is encountered at the data source. For an error encountered at the client, .NET data providers throw a .NET Framework exception.</entry>
            </row>
            <row>
              <entry>Parameter</entry>
              <entry>Defines input, output, and return value parameters for commands and stored procedures.</entry>
            </row>
            <row>
              <entry>Transaction</entry>
              <entry>Enables you to enlist commands in transactions at the data source.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>During the installation process the OpenLink .Net Data Provider is registered in the system GAC(Global Assembly Cache) enabling it for use by .Net applications. To use the OpenLink .NET Data Providers, the application must add an imports or using statement for the .Net Data Provider namespace, as the following code illustrates:</para>
      <programlisting><![CDATA[
[Visual Basic]
Imports OpenLink.Data.GenericClient	// Managed VDB Generic Multi-Tier
or
Imports OpenLink.Data.SQLServer		// Managed Microsoft SQLServer
or
Imports OpenLink.Data.Sybase		// Managed Sybase SQLServer
or
Imports OpenLink.Data.OdbcClient	// Unmanaged ODBC based
[C#]
using OpenLink.Data.GenericClient;	// Managed VDB Generic Multi-Tier
or
using OpenLink.Data.SQLServer;		// Managed Microsoft SQLServer
or
using OpenLink.Data.Sybase;		// Managed Sybase SQLServer
or
using OpenLink.Data.OdbcClient;		// Unmanaged ODBC based
]]></programlisting>
      <para>You must also include a reference to the .DLL when you compile your code. For example, if you are compiling a Microsoft® Visual C# program, your command line should include:</para>
      <programlisting><![CDATA[
csc /r:OpenLink.Data.GenericClient.dll	; Managed VDB Generic Multi-Tier
or
csc /r:OpenLink.Data.SQLServer.dll	; Managed Microsoft SQLServer
or
csc /r:OpenLink.Data.Sybase.dll	; Managed Sybase SQLServer
or
csc /r:OpenLink.Data.OdbcClient.dll	; Unmanaged ODBC based
]]></programlisting>
    </section>
    <section xml:id="mt_dnetconnstr">
      <title>OpenLink .NET Data Providers Connect String Attributes</title>
      <info>
        <keywordset>
          <keyword>.Net Provider Connect String</keyword>
        </keywordset>
      </info>
      <para> This section details the Connect string attributes an ADO.Net application can pass to the OpenLink .Net Data Providers when attempting a connection to a remote database.</para>
      <section xml:id="mt_dnetmconnstr_opl">
        <title>Managed Generic Multi-Tier .NET Data Provider (OpenLink.Data.GenericClient)</title>
        <para>The tables below provides a list of the Connect String Attributes for the Data Provider:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Connection String Keywords for the Generic .Net Provider </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Keyword</entry>
                <entry>Default Value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Used ID or UID</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Password or PWD</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Initial Catalog or DATABASE</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Connect Timeout or Connection Timeout</entry>
                <entry>[15]</entry>
              </row>
              <row>
                <entry>Persist Security Info</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Connection Lifetime</entry>
                <entry>[0]</entry>
              </row>
              <row>
                <entry>Min Pool Size</entry>
                <entry>[0]</entry>
              </row>
              <row>
                <entry>Max Pool Size</entry>
                <entry>[100]</entry>
              </row>
              <row>
                <entry>Persist Security Info</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Pooling</entry>
                <entry>[True]</entry>
              </row>
              <row>
                <entry>Charset</entry>
                <entry>["]</entry>
              </row>
              <row>
                <entry>Host</entry>
                <entry>[localhost]</entry>
              </row>
              <row>
                <entry>Port</entry>
                <entry>[5000]</entry>
              </row>
              <row>
                <entry>Read Only or ReadOnly</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Fetch Buffer Size or FBS or FetchBufferSize</entry>
                <entry>[100]</entry>
              </row>
              <row>
                <entry>Server Type or ServerType or SVT</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Defer Long Fetch or DLF or DeferLongFetch</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Encrypted</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Options</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Defer Long Fetch or DLF or DeferLongFetch</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>UNICODE</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>APPLICATION</entry>
                <entry>["opldotNET"]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Sample connect string :</para>
        <programlisting><![CDATA[
	For Oracle 9 :
		"Host=localhost;Port=5000;SVT=Oracle 9.x;DATABASE=ORCL;UID=scott;PWD=tiger;
	For SQLServer2000:
		"Host=localhost;Port=5000;SVT=SQLServer 2000;DATABASE=Northwind;UID=sa;PWD=;
	]]></programlisting>
      </section>
      <section xml:id="mt_dnetmconnstr_sqlserver">
        <title>Managed Microsoft SQLServer .NET Data Provider (OpenLink.Data.SQLServer)</title>
        <para>The tables below provides a list of the Connect String Attributes for the Data Provider:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Connection String Keywords for the Microsoft SQLServer .Net Provider </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Keyword</entry>
                <entry>Default Value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Used ID or UID</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Password or PWD</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Initial Catalog or DATABASE</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Connect Timeout or Connection Timeout</entry>
                <entry>[15]</entry>
              </row>
              <row>
                <entry>Persist Security Info</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Connection Lifetime</entry>
                <entry>[0]</entry>
              </row>
              <row>
                <entry>Min Pool Size</entry>
                <entry>[0]</entry>
              </row>
              <row>
                <entry>Max Pool Size</entry>
                <entry>[100]</entry>
              </row>
              <row>
                <entry>Persist Security Info</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Pooling</entry>
                <entry>[True]</entry>
              </row>
              <row>
                <entry>Charset</entry>
                <entry>["]</entry>
              </row>
              <row>
                <entry>Host</entry>
                <entry>[localhost]</entry>
              </row>
              <row>
                <entry>Port</entry>
                <entry>[1433]</entry>
              </row>
              <row>
                <entry>Packet Size  or PktSize</entry>
                <entry>[8192] for SQLServer7/2000</entry>
              </row>
              <row>
                <entry>SrvName or Server or Server Na</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Server Type or ServerType or SVT</entry>
                <entry>["SQLSERVER6"]</entry>
              </row>
              <row>
                <entry>WorkstationId or Workstation Id</entry>
                <entry>["localhost]</entry>
              </row>
              <row>
                <entry>UNICODE</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>APPLICATION</entry>
                <entry>["opldotNET"]</entry>
              </row>
              <row>
                <entry>UseBrowseMode</entry>
                <entry>["false"] </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The following Keyword default values change for the SQLServer Provider :</para>
        <programlisting><![CDATA[
	UseBrowseMode=false - the SQLParser is used for parsing Select queries and getting the accurate information
	for following schema table columns (returned by IDataReader.GetSchemaTable).
	UseBrowseMode=true -  the "SET no_browsetable ON" comand is used with Select queries for getting the names
	and for accurate information for following schema table columns (returned by IDataReader.GetSchemaTable).
         Note that the MS SQLServer ADO.NET provider uses the "SET no_browsetable ON" mode.
	The property SVT or ServerType supports the following values:
	"SQLServer 7" or "SQLServer7" (TDS7 protocol is used)
	"SQLServer 2000" or "SQLServer2000" (TDS8 protocol is used)
	"SQLServer 6"  or "SQLServer 6.x"  or "SQLServer"  or "SQLServer6"(TDS4.2 protocol is used)
	Any another values (TDS4.2 protocol is used)
	Sample connection string:
		"SVT=SQLServer 2000;DATABASE=Northwind;Host=localhost;Port=1433UID=sa;PWD=;
	]]></programlisting>
      </section>
      <section xml:id="mt_dnetmconnstr_sybase">
        <title>Managed Sybase .NET Data Provider (OpenLink.Data.Sybase)</title>
        <para>The tables below provides a list of the Connect String Attributes for the Data Provider:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Connection String Keywords for the Sybase .Net Provider </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Keyword</entry>
                <entry>Default Value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Used ID or UID</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Password or PWD</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Initial Catalog or DATABASE</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Connect Timeout or Connection Timeout</entry>
                <entry>[15]</entry>
              </row>
              <row>
                <entry>Persist Security Info</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Connection Lifetime</entry>
                <entry>[0]</entry>
              </row>
              <row>
                <entry>Min Pool Size</entry>
                <entry>[0]</entry>
              </row>
              <row>
                <entry>Max Pool Size</entry>
                <entry>[100]</entry>
              </row>
              <row>
                <entry>Persist Security Info</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>Pooling</entry>
                <entry>[True]</entry>
              </row>
              <row>
                <entry>Charset</entry>
                <entry>["]</entry>
              </row>
              <row>
                <entry>Host</entry>
                <entry>[localhost]</entry>
              </row>
              <row>
                <entry>Port</entry>
                <entry>[4100]</entry>
              </row>
              <row>
                <entry>Packet Size  or PktSize</entry>
                <entry>[512]</entry>
              </row>
              <row>
                <entry>SrvName or Server or Server Na</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>Server Type or ServerType or SVT</entry>
                <entry>["SYBASE4"]</entry>
              </row>
              <row>
                <entry>WorkstationId or Workstation Id</entry>
                <entry>["localhost]</entry>
              </row>
              <row>
                <entry>UNICODE</entry>
                <entry>[False]</entry>
              </row>
              <row>
                <entry>APPLICATION</entry>
                <entry>["opldotNET"]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The following Keyword default values change for the SQLServer Provider :</para>
        <programlisting><![CDATA[
	The property SVT or ServerType supports the following values:
		"Sybase 10"  or "Sybase10" (TDS5 protocol is used)
		"Sybase 11"  or "Sybase11" (TDS5 protocol is used)
		"Sybase 12"  or "Sybase12"  or "Sybase12.x" (TDS5 protocol is used)
	Any another values (TDS4.2 protocol is used)
	Sample connection string:
		"SVT=Sybase 12;DATABASE=pubs2;Host=localhost;Port=4100;UID=sa;PWD=;
	]]></programlisting>
      </section>
      <section xml:id="mt_dnetuconnstr">
        <title>Unmanaged .NET Data Provider (OpenLink.Data.OdbcClient)</title>
        <para>The tables below provides a list of the Connect String Attributes for the Unmanaged (ODBC based) Data Provider:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Connection String Keywords</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Keyword</entry>
                <entry>Default Value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>DSN</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>UID</entry>
                <entry>[""]</entry>
              </row>
              <row>
                <entry>PWD</entry>
                <entry>[""]</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <programlisting><![CDATA[
   Sample connect string:
	- Oracle ODBC DSN
	   "DSN=Oracle;UID=scott;PWD=tiger"
	where 'Oracle' is the name of a valid ODBC DSN for connecting to an Oracle Database
   ]]></programlisting>
      </section>
    </section>
    <section xml:id="mt_dnetclasses">
      <title>OpenLink .NET Data Providers Class Implementation</title>
      <info>
        <keywordset>
          <keyword>.Net Provider</keyword>
          <keyword>Class Implementation</keyword>
        </keywordset>
      </info>
      <para> This section details the classes exposed by the OpenLink .NET Data Providers, which users must be familiar with in order to make effective use of the providers.</para>
      <para> Many of the OpenLink Generic Provider classes implement interfaces or inherit from the .NET Framework namespaces System.Data and System.Data.Common. A summary of the classes exposed by the provider is given below.</para>
      <para>The table only shows classes or interfaces inherited from System.Data or System.Data.Common. Some of the OpenLink.Data.GenericClient classes implement additional interfaces or inherit from a class belonging to a namespace other than System.Data or System.Data.Common. These details are not shown. For full details refer to the detailed documentation for the appropriate class in OpenLink.Data.GenericClient Namespace.</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Classes</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Classes</entry>
              <entry>Implements / inherits System.Data or System.Data.Common interface / class</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <link linkend="mt_cloplcommand">OPLCommand</link>
              </entry>
              <entry>IDbCommand</entry>
              <entry>Represents an SQL statement or stored procedure to execute against a database.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplcommandbuild">OPLCommandBuilder</link>
              </entry>
              <entry/>
              <entry>Automatically generates single-table commands used to reconcile changes made to a DataSet with the associated data source.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplconnect">OPLConnection</link>
              </entry>
              <entry>IDbConnection</entry>
              <entry>Represents an open connection to a data source.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_clopldataadapter">OPLDataAdapter</link>
              </entry>
              <entry>IDbDataAdapter, DbDataAdapter</entry>
              <entry>Represents a set of data commands and a database connection that are used to fill a DataSet and update a data source.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_clopldatareader">OPLDataReader</link>
              </entry>
              <entry>IDataReader, IDataRecord</entry>
              <entry>Provides a way of reading a forward-only stream of data rows from a data source.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplerror">OPLError</link>
              </entry>
              <entry/>
              <entry>Holds information about a warning or error returned by a data source.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplerrorcol">OPLErrorCollection</link>
              </entry>
              <entry/>
              <entry>Represents a collection of one or more OPLError objects that give detailed information about an OPLException.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplexcept">OPLErrorException</link>
              </entry>
              <entry/>
              <entry>The exception that is generated when a warning or error is returned by a data source or the Generic Provider.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplparam">OPLParameter</link>
              </entry>
              <entry>IDbDataParameter, IDataParameter</entry>
              <entry>Represents a parameter to an OPLCommand and optionally, its mapping to a DataSet column.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_cloplparamcol">OPLParameterCollection</link>
              </entry>
              <entry>IDataParameterCollection</entry>
              <entry>Represents a collection of parameters relevant to an OPLCommand as well as their respective mappings to columns in a DataSet.</entry>
            </row>
            <row>
              <entry><!-- <link linkend="mt_cloplperm">-->
OPLPermission<!-- </link> -->
</entry>
              <entry/>
              <entry>Enables the Generic Provider to ensure that a user has a security level adequate to access a data source.</entry>
            </row>
            <row>
              <entry><!-- <link linkend="mt_cloplpermattr">-->
OPLPermissionAttribute<!-- </link> -->
</entry>
              <entry/>
              <entry>Associates a security action with a custom security attribute.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_clopltran">OPLTransaction</link>
              </entry>
              <entry>IDbTransaction</entry>
              <entry>Represents a SQL transaction to be made at a data source.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Delegates</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Delegates</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><link linkend="mt_rUpdated">OPLRowUpdatedEventHandler</link>&gt;</entry>
              <entry>Represents a method that will handle the RowUpdated event of an OPLDataAdapter.</entry>
            </row>
            <row>
              <entry>
                <link linkend="mt_rUpdating">OPLRowUpdatingEventHandler</link>
              </entry>
              <entry>Represents a method that will handle the RowUpdating event of an OPLDataAdapter.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Enumerations</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Enumeration</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><!-- <link linkend="mt_clopldbtype">-->
OPLDbType<!-- </link> -->
&gt;</entry>
              <entry>Specifies the data type of a field, property or OPLParameter.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="mt_dnetnamespace">
      <title>OpenLink.Data Namespace</title>
      <info>
        <keywordset>
          <keyword>Namespace</keyword>
        </keywordset>
      </info>
      <para>All the public classes in the OpenLink.Data namespace are detailed in this section. Note that all of the OpenLink .Net Data Providers use the same common class names, thus the descriptions below are applicable to all enabling maximum re-use of code across Providers.</para>
      <para>
        <emphasis>IMPORTANT: Public class members inherited from a base class defined by the .NET Framework Class Library (FCL), or which implement an FCL defined interface method, are not described. For details of these inherited members, refer to the .NET FCL documentation for the base class or interface. Where an OpenLink class implements an ADO.NET interface and adds additional methods or properties, these extensions are documented.
   </emphasis>
      </para>
      <para>In the class descriptions which follow, all code extracts showing partial class definitions, method signatures etc. are in C#. Examples for other .NET languages are not shown.
   </para>
      <section xml:id="mt_cloplcommand">
        <title>OPLCommand</title>
        <para>Represents an SQL statement or stored procedure to execute against a database.</para>
        <programlisting><![CDATA[public class OPLCommand : Component, IDbCommand, ICloneable]]></programlisting>
        <section xml:id="mt_cloplcommandC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLCommand ();]]></programlisting>
          <para>Initializes a new instance of the OPLCommand class.</para>
          <programlisting><![CDATA[public OPLCommand (string cmdText);]]></programlisting>
          <para>Initializes a new instance of the OPLCommand class with the text of the query.</para>
          <programlisting><![CDATA[public OPLCommand (string cmdText, OPLConnection connection);]]></programlisting>
          <para>Initializes a new instance of the OPLCommand class with the text of the query and an OPLConnection object.</para>
          <programlisting><![CDATA[public OPLCommand (string cmdText, OPLConnection connection,OPLTransaction txn);]]></programlisting>
          <para>Initializes a new instance of the OPLCommand class with the text of the query, an OPLConnection object and an OPLTransaction object.</para>
        </section>
        <section xml:id="mt_cloplcommandP">
          <title>Properties</title>
          <section>
            <title>PassThrough</title>
            <programlisting><![CDATA[public bool PassThrough {get; set;}]]></programlisting>
            <para>Allows the command text to be passed to the data source without being parsed by the Generic Provider.</para>
          </section>
          <section>
            <title>Remarks</title>
            <para>The PassThrough property defaults to false. When pass-through is disabled, the Generic Provider parses command text associated with the OPLCommand and queries the data source for additional metadata on tables referenced in a select statement. The command parser in the Generic Provider is limited to the SQL grammar defined by ODBC. If you wish to pass native SQL to the data source you should enable pass-through; however this will have the following side-effects:</para>
            <simplelist type="vert">
              <member>Some of the metadata returned by OPLDataReader.GetSchemaTable may not be accurate, specifically the metadata resultset columns IsKeyColumn, BaseSchemaName, BaseCatalogName, BaseTableName.</member>
              <member>The command behavior setting CommandBehavior.KeyInfo will not append missing key columns to the end of a select list.</member>
              <member>OPLCommandBuilder may not work, depending on the select statement used.</member>
            </simplelist>
          </section>
        </section>
      </section>
      <section xml:id="mt_cloplcommandbuild">
        <title>OPLCommandBuilder</title>
        <para>Automatically generates single-table commands used to reconcile changes made to a DataSet with the associated data source.</para>
        <programlisting><![CDATA[public sealed class OPLCommandBuilder : Component]]></programlisting>
        <section xml:id="mt_cloplcommandbuildC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLCommandBuilder ();]]></programlisting>
          <para>Initializes a new instance of the OPLCommandBuilder class.</para>
          <programlisting><![CDATA[public OPLCommandBuilder (OPLDataAdapter adapter);]]></programlisting>
          <para>Initializes a new instance of the OPLCommandBuilder class with the associated OPLDataAdapter object.</para>
        </section>
        <section xml:id="mt_cloplcommandbuildM">
          <title>Methods</title>
          <programlisting><![CDATA[public static void DeriveParameters (OPLCommand command);]]></programlisting>
          <para>Retrieves parameter information from the stored procedure specified in the OPLCommand and populates the Parameters collection of the specified OPLCommand object.</para>
          <programlisting><![CDATA[protected override void Dispose (bool disposing);]]></programlisting>
          <para>Releases the resources used by the OPLCommandBuilder.</para>
          <programlisting><![CDATA[public OPLCommand GetDeleteCommand ();]]></programlisting>
          <para>Gets the automatically generated OPLCommand object required to perform deletions at the data source.</para>
          <programlisting><![CDATA[public OPLCommand GetInsertCommand ();]]></programlisting>
          <para>Gets the automatically generated OPLCommand object required to perform insertions at the data source.</para>
          <programlisting><![CDATA[public OPLCommand GetUpdateCommand ();]]></programlisting>
          <para>Gets the automatically generated OPLCommand object required to perform updates at the data source.</para>
          <programlisting><![CDATA[public void RefreshSchema ();]]></programlisting>
          <para>Refreshes the database schema information used to generate INSERT, UPDATE, or DELETE statements.</para>
        </section>
        <section xml:id="mt_cloplcommandbuildP">
          <title>Properties</title>
          <programlisting><![CDATA[public OPLDataAdapter DataAdapter {get; set;}]]></programlisting>
          <para>Gets or sets an OPLDataAdapter object for which this OPLCommandBuilder object will generate SQL statements.</para>
          <programlisting><![CDATA[public string QuotePrefix {get; set;}]]></programlisting>
          <para>Gets or sets the beginning character or characters to use when working with database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.</para>
          <programlisting><![CDATA[public string QuoteSuffix {get; set;}]]></programlisting>
          <para>Gets or sets the ending character or characters to use when working with database objects, (for example, tables or columns), whose names contain characters such as spaces or reserved tokens.</para>
        </section>
      </section>
      <section xml:id="mt_cloplconnect">
        <title>OPLConnect</title>
        <para>Represents an open connection to a data source.</para>
        <programlisting><![CDATA[public sealed class OPLConnection : Component, ICloneable, IDbConnection]]></programlisting>
        <section xml:id="mt_cloplconnectC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLConnection();]]></programlisting>
          <para>Initializes a new instance of the OPLConnect class.</para>
          <programlisting><![CDATA[public OPLConnection(string connectionString);]]></programlisting>
          <para>Initializes a new instance of the OPLConnection class with the specified connection string.</para>
        </section>
        <section xml:id="mt_cloplconnectM">
          <title>Methods</title>
          <programlisting><![CDATA[protected override void Dispose (bool disposing);]]></programlisting>
          <para>Releases the resources used by the OPLConnection.</para>
        </section>
        <section xml:id="mt_cloplconnectE">
          <title>Events</title>
          <programlisting><![CDATA[public event StateChangeEventHandler StateChange;]]></programlisting>
          <para>Occurs when the state of the connection changes.</para>
          <section>
            <title>Remarks</title>
            <para>The StateChange event is raised immediately after the State changes from Closed to Opened, or from Opened to Closed.</para>
            <programlisting><![CDATA[public event OPLInfoMessageEventHandler InfoMessage;]]></programlisting>
            <para>Returns warning messages from the DBMS.</para>
            <programlisting><![CDATA[public delegate void OPLInfoMessageEventHandler (object sender, OPLInfoMessageEventArgs e)]]></programlisting>
            <programlisting><![CDATA[class OPLInfoMessageEventArgs;]]></programlisting>
          </section>
        </section>
      </section>
      <section xml:id="mt_clopldataadapter">
        <title>OPLDataAdapter</title>
        <para>Represents a set of data commands and a database connection that are used to fill a DataSet and update a data source.</para>
        <section xml:id="mt_clopldataadapterC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLDataAdapter();]]></programlisting>
          <para>Initializes a new instance of the OPLDataAdapter class.</para>
          <programlisting><![CDATA[public OPLDataAdapter (OPLCommand selectCommand);]]></programlisting>
          <para>Initializes a new instance of the OPLDataAdapter class with the specified SQL SELECT statement.</para>
          <programlisting><![CDATA[public OPLDataAdapter (string selectCommandText, OPLConnection selectConnection);]]></programlisting>
          <para>Initializes a new instance of the OPLDataAdapter class with an SQL SELECT statement and an OPLConnection.</para>
          <programlisting><![CDATA[public OPLDataAdapter (string selectCommandText, string selectConnectionString);]]></programlisting>
          <para>Initializes a new instance of the OPLDataAdapter class with an SQL SELECT statement and a connection string.</para>
        </section>
        <section xml:id="mt_clopldatadapterM">
          <title>Methods</title>
          <programlisting><![CDATA[public event OPLRowUpdatedEventHandler RowUpdated;]]></programlisting>
          <para>Occurs during an Update operation after a command is executed against the data source.</para>
          <programlisting><![CDATA[public event OPLRowUpdatingEventHandler RowUpdating;]]></programlisting>
          <para>Occurs during an Update operation before a command is executed against the data source.</para>
        </section>
      </section>
      <section xml:id="mt_clopldatareader">
        <title>OPLDataReader</title>
        <para>Provides a way of reading a forward-only stream of data rows from a data source.</para>
        <programlisting><![CDATA[public sealed class OPLDataReader : MarshalByRefObject, IDataReader, IDataRecord, IDisposable, IEnumerable]]></programlisting>
      </section>

      <!-- HughW - Commented out as not implemented apparently <section xml:id="mt_clopldbtype"><title>OPLDbType</title>
	<para>Specifies the data type of a field, property, or OPLParameter.</para>
	<programlisting>public enum OPLDbType</programlisting>
	<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
	<title>Members</title>
	<tgroup align="char" charoff="50" char="." cols="3">
	<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
	<thead>
	<row>
		<entry>member Name</entry>
		<entry>Description</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry>BigInt</entry>>
		<entry>Signed 64-bit integer.</entry>
	</row>
	<row>
		<entry>Binary</entry>
		<entry>Fixed length binary data.</entry>
	</row>
	<row>
		<entry>Bit</entry>
		<entry>Single bit binary data.</entry>
	</row>
	<row>
		<entry>Char</entry>
		<entry>Fixed length character string.</entry>
	</row>
	<row>
		<entry>Date</entry>
		<entry>Date data comprising year, month and day values.</entry>
	</row>
	<row>
		<entry>DateTime</entry>
		<entry>Date/time data comprising year, month, day, hour, minute, second and millisecond values.</entry>
	</row>
	<row>
		<entry>Decimal</entry>
		<entry>Signed exact numeric value with precision p and scale s.</entry>
	</row>
	<row>
		<entry>Double</entry>
		<entry>Signed approximate numeric value, ranging from 5.0E-324 to 1.7E308 with 15 - 16 digits precision.</entry>
	</row>
	<row>
		<entry>Float (synonym for Double)</entry>
		<entry>Signed approximate numeric value, ranging from 5.0E-324 to 1.7E308 with 15 - 16 digits precision.</entry>
	</row>
	<row>
		<entry>Integer</entry>
		<entry>Signed 32-bit integer.</entry>
	</row>
	<row>
		<entry>LongNVarChar</entry>
		<entry>Variable length Unicode character string.</entry>
	</row>
	<row>
		<entry>LongVarBinary</entry>
		<entry>Variable length binary data.</entry>
	</row>
	<row>
		<entry>LongVarChar</entry>
		<entry>Variable length non-Unicode character string.</entry>
	</row>
	<row>
		<entry>NChar</entry>
		<entry>Fixed length Unicode character string.</entry>
	</row>
	<row>
		<entry>Numeric (synonym for Decimal)</entry>
		<entry>Signed exact numeric value with precision p and scale s.</entry>
	</row>
	<row>
		<entry>NVarChar</entry>
		<entry>Variable length Unicode character string.</entry>
	</row>
	<row>
		<entry>Real</entry>
		<entry>Signed approximate numeric value, ranging from 1.5E-45 to 3.4E38 with 7 digits precision.</entry>
	</row>
	<row>
		<entry>SmallInt</entry>
		<entry>Signed 16-bit integer.</entry>
	</row>
	<row>
		<entry>Time</entry>
		<entry>Time data comprising hour, minute and second values.</entry>
	</row>
	<row>
		<entry>TimeStamp</entry>
		<entry>Date/time data comprising year, month, day, hour, minute, second and millisecond values.</entry>
	</row>
	<row>
		<entry>TinyInt</entry>
		<entry>Signed 8-bit integer.</entry>
	</row>
	<row>
		<entry>VarBinary</entry>
		<entry>Variable length binary data.</entry>
	</row>
	<row>
		<entry>VarChar</entry>
		<entry>Variable length non-Unicode character string.</entry>
	</row>
	</tbody></tgroup></table>
	<para>An OPLParameters OPLDbType and DbType properties are linked. Setting the OPLDbType changes the DbType and vice-versa. When the parameter type is set using the OPLDbType property, the table below shows the corresponding value set for the DbType property.</para>
	<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
	<title></title>
	<tgroup align="char" charoff="50" char="." cols="3">
	<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
	<thead>
	<row>
		<entry>OPLDbtype</entry>
		<entry>DbType value set</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry>BigInt</entry>>
		<entry>Int64</entry>
	</row>
	<row>
		<entry>Binary</entry>
		<entry>Binary</entry>
	</row>
	<row>
		<entry>Bit</entry>
		<entry>Boolean</entry>
	</row>
	<row>
		<entry>Char</entry>
		<entry>AnsiStringFixedLength</entry>
	</row>
	<row>
		<entry>Date</entry>
		<entry>Date</entry>
	</row>
	<row>
		<entry>DateTime</entry>
		<entry>DateTime</entry>
	</row>
	<row>
		<entry>Decimal/Numeric</entry>
		<entry>Decimal</entry>
	</row>
	<row>
		<entry>Double/Float</entry>
		<entry>Double</entry>
	</row>
	<row>
		<entry>Integer</entry>
		<entry>Int32</entry>
	</row>
	<row>
		<entry>LongNVarChar</entry>
		<entry>String.</entry>
	</row>
	<row>
		<entry>LongVarBinary</entry>
		<entry>Binary</entry>
	</row>
	<row>
		<entry>LongVarChar</entry>
		<entry>AnsiString</entry>
	</row>
	<row>
		<entry>NChar</entry>
		<entry>StringFixedLength</entry>
	</row>
	<row>
		<entry>NVarChar</entry>
		<entry>String.</entry>
	</row>
	<row>
		<entry>Real</entry>
		<entry>Single</entry>
	</row>
	<row>
		<entry>SmallInt</entry>
		<entry>Int16</entry>
	</row>
	<row>
		<entry>Time</entry>
		<entry>Time</entry>
	</row>
	<row>
		<entry>TimeStamp</entry>
		<entry>DateTime</entry>
	</row>
	<row>
		<entry>TinyInt</entry>
		<entry>SByte</entry>
	</row>
	<row>
		<entry>VarBinary</entry>
		<entry>Binary</entry>
	</row>
	<row>
		<entry>VarChar</entry>
		<entry>AnsiString</entry>
	</row>
	</tbody></tgroup></table>
	<para>When the parameter type is set using the DbType property, the next table shows the corresponding value set for the OPLDbType property.</para>
	<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
	<title></title>
	<tgroup align="char" charoff="50" char="." cols="3">
	<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
	<thead>
	<row>
		<entry>DbType</entry>
		<entry>OPLDbType value set</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry>AnsiString</entry>>
		<entry>VarChar</entry>
	</row>
	<row>
		<entry>AnsiStringFixedLength</entry>
		<entry>Char</entry>
	</row>
	<row>
		<entry>Binary</entry>
		<entry>VarBinary</entry>
	</row>
	<row>
		<entry>Boolean</entry>
		<entry>Bit</entry>
	</row>
	<row>
		<entry>Date</entry>
		<entry>Date</entry>
	</row>
	<row>
		<entry>DateTime</entry>
		<entry>DateTime</entry>
	</row>
	<row>
		<entry>Time</entry>
		<entry>Time</entry>
	</row>
	<row>
		<entry>Decimal</entry>
		<entry>Numeric</entry>
	</row>
	<row>
		<entry>Double</entry>
		<entry>Double</entry>
	</row>
	<row>
		<entry>Int16</entry>
		<entry>SmallInt</entry>
	</row>
	<row>
		<entry>Int32</entry>
		<entry>Integer</entry>
	</row>
	<row>
		<entry>int64</entry>
		<entry>BigInt</entry>
	</row>
	<row>
		<entry>SByte</entry>
		<entry>TinyInt</entry>
	</row>
	<row>
		<entry>Single</entry>
		<entry>Real</entry>
	</row>
	<row>
		<entry>String</entry>
		<entry>NVarChar</entry>
	</row>
	<row>
		<entry>StringFixedLength</entry>
		<entry>NChar</entry>
	</row>
	</tbody></tgroup></table>
	<para>If a parameters type is not specified through either the DbType or OPLDbType property, the parameters type will be inferred from the .NET Framework type of the object referenced by the Value property. The following table lists the .NET Framework types for which this inference is performed and shows the OPLDbType inferred.</para>
	<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
	<title></title>
	<tgroup align="char" charoff="50" char="." cols="3">
	<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
	<thead>
	<row>
		<entry>.NET Framework Type</entry>
		<entry>Inferred OPLDbType</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry>System.Char</entry>>
		<entry>Char</entry>
	</row>
	<row>
		<entry>System.Char[]</entry>
		<entry>LongNVarChar</entry>
	</row>
	<row>
		<entry>System.Byte</entry>
		<entry>SmallInt</entry>
	</row>
	<row>
		<entry>System.Byte []</entry>
		<entry>LongVarBinary</entry>
	</row>
	<row>
		<entry>System.SByte</entry>
		<entry>TinyInt</entry>
	</row>
	<row>
		<entry>System.UInt16</entry>
		<entry>Integer</entry>
	</row>
	<row>
		<entry>System.UInt32</entry>
		<entry>BigInt</entry>
	</row>
	<row>
		<entry>System.Boolean</entry>
		<entry>Bit</entry>
	</row>
	<row>
		<entry>System.Int16</entry>
		<entry>SmallInt</entry>
	</row>
	<row>
		<entry>System.Int32</entry>
		<entry>Integer</entry>
	</row>
	<row>
		<entry>System.Int64</entry>
		<entry>BigInt</entry>
	</row>
	<row>
		<entry>System.Int16</entry>
		<entry>Real</entry>
	</row>
	<row>
		<entry>System.Double</entry>
		<entry>Double</entry>
	</row>
	<row>
		<entry>System.Decimal</entry>
		<entry>Decimal</entry>
	</row>
	<row>
		<entry>System.DateTime</entry>
		<entry>DateTime</entry>
	</row>
	<row>
		<entry>System.String</entry>
		<entry>NVarChar</entry>
	</row>
	<row>
		<entry>System.TimeSpan</entry>
		<entry>Time</entry>
	</row>
	</tbody></tgroup></table>
    </section>  -->
      <section xml:id="mt_cloplerror">
        <title>OPLError</title>
        <para>Holds information about a warning or error returned by a data source.</para>
        <programlisting><![CDATA[public sealed class OPLError]]></programlisting>
        <section xml:id="mt_cloplerrorR">
          <title>Remarks</title>
          <para>This class is created whenever an error occurs. Each instance of OPLError created is then managed by the OPLErrorCollection class, which in turn is created by the OPLException class.</para>
        </section>
        <section xml:id="mt_cloplerrorP">
          <title>Properties</title>
          <programlisting><![CDATA[public string Message {get;}]]></programlisting>
          <para>Gets a short description of the error.</para>
          <programlisting><![CDATA[public string SQLState {get;}]]></programlisting>
          <para>Gets the five character ODBC SQL state associated with the error.</para>
          <programlisting><![CDATA[public int NativeError {get;}]]></programlisting>
          <para>Gets the data source-specific error information.</para>
        </section>
      </section>
      <section xml:id="mt_cloplerrorcol">
        <title>OPLErrorCollection</title>
        <para>Represents a collection of one or more OPLError objects that give detailed information about an OPLException.</para>
        <programlisting><![CDATA[public sealed class OPLErrorCollection : ICollection]]></programlisting>
        <section xml:id="mt_cloplerrorcolR">
          <title>Remarks</title>
          <para>This class is created by OPLException to collect instances of the OPLError class. OPLErrorCollection always contains at least one instance of the OPLError class.</para>
        </section>
        <section xml:id="mt_cloplerrorcolM">
          <title>Methods</title>
          <programlisting><![CDATA[public IEnumerator GetEnumerator();]]></programlisting>
          <para>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</para>
        </section>
        <section xml:id="mt_cloplerrorcolP">
          <title>Properties</title>
          <programlisting><![CDATA[public OPLError this[int i] {get;}]]></programlisting>
          <para>Gets the error at the specified index. In C#, this property is the indexer for the OPLErrorCollection class.</para>
        </section>
      </section>
      <section xml:id="mt_cloplexcept">
        <title>OPLException</title>
        <para>The exception that is generated when a warning or error is returned by a data source or the Generic Provider.</para>
        <programlisting><![CDATA[public sealed class OPLException : SystemException]]></programlisting>
        <section xml:id="mt_cloplexceptP">
          <title>Properties</title>
          <programlisting><![CDATA[public OPLErrorCollection Errors {get;}]]></programlisting>
          <para>Gets a collection of one or more OPLError objects that give detailed information about the exception.</para>
          <programlisting><![CDATA[public override string Message {get;}]]></programlisting>
          <para>Gets the text describing the error.</para>
        </section>
      </section>
      <section xml:id="mt_cloplparam">
        <title>OPLParameter</title>
        <para>Represents a parameter to an OPLCommand and optionally, its mapping to a DataSet column.</para>
        <programlisting><![CDATA[public class OPLParameter : MarshalByRefObject, IDbDataParameter, IDataParameter, ICloneable]]></programlisting>
        <section xml:id="mt_cloplparamC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLParameter();]]></programlisting>
          <para>Initializes a new instance of the OPLParameter class.</para>
          <programlisting><![CDATA[public OPLParameter(string parameterName, object value);]]></programlisting>
          <para>Initializes a new instance of the OPLParameter class with the parameter name and a value of the new OPLParameter object.</para>
          <programlisting><![CDATA[public OPLParameter(string parameterName, OPLDbType type);]]></programlisting>
          <para>Initializes a new instance of the OPLParameter class with the parameter name and the data type.</para>
          <programlisting><![CDATA[public OPLParameter(string parameterName, OPLDbType type, int size);]]></programlisting>
          <para>Initializes a new instance of the OPLParameter class with the parameter name, the OPLDbType and the size.</para>
          <programlisting><![CDATA[public OPLParameter(string parameterName, OPLDbType type, int size, string sourceColumn);]]></programlisting>
          <para>Initializes a new instance of the OPLParameter class with the parameter name, the OPLDbType, the size, and the source column name.</para>
          <programlisting><![CDATA[public OPLParameter(string parameterName, OPLDbType type, int size, ParameterDirection direction, Boolean isNullable, Byte precision, Byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);]]></programlisting>
          <para>Initializes a new instance of the OPLParameter class with the parameter name, the type of the parameter, the size of the parameter, a ParameterDirection, whether the parameter is nullable, the precision of the parameter, the scale of the parameter, the source column, a DataRowVersion to use, and the value of the parameter.</para>
        </section>
        <section xml:id="mt_cloplparamM">
          <title>Methods</title>
          <programlisting><![CDATA[public override string ToString ();]]></programlisting>
          <para>Gets a string containing the ParameterName.</para>
        </section>
        <section xml:id="mt_cloplparamP">
          <title>Properties</title>
          <programlisting><![CDATA[public OPLDbType OPLDbType {get; set;}]]></programlisting>
          <para>Gets or sets the OPLDbType of the parameter.</para>
          <section>
            <title>Remarks</title>
            <para>The OPLDbType and DbType are linked. Therefore, setting the DbType changes the OPLType to a supporting OPLDbType. For a list of the supported data types, see the appropriate OPLDbType member.</para>
          </section>
        </section>
      </section>
      <section xml:id="mt_cloplparamcol">
        <title>OPLParameterCollection</title>
        <para>Represents a collection of parameters relevant to an OPLCommand as well as their respective mappings to columns in a DataSet.</para>
        <programlisting><![CDATA[public class OPLParameterCollection : MarshalByRefObject, IDataParameterCollection, ICollection, IEnumerable, IList]]></programlisting>
        <section xml:id="mt_cloplparamcolM">
          <title>Methods</title>
          <programlisting><![CDATA[public int Add (OPLParameter value);]]></programlisting>
          <para>Adds the specified OPLParameter to the OPLParameterCollection</para>
          <programlisting><![CDATA[public int Add (string parameterName, object value);]]></programlisting>
          <para>Adds an OPLParameter to the OPLParameterCollection given the parameter name and value.</para>
          <programlisting><![CDATA[public int Add (string parameterName, OPLDbType dbType);]]></programlisting>
          <para>Adds an OPLParameter to the OPLParameterCollection given the parameter name and data type.</para>
          <programlisting><![CDATA[public int Add (string parameterName, OPLDbType dbType, int size);]]></programlisting>
          <para>Adds an OPLParameter to the OPLParameterCollection given the the parameter name, data type, and column length.</para>
          <programlisting><![CDATA[public int Add (string parameterName, OPLDbType dbType, int size, string sourceColumn);]]></programlisting>
          <para>Adds an OPLParameter to the OPLParameterCollection given the parameter name, data type, column length, and source column name.</para>
        </section>
        <section xml:id="mt_cloplparamcolP">
          <title>Properties</title>
          <programlisting><![CDATA[public OPLParameter this[int index] {get; set;}]]></programlisting>
          <para>Gets or sets the OPLParameter at the specified index</para>
          <programlisting><![CDATA[public OPLParameter this[string parameterName] {get; set;}]]></programlisting>
          <para>Gets or sets the OPLParameter with the specified name.</para>
        </section>
      </section>

      <!--
   <section xml:id="mt_cloplperm"><title>OPLPermission</title>
	<para>Enables the Generic Provider to ensure that a user has a security level adequate to access a data source.</para>
	<programlisting>public sealed class OPLPermission : CodeAccessPermission, IUnrestrictedPermission</programlisting>
	<section><title>Remarks</title>
	<para>TBD ...</para>
	</section>
      <section xml:id="mt_cloplpermC"><title>Constructors</title>
	<programlisting>public OPLPermission ();</programlisting>
	<para>Initializes a new instance of the OPLPermission class.</para>
	<programlisting>public OPLPermission (PermissionState state);</programlisting>
	<para>Initializes a new instance of the OPLPermission class with one of the PermissionState values.</para>
      </section>
      <section xml:id="mt_cloplpermM"><title>Methods</title>
	<programlisting>public override IPermission Copy ();</programlisting>
	<para>TBD ...</para>
	<programlisting>public override void FromXml (SecurityElement securityElement);</programlisting>
	<para>TBD ...</para>
	<programlisting>public override IPermission Intersect (IPermission target);</programlisting>
	<para>TBD ...</para>
	<programlisting>public override bool IsSubsetOf (IPermission target);</programlisting>
	<para>TBD ...</para>
	<programlisting>public bool IsUnrestricted ();</programlisting>
	<para>TBD ...</para>
	<programlisting>public override SecurityElement ToXml ();</programlisting>
	<para>TBD ...</para>
      </section>
   </section>
   <section xml:id="mt_cloplpermattr"><title>OPLPermissionAttribute</title>
	<para>Associates a security action with a custom security attribute.</para>
	<programlisting>public sealed class OPLPermissionAttribute : CodeAccessSecurityAttribute</programlisting>
	<section><title>Remarks</title>
	<para>TBD ...</para>
	</section>
      <section xml:id="mt_cloplpermC_01"><title>Constructors</title>
	<programlisting>public OPLPermissionAttribute (SecurityAction action);</programlisting>
	<para>Initializes a new instance of the OPLPermissionAttribute class with one of the SecurityAction values.</para>
      </section>
      <section xml:id="mt_cloplpermattrM"><title>Methods</title>
	<programlisting>public override IPermission CreatePermission ();</programlisting>
	<para>Returns an OPLPermission object that is configured according to the attribute properties.</para>
      </section>
   </section>
   -->
      <section xml:id="mt_rUpdated">
        <title>OPLRowUpdatedEventArgs</title>
        <para>Provides data for the OPLDataAdapter.RowUpdated event.</para>
        <section xml:id="mt_rUpdatedC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);]]></programlisting>
          <para>Initializes a new instance of the OPLRowUpdatedEventArgs class.</para>
        </section>
        <section xml:id="mt_rUpdatedM">
          <title>properties</title>
          <programlisting><![CDATA[public new OPLCommand Command {get;}]]></programlisting>
          <para>Gets the OPLCommand executed when Update is called.</para>
        </section>
      </section>
      <section xml:id="mt_rUpdatedHan">
        <title>OPLRowUpdatedEventHandler</title>
        <para>Represents a method that will handle the RowUpdated event of an OPLDataAdapter.</para>
        <programlisting><![CDATA[public delegate void OPLRowUpdatedEventHandler(object sender, OPLRowUpdatedEventArgs e);]]></programlisting>
      </section>
      <section xml:id="mt_rUpdating">
        <title>OPLRowUpdatingEventArgs</title>
        <para>Provides data for the OPLDataAdapter.RowUpdating event.</para>
        <section xml:id="mt_rUpdatingC">
          <title>Constructors</title>
          <programlisting><![CDATA[public OPLRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);]]></programlisting>
          <para>Initializes a new instance of the OPLRowUpdatingEventArgs class.</para>
        </section>
        <section xml:id="mt_rUpdatingM">
          <title>properties</title>
          <programlisting><![CDATA[public new OPLCommand Command {get; set;}]]></programlisting>
          <para>Gets or sets the OPLCommand to execute when Update is called.</para>
        </section>
      </section>
      <section xml:id="mt_rUpdatingHan">
        <title>OPLRowUpdatingEventHandler</title>
        <para>Represents a method that will handle the RowUpdating event of an OPLDataAdapter.</para>
        <programlisting><![CDATA[public delegate void OPLRowUpdatingEventHandler(object sender, OPLRowUpdatingEventArgs e);]]></programlisting>
      </section>
      <section xml:id="mt_clopltran">
        <title>OPLTransaction</title>
        <para>Represents an SQL transaction to be made at a data source.</para>
        <programlisting><![CDATA[public sealed class OPLTransaction : MarshalByRefObject, IDbTransaction, IDisposable]]></programlisting>
      </section>
    </section>
    <section xml:id="mt_dnetissues">
      <title>Known Issues</title>
      <info>
        <keywordset>
          <keyword>.Net Issues</keyword>
          <keyword>Know Issues</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_dnetunsign">
        <title>Unsigned Type Handling</title>
        <section xml:id="mt_dnetunsignunman">
          <title>Unmanaged ODBC Provider</title>
          <para>The provider assumes that all integer data returned by an ODBC driver is signed. The provider only examines the ODBC SQL
   type of the data to ascertain its type. But, the ODBC SQL type gives no indication of whether the data is signed or unsigned.
   The ODBC to .NET type mappings used internally for fetched data assume that all data is signed. There is the potential for overflow
   errors when fetching unsigned integer data, because the .NET types to which integer data is mapped are all signed. However, across the
   range of databases currently supported by OpenLink, this problem only manifests itself in one instance  with the SQL Server TinyInt type.
   This is the only native unsigned type supported across the databases covered by OpenLink. However, if the ODBC provider is to support
   third party ODBC drivers, more databases could expose this fault.</para>
          <para>The SQL Server TinyInt type has a range of 0 .. 255. It is returned by the provider as a .NET System.SByte type which has a range of
   127 .. 128. At present, TinyInt values over 128 will not be returned correctly by the provider.</para>
        </section>
        <section xml:id="mt_dnetunsignman">
          <title>Managed Providers</title>
          <para>The same general problem exists in the GenericClient managed provider. However, the provider handles SQL_TINYINT data as a special
   case, so the problem with the SQL Server TinyInt type does not arise. If the provider detects data fetched using the OpenLink CTYPE_UNS8
   transport type, it changes the mapping for SQL_TINYINT from System.SByte to System.Byte. Any other type of unsigned integer data will not
   be handled correctly, but at present this does not arise as TinyInt is the only unsigned native DBMS type the provider encounters across
   our currently supported agents. </para>
        </section>
      </section>
      <section xml:id="mt_dnettimestamp">
        <title>Timestamp Precision</title>
        <para>Both the managed and unmanaged providers map the ODBC SQL_TYPE_TIMESTAMP type to the .NET DateTime type. The .NET DateTime type
   stores times with millisecond precision, whereas an ODBC SQL_C_TIMESTAMP struct can hold seconds accurate to nanoseconds. A loss of
   precision will result when fetching timestamp data from databases which hold fractional second data to greater than millisecond precision.
   The corresponding DateTime values returned to an application will be rounded to the nearest millisecond.</para>
      </section>
    </section>
    <section xml:id="mt_dnettest">
      <title>.Net Provider Test Program</title>
      <info>
        <keywordset>
          <keyword>.Net Test</keyword>
          <keyword>.NET Demo</keyword>
        </keywordset>
      </info>
      <para>A simple .Net interactive SQL program is provided for enabling a test connection to be made with the UDA Managed and/or Unmanaged .Net Data Providers, as indicated in the screen shots below:</para>
      <figure xml:id="mt_dnetsamp1">
        <title>Managed .Net Data Provider test connection</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="dnetsamp1.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The connect strings for the Managed .Net Providers (GenericClient, MS SQLServer and Sybase) are similar with the 'Port' attribute designating the location of the Service to which is connection will band made. The Unmanaged OdbcClient provider differs as indicated below:</para>
      <figure xml:id="mt_dnetsampl2">
        <title>Unmanaged .Net Data Provider test connection</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="dnetsamp2.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
      <orderedlist>
        <listitem>
          <para>Select the 
          <emphasis>radio</emphasis>
           button of the .Net Provider you want to test.</para>
        </listitem>
        <listitem>
          <para>Enter the 
          <emphasis>connect string attributes</emphasis>
           of the Database Server to which the connection is to be made.</para>
        </listitem>
        <listitem>
          <para>Click the 
          <emphasis>connect </emphasis>
          button to make the Database connection.</para>
        </listitem>
        <listitem>
          <para>Enter the 
          <emphasis>SQL query</emphasis>
           you wish to run in the text window provided and click the 
          <emphasis>Execute Query</emphasis>
           button to execute.</para>
        </listitem>
        <listitem>
          <para>Once executed the result set will be displayed in the result set pane as indicated in screen shot below:</para>
        </listitem>
      </orderedlist>
      <figure xml:id="mt_dnetsampl3">
        <title/>
        <mediaobject>
          <imageobject>
            <imagedata fileref="dnetsamp3.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <!-- 
  $Id: features_dotnet.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_features_dotnet">
      <info>
        <title>New Features</title>
        <keywordset>
          <keyword>.Net New Features</keyword>
          <keyword>Features</keyword>
          <keyword>Database support; Oracle; SQL Server; DB2; Informix; Sybase; Progress</keyword>
        </keywordset>
      </info>
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>.Net Data Providers</title>
            <para>A suite of  Managed  .Net Data Providers built with a thin generic .Net client  classes for communicating with any of our supported Database agents on the Database Server, as well as a 100% Managed TDS based .Net Provider for connectivity to Microsoft and Sybase SQLServer Database eliminating the need for any software installation on the Database Server machine. An Umanaged .Net ODBC Provider is also available, which makes use of the OpenLink built in Cursor Library to provide a greater level of .Net support when connecting via an ODBC Datasource.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Unicode Driver support</title>
            <para>Database agents support the latest releases of all supported database engines this includes:
<orderedlist><listitem><para>Oracle 8i &amp; 9i</para></listitem><listitem><para>Microsoft SQL Server 2000</para></listitem><listitem><para>DB/2 v7</para></listitem><listitem><para>ODBC Agent</para></listitem><listitem><para>JDBC Agent</para></listitem><listitem><para>Informix 9</para></listitem><listitem><para>Sybase Adaptive Server 12.5</para></listitem><listitem><para>Progress 9 (SQL-92)</para></listitem></orderedlist>
</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Significant SQL Server and SYBASE Driver Enhancements</title>
            <para>Our Drivers are now built to communicate directly with Microsoft SQL Server and SYBASE ASE using the TDS protocol (the native wire protocol for both database servers). This also implies that no additional software is required post installation in order for our ODBC Drivers to communicate with these Drivers (this applies to the Single Tier format Drivers only). The use of TDS has also enabled us to double the performance of both our Single Tier and Multi-Tier Drivers for these databases.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Array Optimisations on Select Queries</title>
            <para>All drivers now support the SQLSetStmtAttr(SQL_ARRAY_SIZE) call for batch select statements, providing improved performance when re-execute select statements with bound paramters.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Deferred Fetching</title>
            <para>The Release 4 OpenLink driver family brings marked communications 
layer improvements. Central to these are improved implementation of the 
<computeroutput>SQLGetData</computeroutput> and <computeroutput>SQLPutData</computeroutput>
ODBC function calls.</para>
          </formalpara>
          <formalpara>
            <title>Wholesale vs. Piecemeal Data Transfer</title>
            <para>In previous releases of the drivers, parameter data at query execution 
was assembled in the OpenLink driver's client component and transferred to its 
server component in a single network hop. (The client and server components 
apply to both the Single- and Multi-Tier drivers; they refer to different layers within 
the driver entity.) Similarly, when fetching from a "long", or large binary data 
column, data was transferred from the driver's server component to the client 
component in a single network transfer. The only way data could manipulated in a 
piecemeal fashion, was within the ODBC application from the driver's client 
component (client side only).</para>
          </formalpara>
          <para>The Release 4 driver family now allow transferring parameter data 
in parts over the network between the client and server driver components. Once 
transferred, the fragmented column data are re-pieced together in their entirety 
within the client and server portions of the driver.</para>
          <formalpara>
            <title>Deferred Fetching</title>
            <para>When fetching, data from columns with "long" data are only transferred 
between the server and client components if one of the following applies to 
that column:</para>
          </formalpara>
          <simplelist type="vert">
            <member>It has been "bound" by the application via the SQLBindCol API call</member>
            <member>It has been retrieved via the SQLGetData API call</member>
          </simplelist>
          <para>This mechanism is referred to as deferred fetching. In this method, 
as "long" column data is not reassembled within the OpenLink ODBC client itself 
(rather, within the application), driver memory overhead incurred is dramatically 
reduced. Deferred fetching applies to the following "long" database column types:</para>
          <variablelist>
            <varlistentry>
              <term>ODBC agent</term>
              <listitem>
                <para>SQL_LONGVARCHAR</para>
                <para>SQL_LONGVARBINARY</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>DB/2 agent</term>
              <listitem>
                <para>SQL_BLOB</para>
                <para>SQL_CLOB</para>
                <para>SQL_DBCLOB</para>
                <para>If the long data compatibility option has been specified in the DB2 database</para>
                <para>SQL_LONGVARCHAR</para>
                <para>SQL_LONGVARBINARY</para>
                <para>SQL_LONGVARGRAPHIC</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Oracle agent</term>
              <listitem>
                <para>SQLT_BLOB</para>
                <para>SQLT_CLOB</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Sybase agent</term>
              <listitem>
                <para>CS_IMAGE_TYPE</para>
                <para>CS_TEXT_TYPE</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>However, if a table contains a column defined as one of these 
"long" types, but the actual data stored in the column only fills a small 
proportion of the available space, deferred fetching is of no benefit.  In 
these cases, performance may be improved by switching off the deferred 
fetching mechanism using the control in the OpenLink Generic Client data 
source setup dialog.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <!--
  $Id: oledb.xml,v 1.2.4.1 2005/09/09 16:39:48 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_oledb">
    <title>OpenLink OLE-DB Provider</title>
    <info>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>OLE-DB</keyword>
        <keyword>OLE-DB Client</keyword>
        <keyword>OLEDB</keyword>
        <keyword>OLEDB Provider</keyword>
        <keyword>ODBC Bridge</keyword>
        <keyword>Cursor</keyword>
      </keywordset>
      <abstract>
        <para>The OpenLink ODBC Provider for OLEDB is delivered as an OLEDB - ODBC
  bridge.  It utilizes ODBC data sources to connect to databases, much like
  the Microsoft ODBC Provider; so you will require a working ODBC installation
  first.</para>
        <para>The OpenLink Provider also requires that the Microsoft Data Access
  Components have been installed.  To gain any functionality with .Net you
  will require MDAC 2.7 RTM (2.70.7713.4) or later.  This particular version
  of the MDAC is included with Visual Studio .Net and with the .Net Framework
  SDK.  Alternatively it can be downloaded from
  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.microsoft.com/data">www.microsoft.com/data</link>.
  Releases prior to 2.70.7713.4, specifically MDAC 2.7 included in the .Net SDK
  Beta 2, will not allow non-Microsoft OLE DB providers to work with the .Net
  Data Provider for OLE DB.</para>
        <para>Although not completely necessary if you are using a newer
  OpenLink installer, before installing this provider, any previous
  release of the driver should be deinstalled fully. If a full
  deinstall using Install Shield is not performed, the old driver
  should be unregistered using the regsvr32 utility as follows:
    <programlisting><![CDATA[regsvr32 /u oploleod.dll]]></programlisting></para>
      </abstract>
    </info>
    <section xml:id="mt_oledbtest">
      <title>Testing an OLEDB Connection</title>
      <info>
        <keywordset>
          <keyword>Testing OLEDB</keyword>
          <keyword>OLEDB</keyword>
        </keywordset>
      </info>
      <para>The connection can be tested using the sample application, "Rowset
    Viewer" as follows:</para>
      <orderedlist>
        <listitem>
          <para>Select 
          <emphasis>Full Connect</emphasis>
           from the File menu</para>
        </listitem>
        <listitem>
          <para>Select 
          <emphasis>OpenLink ODBC Provider</emphasis>
           for the connection provider</para>
        </listitem>
        <listitem>
          <para>Choose an ODBC 
          <emphasis>Datasource</emphasis>
           either by typing
      the name directly or using the 
          <emphasis>"..."</emphasis>
           button and
      selecting 
          <emphasis>Enumerator</emphasis>
           from the submenu that appears in
      place of the button.  In the new dialog that appears choose "
          <emphasis>OpenLink
      ODBC Data Source Enumerator</emphasis>
          " as the data source enumerator and
      click 
          <emphasis>Connect</emphasis>
          .  A list of ODBC data sources will appear, from
      which you can choose the one you want and click 
          <emphasis>OK</emphasis>

      to confirm.</para>
        </listitem>
        <listitem>
          <para>Enter the 
          <emphasis>UserID</emphasis>
           and 
          <emphasis>Password</emphasis>

      and click on 
          <emphasis>OK</emphasis>
          to connect.</para>
        </listitem>
        <listitem>
          <para>Once connected an "Command" subwindow will appears, into which you
      can submit SQL for test querying on the data source.</para>
        </listitem>
      </orderedlist>
    </section>
    <section xml:id="mt_oldedbdebug">
      <title>Call Tracing</title>
      <info>
        <keywordset>
          <keyword>OLEDB Tracing</keyword>
          <keyword>Tracing</keyword>
        </keywordset>
      </info>
      <para>To turn on call tracing and enable logging to a file, use the Registry
    Editor (regedit or regedt32) to enter a fully qualified file name in the
    registry entry:</para>
      <programlisting><![CDATA[HKEY_LOCAL_MACHINE\SOFTWARE\OpenLink Software\OpenLink OLE DB Provider\DebugFile]]></programlisting>
      <para>To turn off call tracing simply leave this entry blank.  A separate
    log file is opened for each process which uses the provider.  Each file
    opened is named using the file base name specified in the DebugFile entry
    above with a three digit process ID suffix.</para>
    </section>
    <section xml:id="mt_oledbconinfo">
      <title>Provider Specific Connection Information</title>
      <info>
        <keywordset>
          <keyword>Provider Information</keyword>
          <keyword>OLEDB Provider</keyword>
        </keywordset>
      </info>
      <para>OLE DB predefines a number of property sets and the properties in
    them.  The <emphasis>Extended Properties</emphasis> property in the
    Initialization property group provides a means of supplying provider-specific
    extended connection information.  The OpenLink provider supports extended
    properties to control:</para>
      <simplelist type="vert">
        <member>ODBC Cursor Library usage</member>
        <member>whether bookmarks are enabled by default on rowsets</member>
      </simplelist>
      <para>There are three ways to enter extended properties:</para>
      <simplelist type="vert">
        <member>Through a prompting interface supplied by the consumer application.</member>
        <member>Initialise a Data Source object through a connection string.</member>
        <member>Explicitly set the DBPROP_INIT_PROVIDERSTRING property in the consumer application code.</member>
      </simplelist>
      <section xml:id="mt_consumerprompting">
        <title>Using a Consumer Supplied Prompting Interface</title>
        <para>The OpenLink provider does not display a prompting interface of its
      own for entering OLE DB specific connection information.  It relies instead
      upon the application supplying it.</para>
        <para>OLE DB provides several core components, one of which is the Data
      Link component.  The Data Link component provides a default prompting
      interface and is used by numerous Microsoft applications.  It typically
      includes a page displayed by the All tab, which allows users to set
      values for all the Initialization properties supported by an OLE DB
      provider.  The Extended Properties property can be set on this page.
      For the OpenLink provider, you should enter key-value pairs for any
      supported extended properties you wish to set, such as:</para>
        <programlisting><![CDATA[Cursors=Driver]]></programlisting>
      </section>
      <section xml:id="mt_oledbuseconnstring">
        <title>Using a Connection String</title>
        <para>The connection string is used to contain connection specific
	  details as semi-colon delimited key=value pairs so that the Broker/Agent
	  facilitating the connection can chose the correct database and method.
	  The details provided on various setup panels form the connect string
	  automatically upon use.  Applications can use hand made connection
	  strings to avoid DSN configurations or prompting during exection.  The
	  parameters that can be used are as follows:</para>
        <para>The connection string should contain a key-value pair for the
      Extended Properties keyword, such as:</para>
        <simplelist type="vert">
          <member>PROVIDER=OpenLinkODBC</member>
          <member>DRIVER={OpenLink Generic 32 Bit driver v4.0}</member>
          <member>HOST=BrokerHostNameOrIP</member>
          <member>PORT=BrokerListenPort</member>
          <member>SVT=DBMSType/Provider</member>
          <member>DATABASE=myDatabaseName</member>
          <member>UID=myUsername</member>
          <member>PWD=myPassword</member>
          <member>PROTOCOL=TCP/IP</member>
          <member>FBS=FetchBufferSize (Rows 1-99)</member>
          <member>DLF=DeferLongFetch [y|n]</member>
          <member>OPTIONS=opts</member>
          <member>READONLY=[y|n]</member>
          <member>DSN=myDSNname</member>
        </simplelist>
        <programlisting><![CDATA[ ;Extended Properties=Cursors=ODBC; ]]></programlisting>
        <para>Which is used for setting the cursor mode and/or bookmarking.</para>
      </section>
      <section xml:id="mt_oldedbuseinitprop">
        <title>Using The DBPROP_INIT_PROVIDERSTRING Property</title>
        <para>Applications can set this initialization property directly.</para>
      </section>
    </section>
    <section xml:id="mt_oledbctrlodbcursor">
      <title>Controlling ODBC Cursor Library Usage</title>
      <info>
        <keywordset>
          <keyword>ODBC Cursor</keyword>
          <keyword>Cursor library</keyword>
        </keywordset>
      </info>
      <para>The OpenLink ODBC Provider requires that the underlying ODBC driver
    supports some form of scrollable cursor.  In order to support OLE DB rowsets,
    the minimum scrolling functionality requirements include:</para>
      <simplelist type="vert">
        <member>bookmark support </member>
        <member>absolute cursor positioning </member>
        <member>backwards scrolling </member>
      </simplelist>
      <para>Keyset driven and static cursors both support this functionality.  All
    OpenLink ODBC drivers support these cursor models.  However, if the OpenLink
    ODBC provider is to be used with a third party driver, either the driver
    must support one of these cursor types natively, or the Microsoft ODBC
    Cursor Library must be used.  The latter only supports static scrollable
    cursors, but provides sufficient functionality to allow third party drivers
    to be used with the OpenLink provider.  When using an OpenLink ODBC driver,
    it is preferable not to use the Microsoft Cursor Library. </para>
      <para>To control how the OpenLink Provider uses the ODBC Cursor Library,
    the provider supports the provider specific keyword Cursors in the
    Extended Properties property string.  The keyword can be set to one of
    three values:</para>
      <simplelist type="vert">
        <member>ODBC</member>
        <member>Driver</member>
        <member>IfNeeded</member>
      </simplelist>
      <para>The meaning of each of these values is analogous to their ODBC
    counterpart SQL_CUR_USE_xxx.  The default setting is Cursors=IfNeeded.</para>
      <para>The table below lists the required Cursors setting for various
    ODBC drivers when used with the OpenLink ODBC Provider.</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Features Comparison</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>ODBC Driver</entry>
              <entry>Cursor</entry>
              <entry>Comments</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>All OpenLink ODBC drivers</entry>
              <entry>Driver or IfNeeded (default)</entry>
              <entry>The native scrollable cursor support in the OpenLink drivers provides the necessary functionality</entry>
            </row>
            <row>
              <entry>Native Microsoft SQL Server driver</entry>
              <entry>ODBC</entry>
              <entry>The native scrollable cursor support is inadequate.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="mt_oledbdefbmk">
      <title>Controlling the Default Bookmark Setting for Rowsets</title>
      <info>
        <keywordset>
          <keyword>ODBC Bookmark</keyword>
          <keyword>Bookmark</keyword>
          <keyword>Cursor</keyword>
        </keywordset>
      </info>
      <para>The extended property keyword BookmarkDefault controls whether
     rowsets are created with or without a bookmark column by default.
     OLE DB does not specify what the default behaviour should be.  The OpenLink
     provider includes a bookmark column by default.  Normally it should not be
     necessary to change this setting.  To explicitly turn bookmarks on or off,
     use an entry of the form: BookmarkDefault=On|Off. </para>
    </section>
    <section xml:id="mt_oledbknownissuse">
      <title>Known Issues</title>
      <info>
        <keywordset>
          <keyword>OLEDB Known Issues</keyword>
          <keyword>Issues</keyword>
        </keywordset>
      </info>
      <para>These are the known issues that apply to the OpenLink OLEDB provider as of
     September 2005:</para>
      <section xml:id="mt_oledbnigen">
        <title>General Issues</title>
        <itemizedlist>
          <listitem>
            <para>The OpenLink ODBC Provider does not allow a consumer to specify
       the type of server-side cursors used internally.  ADO consumers, for
       instance Visual Basic 6 and Visual Interdev 6, should use client-side cursors.</para>
          </listitem>
          <listitem>
            <para>Batched commands are not supported.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="mt_oledbdotnet">
        <title>.Net</title>
        <itemizedlist>
          <listitem>
            <para>Automatic generation of the DeleteCommand, InsertCommand and
       UpdateCommand properties of a DataAdapter by a CommandBuilder is not
       supported.</para>
          </listitem>
          <listitem>
            <para>Parameters must be bound in the order they occur in a command.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="mt_oledbvi6">
        <title>Visual Interdev 6</title>
        <para>Visual Interdev uses the username you specify at connect time
    as the owner qualifier when referring to schema objects.  If the target
    database uses case-sensitive qualifiers, the case of the username you
    specify when connecting must match the case of the owner qualifier of schema
    objects belonging to that user.  For instance, if using the Oracle sample user
    SCOTT, connect as SCOTT not scott.  If the incorrect case is used,
    Visual Interdev may fail to retrieve schema information.  One manifestation
    of this problem is that the Query Builder may not list the columns
    belonging to a table.</para>
      </section>
      <section xml:id="mt_oledbvb6ado">
        <title>Visual Basic 6 and ADO</title>
        <para>When specifying the SQL for the Recordsource property in an ADO Data
    Control (ADO DC), you must quote the table name.  If you do not, VB
    converts the SQL to lowercase and then quotes the table name when
    attempting an update.  e.g. If you enter select * from emp, when
    attempting an update, this becomes update emp.  Databases which
    support case-sensitive schema object names, e.g. Oracle, will then either
    reject this SQL, complaining that the table doesnt exist, or reference
    the wrong table.  To avoid this problem, enter the query as select * from EMP. </para>
      </section>
      <section xml:id="mt_oledbsqlsrvdts">
        <title>SQL Server Data Transformation Services</title>
        <para>The provider implements interface IRowsetFastLoad.  This is an
    interface specific to the SQL Server OLE DB Provider and is required by
    SQL Server DTS, even on third party OLE DB providers.  Export of tables
    from SQL Server to Oracle using DTS is possible.  </para>
        <para>The OpenLink OLE DB provider uses a scrollable cursor to support
    scrolling over rowsets.  OpenLink scrollable cursors require a unique
    row identifer (primary key, rowid etc.) to act as a key column.  If
    the table(s) used to populate the OLE DB rowset do not have a primary key
    or similar then the OpenLink OLEDB provider can still provide a rowset
	however it will be created as read only. With Oracle, the
    pseudo column rowid acts as a key - the table does not have to have a
    primary key to make the rowset writeable.  With DB2, the table(s) must
	have a primary key otherwise the rowset will be read only.</para>
        <para>If you choose to export all primary and foreign keys in the table,
    the DTS appears to assume it is talking to SQL Server when creating the
    target table.  It uses a fixed SQL syntax in the CREATE TABLE command to
    express the primary key as a table constraint.  Oracle accepts this
    syntax, however DB2 rejects it.</para>
        <para>As a consequence of the above currently the only way to export
    a table to DB2 is to manually create the target table before launching DTS.
    If the target table already exists, DTS does not attempt to create it; it
    just copies the data from the source table.  The manually created table
    must have a primary key.</para>
        <para>The DTS does not handle quoting of the target table name correctly.
    The user must specify the target table name using the appropriate case
    which does not require quoting. e.g. When exporting to Oracle, give
    the table name in uppercase. </para>

        <!-- Tim was here, bugz 9645, 20050909 -->
        <section>
          <title>Provider Options in the SQL Server Enterprise manager</title>
          <para>When setting up a linked server using the Enterprise Manager you can
    configure the way SQL Server uses your OLE DB provider by clicking on the
    Provider Options button just under the box where the provider is selected.
    The options in the Provider Options dialogue box apply to the provider
    rather than the specific server so any changes made here will effect all
    linked servers using that provider. A list of all the servers using the
    provider is given in the bottom half of the box.
</para>
          <para>Note that once a server has been created it is not possible to change these
options in the property page for that server. To change them after the linked
server has been created you have to create a new server and alter the options
there. Making changes to these options when creating a new linked server
affects all existing linked servers. Once you have set up a linked server the
options you have chosen effectivley become the defaults for the provider you
are using.</para>
          <para>A document describing the Provider Options, called 'Configuring OLE DB
Providers for distributed Queries', can be found in the SQL Server Books
Online documentation or on the web at
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/adminsql/ad_1_server_8ib7.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/adminsql/ad_1_server_8ib7.asp</link>
        </para>
          <para>By default none of the options is enabled for our driver.
These options are specifically for SQLServer distributed queries using linked
servers rather than being general OLE DB options.</para>
        </section>
        <section>
          <title>Provider Options</title>
          <simplelist type="vert">
            <member>Dynamic
Parameters - you can set this if the provider supports the
ICommandWithParameters interface. This in supported in the OpenLink provider.
</member>
            <member>NestedQueries - can be set if provider allows SELECT in a
FROM clause. May cause concerns with the underlying Cursor libraries. This
option should not be enabled if the underlying DSN or DBMS does not allow
nested queries. </member>
            <member>LevelZeroOnly - Should not be
enabled.</member>
            <member>
              Allow InProcess - This option should be checked. Checking this
    option stops errors like:
              <computeroutput><![CDATA[
Error 7311: Could not obtain the schema rowset for OLE DB provider 'UNKNOWN'.
The provider supports the interface, but returns a failure code when it is
used. OLE DB error trace [OLE/DB Provider 'UNKNOWN'
IDBSchemaRowset::GetRowset returned 0x800706c6:].
]]></computeroutput>
            </member>
            <member>Error 0x800706c6 is RPC_S_INVALID_BOUND. The error message
            identifies the OLE DB provider that the error comes from as
            UNKNOWN and our log files show no sign of the error. SQL Server
            uses a proxy/stub dll, msdaps.dll, to marshal oledb interfaces
            between processes/apartments. These errors from the 'UNKNOWN'
            provider come from msdaps.dll. If the OLE DB provider is invoked
            out of process or is marked as apartment model then this stub gets
            used. By default if the OLE DB provider is a Microsoft provider
            then SQL Server invokes it in process and this proxy is not used.
            Checking the Allow InProcess box when using our provider
            ensures that this stub dll is not used and so avoids this error.
            </member>
            <member>NonTransactedUpdates - this is entirely up to the user to choose.</member>
            <member>IndexAsAccessPath - should be left disabled.</member>
            <member>DisallowAdhocAccess - Disables use of
OPENROWSET and OPENDATASOURCE with the provider. Up to the user to choose</member>
          </simplelist>
        </section>
        <section>
          <title>Connection Errors. Error 0x80004005 </title>
          <para>If the linked server has problems connecting then the following error is
      generated:
</para>
          <programlisting><![CDATA[Error 7399: OLE DB provider 'OpenLinkODBC' reported and error. The provider
did not give any information about the error. OLE DB error trace [OLE/DB
Provider'OpenLinkODBC' IDBInitialize::Initialize returned 0x80004005: The
provider did not give any information about the error.].
]]></programlisting>
          <para>Reasons for this error could be:</para>
          <simplelist type="vert">
            <member>The ODBC DSN does not exist</member>
            <member>The linked database is not started</member>
            <member>Username or password not set up correctly on the security property page.</member>
          </simplelist>
          <para>
The first thing to check when getting this error is that the underlying ODBC
DSN is connecting correctly and after that if the DSN name has been spelt
correctly in the linked server definition.
This error may also occur when using the OPENQUERY, OPENROWSET, and
OPENDATASOURCE syntax. In addition to the connection errors listed above other
causes of this error may be an incorrect table, column or owner name in the
statement.</para>
        </section>
        <section>
          <title>      Using SQLServer Authentication
</title>
          <para>When using OPENROWSET or OPENDATASOURCE options on logging into SQL Server
using SQL Server authentication, the following error might be seen:
</para>
          <programlisting><![CDATA[Could not perform Windows NT authentication because delegation is not
available.
]]></programlisting>
          <para>This error is avoided if the connection to the SQL Server is made using
Windows NT authentication.
</para>
          <para>This problem only occurred when using OPENROWSET and OPENDATASOURCE not with
OPENQUERY, i.e. only when the connection information was given in the query
not when a linked server had been set up in the Enterprise Manager.
</para>
        </section>
        <section>
          <title>Linking Progress Servers.</title>
          <para>Linking to Progress using a SQL-89 datasource works if the linked server
      is set up in the Enterprise Manager and the OPENQUERY syntax is used.
      Connections made using the OPENDATASOURCE or OPENROWSET syntax fail. The
      Progress SQL-89 engine does not handle the SQL generated by SQL Server
      when executing the OPENROWSET or OPENDATASOURCE query.
</para>
          <para>Linking to Progress using a SQL-92 datasource works using OPENQUERY,
OPENDATASOURCE and OPENROWSET.
</para>
        </section>
        <section>
          <title>Inconsistent Metadata</title>
          <para>Queries that fail with errors about inconsistent metadata usually
      indicate that there is a discrepancy between the information returned
      from SQLColumns and from SQLDescribeCol by the underlying ODBC driver.
</para>
        </section>
      </section>
    </section>
    <section xml:id="mt_oledbobjsints">
      <title>Objects and Interfaces Implemented by the OpenLink Provider</title>
      <info>
        <keywordset>
          <keyword>OLEDB Implementation</keyword>
          <keyword>OLEDB Interfaces</keyword>
          <keyword>Interfaces</keyword>
        </keywordset>
      </info>
      <para>The OpenLink provider implements four OLE DB objects.</para>
      <itemizedlist>
        <listitem>
          <para>The data source object, which
        enables consumers to connect and initialize the interaction
        with the database.</para>
        </listitem>
        <listitem>
          <para>The session, which enables
        consumers to create a rowset for the data set in the
        database.</para>
        </listitem>
        <listitem>
          <para>The rowset, which exposes a data
        set to the consumer.</para>
        </listitem>
        <listitem>
          <para>The command, which enables
        consumers to create a SQL string for the data in the
        database.</para>
        </listitem>
      </itemizedlist>
      <para>These objects, along with the interfaces implemented in
      the OpenLink provider, are described below.</para>
      <table>
        <title>OLE-DB Interfaces Implemented</title>
        <tgroup align="char" charoff="50" char="." cols="2">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Interface name</entry>
              <entry>Method name</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>IDBInitialize</para>
              </entry>
              <entry>
                <para>Initialize</para>
                <para>Uninitialize</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IDBCreateSession</para>
              </entry>
              <entry>
                <para>CreateSession</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IDBProperties</para>
              </entry>
              <entry>
                <para>GetProperties</para>
                <para>GetPropertyInfo</para>
                <para>SetProperties</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IPersist</para>
              </entry>
              <entry>
                <para>GetClassID</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IGetDataSource</para>
              </entry>
              <entry>
                <para>GetDataSource</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ICommand</para>
              </entry>
              <entry>
                <para>Cancel</para>
                <para>Execute</para>
                <para>GetDBSession</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ICommandText</para>
              </entry>
              <entry>
                <para>GetCommandText</para>
                <para>SetCommandText</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ICommandProperties</para>
              </entry>
              <entry>
                <para>GetProperties</para>
                <para>SetProperties</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ICommandPrepare</para>
              </entry>
              <entry>
                <para>Prepare</para>
                <para>Unprepare</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IOpenRowset</para>
              </entry>
              <entry>
                <para>OpenRowset</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IColumnsInfo</para>
              </entry>
              <entry>
                <para>GetColumnInfo</para>
                <para>MapColumnIDs</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IConvertType</para>
              </entry>
              <entry>
                <para>CanConvert</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IAccessor</para>
              </entry>
              <entry>
                <para>AddRefAccessor</para>
                <para>CreateAccessor</para>
                <para>GetBindings</para>
                <para>ReleaseAccessor</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IRowset</para>
              </entry>
              <entry>
                <para>AddRefRows</para>
                <para>GetData</para>
                <para>GetNextRows</para>
                <para>ReleaseRows</para>
                <para>RestartPosition</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IRowsetInfo</para>
              </entry>
              <entry>
                <para>GetProperties</para>
                <para>GetReferencedRowset</para>
                <para>GetSpecification</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IRowsetChange</para>
              </entry>
              <entry>
                <para>DeleteRows</para>
                <para>InsertRow</para>
                <para>SetData</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IRowsetLocate</para>
              </entry>
              <entry>
                <para>Compare</para>
                <para>GetRowsAt</para>
                <para>GetRowsByBookmark</para>
                <para>Hash</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ISessionProperties</para>
              </entry>
              <entry>
                <para>GetProperties</para>
                <para>SetProperties</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ISupportErrorInfo</para>
              </entry>
              <entry>
                <para>InterfaceSupportsErrorInfo</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IErrorInfo</para>
              </entry>
              <entry>
                <para>GetDescription</para>
                <para>GetGUID</para>
                <para>GetHelpContext</para>
                <para>GetHelpFile</para>
                <para>GetSource</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>IErrorLookup</para>
              </entry>
              <entry>
                <para>GetErrorDescription</para>
                <para>GetHelpInfo</para>
                <para>ReleaseErrors</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>ISQLErrorInfo</para>
              </entry>
              <entry>
                <para>GetSQLInfo</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <section xml:id="mt_oledbinvprov">
        <title>Invoking the OpenLink Provider</title>
        <para>The OpenLink ODBC Provider
(oploleod.dll) can be loaded using a variety of methods,
depending on your programming environment.</para>
        <section xml:id="mt_oledbcocreateinstance">
          <title>Using CoCreateInstance</title>
          <para>If you are writing an application which
calls the OLE DB API directly, a consumer typically creates a
provider's Data Source object by passing the provider's class
identifier (CLSID) to the COM CoCreateInstance function and
requesting the IDBInitialize interface. Every OLE DB provider
declares a unique CLSID for itself. The CLSIDs for the
OpenLink ODBC Provider, the OpenLink Error Lookup Service and
the OpenLink ODBC Data Source Enumerator are given in the
example below, which declares macros for each of the class
identifiers.</para>
          <programlisting><![CDATA[
#ifdef DBINITCONSTANTS
// Provider CLSID
EXTERN_C const CLSID CLSID_OPLOLEDB =
  {0X2D93A18D, 0XAC86, 0X11D1, {0X9C, 0XEA, 0XE5, 0X2A, 0X53, 0XBE, 0XA0, 0X7D}};
// OpenLink Error Lookup Service CLSID
EXTERN_C const CLSID CLSID_OPLOLEDB_ERROR =
  {0X2D93A18E, 0XAC86, 0X11D1, {0X9C, 0XEA, 0XE5, 0X2A, 0X53, 0XBE, 0XA0, 0X7D}};
// OpenLink ODBC Data Source Enumerator CLSID
EXTERN_C const CLSID CLSID_OPLOLEDB_ENUM =
  {0X2D93A190, 0XAC86, 0X11D1, {0X9C, 0XEA, 0XE5, 0X2A, 0X53, 0XBE, 0XA0, 0X7D}};
#else //DBINITCONSTANTS
EXTERN_C const CLSID CLSID_OPLOLEDB;
EXTERN_C const CLSID CLSID_OPLOLEDB_ERROR;
EXTERN_C const CLSID CLSID_OPLOLEDB_ENUM;
#endif //DBINITCONSTANTS
IDBInitialize * pIDBInitialize;
HRESULT hr;
hr = CoCreateInstance(CLSID_OPLOLEDB, NULL, CLSCTX_INPROC_SERVER,
      IID_IDBInitialize, (void**) &amp;pIDBInitialize);
if (FAILED(hr))
{
   // Display error
...
}
]]></programlisting>
        </section>
      </section>
      <section xml:id="mt_oledbconnadodotnet">
        <title>Connecting from ADO or .Net</title>
        <para>The provider's name is "OpenLinkODBC".
      The OpenLink OLE DB Provider is invoked from ADO or .Net
      using a connection string which typically takes the following
      form:</para>
        <para>Provider=OpenLinkODBC; Data Source=<emphasis>w2ks2</emphasis>;User
      ID=<emphasis>SCOTT</emphasis>;Password=<emphasis>tiger</emphasis>;Extended
      Properties="Cursors=Driver;BookmarkDefault=On";</para>
      </section>
      <section xml:id="mt_initializprops">
        <title>Initialization Properties</title>
        <para>When the consumer calls IDBInitialize::Initialize, the
      OpenLink Provider calls the UDBC/ODBC functions
      SQLSetConnectOption, to set various connection options, and
      SQLDriverConnect, to connect to an ODBC data source. The
      values passed to SQLSetConnectOption and SQLDriverConnect
      come from the initialization properties set by the
      consumer.</para>
        <para>When the data source object is first created, the value of
      each initialization property is set to a default value.</para>
        <section xml:id="mt_initpropsused">
          <title>Initialization Properties Used</title>
          <para>The following lists the initialization properties
      currently used by the OpenLink Provider. Any properties not
      listed are not used by the OpenLink Provider.</para>
          <table>
            <title>OLE-DB Initialization Properties</title>
            <tgroup align="char" charoff="50" char="." cols="2">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>DBPROP_AUTH_PASSWORD</entry>
                  <entry>Passed as the value of the PWD
            keyword in SQLDriverConnect.</entry>
                </row>
                <row>
                  <entry>DBPROP_AUTH_USERID</entry>
                  <entry>Passed as the value of the UID
            keyword in SQLDriverConnect.</entry>
                </row>
                <row>
                  <entry>DBPROP_INIT_CATALOG</entry>
                  <entry>Sets the initial catalog for data
            sources which recognise catalogs.</entry>
                </row>
                <row>
                  <entry>DBPROP_INIT_DATASOURCE</entry>
                  <entry>Passed as the value of the DSN
            keyword in SQLDriverConnect.</entry>
                </row>
                <row>
                  <entry>
                    <para>DBPROP_INIT_HWND</para>
                  </entry>
                  <entry>Passed as the value of the hwnd
            argument in SQLDriverConnect.</entry>
                </row>
                <row>
                  <entry>
                    <para>DBPROP_INIT_MODE</para>
                  </entry>
                  <entry>Mapped to the ODBC connect option
            SQL_ACCESS_MODE.</entry>
                </row>
                <row>
                  <entry>
                    <para>DBPROP_INIT_PROMPT</para>
                  </entry>
                  <entry>Passed as the value of the
            fDriverCompletion parameter in SQLDriverConnect.</entry>
                </row>
                <row>
                  <entry>DBPROP_INIT_PROVIDERSTRING</entry>
                  <entry>Specifies extended properties for
            controlling ODBC Cursor Library usage (through the
            'Cursors' keyword) and the whether bookmarks are
            exposed by default on rowsets (through the
            'BookmarkDefault' keyword).</entry>
                </row>
                <row>
                  <entry>DBPROP_INIT_TIMEOUT</entry>
                  <entry>Mapped to the ODBC connect option
            SQL_LOGIN_TIMEOUT.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="mt_setgetprovprops">
          <title>Setting and Getting Provider Properties</title>
          <para>The data source object is the first object created when a
      consumer instantiates the provider by calling <emphasis>
      CoCreateInstance</emphasis>.</para>
          <para>The data source object provides the starting point for
      communications between the provider and consumer. For
      example, a consumer can call <emphasis>CoCreateInstance</emphasis> and
      request an <emphasis>IDBInitialize</emphasis> interface pointer to
      instantiate a data source object. The provider has a CLSID
      (class ID) that is stored in the Windows Registry. The
      consumer can use this CLSID with <emphasis>CoCreateInstance</emphasis> to
      instantiate the data source object. The OpenLink provider
      setup program registers the OpenLink provider in the Windows
      Registry.</para>
          <para>The data source object is responsible for setting and
      returning information about the properties supported by the
      provider and exposing the list of supported keywords and
      literals. This functionality is supported through the
      mandatory <emphasis>IDBProperties</emphasis> interface and the optional <emphasis>
      IDBInfo</emphasis> interface. The <emphasis>IDBProperties</emphasis> interface
      contains three methods:</para>
          <itemizedlist>
            <listitem>
              <para><emphasis>GetProperties</emphasis>
               returns the
        list of properties currently set on the data source
        object.</para>
            </listitem>
            <listitem>
              <para><emphasis>GetPropertyInfo</emphasis>
               returns
        information about supported rowset and data source
        properties.</para>
            </listitem>
            <listitem>
              <para><emphasis>SetProperties</emphasis>
               sets the
        properties on the data source object.</para>
            </listitem>
          </itemizedlist>
          <para>The <emphasis>IDBInfo</emphasis> interface contains two methods:</para>
          <itemizedlist>
            <listitem>
              <para><emphasis>GetKeywords</emphasis>
               returns a list
        of supported keywords.</para>
            </listitem>
            <listitem>
              <para><emphasis>GetLiteralInfo</emphasis>
               returns
        information about literals used in text commands.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section xml:id="mt_inuninitdsnobj">
        <title>Initializing and Uninitializing the Data Source Object</title>
        <para>The <emphasis>IDBInitialize</emphasis> interface contains two methods:
      <emphasis>Initialize</emphasis> and <emphasis>Uninitialize</emphasis>.</para>
        <para><emphasis>Initialize</emphasis> enables consumers to explicitly
      initialize a data source object. Consumers must set
      properties on the data source object before attempting to
      initialize it; and consumers must supply a valid datasource
      name to the database in IDBProperties::SetProperties. If the
      datasource is invalid, the OpenLink provider returns an
      E_FAIL error on initialization.</para>
        <para><emphasis>Uninitialize</emphasis> enables consumers to return the data
      source object to an uninitialized state. It is an error to
      call <emphasis>IDBInitialize::Uninitialize</emphasis> when there are open
      sessions or rowsets on the data source object.</para>
      </section>
      <section xml:id="mt_createsession">
        <title>Creating a Session</title>
        <para>After you initialize the data source object, you must
      create a session object to manage the session and provide the
      framework needed to create a rowset with <emphasis>
      IOpenRowset::OpenRowset</emphasis>. The <emphasis>
      IDBCreateSession::CreateSession</emphasis> interface on the data
      source object enables you to create a new session object and
      returns an interface pointer to the session.</para>
        <para>Once the session has been created, the provider must
      expose the interface pointer to the data source object that
      created the session. This interface pointer is exposed
      through the mandatory interface IGetDataSource.</para>
      </section>
      <section xml:id="mt_createrowset">
        <title>Creating a Rowset</title>
        <para>The session contains the interface that enables consumers
      to open a database and create a rowset object containing all
      rows in the database. The OpenLink provider implements both
      the <emphasis>IOpenRowset</emphasis>, and the <emphasis>ICommand</emphasis>
      (and associated <emphasis>ICommandText,
      ICommandProperties)</emphasis> interfaces on the session to
      create a rowset..</para>
        <section xml:id="mt_instantexprowset">
          <title>Instantiating and Exposing a Rowset</title>
          <para>The <emphasis>IOpenRowset</emphasis> interface contains a single method:
      <emphasis>OpenRowset</emphasis>. <emphasis>IOpenRowset</emphasis> is a required interface
      on the session. <emphasis>IOpenRowset::OpenRowset</emphasis> can be used by
      consumers that do not support command objects to generate a
      rowset of all rows in a table or index.</para>
          <para>The <emphasis>ICommand</emphasis> interface contains the method: <emphasis>
      Execute</emphasis>. <emphasis>ICommand::Execute</emphasis> generates a rowset from
      the SQL query set by <emphasis>
      ICommandText::SetCommandText</emphasis>.</para>
        </section>
        <section xml:id="mt_consprovintactionrowset">
          <title>Consumer and Provider Interactions with the Rowset</title>
          <para>After receiving the rowset interface pointer, the consumer
      can request rowset metadata from the provider through <emphasis>
      IColumnsInfo</emphasis>. The consumer then creates bindings by
      requesting <emphasis>IAccessor</emphasis> from the provider and specifying
      the bindings through <emphasis>IAccessor::CreateAccessor</emphasis>. The
      provider returns a handle to the accessor to the
      consumer.</para>
          <para>The consumer then requests a number of rows from the
      provider using <emphasis>IRowset::GetNextRows</emphasis>. The provider
      retrieves the data for these rows and stores it in the data
      cache. The provider then returns an array of row handles to
      the consumer. Each row handle returned by the provider has an
      initial reference count of one. The consumer is then free to
      get the data for any rows from the provider using <emphasis>
      GetData</emphasis>. The consumer supplies <emphasis>GetData</emphasis> with the
      row handle, the handle of an accessor, and the buffer
      location into which to return the data; the provider copies
      the data to the location specified by the consumer.</para>
          <para>To update rows, consumers call <emphasis>
      IRowsetChange::SetData</emphasis>, which sets the data in the data
      cache to the values specified by the consumer. To delete rows
      from the rowset, the consumer calls <emphasis>
      IRowsetChange::DeleteRows</emphasis>. To insert rows into the
      rowset, the consumer calls <emphasis>IRowsetChange::InsertRow</emphasis>.
      Note that the OpenLink Provider is not able to fetch back a
      newly inserted row if the underlying datasource does not
      provide this functionality.</para>
          <para>When the consumer makes any change to data in the data
      cache, the effects of the change are written to the data
      source immediately. OLE DB specifies a change-buffering
      model, which enables the consumer to make changes that are
      not realized until the consumer calls <emphasis>
      IRowsetUpdate::Update</emphasis>; this model is not supported by the
      OpenLink provider.</para>
          <para>When the consumer has finished working with a row, it can
      release the row by calling <emphasis>IRowset::ReleaseRows</emphasis>. <emphasis>
      ReleaseRows</emphasis> simply decrements the reference count on the
      row in the data cache. If the reference count for that row
      reaches zero, the row data is released from the data
      cache.</para>
        </section>
      </section>
      <section xml:id="mt_exposmetadata">
        <title>Exposing Metadata</title>
        <para>the OpenLink Provider expose information about the columns
      of a rowset through <emphasis>IColumnsInfo</emphasis>. The information for
      each column is returned in a DBCOLUMNINFO structure. OLE DB
      also has an optional metadata interface, <emphasis>
      IColumnsRowset</emphasis>; the OpenLink provider does not implement
      this interface.</para>
        <para>The <emphasis>GetColumnInfo</emphasis> method returns metadata that is
      most commonly used by consumers: column ID, column name, the
      ordinal number of the column in the rowset, the column's data
      type, and so on.</para>
        <para>The provider returns the information in an array of
      DBCOLUMNINFO structures, one DBCOLUMNINFO structure per
      column in the rowset. The order of the structures returned in
      the array is the order in which the columns appear in the
      rowset.</para>
        <section xml:id="mt_icolsinfo">
          <title>IColumnsInfo</title>
          <para>Columns that have an ODBC SQL type of SQL_LONGVARCHAR or
      SQL_LONGVARBINARY are returned as type DBTYPE_BYTES or
      DBTYPE_STR, and the DBCOLUMNFLAG_ISLONG is set in the dwFlags
      element of the DBCOLUMNINFO structure.</para>
        </section>
        <section xml:id="mt_retcolordinals">
          <title>Returning Column Ordinals</title>
          <para>Columns in a rowset are identified by a column ID, which
      is a value of type DBID in the DBCOLUMNINFO structure.</para>
          <para>The <emphasis>MapColumnIDs</emphasis> method returns column ordinals for
      all column IDs provided in the <emphasis>rgColumnIDs</emphasis> array.
      Column ordinals do not change during the life of the rowset,
      but may change between different instances of the rowset.</para>
        </section>
      </section>
      <section xml:id="mt_supportedoledbconversions">
        <title>Supported Conversions</title>
        <para>Before the consumer creates an accessor, it can call
      <emphasis>IConvertType::CanConvert</emphasis> to determine if the
      provider supports a particular conversion.</para>
        <section xml:id="mt_oledbdefdtmap">
          <title>Default Data Type Mapping</title>
          <para>The OpenLink Provider binds to the ODBC/UDBC data source
      using the types in the table below. The SQL type is queried
      using SQLDescribeCol. The sign of the data type
      (signed/unsigned) is determined using SQLColAttributes. It is
      used in deciding which C type to use in internal buffers and
      which type indicator to return through <emphasis>
      IColumnsInfo::GetColumnInfo</emphasis>.</para>
          <table>
            <title>OLE-DB Data Type Mappings</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>SQL Type Indicator</entry>
                  <entry>Indicator of C Type Used For Internal Buffers</entry>
                  <entry>OLE DB Type Indicator</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>SQL_CHAR,</para>
                    <para>SQL_VARCHAR,</para>
                    <para>SQL_LONGVARCHAR,</para>
                    <para>SQL_DECIMAL,</para>
                    <para>SQL_NUMERIC</para>
                  </entry>
                  <entry>
                    <para>SQL_C_CHAR</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_STR</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_BIT</para>
                  </entry>
                  <entry>
                    <para>SQL_C_BIT</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_BOOL</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_TINYINT,</para>
                    <para>SQL_SMALLINT</para>
                  </entry>
                  <entry>
                    <para>SQL_C_USHORT,</para>
                    <para>SQL_C_SSHORT</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_I2</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_INTEGER</para>
                  </entry>
                  <entry>
                    <para>SQL_C_ULONG,</para>
                    <para>SQL_C_SLONG</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_I4</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_BIGINT</para>
                  </entry>
                  <entry>
                    <para>SQL_C_STR</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_STR</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_REAL</para>
                  </entry>
                  <entry>
                    <para>SQL_C_FLOAT</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_R4</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_FLOAT,</para>
                    <para>SQL_DOUBLE</para>
                  </entry>
                  <entry>
                    <para>SQL_C_DOUBLE</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_R8</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_BINARY,</para>
                    <para>SQL_VARBINARY,</para>
                    <para>SQL_LONGVARBINARY</para>
                  </entry>
                  <entry>
                    <para>SQL_C_BINARY</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_BYTES</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_DATE</para>
                  </entry>
                  <entry>
                    <para>SQL_C_DATE</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_DATE</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_TIME</para>
                  </entry>
                  <entry>
                    <para>SQL_C_TIME</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_DATE</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>SQL_TIMESTAMP</para>
                  </entry>
                  <entry>
                    <para>SQL_C_TIMESTAMP</para>
                  </entry>
                  <entry>
                    <para>DBTYPE_DATE</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="mt_oledblenbind">
          <title>Length Binding</title>
          <para>For types DBTYPE_UI1, DBTYPE_I2, DBTYPE_I4, DBTYPE_I8,
      DBTYPE_R4, DBTYPE_R8, DBTYPE_CY, DBTYPE_NUMERIC, the length
      binding is always set to the fixed size of the destination
      binding type, rather than the internal source type.</para>
        </section>
        <section xml:id="mt_oledbsupdataconversions">
          <title>Supported Data Conversions</title>
          <para>The follwoing table outlines the supported type conversion
      implemented in the OpenLink provider. An 'X' means supported,
      and '-' means not supported.</para>
          <table>
            <title>OLE-DB Data Type Conversions</title>
            <tgroup align="char" charoff="50" char="." cols="26">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry/>
                  <entry>I1</entry>
                  <entry>I2</entry>
                  <entry>I4</entry>
                  <entry>I8</entry>
                  <entry>UI1</entry>
                  <entry>UI2</entry>
                  <entry>UI4</entry>
                  <entry>UI8</entry>
                  <entry>R4</entry>
                  <entry>R8</entry>
                  <entry>CY</entry>
                  <entry>DEC</entry>
                  <entry>NUM</entry>
                  <entry>BOOL</entry>
                  <entry>DATE</entry>
                  <entry>DBDATE</entry>
                  <entry>DBTIMESTAMP</entry>
                  <entry>DBTIME</entry>
                  <entry>BYTES</entry>
                  <entry>BSTR</entry>
                  <entry>STR</entry>
                  <entry>WSTR</entry>
                  <entry>DISP</entry>
                  <entry>UNK</entry>
                  <entry>GUID</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>I1</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>I2</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>I4</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>I8</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>UI1</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>UI2</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>UI4</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>UI8</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>R4</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>R8</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>CY</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DEC</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>NUM</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>BOOL</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DATE</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DBDATE</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DBTIME</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DBTIMESTAMP</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>BYTES</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>BSTR</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>STR</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>WSTR</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>DISP</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>UNK</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>GUID</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>-</para>
                  </entry>
                  <entry>
                    <para>X</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
      <section xml:id="mt_createuseaccessors">
        <title>Creating and Using Accessors</title>
        <para>Consumers describe the memory structure for their buffers
      through a process called binding. An accessor is a group of
      bindings. The OpenLink provider does not currently support
      reference accessors, which allow the consumer direct access
      to the rowset's data cache.</para>
        <para>Accessors are implemented through <emphasis>IAccessor</emphasis>.
      Accessors are created with <emphasis>IAccessor::CreateAccessor</emphasis>
      and released with <emphasis>IAccessor::ReleaseAccessor</emphasis>. <emphasis>
      IAccessor::GetBindings</emphasis> can be used to determine the
      bindings in an existing accessor. IAccessor::AddRefAccessor
      enables the consumer to add a reference count to an existing
      accessor.</para>
        <para>Accessors may not always be validated immediately at the
      time of creation. Instead, they may be validated at the time
      the first row is fetched. Errors will be returned at the
      first attempt to use such an accessor.</para>
        <para>Creating an Accessor</para>
        <para><emphasis>CreateAccessor</emphasis> associates a set of bindings with an
      accessor handle that is used to send data to or fetch data
      from the rowset's data cache. The OpenLink provider supports
      only the DBACCESSOR_ROWDATA accessor flag, which specifies
      that the accessor is to be used for rowset data.</para>
        <para>Returning Accessor
      Bindings</para>
        <para><emphasis>GetBindings</emphasis> returns the bindings in an existing
      accessor.</para>
        <para>Adding a Reference Count to
      an Existing Accessor</para>
        <para>AddRefAccessor adds a reference count to an existing
      accessor.</para>
        <para>Releasing an
      Accessor</para>
        <para><emphasis>ReleaseAccessor</emphasis> decrements the reference count on
      an accessor; when the reference count reaches zero, the
      accessor is released.</para>
      </section>
      <section xml:id="mt_oledbrowsetmetadata">
        <title>Rowset MetaData</title>
        <para><emphasis>IRowsetInfo</emphasis> enables consumers to query the
      properties of a rowset through <emphasis>
      IRowsetInfo::GetProperties</emphasis>. Consumers can get an
      interface pointer to the object that created the rowset by
      calling <emphasis>IRowsetInfo::GetSpecification</emphasis>.</para>
        <para><emphasis>IRowset</emphasis> provides methods for fetching rows
      sequentially, exposing data from those rows to consumers, and
      managing the rows in the rowset. <emphasis>IRowset</emphasis> contains five
      methods: <emphasis>AddRefRows</emphasis>, <emphasis>GetData</emphasis>, <emphasis>
      GetNextRows</emphasis>, <emphasis>ReleaseRows</emphasis>, and <emphasis>
      RestartPosition</emphasis>.</para>
        <section xml:id="mt_increfcountrowhndl">
          <title>Incrementing the Reference Count on Row Handles</title>
          <para><emphasis>AddRefRows</emphasis> increments the reference count on the
      row handles supplied by the caller. <emphasis>AddRefRows</emphasis> enables
      consumers to make multiple references to a row in the data
      cache.</para>
        </section>
        <section xml:id="mt_popldatacache">
          <title>Populating the Data Cache</title>
          <para><emphasis>IRowset::GetNextRows</emphasis> gets the next sequence of rows
      from the datasource and places them in the rowset's data
      cache. When <emphasis>GetNextRows</emphasis> is first called, it starts at
      the beginning of the rowset. After that, <emphasis>GetNextRows</emphasis>
      maintains information about its current position so it can
      proceed forward from that position. The OpenLink provider
      also provides support for <emphasis>IRowset::RestartPosition</emphasis>,
      which repositions the next fetch position to the beginning of
      the rowset.</para>
        </section>
        <section xml:id="mt_retrdatafromcache">
          <title>Retrieving Data from the Data Cache</title>
          <para><emphasis>IRowset::GetData</emphasis> enables consumers to retrieve data
      from the data cache. <emphasis>GetData</emphasis> uses the bindings in the
      accessor to determine how the data should be returned and
      what data should be returned to the consumer's buffer. Then,
      <emphasis>GetData</emphasis> converts the data in the cache to the type
      specified in the binding and transfers the converted data to
      the consumer.</para>
        </section>
        <section xml:id="mt_decrefcountrowhndl">
          <title>Decrementing the Reference Count on Row Handles</title>
          <para><emphasis>IRowset::ReleaseRows</emphasis> decrements the reference count
      on the rows specified. A consumer must call <emphasis>
      ReleaseRows</emphasis> once for each time a row was fetched or each
      time the row had its reference count incremented by <emphasis>
      AddRefRow</emphasis>. When the reference count reaches zero, the row
      is released if the rowset is in immediate update mode.</para>
          <para>In providers that implement <emphasis>IRowsetUpdate</emphasis>, rows are
      released unless there are pending changes on the row. The
      OpenLink provider does not implement this interface; the
      OpenLink provider always performs rowset updates in immediate
      mode, which means that changes are immediately applied to the
      underlying data source. Therefore, the OpenLink provider does
      not recognize any changes as pending.</para>
        </section>
        <section xml:id="mt_oledbretrowsetfirstrow">
          <title>Returning to the First Row of the Rowset</title>
          <para><emphasis>IRowset::RestartPosition</emphasis> moves the next fetch
      position used by <emphasis>GetNextRows</emphasis> to the first row of the
      rowset.</para>
        </section>
        <section xml:id="mt_oledbupdrows">
          <title>Updating Rows</title>
          <para><emphasis>IRowsetChange</emphasis> enables consumers to change the
      values of columns in a row of data. If the consumer wants to
      change the data, it must first construct an accessor for the
      columns to be changed. <emphasis>IRowsetChange</emphasis> contains three
      methods: DeleteRows, InsertRow, and <emphasis>SetData</emphasis>.</para>
        </section>
        <section xml:id="mt_oledbdelrows">
          <title>Deleting Rows</title>
          <para><emphasis>IRowsetChange</emphasis> also enables consumers to delete rows
      from the rowset. <emphasis>IRowsetChange</emphasis>::<emphasis>DeleteRows</emphasis>
      deletes rows from the rowset and are applied to the data
      source immediately.</para>
        </section>
        <section xml:id="mt_irowsetchange">
          <title>IRowsetChange</title>
          <para>IRowsetChange is implemented using the UDBC/ODBC function
      SQLSetPos. It therefore can be exposed only when the
      underlying datasource supports SQLSetPos. Newly inserted rows
      cannot be updated.</para>
        </section>
      </section>
    </section>
  </chapter>

  <!-- 
  $Id: srvcompinstall.xml,v 1.4.4.1 2006/01/05 14:55:08 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_srvcompinstall">
    <title>Server Components Installation</title>
    <info>
      <abstract>
        <para>Information on how to install components of the Server.</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Server</keyword>
        <keyword>Server Component Install</keyword>
        <keyword>Installation</keyword>
        <keyword>Register</keyword>
        <keyword>Windows</keyword>
        <keyword>Unix</keyword>
        <keyword>Linux</keyword>
        <keyword>Mac OS</keyword>
        <keyword>Linux</keyword>
      </keywordset>
    </info>
    <section xml:id="mt_oplmgr">

      <!-- 
       $Id: oplmgr.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
       (C)Copyright 1996-2018 OpenLink Software
    -->
      <title>OpenLink License Manager Usage Notes
  </title>
      <section xml:id="mt_oplmgrbckgrnd">
        <title>Background
    </title>
        <para>
      As of UDA release 6.0 and above, OpenLink have moved the handling of
      licenses from individual products into a specific License Manager
process.
      This takes the form of an executable, (`oplmgr'), from which all
      OpenLink commercial products request licenses via network
      connections.
    </para>
      </section>
      <section xml:id="mt_oplmgrst">
        <title>Single-Tier
    </title>
        <para>
      OpenLink UDA Single-Tier is a single driver installed on the
      client only. 
    </para>
        <para>
      For releases 6.0, the oplmgr process was
      started automatically by the driver on first connection. As of
      release 6.1, this behaviour has changed; in order to facilitate use
      of License Manager process for administering licenses of all OpenLink
products simultaneously on the same machine, the license-manager
      must be started explicitly started in advance of services that will
use it. The release 6.1 installers now check if a License Manager (oplmgr)
process is already running and if not start their own local instance.
    </para>
      </section>
      <section xml:id="mt_oplmgrmt">
        <title>Multi-Tier
    </title>
        <para>
      OpenLink UDA Multi-Tier drivers comprise at least 3 components: a
      generic client installed on client machines, all of which contact a
      central request broker which spawns an RDBMS-specific database agent
      to connect to the specific database requested. The request-broker
      asks the license-manager for licenses for every connection requested.
    </para>
        <para>
      For UDA release 6.0, the oplmgr process was
      started automatically by the request-broker (oplrqb). As of release
      6.1, this behaviour has changed. In order that you should only need
      one license-manager per server, handling licenses for a variety of
      products (particularly combinations of Multi-Tier and OpenLink
      Virtuoso Universal Server), the license-manager must now be explicitly
started
       before other services requiring it. The release 6.1 installers now
check if a License Manager (oplmgr) process is already running and if not
start their own local instance.
    </para>
      </section>
      <section xml:id="mt_oplmgrhowto">
        <title>How to stop/start the OpenLink License Manager
    </title>
        <para>The license manager takes the following commandline options:
    </para>
        <programlisting><![CDATA[
      bash$ oplmgr --help
      OpenLink License Manager
      Version 1.2.2 as of Thu Feb 15 2007 (Release 6.0 cvsid 00084).
      Compiled for Linux 2.4.20-46.9.legacysmp
(i686-generic-linux-glibc23-32)
      Copyright (C) OpenLink Software.
      Usage:
      oplmgr [-shrutp] [+start] [+stop] [+reload] [+user arg] [+chroot arg]
      [+pidfile arg]
      +start     start the license manager
      +stop      stop the license manager
      +reload    force a configuration reload
      +user      run as the specified user
      +chroot    perform a chroot to the specified directory
      +pidfile   pid file to use for server operation
    ]]></programlisting>
        <para>
      We recommend that you create an /etc/init.d/ script that runs `oplmgr
      +start' on boot-up.
    </para>
      </section>
      <section xml:id="mt_oplmgrenvvar">
        <title>Environment Variables
    </title>
        <para>
      The OpenLink License Manager will search through directories in the
      OPL_LICENSE_DIR variable or failing that, the PATH environment
      variable, for files matching *.lic.
    </para>
        <para>
      OpenLink recommends you use /etc/oplmgr/ to store your licenses; each
      product installation will include a copy of the oplmgr executable in
      its respective 'bin' directory, such that if this is the only
      OpenLink product on the system, it can be manually started and used
      for processing licenses with an appropriate OPL_LICENSE_DIR value. A
      generic system startup script is also being developed for Unix
      systems to enable the License Manager process to be automatically
      started on machine boot. If found, product installers will
      automatically append this to your OPL_LICENSE_DIR variable.
    </para>
      </section>
      <section xml:id="mt_oplmgrnetwork">
        <title>OpenLink License Manager Networking Considerations
    </title>
        <para>
      The OpenLink License Manager sends and receives using the multicast
      IP address 224.0.0.24 on port 60001/udp to communicate between
      components and other license-managers that might be on your network.
      In the event that it cannot establish this multicast communication,
      it may cease allocating licenses, so in the event of license
      allocation-related errors, please check your firewall configuration
      permits this traffic.
    </para>
      </section>
    </section>
    <section xml:id="mt_winproductlic">
      <title>Product Licensing</title>
      <info>
        <keywordset>
          <keyword>Licensing</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_wstartlic">
        <title>Initial License</title>
        <para>When you obtain a Data Access Driver from the OpenLink Web Site, a 
license file will automatically be emailed to you.  Please ensure the email address 
you have provided is correct.  If you obtained the Data Access Driver from a 
CD, you may need to apply for an evaluation license through our Web site, or by 
contacting one of our offices.  The standard license will provide 30 days to 
evaluate the product.</para>
      </section>
      <section xml:id="mt_wapplylic">
        <title>How to apply the License</title>
        <para>You will be prompted for the location of your license file during the initial 
installation.  If you have not yet received a license file, you may still install 
the product, and manually apply the license file when you do receive it.  </para>
        <para>To use the license file, simply place it in one of the following locations:</para>
        <itemizedlist>
          <listitem>
            <para>Place the license file in the default location for your Operating System. </para>
            <itemizedlist>
              <listitem>
                <para>For Linux and Unix -  $OPENLINK/bin. </para>
              </listitem>
              <listitem>
                <para>For Windows -by default, C:\Program Files\OpenLink\bin. If 
   you chose a different installation target directory, the bin directory beneath 
   your choice.</para>
              </listitem>
              <listitem>
                <para>For Mac OS X - //Library/Application Support/openlink/bin.  </para>
              </listitem>
              <listitem>
                <para>For Mac OS 9 or earlier - the Preferences folder, within the 
   System Folder.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Alternatively, you may define the environment variable 
 OPL_LICENSE_DIR to specify the directory in which all OpenLink license files 
 can be found. (Does not apply to Mac OS 9 or earlier.)</para>
          </listitem>
          <listitem>
            <para>Finally, license files may reside in any directory included in 
 the PATH environment variable of the host machine. (Does not apply to 
 Mac OS 9 or earlier.) </para>
          </listitem>
        </itemizedlist>
        <para>License errors are generally found in the Request Broker log file, oplrqb.log.</para>
        <para>If your product fails to register properly, then your license may be 
corrupt or invalid.  Please check the license details against the name and 
version of the Driver installed, and contact OpenLink Software Technical Support 
for assistance.</para>
        <note>
          <title>Note:</title>
          <para>only the first license file found for a particular product is examined, and 
 an expired license may prevent use of an unexpired license</para>
        </note>
      </section>
    </section>
    <section xml:id="mt_getlic">
      <info>
        <title>Upgrading the License</title>
        <keywordset>
          <keyword>License Upgrading</keyword>
        </keywordset>
      </info>
      <para>You may purchase a permanent license key online via the Internet.  
To purchase a key follow these instructions:</para>
      <orderedlist>
        <listitem>
          <para>Use an Internet browser to connect to one of the following
 web sites:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>North and South America: http://www.openlinksw.com</para>
            </listitem>
            <listitem>
              <para>Europe, Africa: http://www.openlinksw.co.uk</para>
            </listitem>
            <listitem>
              <para>Asia, Australia: http://www.openlinksw.com.my</para>
            </listitem>
          </itemizedlist>
          <figure xml:id="mtlic1" floatstyle="normal">
            <title>Online order</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="lic1.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>Select the ORDER ONLINE menu link from the left side of the web page.</para>
          <para>A new web pages appears listing links to different online forms for varying products.</para>
        </listitem>
        <listitem>
          <para>Choose the link to the correct product.</para>
        </listitem>
        <listitem>
          <para>Choose the Client Operating System</para>
          <figure xml:id="mtlic2" floatstyle="normal">
            <title>License detail selection</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="lic2.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>Choose the Server Operating System</para>
        </listitem>
        <listitem>
          <para>Choose the Data Access Service</para>
        </listitem>
        <listitem>
          <para>Choose the Licensing scheme required</para>
        </listitem>
        <listitem>
          <para>Choose the Number of CPUs that are to be controlled by the license.</para>
        </listitem>
        <listitem>
          <para>Add your product to the shopping cart, and follow the on
 screen instructions for completing the license purchase.</para>
        </listitem>
      </orderedlist>
      <para>In the event that you are unable to use the online ordering system,
then please contact sales@openlinksw.com or sales@openlinksw.co.uk to obtain
the permanent license key.</para>
    </section>

    <!-- ======================================== -->
    <section xml:id="mt_wsrvcompinst">
      <info>
        <title>Windows 95/98/NT/XP/2000 Install</title>
        <keywordset>
          <keyword>ODBC Driver Windows</keyword>
          <keyword>Windows; 95; 98; NT; XP; 2000</keyword>
          <keyword>Installation</keyword>
        </keywordset>
      </info>
      <orderedlist>
        <listitem>
          <para>Ensure you have downloaded all of the relevant OpenLink Server 
  Components from OpenLink Software Download wizard.</para>
        </listitem>
        <listitem>
          <para>From the OpenLink email that is delivered at the time of download,
  save the attached license file to a temporary location.</para>
        </listitem>
        <listitem>
          <para>Ensure all existing OpenLink server and client applications are 
  shutdown.</para>
        </listitem>
        <listitem>
          <para>Close the Services Control Panel Applet to avoid any locking of existing 
  OpenLink services.</para>
        </listitem>
        <listitem>
          <para>Run setup.exe, please note that the client and server components 
  for Windows are packaged within the same installation archive.  You distinguish 
  the actual components that you want to install as part of your interaction 
  with the installation program.</para>
          <note>
            <title>Caution:</title>
            <para>please do not choose SPX/IPX protocol support during the installation 
  process unless you have verified that this protocol is actually installed 
  and configured on your Windows Server machine.</para>
          </note>
        </listitem>
        <listitem>
          <para>
  Once the installer has completed, the broker will be running and ready
  for use, assuming a valid license was supplied.</para>
        </listitem>
      </orderedlist>
      <para>If the OpenLink Broker does not respond to client requests, or there 
  was a Broker creation error during the install, then you can verify its 
  operation as follows:</para>
      <orderedlist>
        <listitem>
          <para>Start your OpenLink Request Broker in debug mode, 
  from within your "services" control panel, or by opening up a DOS command 
  window and then executing the OpenLink Request Broker startup command from 
  within the "bin" sub-directory of the OpenLink server components installation 
  directory:</para>
          <programlisting><![CDATA[
oplrqb -dv
]]></programlisting>
          <para>Note: When doing this from the "services" control panel (Windows NT) 
  you must stop the Broker if it is already running and then change its startup 
  mode from "Automatic" to "Manual", then enter the required startup commands as values 
  in the Startup Parameters field, the screen shot below demonstrates this:</para>
          <figure xml:id="mt_srvcinstf2" floatstyle="normal">
            <title>3image2.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="3image2.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Selecting the service clicking the <emphasis>Startup</emphasis> button 
  will give the following screen:</para>
          <figure xml:id="mt_srvcinstf3" floatstyle="normal">
            <title>3image3.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="3image3.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>Start your Web Browser and then enter the following URL: 
  http://&lt;network alias of machine on to which you have just installed server 
  components&gt;:&lt;port number you provided when prompted by OpenLink 
  installer&gt;.  For example, if your machine has a network alias of "mainserver"
  and you accept the default port number at installation time, then the required 
  URL would be constructed as follows: <emphasis>http://mainserver:8000/</emphasis> 
  you can also enter the value <emphasis>http://localhost:8000/</emphasis> if 
  the server in use is local rather than remote.</para>
        </listitem>
        <listitem>
          <para>Follow the instructions provided in the "Making Your First 
  OpenLink Connection" guide in order to verify your server components 
  installation.</para>
        </listitem>
        <listitem>
          <para>If the previous step is successful, shutdown the Request 
  Broker by pressing: <emphasis>&lt;CTRL-C&gt;</emphasis> in the debug session 
  window, or by selecting the OpenLink Request Broker entry within the 
  "services" control panel and then clicking on the "stop" button.</para>
          <para>You can also shutdown the Broker by executing the following command 
  from a separate DOS command Window:</para>
          <programlisting><![CDATA[oplshut -f]]></programlisting>
        </listitem>
        <listitem>
          <para>Revert the OpenLink Request Broker startup mode back to 
  "Automatic" from within the "Services" control panel and then restart by 
  clicking on the "Startup" button. Note the Broker does not have to be in 
  "Automatic" mode for regular use, it is your choice as to the startup mode 
  that best suits your operational needs.</para>
          <para>You can also start the Broker from a DOS Window by executing the command:</para>
          <programlisting><![CDATA[oplrqb -v]]></programlisting>
        </listitem>
      </orderedlist>
    </section>
    <section xml:id="mt_macxsrvinst">
      <title>Mac OS X</title>
      <info>
        <keywordset>
          <keyword>ODBC Driver Mac</keyword>
          <keyword>Mac; Mac OS X</keyword>
          <keyword>Installation</keyword>
        </keywordset>
      </info>
      <para>OpenLink Software's server components are fully supported on Mac OS X. 
 Users of Mac OS X 10.2.x ("Jaguar") and later may use the fully migrated GUI 
 components; users of Mac OS X 10.1.5 and earlier must use the Darwin-based 
 components (installation covered in the UNIX and Linux section, below). </para>
      <para>As shipped from Apple, Mac OS X did not include any ODBC support until 
 Jaguar.  The ODBC Driver Manager, Data Source Administrator, etc. - all had to 
 be delivered with the Drivers.</para>
      <para>When Apple introduced Darwin, an Open-Source project meant to form the 
 kernel of Mac OS X, OpenLink determined to port its open-source iODBC Driver 
 Manager to the new platform. With the introduction of the Preview Release of 
 Mac OS X, the traditional set of dynamic libraries was broadened to include a 
 system of Frameworks to encourage the development of fully ODBC compliant, 
 native Mac OS X drivers and client applications. </para>
      <para>That set of Frameworks, along with the OpenLink ODBC Administrator 
 (then known as the iODBC Administrator), has been included with all OpenLink 
 installations for Mac OS X since 10.0. The OpenLink ODBC Administrator 
 supports all core features of ODBC, and presents driver-specific DSN configuration 
 panels, as defined by the Driver developer, through the use of Setup Libraries.</para>
      <para>Jaguar's release marked Apple's recognition that Data Access was an 
 important part of an Enterprise Operating System. Already part of the standard 
 distribution of Darwin, the basic iODBC dynamic libraries are now a part of the 
 standard installation of Mac OS X 10.2. Apple also included their own version 
 of an ODBC Administrator, as a proof-of-concept. Apple's Administrator permits 
 Driver Registration, Tracing, and all other core features of ODBC; however, among 
 other hard edges, all DSN configuration must be done by manually entering 
 Keyword-Value pairs. Further, the user must know what Keywords to use, along 
 with their acceptable Values.</para>
      <para>Each OpenLink Generic Multi-Tier Driver for ODBC for Mac OS X 
 is distributed in a single disk image (.dmg) file, which contains a Macintosh 
 Installer mpkg.  You may download an installer for a single back-end DBMS, 
 or a "kitchen-sink" installer containing components for all OpenLink 
 supported DBMS.</para>
      <para>The OpenLink ODBC Server Components for Mac OS X comprise the following:</para>
      <table>
        <title>OpenLink ODBC Server Components for Mac OS X</title>
        <tgroup cols="1">
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Purpose</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Request Broker</entry>
              <entry>The oplrqb executable Broker manages all Client connections, 
    as instructed by the Rulebook, oplrqb.ini, and as restricted by the 
    active License file(s), *.lic. Without an active Broker, no connection 
    will be initiated.</entry>
            </row>
            <row>
              <entry>Session Rules</entry>
              <entry>Book	The oplrqb.ini file holds all non-license parameters 
    governing behavior of the Request Broker and Database Agents.  
    This file may contain references to other subsidiary parameter files, 
    which are incorporated into the active Rulebook at Broker launch.</entry>
            </row>
            <row>
              <entry>OpenLink Database Agents</entry>
              <entry>Any of a number of executables, named xxxx_sv or xxxx_mv,
    for single- and multi-threaded agents, respectively.  xxxx is replaced by 
    the OpenLink code for a given Database.  For example, virt_mv is the
    OpenLink Virtuoso Database Agent (multi threaded). </entry>
            </row>
            <row>
              <entry>Broker and Database Agent license files</entry>
              <entry>File(s) containing software activation and license key for the 
    Broker and Database agents.  Primary license, for Request Broker, must 
    be named oplrqb.lic; other licenses will all end in .lic, and will typically be 
    named similarly to a specific database agent, e.g., jdbc13_mv.lic.</entry>
            </row>
            <row>
              <entry>OpenLink HTTP and Tcl Engine</entry>
              <entry>The www_sv executable is an HTTP (Web) Server, implemented 
    as an OpenLink Service-Providing Agent. This component provides the 
    core upon which the OpenLink Admin Assistant has been built.</entry>
            </row>
            <row>
              <entry>HTTP and Tcl Engine configuration file</entry>
              <entry>The www_sv.ini file contains most parameters relevant to the Admin 
    Assistant's provision, most importantly including User Authentication 
    information, including encoded passwords, for all authorized Administrators 
    of the OpenLink components.</entry>
            </row>
            <row>
              <entry>HTTP and Tcl Engine configuration program</entry>
              <entry>The setup executable is automatically executed as part of the 
    Installation process. Manual activation is only necessary if you have lost 
    your Admin Assistant's primary Username and Password.</entry>
            </row>
            <row>
              <entry>OpenLink ODBC Client Components	</entry>
              <entry>As specified in the Client configuration chapter.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <section xml:id="mt_macxsrvinstinstallation">
        <title>Installation</title>
        <para>Double-click the mpkg to start the installation process. </para>
        <figure xml:id="mt_macosxsrvinst01" floatstyle="normal">
          <title>OpenLinkUDA-5.0.dmg</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs01.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You must have an Administration username and password to install the 
 OpenLink Generic Multi-Tier Driver for ODBC.  The Jaguar Installer will 
 immediately prompt you to enter your Mac OS X Username and Password.</para>
        <figure xml:id="mt_macosxsrvinst02" floatstyle="normal">
          <title>Authentication</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs02.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The installer will display a "Welcome" message. Click "Continue". </para>
        <figure xml:id="mt_macosxsrvinst03" floatstyle="normal">
          <title>Welcome</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs03.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The next screen will display the Read-Me file, including any last-minute 
 updates to these documents. Please read carefully, and click "Continue" when 
 finished. </para>
        <figure xml:id="mt_macosxsrvinst04" floatstyle="normal">
          <title>Read Me</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs04.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The next screen will display the License Agreement for the OpenLink 
 Single-Tier Driver for ODBC. Please read, and click "Continue". </para>
        <figure xml:id="mt_macosxsrvinst05" floatstyle="normal">
          <title>Software License Agreement</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs05.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You will be prompted to "Agree" to continue the installation, or "Disagree" to abort.</para>
        <figure xml:id="mt_macosxsrvinst06" floatstyle="normal">
          <title>Agree or Disagree to Licensing</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs06.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You will be asked to select a Destination Volume. Generally, this should 
  be your Mac OS X boot volume. Click on the desired disk icon, and then click "Continue". </para>
        <figure xml:id="mt_macosxsrvinst07" floatstyle="normal">
          <title>Choose Destination</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs07.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You may now choose the Easy Install, or if you are an experienced user, 
 you may Customize which components are installed. OpenLink generally 
 recommends the Easy Install. </para>
        <para>If you have installed OpenLink or iODBC components in the past, click 
 "Upgrade" to continue; otherwise, click "Install". </para>
        <figure xml:id="mt_macosxsrvinst08" floatstyle="normal">
          <title>Easy Install</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs08.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>In a custom installation, you may choose which Client, Documentation, 
 and Server components are installed.  OpenLink recommends that all Servers 
 be equipped with all Client components, and that you install at least the HTML 
 documentation, which will then be available through the Admin Assistant.  
 The iODBC Runtime is necessary for all Client connections, but you may choose 
 not to install it, if you have already installed a later revision.</para>
        <figure xml:id="mt_macosxsrvinst09" floatstyle="normal">
          <title>Custom Install</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs09.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You will be shown a graphical progress bar as Installation progresses, 
 followed by System Optimization. </para>
        <figure xml:id="mt_macosxsrvinst10" floatstyle="normal">
          <title>Installation Progress</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs10.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>During the installation process,  the Installer will prompt for some 
 parameters.  Only an Administrator may configure the Server components, 
 and this authentication is independent of the Installer itself. </para>
        <figure xml:id="mt_macosxsrvinst11" floatstyle="normal">
          <title>Configuration Authentication</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs11.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>First, the Installer will configure the Request Broker `Listener` port. By 
 default, this is 5000, but you may set it to anything appropriate to your 
 environment. Note that all Client DSNs must target the port specified herein. </para>
        <para>If you check off the box labeled Automatically launch the request broker 
 during system startup, a StartupItem will be installed and enabled, to 
 automatically start the Broker at system boot. If you do not check this box, 
 the Broker must be manually launched to permit data access.</para>
        <figure xml:id="mt_macosxsrvinst12" floatstyle="normal">
          <title>Initial configuration, Request Broker tab</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs12.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The next pane is to configure the HTTP-based OpenLink Administrator.  
 By default, this service will listen at port 8000, but you may set it to any port 
 appropriate to your environment. This port will be specified in Web browsers, 
 to access the Admin Assistant, as in the URL, &lt;http://localhost:8000/&gt;.</para>
        <figure xml:id="mt_macosxsrvinst13" floatstyle="normal">
          <title>Initial configuration, Web Administrator tab</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs13.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>When the process is complete, you will be told that the software was 
 successfully installed. Click "Close" and wait a few moments, while the Request 
 Broker is launched in the background. </para>
        <figure xml:id="mt_macosxsrvinst14" floatstyle="normal">
          <title>Installation Completes</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs14.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Installation is complete, and your Broker is available for use, when 
 a new Web browser window is opened, connecting to the newly installed 
 Broker's Admin Assistant.</para>
        <figure xml:id="mt_macosxsrvinst15" floatstyle="normal">
          <title>Admin Assistant Browser Window</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs15.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>A new Finder window will also be opened, containing launch icons for 
 the documentation you've installed (HTML and/or PDF), as well as manual 
 Start and Stop scripts for the Request Broker.</para>
        <figure xml:id="mt_macosxsrvinst16" floatstyle="normal">
          <title>Finder Window</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/MacOSXs16.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Proceed to the next chapter, to learn how to configure your new software.</para>
      </section>
    </section>
    <section xml:id="mt_unixsrvcompinst">
      <title>UNIX &amp; Linux Install</title>
      <info>
        <keywordset>
          <keyword>ODBC Driver Unix; ODBC Driver Linux</keyword>
          <keyword>Unix; Linux</keyword>
          <keyword>Installation</keyword>
        </keywordset>
      </info>
      <orderedlist>
        <listitem>
          <para>Ensure you have downloaded all of the relevant OpenLink Server Components 
  from the page created by the OpenLink Software Download wizard, this must 
  include the OpenLink Server Components Installation shell script file "install.sh" 
  in addition to the compressed "tar" archives for the OpenLink Request Broker 
  and relevant Database Agent Components.</para>
        </listitem>
        <listitem>
          <para>From the OpenLink email that is delivered at the time of download,
  save the attached license file to the same location as the install.sh.</para>
        </listitem>
        <listitem>
          <para>Log on to your Database or Application server machine using 
  the userid and password combination that you normally use when connecting to 
  the database in non ODBC/JDBC/UDBC mode.</para>
        </listitem>
        <listitem>
          <para>Determine your operating system group membership by typing in 
  the command:</para>
          <programlisting><![CDATA[
id
]]></programlisting>
          <para>The "gid" value indicates your current operating system group membership 
  (remember this for use later on during the installation process).</para>
        </listitem>
        <listitem>
          <para>Create an OpenLink installation directory on the server
  (e.g., /usr/openlink) and transfer to it all the server component files
  you downloaded (including compressed TAZ archives and the installation
  shell script "install.sh").</para>
          <note>
            <title>Notes:</title>
            <para>Do not uncompress or unzip the compressed .taz archives after
  download; the installation script will take care of this for you.</para>
            <para>If using FTP, be sure to transfer the compressed .taz archives in
  BINARY mode, and the installation shell script in TEXT mode.</para>
          </note>
          <para>You set your FTP program in TEXT or ASCII transfer mode by typing the 
  following command at your FTP command prompt:</para>
          <programlisting><![CDATA[
ftp> ascii
]]></programlisting>
          <para>You set your FTP program in BINARY transfer mode by typing the following 
  command at your FTP command prompt:</para>
          <programlisting><![CDATA[
ftp> bin
]]></programlisting>
        </listitem>
        <listitem>
          <para>The file "install.sh" is an "sh" shell script.  It must be 
  executed in the appropriate shell to avoid unexpected behaviour.  Run the 
  "install.sh" script on the server by typing the command:</para>
          <programlisting><![CDATA[
sh ./install.sh
]]></programlisting>
        </listitem>
        <listitem>
          <para>The install script will extract the files from the ".taz" 
  files and then create all of the relevant OpenLink server component 
  sub-directories.  The install script will also place the OpenLink server 
  components into their appropriate sub-directories</para>
        </listitem>
        <listitem>
          <para>Once the files have been extracted and placed in the relevant 
  sub-directories, the install script will proceed to install and configure 
  the OpenLink Admin Assistant.  This program enables remote configuration for 
  all OpenLink Server Components (Rule Book, Service and Database Agents) from 
  any Web Browser.</para>
          <para>The dialogue below illustrates the interactions encountered during
  the server components installation process, accepting all the script
  defaults:</para>
          <programlisting><![CDATA[
bash$ sh install.sh
$ sh install.sh
*
* Temporarily saving your original Session Rules Book
* (the file oplrqb.ini) to oplrqb.ini.save
*
* Temporarily saving your original ODBC DSN settings
* (the file odbc.ini) to odbc.ini.save
*
* Temporarily saving your original ODBC Installation settings
* (the file odbcinst.ini) to odbcinst.ini.save
*
* Temporarily saving your original UDBC DSN settings
* (the file udbc.ini) to udbc.ini.save
*
Extracting (dqadp91b.taz) ...
Extracting (dqbrzzzz.taz) ...
* Restoring your original Session Rules Book
* (the file oplrqb.ini) and creating a new oplrqb.ini.sample
*
* Restoring your original ODBC DSN settings
* (the file odbc.ini) and creating a new odbc.ini.sample
*
* Restoring your original ODBC Installation settings
* (the file odbcinst.ini) and creating a new odbcinst.ini.sample
*
* Restoring your original UDBC DSN settings
* (the file udbc.ini) and creating a new udbc.ini.sample
*
Setting up CLASSPATH for Java connectivity.
You can choose between the following Java JDK versions:
 1)     JDK 1.1.x
 2)     JDK 1.2.x
 3)     JDK 1.3.x
Please enter your choice [ENTER=2] :
Creating scripts ...
Entering default values in oplrqb.ini ...
Using Informix 7.3 Multi Threaded Agent (inf73_mv) ...
Using Ingres II Multi Threaded Agent (ingii_mv) ...
Using ODBC Multi Threaded Agent (odbc_mv) ...
Using Oracle 8.1.x Multi Threaded Agent (ora81_mv) ...
Using Virtuoso Multi Threaded Agent (virt_mv) ...
Modifying bin/odbc.ini ...
Modifying bin/odbcinst.ini ...
Creating link for ODBC ...
Enter the port number the broker will listen on for
client connections [ENTER=Default]  :
Welcome to the OpenLink Admin Assistant Setup.
This program will install the HTTP based OpenLink Admin Assistant, thereby
enabling remote configuration for all OpenLink Server Components (Rule Book,
Service and Database Agents) from any Web Browser.
TCP/IP Port to use? [ENTER=8000] :
Log File? [ENTER=www_sv.log] :
Log all requests (y/n)? [ENTER=n] :
Administrator account? [ENTER=admin] :
Administrator's password? [ENTER=admin] :
The OpenLink Admin Assistant is now ready for use.
Please (re)start the OpenLink Request Broker (using the command 'oplrqb -v')
and then point your Web Browser to the URL below:
http://digitalunix5.mydomain.com:8000
Enter the name of the user that will own the
programs [ENTER=Use Current User Settings]  :
Enter the name of the group that will own the
programs [ENTER=Use Current Group Settings] :
Changing ownership ...
End of installation
]]></programlisting>
        </listitem>
        <listitem>
          <para>Run the OpenLink environment shell script as follows:</para>
          <programlisting><![CDATA[. openlink.sh]]></programlisting>
          <para>Users in tcsh or csh must use the command:</para>
          <programlisting><![CDATA[source openlink.csh]]></programlisting>
          <para>This will set all the required environment variables (e.g., $ODBCINI,
  $ODBCINSTINI, $PATH) which enable alternate directory executable launching,
  and proper use of the HTTP-based Admin Assistant.</para>
          <para>You may wish to place the startup command in your shell startup script (.profile,
.login, .bashrc etc) in order for it to take effect on login.</para>
        </listitem>
        <listitem>
          <para>Start your OpenLink Request Broker in debug mode by
  executing the OpenLink Request Broker startup command:</para>
          <programlisting><![CDATA[oplrqb -dv]]></programlisting>
          <para>Should you receive an "oplrqb: unable to create listener (Address
  already in use)" error, this most likely indicates that the Broker is
  already started. It can be shut down by running the command:</para>
          <programlisting><![CDATA[oplshut -f]]></programlisting>
          <para>or</para>
          <programlisting><![CDATA[oplshut +port <alternate port number>]]></programlisting>
          <para>Where &lt;alternate port number&gt;&gt; is a different port number you specified
as the Broker's TCP listen port at install-time. (If you used the default
port, then use the former command.)</para>
          <para>If you continue to receive the error above, the port (either 5000, or
the one you specified as the Listen port) is already occupied by another TCP
process. Contact your systems administrator for assistance, or reinstall the
OpenLink Request Broker, specifying a different TCP Listen port.</para>
        </listitem>
        <listitem>
          <para>Start your Web Browser and then enter the following URL:</para>
          <programlisting><![CDATA[http://host:port]]></programlisting>
          <para>Where <emphasis>host</emphasis> is the network alias or IP address of machine
where Server Components are installed. The <emphasis>port</emphasis> is the number
you provided when prompted by OpenLink installer.</para>
          <para>For example, if your machine has a network alias of "opllinux", and you
accept the default port number at installation time, then the required URL
would be constructed as follows:</para>
          <programlisting><![CDATA[http://opllinux:8000]]></programlisting>
        </listitem>
        <listitem>
          <para>Follow the instructions provided in the "Client Components
  Installation" section of this guide, in order to verify connectivity to your
  server using the OpenLink Multi-Tier Data Access Drivers.</para>
        </listitem>
        <listitem>
          <para>If the previous step is successful, shut down the Request Broker 
  using the command:</para>
          <programlisting><![CDATA[oplshut -f]]></programlisting>
          <para>or</para>
          <programlisting><![CDATA[oplshut -fy]]></programlisting>
          <para>This will kill off any remaining connections to the database, if they
  have been established. Next restart in normal mode using the command:</para>
          <programlisting><![CDATA[oplrqb -v]]></programlisting>
          <para>Running your Request Broker in debug mode will log a significant amount
  of information to the bin/oplrqb.log file, so normal mode is recommended unless
  you are experiencing problems which you need to report to Technical Support.</para>
          <para>For more information about other available options when starting and
  stopping the Request Broker, see the "Request Broker Startup &amp; Shutdown"
  topic in the <link linkend="mt_startandstop">
  Server Components Administration section</link> of this guide.</para>
        </listitem>
      </orderedlist>
    </section>
    <section xml:id="mt_servcompinstcont">
      <info>
        <title>Installed Files &amp; Locations</title>
        <keywordset>
          <keyword>Installed Files</keyword>
          <keyword>File Locations</keyword>
          <keyword>ODBC Driver</keyword>
        </keywordset>
      </info>
      <para>The core components required by the Request
Broker and Database Agents are situated within the "bin" and "bin/w3config"
sub-directories under your OpenLink server components base installation
directory.  Each of these components is described below and grouped by directory
location.</para>
      <para>On Windows, the default base installation directory is 
 <computeroutput>C:\Progam Files\OpenLink\</computeroutput>.  On Mac OS X, 
 the non-configurable base installation directory is 
 <computeroutput>//Library/Application Support/openlink/</computeroutput>.</para>
      <section xml:id="mt_binsubdir">
        <title>The "bin" sub-directory:</title>
        <para>Below is a list of the important files in
the bin directory:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Important Files in the bin directory</title>
          <tgroup align="char" charoff="50" char="." cols="2">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>File</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>oplrqb</entry>
                <entry>The OpenLink Request Broker.</entry>
              </row>
              <row>
                <entry>oplrqb.ini</entry>
                <entry>The OpenLink "Session Rules" Book.</entry>
              </row>
              <row>
                <entry>oplrqb.log</entry>
                <entry>File that holds critical Broker &amp;
  Startup and Shutdown audit information. All critical events that affect the
  Broker are written to this file irrespective of Broker startup options.</entry>
              </row>
              <row>
                <entry>oplshut</entry>
                <entry>Utility for showing Agent status and
  shutting down the Broker.</entry>
              </row>
              <row>
                <entry>xxx_sv</entry>
                <entry>OpenLink Agent (single thread). xxx will be an abbreviation for the data access or protocol
  handling service provided by the OpenLink Agent.</entry>
              </row>
              <row>
                <entry>xxx_mv</entry>
                <entry>OpenLink Agent (mutli thread). xxx will be an abbreviation for the data access or protocol
  handling service provided by the OpenLink Agent.</entry>
              </row>
              <row>
                <entry>release.txt</entry>
                <entry>Text file with the latest information
  regarding the Request Broker.</entry>
              </row>
              <row>
                <entry>oplrqb.lic</entry>
                <entry>File containing software activation and
  license key for the Broker and Database agents.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <!-- ######################## -->
      <section xml:id="mt_w3configdir">
        <title>The "bin/w3config" sub-directory:</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Important Files in the bin/w3config directory</title>
          <tgroup align="char" charoff="50" char="." cols="2">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>File</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>www_sv</entry>
                <entry>The OpenLink Web Service Agent, this is
  basically a HTTP/Web Server implemented as an OpenLink Service Providing
  Agent. It is this component that forms the core engine around which the
  OpenLink Admin Assistant has been built.</entry>
              </row>
              <row>
                <entry>www_sv.log</entry>
                <entry>File that holds critical Web Service
  Agent &amp; Startup and Shutdown audit information. All critical events that
  affect the Web Service Agent are written to this file irrespective of Web
  Service Agent startup options.</entry>
              </row>
              <row>
                <entry>www_sv.ini</entry>
                <entry>Web Service Agent configuration file.</entry>
              </row>
              <row>
                <entry>setup</entry>
                <entry>Web Service Agent installation and
  configuration program (you only need to run this directly if you only want to
  re-install the Web Service Agent component as opposed to the entire pool of
  OpenLink Server Components.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <!-- ##################################### -->
    </section>
    <section xml:id="mt_versionnos">
      <info>
        <title>Obtaining Component Details From The Command Line</title>
        <keywordset>
          <keyword>OpenLink Component Details</keyword>
          <keyword>Details</keyword>
        </keywordset>
      </info>
      <para>This approach provides you with information
about the actual executable file, it includes:</para>
      <para>Version Number - this is a component identifier that
indicates the version number specific of a specific OpenLink Component</para>
      <para>Release Number - this is an identifier for a collection of
OpenLink Components, numerous components with different version numbers make up
an OpenLink Data Access Drivers commercial release.</para>
      <para>Compilation Date - indicates the date component was compiled.</para>
      <para>CVSID - this is a source code archive identifier that relates to the
actual source code archive from which a particular component has been
assembled.</para>
      <para>Binary Platform - indicates what platform the component
has been built to run on.</para>
      <para>To obtain the information referred to above
for any OpenLink Component simply type in the program name at your command
prompt with the --help switch.</para>
      <para>Examples of the output produced by the
OpenLink Request Broker and the OpenLink Web Service Agent are depicted below:</para>
      <section xml:id="mt_oplrqb">
        <title>OpenLink Request Broker:</title>
        <programlisting><![CDATA[
[person@linuxbox bin]$ ./oplrqb --help
OpenLink Request Broker
Version 2.22 (Release 4.2) as of Mon Apr 08 2002 (cvsid 00060).
Compiled for Linux 2.4.18-xfs (i686-pc-linux-gnu)
Copyright (C) OpenLink Software.
Usage:
  oplrqb [-flLdcv] [+foreground] [+loglevel num] [+logfile arg] [+debug]
         [+configfile arg] [+version]
  +foreground   run in the foreground
  +loglevel     log level
  +logfile      log file
  +debug        debug mode
  +configfile   use alternate configuration file
  +version      show version number
]]></programlisting>
      </section>
      <section xml:id="mt_webage">
        <title>Web Service Agent:</title>
        <programlisting><![CDATA[
[person@linuxbox w3config]$ www_sv --help
OpenLink Web Service Agent
Version 1.5 (Release 4.2) as of Mon Apr 08 2002 (cvsid 00060).
Compiled for Linux 2.4.18-xfs (i686-pc-linux-gnu)
Copyright (C) OpenLink Software.
Usage:
  www_sv [-clLd] [+config arg] [+loglevel num] [+logfile arg] [+debug]
  +config     config file
  +loglevel   log level
  +logfile    log file
  +debug      debug mode
Copyright (c) 1987-1994 The Regents of the University of California.
Copyright (c) 1994-1996 Sun Microsystems, Inc.
Copyright (c) 1995 The Apache Group.  All rights reserved.
 This product includes software developed by the Apache Group
 for use in the Apache HTTP server project (http://www.apache.org/).
]]></programlisting>
        <tip>
          <title>See Also:</title>
          <para>Using the Admin Assistant section for obtaining 
<link linkend="mt_adinfoadmasist">General Information</link> using the web 
interface.</para>
        </tip>
      </section>
    </section>
    <section xml:id="mtfirewalling">
      <info>
        <title>Configuring a Firewall for use with UDA Multi-Tier</title>
        <keywordset>
          <keyword>OpenLink Component Details</keyword>
          <keyword>Details</keyword>
        </keywordset>
      </info>
      <para>
A multi-tier installation requires the following firewall considerations:
</para>
      <para>On the server on which the Request Broker runs, you must allow
your clients to connect to port 5000/tcp (or the value of the "Listen"
directive in oplrqb.ini).
</para>
      <para>On the server, you must allow clients to connect to ports
5001/tcp et seq (the values between the "PortLow" and "PortHigh"
directives in oplrqb.ini).
</para>
      <para>On the client, you must be able to make new outgoing connections
to the server to contact the request broker (the same 5000/tcp or the
value of the "Listen" directive), and to agents listening on
successively higher-numbered ports (in the range between "PortLow" and
"PortHigh").
</para>
      <para>If the agent makes a network connection to the database server,
the respective port should also be opened on the database server
(e.g. 5432/tcp for postgres, 1433 and 1434 udp and tcp for SQL Server,
etc).
</para>
      <para>If you have a stateful firewall, the return packets from
request-broker and database agents to the clients should be taken care
of automatically. If not, you will have to cater for your OS'
selection of ephemeral client-side ports as well.
</para>
    </section>
  </chapter>

  <!-- 
  $Id: SrvCompAdm.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_SrvCompAdm">
    <title>Request Broker Administration</title>
    <info>
      <abstract>
        <para>
Guide for successfully installing and running the OpenLink server components
from the OpenLink Multi Tier Data Access Suite.
</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Server</keyword>
        <keyword>Request Broker</keyword>
        <keyword>Broker</keyword>
        <keyword>Server Side</keyword>
        <keyword>OPLSHUT</keyword>
        <keyword>OPLRQB</keyword>
        <keyword>Administration</keyword>
      </keywordset>
    </info>

    <!-- ##################################### -->
    <section xml:id="mt_startandstop">
      <info>
        <title>Request Broker Startup &amp; Shutdown</title>
        <keywordset>
          <keyword>Request Broker</keyword>
          <keyword>Startup</keyword>
          <keyword>Shutdown</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_startup">
        <title>Startup Options</title>
        <para>The Request Broker can be started in a
number of ways using various command line options. A single instance is described here.
For multiple instances, see a subsequent section.</para>
        <programlisting><![CDATA[
Usage: 
  oplrqb [-flLdcv] [+foreground] [+loglevel num] [+logfile arg]
	[+debug][+configfile arg] [+version]
  +foreground   run Broker in the foreground mode
  +loglevel     log level where Broker session log details decrease in verbosity from 7 down to 1
  +logfile      full path and file name into which Broker session log output is to be written
  +debug        starts Broker in debug mode
  +configfile   use alternate configuration file
  +version      show version number
]]></programlisting>
        <section xml:id="mt_commandlineexamples">
          <title>Command Line Examples:</title>
          <programlisting><![CDATA[oplrqb ]]></programlisting>
          <para>Starts the Broker in background mode.</para>

          <!-- ######################## -->
          <programlisting><![CDATA[oplrqb -v]]></programlisting>
          <para>Starts the Broker in background mode and
displays version information as part of startup process.</para>
          <programlisting><![CDATA[oplrqb -dv]]></programlisting>
          <para>Starts the Broker in foreground debug mode
using default log level 7 (most amount of session log information). This
occupies your terminal session in the foreground, and echoes the output of
all OpenLink Data Access Clients to the terminal window.</para>

          <!-- ######################## -->
          <programlisting><![CDATA[oplrqb -dvl 1]]></programlisting>
          <para>Starts the Broker in foreground debug mode
using default log level 1 (lowest amount of session log information). This
occupies your terminal session in the foreground, and echoes the output of
all OpenLink Data Access Clients to the terminal window.</para>

          <!-- ######################## -->
          <programlisting><![CDATA[oplrqb -dvL /tmp/openlink.log]]></programlisting>
          <para>Starts the Broker in foreground debug mode
using default log level 7 (most amount of session log information). This
occupies your terminal session in the foreground, and echoes the output of
all OpenLink Data Access Clients to the file "/tmp/openlink.log" .</para>
        </section>
      </section>
      <section xml:id="mt_shutdownopts">
        <title>Shutdown Options</title>
        <para>
The OpenLink Request Broker can be shut down in various ways, using the
available command line options.</para>
        <programlisting><![CDATA[
Usage:
  oplshut [-hcskryfpP] [+hostname arg] [+configfile arg] [+show] [+kill]
          [+reinit] [+yes] [+force] [+protocol arg] [+port num] [pid ..]
  +hostname     contact oplrqb on given host
  +configfile   use alternate configuration file
  +show         show database agent connections
  +kill         kill a database agent
  +reinit       oplrqb must reread the rulebook
  +yes          don't ask for confirmation
  +force        force immediate shutdown (kill all)
  +protocol     specify protocol to use
  +port         specify port to use
Examples:
  oplshut            Shutdown broker on local machine (when idle)
  oplshut -f         Shutdown broker without waiting for clients to terminate
  oplshut -fy        Same as -f, but without asking for confirmation
  oplshut -s         Show the current active connections
  oplshut -k 81 93   Try to terminate the database agents with svpid 81 and 93
]]></programlisting>
        <section xml:id="mt_cmdlineegs">
          <title>Command Line Examples:</title>
          <programlisting><![CDATA[oplshut ]]></programlisting>
          <para>Shuts down the Request Broker on the local machine.
When a connection is still active, and the user calls oplshut without 
additional arguments, the broker will enter a gracefull shutdown state which
means that it will not accept any new connections, but remains active until
all active connections are terminated.</para>
          <para>The shutdown state will be reported on the foreground screen
or broker log:</para>
          <screen><![CDATA[oplrqb: shutdown mode initiated by openlink@127.0.0.1]]></screen>
          <para>Any client that tries to connect to the broker will get the following error 
message:</para>
          <screen><![CDATA[
odbctest DSN=ora8i
OpenLink ODBC Demonstration program
This program shows an interactive SQL processor
[OpenLink][ODBC]the broker is being shut down, SQLSTATE=08004
[OpenLink][ODBC]Connection rejected by data source, SQLSTATE=08004
]]></screen>

          <!-- ######################## -->
          <programlisting><![CDATA[oplshut -f ]]></programlisting>
          <para>Shuts down the Request Broker on the local machine without
waiting for clients to terminate.</para>
          <para>
If you use the -f (or force) flag, the broker will kill all active connections
regardless what the client application is doing, which can lead to problems
if the applications are not written to handle such events. Depending on the
database, open transactions will be rolled back etc.
</para>
          <para>Many databases like Oracle and Progress implement the same concept where
the gracefull shutdown option is the default, but a shutdown can be forced
in case of a big calamity, or when a connection remains lingering.
</para>

          <!-- ######################## -->
          <programlisting><![CDATA[oplshut -fy ]]></programlisting>
          <para>Same functionality as prior command, but
without asking for confirmation.</para>
          <programlisting><![CDATA[oplshut +port 16000]]></programlisting>
          <para>Shuts down the Request Broker running on the TCP Listen port of
"16000". Note that the default Request Broker Listen port is 5000, thus
this option is not necessary unless you specified a different Listen port
at install-time.</para>

          <!-- ######################## -->
          <programlisting><![CDATA[oplshut -s ]]></programlisting>
          <para>Shows the current active OpenLink Data
Access Client connections.</para>

          <!-- ######################## -->
          <programlisting><![CDATA[oplshut -k 81 93 ]]></programlisting>
          <para>Try to terminate the database agent
sessions with process IDs 81 and 93.</para>
          <programlisting><![CDATA[oplshut -h 12.34.56.78]]></programlisting>
          <para>Shuts down the Request Broker on remote machine with IP
address "12.34.56.78".</para>
        </section>
      </section>
      <section xml:id="mt_securityutil">
        <title>Security</title>
        <para>Due to the Unix security model certain
kernel calls can only be used when the process is run by root or under the
permission of root. One of these function calls is needed for the PingWatchDog
protocol, thereby forcing you to run the request broker as root. This can be
accomplished in two ways:</para>
        <orderedlist>
          <listitem>
            <para>The user logs in as root and then fires up the request broker. </para>
          </listitem>
          <listitem>
            <para>The request broker is flagged to run under root privileges and
     the user can start it up from other accounts. </para>
          </listitem>
        </orderedlist>
        <para>The consequences of 1 are that the user(s)
who need to startup the broker need to have knowledge of the root password,
which is not advisable for system managers to give to ordinary users.</para>
        <para>Therefore we have built a solution whereby
the broker can be flagged as running under root privileges without the user(s)
needing to know the root password. The system manager executing the following
commands accomplishes this:</para>
        <programlisting><![CDATA[
cd openlink/bin
 ./security -s 
]]></programlisting>
        <para>This will place the broker into a special
security state that has the following impact:</para>
        <orderedlist>
          <listitem>
            <para>The permissions of the oplrqb program are changed so it takes
     on the identity of "root" when started up. </para>
          </listitem>
          <listitem>
            <para>The broker now knows the position of the oplrqb.ini file and
     will not accept certain startup flags so it cannot be tricked to read in
     another oplrqb.ini file from the command line.</para>
          </listitem>
          <listitem>
            <para>The oplrqb.ini file can now only be written to by the
     "root" account, other accounts will only be able to read this
     file. </para>
          </listitem>
        </orderedlist>
        <para>If a user now starts the broker the StartupBy clause within the 
[Security] section of the broker is checked to see whether the user is 
allowed to startup the broker (same for shutdown).</para>
        <para>This accomplishes the wish of many system
administrators that the broker process can be started up as root, without
widespread knowledge of the root password. </para>
        <para>As stated in item 3 above the "oplrqb.ini" file can now only 
be written to by the "root" account. This means that ordinary users 
cannot modify this file, which often seems like an unpleasant side effect.  
To overcome this some system administrators are temped to modify the mode of 
the oplrqb.ini file, thereby opening up to security risks.  This should be 
avoided, the <emphasis>IncludeRuleBook</emphasis> parameter inside the 
<emphasis>Security</emphasis> sections should be used instead to divide the 
rulebook in to parts for others to manage for themselves.  The system 
administrator can split up the rulebook into different files which than can 
be included from the master oplrqb.ini file.  This makes specific sections 
available to normal users, but allowing the system administrator to decide 
which sections can/cannot be overruled by normal users. The included rulebooks 
cannot overrule any section within the oplrqb.ini file.  This is a very powerful 
way of dealing with high security installations within large companies.</para>
      </section>
      <section xml:id="mt_multibroker">
        <title>Multiple Request Brokers</title>
        <para>
There are now three different behaviors for running the broker under Windows
that are affected by the type of Windows operating system, and the
+foreground and +debug flags.</para>
        <section xml:id="mt_multimeth1">
          <title>METHOD 1 - As a service</title>
          <para>When:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>
    Under NT/XP/2000, when no +foreground or +debug has been specified.
    The oplrqb service will start, but only if it has been registered.
    When no +instance is specified, it will use the default instance.
    If this fails, it will run as method 2 or 3.</para>
            </listitem>
            <listitem>
              <para>
    Under NT/2000, with a +service start [+instance identifier]
    If this fails, it will exit with an error.</para>
            </listitem>
          </itemizedlist>
          <note>
            <title>Note 1:</title>
            <para>When starting oplrqb without options, it will attempt
to auto start an existing service. if that fails, it will
attempt methods 2 and 3 (see below)</para>
          </note>
          <note>
            <title>Note 2:</title>
            <para>You'll need to do +service create first, the broker doesn't do this by itself.</para>
          </note>
        </section>
        <section xml:id="mt_multimeth2">
          <title>METHOD 2 - With debugging console</title>
          <para>When:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>with +foreground or +debug, started from explorer/dos box</para>
            </listitem>
            <listitem>
              <para>without +foreground or +debug option, started from a dos box.</para>
            </listitem>
          </itemizedlist>
          <note>
            <title>Note:</title>
            <para>Start up mode is different when launched from a dos box.
If there are no command line options specified, the broker
will now default to +debug when started in a dos box.</para>
            <para>
  the +foreground and +debug options take precedence over
  method 1 (starting the service)</para>
          </note>
        </section>
        <section xml:id="mt_multimeth3">
          <title>METHOD 3 - User Specific Service (characterized by a Services Tray Icon)</title>
          <para>When:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>started from explorer, without +foreground/+debug</para>
              <para>(NT/XP/2000: Method 1 is tried first)</para>
            </listitem>
          </itemizedlist>
          <note>
            <title>Note:</title>
            <para>It will attempt to locate oplrqb.ini in the current
directory, unless +config file has been specified.</para>
          </note>
        </section>
        <section xml:id="mt_multisummary">
          <title>Startup Mode Summary</title>
          <para>To summarize, here is some pseudo code:</para>
          <programlisting><![CDATA[
if OS = NT or OS = Win2000 or OS = XP then
  if no +foreground or +debug options then
    if there is a service installed then
      silently attempt to start the service
      if this succeeds then exit
    endif
endif
if +foreground or +debug options then
  allocate a debugging console
  run in the foreground
else if started from a dos box then
  set +foreground and +debug
  allocate a debugging console
  run in the foreground
else
  create the splash window and assume tray behavior
endif
Note: it is possible to make the oplrqb service allocate a debugging
console. To do this, specify +debug while creating the service
(example: oplrqb +service create +debug)
]]></programlisting>
        </section>
        <section xml:id="mt_multisrvi">
          <title>Multiple Service Instances</title>
          <para>Multiple instances of the broker work only for NT/XP/2000 when running
as a service.</para>
          <para>
There is one default instance (unnamed) which is used when no +instance
command line flag has been specified.</para>
          <para>
examples:</para>
          <programlisting><![CDATA[oplrqb +service create]]></programlisting>
          <para>Registers the default service instance.
This service will use the oplrqb.ini rulebook in the current directory</para>
          <programlisting><![CDATA[oplrqb +service create +instance 1 +config f:\openlink]]></programlisting>
          <para>Registers the oplrqb_1 service instance
This service will use the oplrqb.ini rulebook in f:\openlink</para>
          <programlisting><![CDATA[oplrqb +service create +config f:\openlink\test\debug.ini +debug]]></programlisting>
          <para>Registers the default service instance.
    This service will use the debug.ini rulebook in f:\openlink\test
    This service will produce debug output in a console.
    This service will not auto start, use oplrqb +service start
</para>
          <para>Other service commands:</para>
          <programlisting><![CDATA[
  +service auto [+instance id]    Set start up type to Automatic
  +service manual [+instance id]  Set start up type to Manual
  +service start [+instance id]   Start up the service
  +service stop [+instance id]    Stops up the service
  +service delete [+instance id]  Unregisters up the service
]]></programlisting>
          <para>+service list has been extended to show the rulebook that the
  instance uses as well as other status information.</para>
          <para>To configure another Broker instance manually:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>create a new directory</para>
            </listitem>
            <listitem>
              <para>create a new rulebook in this directory</para>
            </listitem>
            <listitem>
              <para>set BinaryDirectory in this new rulebook to the installation directory
    of oplrqb.exe (need to share binaries &amp; licensing)</para>
            </listitem>
            <listitem>
              <para>Specify a different Listen port</para>
            </listitem>
            <listitem>
              <para>Either disable www_sv in the rulebook or create a new www_sv.ini with 'HttpPort' key value set to a unique value other than the default 8000.</para>
            </listitem>
            <listitem>
              <para>create another entry using +instance &lt;id&gt; +config &lt;the_new_rulebook_ini&gt;</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>

    <!-- ##################################### -->
    <section xml:id="mt_rqbsessparams">
      <info>
        <title>Request Broker Session Parameters</title>
        <keywordset>
          <keyword>Request Broker</keyword>
          <keyword>Session Parameters</keyword>
          <keyword>Broker Parameters</keyword>
        </keywordset>
      </info>
      <para>The Request Broker is responsible for
setting up the profile of one of more OpenLink Data Access sessions, this
includes a Transport Protocol selection, Keep Alive Packets notifications,
Network Message Buffer Sizes. Initialization retry intervals, Agent
initialization timeouts, and much more. Rather than have you manually set this
options via the OpenLink Rule Book, it is now possible for you to configure
this options via your Web Browser of choice using the Admin Assitant</para>
      <para>The Admin assistant allows you to configure
Request Broker session parameters in two ways, via a series of Wizard
Interactions or via an HTML form, the sections that follow illustrate both
approaches.</para>

      <!-- ======================================== -->
      <section xml:id="mt_adinfoadmasist">
        <title>General Information</title>
        <para>You obtain additional information using the Admin Assistant, expand 
the "Server Components Administration" menu item, then "General Request 
Broker Information", you are offered:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Register File Information - enables you to determine the
     license(s) that you have in place.</para>
          </listitem>
          <listitem>
            <para>Session Rules Book - the current set of rules for your OpenLink
     Data Access sessions.</para>
          </listitem>
          <listitem>
            <para>Request Broker Log File Information - displays the contents of
     your Request Broker log file.</para>
          </listitem>
        </itemizedlist>
        <para>Here is an example of the License Information page:</para>
        <figure xml:id="mt_rqbadw01" floatstyle="normal">
          <title>Admin Assistant Wizard - License Information</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="scimg003.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_sessconfwiz">
        <title>Using Admin Assistant Wizards</title>
        <orderedlist>
          <listitem>
            <para>Specify the location of your Request
Broker and its dependent components. Also set restrictions on number of Agents,
and number of connections.</para>
            <para>Click the "Next" button.</para>
            <figure xml:id="mt_rqbadm02" floatstyle="normal">
              <title>Admin Assistant Wizard</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg005.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Linger Timeout:  The number of seconds an OpenLink Agent without connections 
will linger before being terminated by the OpenLink Request Broker, Specify 
0 here to disable lingering.  Lingering is a feature for avoiding repetative load/unload 
overhead of agents that are frequently used for short, quick concurrent open/close 
connections.</para>
            <para>This setting is global to all agents. For specific agent settings, use the
LingerTimeout= value in the agent environment section.</para>
            <para>Set Resolving of IP addresses to hostnames. The logging will
	show the hostname instead of the IP number if this option is selected.
	Switch off hostname lookup to avoid possible delays when frequently
	looking up unknown (new) IP numbers through a distant uncached DNS
	table. This parameter will have a direct affect on the type of match
	that is to be used for the StartupBy, ShutdownBy and ShutdownFrom
	parameters under the Security section.</para>
            <para>Click the "Next" button.</para>
            <figure xml:id="mt_rqbadm02a" floatstyle="normal">
              <title>Admin Assistant Wizard</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg006.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>To help with troubleshooting, turn on
	session logging and extra information. Or run the broker in foreground
	mode to view the trace. Then click on the "Next" button.</para>
            <figure xml:id="mt_rqbadm03" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg007.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter buffer size values for the
inbound and outbound network messages for each OpenLink Agent (it is advisable
to take the default values presented). Then click the "Next" button.</para>
            <figure xml:id="mt_rqbadm04" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg009.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter values for "Database
Agent" session initialization, "Broker Contact", and
initialization failure retry counts by entering values into the respective
fields as depicted below (it is advisable take the defaults). Then click on the
next button.</para>
            <figure xml:id="mt_rqbadm05" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg010.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Check the related boxes
presented in order to select the Network Transport Protocol to be used by your
Request Broker and Database Agents when communicating with your OpenLink Data
Access Clients. Then click on the next button.</para>
            <figure xml:id="mt_rqbadm06" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg011.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You can choose to enable the OpenLink Ping Watchdog.  All 
  OpenLink components automatically use the keep-alive feature built in to most current 
  implementations of TCP/IP stack.  If keep-alive is not available the Ping 
  WatchDog can be enabled in attempt to compensate for this.   
  Click the "Next" button to continue.</para>
            <figure xml:id="mt_rqbadm07" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg013.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>If you have more than one Network
Interface Card (NIC) installed on your OpenLink Server machine, then you can
enter a value in the "Force IP Address" field that represents the IP
address that you want the Request Broker to listen at.</para>
            <figure xml:id="mt_rqbadm08" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg015.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter the port number on which the OpenLink Request Broker will listen
for client connections. Each OpenLink Request Broker running on the same host must have a unique
port number assigned to it.</para>
            <para>You can also designate port number ranges to be used by the
Broker to advertise other OpenLink services (e.g JDBC Agent used by OpenLink
Drivers for JDBC). Once completed, click the "Next" button to
continue.</para>
            <figure xml:id="mt_rqbadm8b" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg016.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the "Save" button
to save your changes permanently.</para>
            <figure xml:id="mt_rqbadm09" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg017.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click the "Exit" button to leave the Broker Settings
Wizard.</para>
            <figure xml:id="mt_rqbadm10" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg019.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_sesconffrms">
        <title>Using Admin Assistant Forms</title>
        <para>You can also choose to configure your Request
Broker's session settings via a Forms as opposed to Wizard based interface. You
select this option from the Admin Assistant and you will be presented with a
screen similar to the snapshot below. </para>
        <para>Each Broker session settings field contains
a description of the values that need to be entered into each of the forms
fields. In addition a brief description of the use of each of these values is
provided below each field.</para>
        <figure xml:id="mt_rqbadm11" floatstyle="normal">
          <title>Admin Assistant</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="scimg021.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <!-- ##################################### -->
    <section xml:id="mt_oplsessadminconf">
      <info>
        <title>OpenLink Session Rules Administration &amp; Configuration Guide </title>
        <keywordset>
          <keyword>Session Rules</keyword>
          <keyword>Session Rules Administration; Session Rules Configuration</keyword>
          <keyword>Administration; Configuration</keyword>
        </keywordset>
      </info>
      <para>One of the most important features and
benefits of your OpenLink Multi Data Access Drivers, is the ability to
configure and control your entire OpenLink infrastructure from a central point
using "OpenLink Session Rules". These session rules are stored and
maintained in a text based repository called the "Session Rules Book"
(the file "oplrqb.ini"). </para>
      <para>You administer these rules from your web
browser using the OpenLink Admin Assistant. The rules that you create are
enforced by the OpenLink Request Broker, giving you phenomenal control over
your distributed computing infrastructure.</para>
      <section xml:id="mt_sessrulconcept">
        <title>OpenLink Session Rules Concepts</title>
        <para>Session rules are declarative in nature and
template driven. You build a template that determines how one or more OpenLink
Client components are going to interact with a particular instance of an
OpenLink Server component (Database Agent or Service Provider Agent). Session
rules also determine what OpenLink Server is instantiated and how it is to be
instantiated for a particular OpenLink Client.</para>
        <para>The basic Session Rule unit is an OpenLink
Connection Attribute, each representing a key aspect of an OpenLink Client's
connection to an OpenLink Agent Session. There are six OpenLink Connection
Attributes: Domain, User, OpSys, Machine, Application and Mode.</para>
      </section>
      <section xml:id="mt_oplconnattr">
        <title>OpenLink Connection Attributes</title>
        <para>There are two types of OpenLink Connection
Attributes, these are "User Configurable" and "Non User
Configurable" Connection Attributes.</para>
        <section xml:id="mt_usrconfconat">
          <title>User Configurable Connection Attributes</title>
          <para>These attributes are configurable by the
OpenLink Client user. When using ODBC this is handled via the ODBC
Administrator or via the Admin Assistant ODBC Data Source Name Configuration
Menu (this also applies to UDBC Clients). JDBC handles this through the use of
JDBC URLs and in the case of JDBC 2.0 via Data Source Names. OLE-DB handles
this via a Connection String Building Wizard.</para>
          <para>
            <bridgehead>Domain Attribute</bridgehead>
          </para>
          <para>Identifies the OpenLink Agent to which all
OpenLink Connection Attributes apply. </para>
          <para>This attribute describes a logical
reference for a database type, OpenLink agent type, or anything else you would
like to use as a logical identifier for all the other OpenLink Connection
Attributes.</para>
          <para>This attribute is also referred to as the
"Server Type" or "SVT" attribute of an OpenLink Client
connect string. It is also referred to in older product documentation as the
OpenLink "Provider Type".</para>
          <formalpara>
            <title>User Attribute</title>
            <para>Identifies the User making use of an
OpenLink Client.</para>
          </formalpara>
          <formalpara>
            <title>Database Attribute</title>
            <para>Identifies a specific database name within
a database environment, e.g ORCL within Oracle, "stores7" within
Informix, "pubs" with Sybase or Microsoft SQL Server etc. The values
associated with this Connection Attribute aren't overridden by Aliases, instead
they are overridden by the "Database" attribute within an Agent
Configuration template.</para>
          </formalpara>
          <formalpara>
            <title>ServerOpts (Database Sever Environment Options) Attribute</title>
            <para>Identifies a set of database environment
initialization parameters, currently this attribute only applies to Progress
environments. It is used to set self serving client initialization parameters
such as: -TB, -TB, -q, -D mdy etc. The values associated with this Connection
Attribute aren't overridden by Aliases, instead they are overridden by the
"SeverOptions" attribute within an Agent Configuration template.</para>
          </formalpara>
          <formalpara>
            <title>ConnectOpts (Database Server Connection Options) Attribute </title>
            <para>Identifies a set of database server
connection parameters used to initiate a connection with a backend database
server process. This is how an OpenLink Database Agent makes a connection with
a backend database server using a particular database vendors networking
middleware (e.g. Net8 or SQL*Net for Oracle, I-Connect or I-Net for Informix,
Progress Client Networking for Progress, Open Client for Sybase etc.) . The
values associated with this Connection Attribute aren't overridden by Aliases,
instead they are overridden by the "ConnectOptions" attribute within
an Agent Configuration template.</para>
          </formalpara>
        </section>
        <section xml:id="mt_nonuserconfat">
          <title>Non User Configurable Connection Attributes</title>
          <para>These attributes are environmental in
nature and derived automatically by an OpenLink Client.</para>
          <formalpara>
            <title>OpSys (Operating System) attribute</title>
            <para>Identifies the Client operating system from
which the OpenLink Client is being executed.</para>
          </formalpara>
          <formalpara>
            <title>Machine attribute</title>
            <para>Identifies the Network Alias or IP address
of the machine or device from the OpenLink Client is being executed.</para>
          </formalpara>
          <formalpara>
            <title>Application attribute</title>
            <para>Identifies the ODBC, JDBC, UDBC, OLE-DB
Client Application from which the OpenLink Client is being executed.</para>
          </formalpara>
          <note>
            <title>Note:</title>
            <para>The Application name can be set within the application using the 
  ODBC API SQLSetConnectOption(hdbc, SQL_APPLICATION_NAME, "AppName").  
  The JDBC equivelent can also be used.</para>
          </note>
          <formalpara>
            <title>Mode attribute</title>
            <para>Identifies the session Mode required by an
OpenLink Client, this may be Read-Only or Read-Write.</para>
          </formalpara>
        </section>
      </section>
      <section xml:id="mt_sesstemplate">
        <title>OpenLink Session Templates</title>
        <para>Connection attributes are conditionally
post processed during the initialization of session between an OpenLink Client
and and OpenLink Agent, the rule book consists of a number of templates that
play different roles during this process. The rule book is made up of the
following templates: Session Aliases, Mapping Rules, and Agent Configuration</para>
        <formalpara>
          <title>Session Aliases Templates</title>
          <para>These are rule book templates used for post
processing OpenLink Connection Attribute values prior to Mapping Rules
evaluation. This is the facility used by the Request Broker for overriding
Connection Attributes from OpenLink Clients with values on configured an
OpenLink server.</para>
        </formalpara>
        <formalpara>
          <title>Mapping Rules Templates</title>
          <para>These are rule book templates used to
determine which OpenLink Agents are instantiated in line with an OpenLink
Client's session request. </para>
        </formalpara>
        <formalpara>
          <title>OpenLink Agent Configuration Templates</title>
          <para>Templates used for setting key OpenLink
Agent Configuration parameters. See the OpenLink
Agent Administration section for detailed information.</para>
        </formalpara>
      </section>
      <section xml:id="mt_sessrulexec">
        <title>Session Rules Execution Process</title>
        <para>When an OpenLink Client makes contact with
an OpenLink Request Broker a series of events occur culminating in the
identification and execution of a session rule. The step as follow guide you
through this process:</para>
        <orderedlist>
          <listitem>
            <para>Request Broker receives session request from one or more OpenLink
     Clients (Drivers for ODBC, UDBC, JDBC, OLE-DB).</para>
          </listitem>
          <listitem>
            <para>Request Broker parses the session request data stream received
     from the relevant OpenLink Client isolating each OpenLink Connection
     Attribute type and associated attribute values.</para>
          </listitem>
          <listitem>
            <para>Request Broker then performs a regular expression search
     through the rule book looking for Session Aliases that match the parsed
     OpenLink Connection Attributes. </para>
          </listitem>
          <listitem>
            <para>For each OpenLink Connection Attribute that the Request Broker
     find a matching Session Alias it determines if the Alias has a non NULL
     assigned value, if this is true the OpenLink Connection Attribute values
     are reassigned to those of the matching Session Alias, otherwise they
     retain their existing values.</para>
          </listitem>
          <listitem>
            <para>Request Broker then performs a regular expression search using
     a combination of all the OpenLink Connection Attributes across the session
     rules books "Mapping Rules" template.</para>
          </listitem>
          <listitem>
            <para>The Request Broker scans through each "Mapping Rule"
     in ascending order, If it finds a "Mapping Rule" match it then
      applies the matching rule to the appropriate Client Session
     request, otherwise it reports an error condition back to the OpenLink
     client.</para>
          </listitem>
          <listitem>
            <para>When a "Mapping Rules" occurs the Request Broker
     evaluates the "Mapping Rule". This evaluation results in the
     Acceptance or Rejection of an OpenLink Client request.</para>
          </listitem>
          <listitem>
            <para>OpenLink Client request acceptance results in the OpenLink
     Clients session request being associated with an OpenLink Agent template,
     this template then applies all of its attribute Attributes to the OpenLink
     Agent Configuration process. </para>
          </listitem>
          <listitem>
            <para>Session Rules rejection results in a user/administrator
     definable error message being relayed back to the OpenLink Client.</para>
          </listitem>
          <listitem>
            <para>OpenLink Session is fully initialized. This means that the
     OpenLink Client and Server (agents) components are now linked and operating
     in a connected state.</para>
          </listitem>
          <listitem>
            <para>OpenLink Agent evaluates subsequent OpenLink Client session
     requests to see if they are in line with the ReUse attribute of its Agent
     Configuration template.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_custali">
        <title>Creating Custom Aliases For Use By OpenLink Data Access Clients</title>
        <para>Understanding how to maintain Session
Aliases is a critical part of understanding how to create session rules. You
can create, modify, edit, and delete Session Aliases in two ways, you either
use the Admin Assistant's GUI interface or manually edit the session rule book
using a text editor (only recommended for advanced users).</para>
        <para>The steps that follow guide you through the
Session Alias management process using the Admin Assistant's GUI. Before
performing any of these steps you need to start the Admin Assistant, this is
done by following the steps below:</para>
        <orderedlist>
          <listitem>
            <para>Start the Request Broker</para>
          </listitem>
          <listitem>
            <para>Start a Web Browser session</para>
          </listitem>
          <listitem>
            <para>Enter the following URL into your browser:</para>
          </listitem>
        </orderedlist>
        <para>If you started the Request Broker on your local machine enter:</para>
        <programlisting><![CDATA[http://localhost:8000/]]></programlisting>
        <para>(assuming you accepted port 8000 as the
Admin Assistant port number at installation time).</para>
        <para>If the Request Broker in on another machine enter:</para>
        <programlisting><![CDATA[http://<hostname or IP address>:8000]]></programlisting>
        <para>(assuming you accepted port 8000 as the
Admin Assistant port number at installation time).</para>
        <section xml:id="mt_domaina">
          <title>Domain Aliases</title>
          <para>The steps that follow show you how to
manage Domain Aliases:</para>
          <orderedlist>
            <listitem>
              <para>Follow the "Server Components
Administration"-&gt;"Session Rules
Administration"-&gt;"Session Rules Book Aliases"-&gt;"Edit
Domain Aliases" menu tree which brings you to a screen identical to the
one depicted below.</para>
              <para>
The Admin Assistant presents you with a list of pre-configured Domain Aliases,
click on the "Edit" hyperlink to change settings, the
"Remove" hyperlink to delete an Alias, and the "Add" button
at the bottom of the screen to create a new Domain Alias.</para>
              <figure xml:id="mt_adass01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg086.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The example below assumes that you are
modifying a Domain Alias named "ora8" with the attribute values
"Oracle 8". This implies that you want to take note of Domain
Connection Attributes from an OpenLink Client that start with the value
"Oracle 8" evaluation against a mapping rules template. Once you have
completed your input click the "Update" button.</para>
              <figure xml:id="mt_adass02" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg088.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You then commit your changes to the
rule book by clicking on the "Reinitialize the OpenLink Request Broker
with these settings" hyperlink. See screen shot below:</para>
              <figure xml:id="mt_adass03" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg090.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Admin Assistant confirms commitment of
your changes to the rule book.</para>
              <figure xml:id="mt_adass04" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg092.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_useralias">
          <title>User Aliases</title>
          <para>The steps that follow show you how to
manage User Aliases using the Admin Assistant:</para>
          <orderedlist>
            <listitem>
              <para>Follow the "Server Components
Administration"-&gt;"Session Rules
Administration"-&gt;"Session Rules Book Aliases"-&gt;"Edit
User Aliases" menu tree which brings you to a screen similar to the one
depicted below.</para>
              <para>The Admin Assistant presents you with a list of pre-configured User Aliases if
any exist, if this is your first time there will be not items listed. Click on
the "Add" hyperlink to create a new User Alias.</para>
              <figure xml:id="mt_adass05" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg094.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The example below assumes that you are
creating an User Alias named "Sales" with attribute values of
"Test" or "Mary", the use of the caret symbol (character
"^") and the Dollar symbol indicate the start and end of regular
expression evaluation values respectively. The Pipe symbol (character
"|") indicates an OR condition. Thus the entry depicted below implies
that you want to take note of User Connection Attributes from an OpenLink
Client that hold the values "Test" or "Mary" for evaluation
against a mapping rules template. Once you have completed your input click the
"Add" button.</para>
              <figure xml:id="mt_adass06" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg096.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>3.You then commit your changes to the
rule book by clicking on the "Reinitialize the OpenLink Request Broker
with these settings" hyperlink. See screen shot below:</para>
              <figure xml:id="mt_adass07" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg098.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Admin Assistant confirms commitment of your changes to the rule book.</para>
              <figure xml:id="mt_adass08" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg100.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_opsysalias">
          <title>OpSys Aliases (Operating System Aliases)</title>
          <orderedlist>
            <listitem>
              <para>The steps that follow show you how to
manage OpSys Aliases using the Admin Assistant:</para>
              <para>Follow the "Server Components Administration"-&gt;"Session Rules
Administration"-&gt;"Session Rules Book Aliases"-&gt;"Edit
Operating System Aliases" menu tree which brings you to a screen identical
to the one depicted below.</para>
              <para>The Admin Assistant presents you with a list of pre-configured OpSys Aliases if
any exist, if this is your first time no items will be listed. Click on the
"Add" hyperlink to create a new OpSys Alias.</para>
              <figure xml:id="mt_adass09" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg102.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The example below assumes that you are
creating an OpSys Alias named "ClientOS" with attribute values of
"win32" or "unix". The Pipe symbol (character
"|") indicates an OR condition. Thus the entry depicted below implies
that you want to take note of OpSys Connection Attributes from an OpenLink
Client that start with the values "win32" or "unix" for
evaluation against a mapping rules template. Once you have completed your input
click the "Add" button.</para>
              <figure xml:id="mt_adass10" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg104.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You then commit your changes to the
rule book by clicking on the "Reinitialize the OpenLink Request Broker
with these settings" hyperlink. See screen shot below:</para>
              <figure xml:id="mt_adass11" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg106.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Admin Assistant confirms commitment of
your changes to the rule book.</para>
              <figure xml:id="mt_adass12" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg100.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_machinealiases">
          <title>Machine Aliases</title>
          <para>The steps that follow show you how to
manage User Aliases using the Admin Assistant:</para>
          <orderedlist>
            <listitem>
              <para>Follow the "Server Components
Administration"-&gt;"Session Rules
Administration"-&gt;"Session Rules Book Aliases"-&gt;"Edit
Operating Machine Aliases" menu tree which brings you to a screen
identical to the one depicted below.</para>
              <para>
The Admin Assistant presents you with a list of pre-configured OpSys Aliases if
any exist, if this is your first time no items will be listed. Click on the
"Add" hyperlink to create a new Machine Alias.</para>
              <figure xml:id="mt_adass13" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg109.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The example below assumes that you are
creating an Machine Alias named "MyNetwork" with an attribute value
of "123.123.123". This implies that you want to take note of Machine
Connection Attributes from an OpenLink Client that start with the value
"123.123.123" (you would do this to identify the Network portion of
the client machines IP address). Once you have completed your input click the
"Add" button.</para>
              <figure xml:id="mt_adass14" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg111.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You then commit your changes to the
rule book by clicking on the "Reinitialize the OpenLink Request Broker
with these settings" hyperlink. See screen shot below:</para>
              <figure xml:id="mt_adass15" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg113.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Admin Assistant confirms commitment of
your changes to the rule book.</para>
              <figure xml:id="mt_adass16" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg115.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_appaliases">
          <title>Application Aliases</title>
          <para>The steps that follow show you how to
manage User Aliases using the Admin Assistant:</para>
          <orderedlist>
            <listitem>
              <para>Follow the "Server Components
Administration"-&gt;"Session Rules
Administration"-&gt;"Session Rules Book Aliases"-&gt;"Edit
Application Aliases" menu tree which brings you to a screen identical to
the one depicted below.</para>
              <para>
The Admin Assistant presents you with a list of pre-configured Application
Aliases, click on the "Edit" hyperlink to change settings, the
"Remove" hyperlink to delete an Alias, and the "Add" button
at the bottom of the screen to create a new Application Alias.</para>
              <figure xml:id="mt_adass17" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg117.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The example below assumes that you are
modifying an Application Alias named "msoffice" with attribute values
of "MSACCESS" or "EXCEL" or "MSQRY32". The Pipe
symbol (character "|") indicates an OR condition. Thus, the entry
depicted below implies that you want to take note of Application Connection
Attributes from an OpenLink Client that hold the values "MSACCESS" or
"EXCEL" or "MSQRY32" for evaluation against a mapping rules
template. Once you have completed your input click the "Update"
button.</para>
              <figure xml:id="mt_adass18" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg119.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You then commit your changes to the
rule book by clicking on the "Reinitialize the OpenLink Request Broker
with these settings" hyperlink.</para>
              <figure xml:id="mt_adass19" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg121.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Admin Assistant confirms commitment of
your changes to the rule book.</para>
              <figure xml:id="mt_adass20" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg123.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_detcliatt">
          <title>Determining The Values of OpenLink 
Client Generated Connection Attributes</title>
          <para>When managing Aliases for non user
configurable Connection Attributes you need to do the following in order to
determine the appropriate values:</para>
          <orderedlist>
            <listitem>
              <para>Start the Request Broker in Debug Mode</para>
            </listitem>
            <listitem>
              <para>Then make a connection from your
     OpenLink Client</para>
            </listitem>
            <listitem>
              <para>The debug output in your Request
     Brokers debug window will contain the following:</para>
              <programlisting><![CDATA[
oplrqb: client-machine.YourDomain called (123.123.123.100.1510)
oplrqb: request: domain=Oracle 8 database= serveropts=
oplrqb: connectopts= user= opsys=win32 readonly=0
oplrqb: application=OPLSCAN processid=384]]></programlisting>
            </listitem>
            <listitem>
              <para>Take note of the values assigned
     to the following Connection Attributes: opsys, readonly, and application.
     Apply these values to the appropriate Aliases that your are attempting to
     configure.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_adass4cr8tingrules">
        <title>Using the Admin Assistant To Create Session Rules</title>
        <para>There are different type of session rules
that you may want to create the examples that follow guide through the process
of creating some very common session rules.</para>
        <section xml:id="mt_securityrules">
          <title>Security Oriented "Session Rules" Examples</title>
          <para>A major concern with ODBC, JDBC, UDBC and
OLE-DB is the fact that you could potentially lose control over the number and
types of applications that have full read-write access to your organizations
databases, unfortunately database engine based security is User, Group and in
some case Role driven, database engines do not have the ability to decipher the
type of Client application or data access mechanism being used by a client
process. Thus ODBC, UDBC, JDBC, and OLE-DB can potentially introduce serious
security loopholes. </para>
          <para>The security and configuration control
attributes of the session rules book is OpenLink's single most important and
distinguishing feature when compared with other data access technologies
(standards or non standards based).</para>
          <para>Session rules enable you enforce rules that
protect you from many form security related exposure in a time when
connectivity is increasing at an alarming rate. The examples that follow use
typical security scenarios to demonstrate how session rules can be devised to
address security and/or resource consumption issues introduced by the use of
ODBC, JDBC, UDBC, and OLE-DB compliant solutions.</para>
        </section>
        <section xml:id="mt_ruleforcero">
          <title>Creating A Session Rule Enforcing READ-ONLY sessions unconditionally across all OpenLink Clients</title>
          <para>The steps that follow guide you through the
process of building a session rule that enforces read-only data access across
all OpenLink ODBC, JDBC, UDBC, and OLE-DB sessions:</para>
          <orderedlist>
            <listitem>
              <para>Start the Request Broker</para>
            </listitem>
            <listitem>
              <para>Start a Web Browser session</para>
            </listitem>
            <listitem>
              <para>Enter the following URL into your browser:</para>
              <para>If you started the Request Broker on your local machine enter:</para>
              <programlisting><![CDATA[http://localhost:8000/]]></programlisting>
              <para>(assuming you accepted port 8000 as the Admin Assistant port number at
     installation time).</para>
              <para>If the Request Broker in on another machine enter:</para>
              <programlisting><![CDATA[http://<hostname or IP address>:8000]]></programlisting>
              <para>(assuming you accepted port 8000 as the Admin Assistant port number at
     installation time).</para>
            </listitem>
            <listitem>
              <para>Since you are attempting to create
     a read-only session rule for a particular database, you need to ensure
     that you actually have an OpenLink Agent template that has its ReadOnly
     attribute set to "Y" or "Yes". To do this you navigate
     the Admin Assistant menu down the following path: "Server Components
     Administration"-&gt;"Database Agent
     Administration"-&gt;"Database Agent Settings (Form)" .
     Locate the database agent for your database engine type from the list
     presented and then click on the "Edit" hyperlink.</para>
              <figure xml:id="mt_adass21" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg125.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Locate the "Read Only"
     checkbox and then hatch the box which indicates the enforcement of
     Read-Only session when this agent is connected to backend database.</para>
              <figure xml:id="mt_adass22" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg127.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Proceed to the end of this page
     and then click on the "Update" button.</para>
              <figure xml:id="mt_adass23" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg129.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You then commit your changes to
     the rule book by clicking on the "Reinitialize the OpenLink Request
     Broker with these settings" hyperlink.</para>
              <figure xml:id="mt_adass24" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg131.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Admin Assistant confirms
     commitment of your changes to the rule book.</para>
              <figure xml:id="mt_adass24a" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg123.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Now that you have created a
     OpenLink Agent Template for Read-Only sessions against your backend
     database you can now proceed to the creation of your session rule.</para>
              <para>Follow the "Server Components Administration"-&gt;"Session
     Rules Administration"-&gt;"Session Rules Editor" menu path
     which brings you to a screen identical to the one depicted below, this presents
     you with a list of existing session rules (all OpenLink installations come
     with a set of pre-configured session rules).</para>
              <figure xml:id="mt_adass25" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg134.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Scroll to the bottom of the
     session rules editor page and then click on the "Add a new rule"
     hyperlink, this opens up a new session rules page.</para>
              <figure xml:id="mt_adass26" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg136.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Create your new session rule. </para>
              <para>A session rule is broken down into three parts a "Rule Number",
     a "When" predicate and a "Then" processing
     instruction.</para>
              <formalpara>
                <title>Rule Number:</title>
                <para>This sets the order in which the session rules are evaluated. The Request
     Broker reads scans session rules in ascending "Rule Number".</para>
              </formalpara>
              <formalpara>
                <title>"When" Predicate:</title>
                <para>Enter a regular expression value into the field beside the "+"
     button, this identifies to the Request Broker an OpenLink Service Type (a
     Domain attribute) value that forms one of the Connection Attributes that
     make up the session rule that you are constructing. Simply click on
     the "+" button to Add other Connection Attributes that will make
     up the session rule that you are constructing. In this example we want our
     session rule to apply to all OpenLink clients thus entering an
     "*" (which implies any Domain attribute and sub attributes)
     serves our needs adequately. </para>
              </formalpara>
              <formalpara>
                <title>"Then" Processing Instruction:</title>
                <para>Check the "Accept" radio button and then select an OpenLink
     Agent template to associate with your rule by clicking on the
     "configuration" Listbox. The template that you choose needs to
     match the one that you placed in Read-Only mode at the start of this
     exercise. Then click on the "Add" button.</para>
              </formalpara>
            </listitem>
            <listitem>
              <para>You then commit your changes to
     the rule book by clicking on the "Reinitialize the OpenLink Request
     Broker with these settings" hyperlink.</para>
              <figure xml:id="mt_adass27" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg131.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Attempt a new OpenLink Client
     connection to you backend database and then attempt a record update, you
     will observe that your update attempt will be rejected and an error
     condition communicated to you via your ODBC, JDBC, UDBC,or OLE-DB based
     application.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_ruleforceropercli">
          <title>Creating A Session Rule That Enforces READ-ONLY sessions for a specific OpenLink Client User</title>
          <para>The steps that follow guide you through the
process of building a session rule that enforces read-only data access for a
specific User account across all OpenLink ODBC, JDBC, UDBC, and OLE-DB
sessions.</para>
          <orderedlist>
            <listitem>
              <para>Follow Steps 1 - 10 of the "Read-Only" session
     rules exercise above.</para>
            </listitem>
            <listitem>
              <para>Create your new session rule. </para>
              <para>A session rule is broken down into three parts a 'Rule Number', a
     "When" predicate and a "Then" processing instruction.</para>
              <formalpara>
                <title>Rule Number:</title>
                <para>This sets the order in which the session rules are evaluated. The Request
     Broker reads scans session rules in ascending "Rule Number".</para>
              </formalpara>
              <formalpara>
                <title>"When" Predicate:</title>
                <para>Enter a regular expression value into the field beside the "+"
     button, this identifies to the Request Broker an OpenLink Client User (the
     User attribute) value that forms one of the Connection Attributes that
     make up the session rule that you are constructing. Simply click on the
     "+" button to Add other Connection Attributes that will make up
     the session rule that you are constructing. In this example we want our
     session rule to apply to a specific OpenLink Client User irrespective of
     anything else. Thus, entering the value "^Test$" implies that
     anyone that makes an ODBC, JDBC, UDBC, or OLE-DB connection using the user
     name "Test" operates against your backend database in Read-Only
     mode.</para>
              </formalpara>
              <formalpara>
                <title>"Then" Processing Instruction:</title>
                <para>Check the "Accept" radio button and then select an OpenLink
     Agent template to associate with your rule by clicking on the
     "configuration" Listbox. The template that you choose needs to
     match the one that you placed in Read-Only mode at the start of the "Read-Only" 
     session rules exercise. Then click on the "Add" button.</para>
              </formalpara>
              <figure xml:id="mt_adass28" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg139.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Update"
     button to complete the rule creation exercise and then reinitialize the
     Request Broker when prompted.</para>
            </listitem>
            <listitem>
              <para>Attempt a connection under the
     user name "Test" and attempt a database record update. Note that
     "Test" must be a valid user account in your database
     environment.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_rulerogrp">
          <title>Creating A Session Rule That Enforces READ-ONLY sessions for a Group of Users</title>
          <para>The steps that follow guide you through the
process of building a session rule that enforces read-only data access for a
specific group of users across all OpenLink ODBC, JDBC, UDBC, and OLE-DB
sessions.</para>
          <orderedlist>
            <listitem>
              <para>Follow Steps 1 - 10 of the "Read-Only" session
     rules exercise above.</para>
            </listitem>
            <listitem>
              <para>A session rule is broken down into
     three parts a "Rule Number", a "When" predicate and a
     "Then" processing instruction.</para>
              <formalpara>
                <title>Rule Number:</title>
                <para>This sets the order in which the session rules are evaluated. The Request Broker
     reads scans session rules in ascending "Rule Number".</para>
              </formalpara>
              <formalpara>
                <title>"When" Predicate:</title>
                <para>Enter a regular expression value into the field beside the "+"
     button, this identifies to the Request Broker an OpenLink Client User (the
     User attribute) value that forms one of the Connection Attributes that
     make up the session rule that you are constructing. Simply click on the
     "+" button to Add other Connection Attributes that will make up
     the session rule that you are constructing. In this example we want our
     session rule to apply to a group of OpenLink Client Users irrespective of
     anything else. Thus, entering the value: "^Test$|^Mary$|^John$"
     implies that anyone that makes an ODBC, JDBC, UDBC, or OLE-DB connection
     using either the user name "Test" or "Mary" or
     "John" operates against your backend database in Read-Only mode.</para>
              </formalpara>
              <formalpara>
                <title>"Then" Processing Instruction:</title>
                <para>Check the "Accept" radio button and then select an OpenLink
     Agent template to associate with your rule by clicking on the
     "configuration" Listbox. The template that you choose needs to
     match the one that you placed in Read-Only mode at the start of the "Read-Only" 
     session rules exercise. Then click on the "Add" button.</para>
              </formalpara>
              <figure xml:id="mt_adass29" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg141.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Update"
     button to complete the rule creation exercise and then reinitialize the
     Request Broker when prompted.</para>
            </listitem>
            <listitem>
              <para>Attempt a connection under the
     user name "Test" and attempt a database record update. Note that
     "Test" must be a valid user account in your database
     environment.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_ruleroapp">
          <title>Creating A Session Rule That Enforces READ-ONLY sessions for a specific OpenLink Client Application</title>
          <para>The steps that follow guide you through the
process of building a session rule that enforces read-only data access for a
specific Application.</para>
          <orderedlist>
            <listitem>
              <para>Follow Steps 1 - 10 of the "Read-Only" session rules exercise
previously.</para>
            </listitem>
            <listitem>
              <para>Create your new session rule. </para>
              <para>A session rule is broken down into three parts a "Rule Number", a
"When" predicate and a "Then" processing instruction.</para>
              <formalpara>
                <title>Rule Number:</title>
                <para>This sets the order in which the session rules are evaluated. The Request
Broker reads scans session rules in ascending "Rule Number".</para>
              </formalpara>
              <formalpara>
                <title>"When" Predicate:</title>
                <para>Enter a regular expression value into the field beside the "+"
button, this identifies to the Request Broker an OpenLink Client Application
(the Application attribute) value that forms one of the Connection Attributes
that make up the session rule that you are constructing. Simply click on the
"+" button to Add other Connection Attributes that will make up the
session rule that you are constructing. In this example we want our session
rule to apply to a specific OpenLink Client Application irrespective of
anything else. Thus, entering the value "^MSACCESS$" implies that
anyone that makes an ODBC, JDBC, UDBC, or OLE-DB connection using the
Application presented by an OpenLink Client as "MSACCESS" operates
against your backend database in Read-Only mode.</para>
              </formalpara>
              <formalpara>
                <title>"Then" Processing Instruction:</title>
                <para>Check the "Accept" radio button and then select an OpenLink Agent
template to associate with your rule by clicking on the
"configuration" Listbox. The template that you choose needs to match
the one that you placed in Read-Only mode at the start of the "Read-Only" session rules exercise.
Then click on the "Add" button.</para>
              </formalpara>
              <figure xml:id="mt_adass30" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg143.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Update" button
to complete the rule creation exercise and then reinitialize the Request Broker
when prompted.</para>
            </listitem>
            <listitem>
              <para>Attempt a connection under the user
name "Test" and attempt a database record update. Note that
"Test" must be a valid user account in your database environment.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_ruleronet">
          <title>Creating A Session Rule That Enforces READ-ONLY sessions for OpenLink 
Client connections outside of your Local Area Network (LAN)</title>
          <para>Imagine a scenario in which you staff have
access to your corporate databases over the internet due to the fact that you
permit employees to work remotely. It may so happen that the work that your
require them to do of site requires only a read-only session. The steps that
follow guide you through the process of creating a session rule that only gives
read-write database access to employees within your network domain, once they
connect outside of this domain the sessions are automatically read-only.</para>
          <para>This exercise assumes that your LAN is a
class C type TCP/IP network with 123.123.123 identifying your LAN.</para>
          <orderedlist>
            <listitem>
              <para>Follow Steps 1 - 3 of the "Read-Only" session rules exercise
previously.</para>
            </listitem>
            <listitem>
              <para>Since you are attempting to create a
read-only session rule for a particular type of connection, you need to ensure
that you actually have an OpenLink Agent template for your Read-Only database
sessions and another Agent template for your Read-Write database
sessions. The ReadOnly attribute of the Read-Only Agent template should
be set to "Y" or "Yes", while that of the Read-Write
session left unchanged. </para>
              <para>To set things up navigate the Admin Assistant menu down the following path:
"Server Components Administration"-&gt;"Database Agent
Administration"-&gt;"Database Agent Settings (Form)" .
Locate the database agent for your database engine type from the list presented
and then click on the "Edit" hyperlink.</para>
              <figure xml:id="mt_adass31" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg145.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Locate the "Read Only"
checkbox and then hatch the box which indicates the enforcement of Read-Only
session when this agent is connected to backend database.</para>
              <figure xml:id="mt_adass32" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg147.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Proceed to the end of this page and
then click on the "Update" button.</para>
              <figure xml:id="mt_adass33" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg149.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Create a new OpenLink Agent template
for the same database, but this time around we will not alter it Read-Only
setting since this is disabled by default. </para>
              <para>To set things up by navigate the Admin Assistant menu down the following path:
"Server Components Administration"-&gt;"Database Agent
Administration"-&gt;"Database Agent Settings (Form)" .
Scroll to the bottom of the page and then click on the "Add"
hyperlink.</para>
              <para>Enter a name for your Agent template in the "Name" field, a
descriptive comment in the "Comment" field, then click on the
"Make a copy of the configuration" and select the template name that
matches your Read-Only template. </para>
              <figure xml:id="mt_adass34" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg151.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You now have a new Agent template
named "basic_session", but since this is based on your Read-Only
template (which was created earlier) you need to change its Read-Only
attributes to that Read-Only session aren't enforced when OpenLink client
connections are associated with this template after the "Mapping
Rules" evaluation process. To do this navigate the Admin Assistant menu
down the following path: "Server Components
Administration"-&gt;"Database Agent
Administration"-&gt;"Database Agent Settings (Form)" .
Locate the Agent template named "basic_session" and then click on the
"Edit" button. Uncheck the "Read Only" checkbox.</para>
              <figure xml:id="mt_adass35" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg153.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Proceed to the end of this page and
then click on the "Update" button.</para>
              <figure xml:id="mt_adass36" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg155.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Proceed to the creation of your session rule.</para>
              <para>Follow the "Server Components Administration"-&gt;"Session Rules
Administration"-&gt;"Session Rules Editor" menu path which
brings you to the session rules editor, click on the "Add new rule"
hyperlink so that the new session rule page is presented to you.</para>
              <figure xml:id="mt_adass37" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg157.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Create your new session rule.</para>
              <para>A session rule is broken down into three parts a "Rule Number", a
"When" predicate and a "Then" processing instruction.</para>
              <formalpara>
                <title>Rule Number:</title>
                <para>This sets the order in which the session rules are evaluated. The Request
Broker reads scans session rules in ascending "Rule Number". Since
you are going to be creating two rules (one for read-write sessions and another
for read-only sessions), you need to order your rules appropriately, remember
Request Broker reads these rules for evaluation in ascending order. In this
case the rule for read-write sessions is the exception to the norm so we change
the number of this rule to 1.</para>
              </formalpara>
              <formalpara>
                <title>"When" Predicate:</title>
                <para>Enter a regular expression value into the field beside the "+"
button, this identifies to the Request Broker an OpenLink Client Machine (the
Machine attribute) value that forms one of the Connection Attributes that make
up the session rule that you are constructing. Simply click on the
"+" button to Add other Connection Attributes that will make up the
session rule that you are constructing. In this example we want our session
rule to apply to a specific OpenLink Client Machines irrespective of anything
else. Thus, entering the value "123.123.123" implies that any machine
that makes an ODBC, JDBC, UDBC, or OLE-DB connection with an from an IP Address
that starts with "123.123.123" operates against your backend
database in Read-Write mode. </para>
              </formalpara>
              <para>
                <bridgehead>"Then" Processing Instruction:</bridgehead>
              </para>
              <para>Check the "Accept" radio button and then select an OpenLink Agent
template to associate with your rule by clicking on the
"configuration" Listbox. The template that you choose needs to match
the one that you placed in Read-Only mode at the start of the Read-Only" session rules exercise.
Then click on the "Add" button.</para>
              <para>Logically all other connections will end up being in Read-Only mode since they
will not be resolved to having an IP Address that starts with
"123.123.123". This also means that they will not be associated with
the "basic_agent" Agent Template which is the only means of establishing
a Read-Write session with your backend database.</para>
              <figure xml:id="mt_adass38" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg159.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Update" button to complete the rule creation
exercise and then reinitialize the Request Broker when prompted.</para>
            </listitem>
            <listitem>
              <para>Attempt a connection from outside your LAN and attempt a database
record update.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_resourcemanrul">
          <title>Resource Management Oriented "Session Rules" Examples</title>
          <para>The examples addressed in this section
focus on the the management of OpenLink Agent processes with the view to
providing systems administrators with the ability to tune OpenLink Agents in
line with operating system resource constraints.</para>
          <para>
            <bridgehead>Unconditionally Sharing One
Database Agent Instance Across Numerous OpenLink Clients</bridgehead>
          </para>
          <para>You might want to reduce the number of
OpenLink Agents in use at any given time, a good reason for doing this stems
from the fact that OpenLink Agent instances are processes which like
other processes on your machine will consume a chunk of resources per
instance. The more Agents you have running the more operating system kernel
resources are consumed. Thus, by setting a ReUse attribute value of
"always" you could ensure that under no condition is more than one
Agent instance running. </para>
          <para>Note: An exception to this rule only occurs
if the Request Broker attempts to associate a new OpenLink Client session with
an existing agent that hasn't completed its processing cycle, under these
circumstance the Request Broker will spawn a new Agent instance.</para>
          <para>The steps that follow guide you through the
process of creating the appropriate session rule using the Admin Assistant:</para>
          <orderedlist>
            <listitem>
              <para>Start the Request Broker</para>
            </listitem>
            <listitem>
              <para>Start a Web Browser session</para>
            </listitem>
            <listitem>
              <para>Enter the following URL into your browser:</para>
              <para>If you started the Request Broker on your local machine enter:</para>
              <programlisting><![CDATA[http://localhost:8000/ ]]></programlisting>
              <para>(assuming you accepted port 8000 as the Admin Assistant port number at
     installation time).</para>
              <para>If the Request Broker in on another machine enter:</para>
              <programlisting><![CDATA[http://<hostname or IP address>:8000/]]></programlisting>
              <para>(assuming you accepted port 8000 as the Admin Assistant port number at
     installation time).</para>
            </listitem>
            <listitem>
              <para>Since you are attempting to
     modify the ReUse attribute of an existing Agent Template simply navigate
     the Admin Assistant menu down the following path: "Server Components
     Administration"-&gt;"Database Agent
     Administration"-&gt;"Database Agent Settings (Form)".
     Locate the database agent for your database engine type from the list
     presented and then click on the "Edit" hyperlink.</para>
              <figure xml:id="mt_adass39" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg161.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Scroll down to the
     "Client-Server Process Mapping &amp; Control section, and then check
     the "Always" radio button as depicted in the screen shot below.</para>
              <figure xml:id="mt_adass40" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg163.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the
     "Update" button to complete the rule creation exercise and then
     reinitialize the Request Broker when prompted.</para>
            </listitem>
            <listitem>
              <para>Restart your Broker in
     debug mode.</para>
            </listitem>
            <listitem>
              <para>Attempt multiple OpenLink
     ODBC, JDBC, UDBC, OLE-DB connections from the same and different machines.</para>
            </listitem>
            <listitem>
              <para>Then navigate the Admin
     Assistant menu down the following path: "Server Components
     Administration"-&gt;"Request Broker
     Administration"-&gt;"List of Current connections" . This
     will show you how many OpenLink Client connections that you have open and
     how many OpenLink Agents are serving these sessions.</para>
            </listitem>
          </orderedlist>
          <para>
            <bridgehead>Conditionally Sharing One Database Agent Instance Across Numerous Data Access Clients</bridgehead>
          </para>
          <para>There may be times where you only want to
conditionally pool connections from your OpenLink Clients against a particular
OpenLink Agent instance. The steps that follow show you how to pool all
OpenLink Client connections from a specific machine to a single Agent instance.
Thereby creating a scenario in which an one OpenLink Agent instance is spawned
per OpenLink Client machine.</para>
          <para>The steps that follow guide you through the
process of creating the appropriate session rule using the Admin Assistant:</para>
          <orderedlist>
            <listitem>
              <para>Follow steps 1 -4 in the prior section.</para>
            </listitem>
            <listitem>
              <para>Scroll down to the
     "Client-Server Process Mapping &amp; Control section, then check the "Conditionally"
     radio button, then check the checkbox field labeled "When originating
     from the same machine" as depicted in the screen shot below.</para>
              <figure xml:id="mt_adass41" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg165.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the
     "Update" button to complete the rule creation exercise and then
     reinitialize the Request Broker when prompted.</para>
            </listitem>
            <listitem>
              <para>Attempt multiple OpenLink
     ODBC, JDBC, UDBC, OLE-DB connections from the same and different machines.</para>
            </listitem>
          </orderedlist>
          <para>Then navigate the Admin Assistant menu down
the following path: "Server Components
Administration"-&gt;"Request Broker
Administration"-&gt;"List of current connections". This will
show you how many OpenLink Client connections that you have open and how many
OpenLink Agents are serving these sessions.</para>
        </section>
      </section>
    </section>
  </chapter>

  <!-- 
     $Id: AgentCompAdm.xml,v 1.3 2008/01/15 12:22:29 piglet Exp $
     (C)Copyright 1996-2018 OpenLink Software
  -->
  <chapter xml:id="mt_AgentCompAdm">
    <title>Server Agent Administration</title>
    <info>
      <abstract>
        <para>
      Guide for successfully installing and running the OpenLink server components
      from the OpenLink Multi Tier Data Access Suite.  This chapter describes the 
      roles of the OpenLink Database/Service Agents and how to configure them.  OpenLink 
      Server Agents come in two main types, the Database agent and the Service agent.  
      Database agents provide the only database dependant component, usually requiring 
      a separate agent per database major version to connect to.  Service agents 
      provide other services such as proxying of connections or special interfaces to 
      other ODBC data sources.  
    </para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Server</keyword>
        <keyword>Agent</keyword>
        <keyword>Database</keyword>
        <keyword>Database Agent</keyword>
        <keyword>Broker</keyword>
        <keyword>Request Broker</keyword>
      </keywordset>
    </info>
    <para>OpenLink Database/Service Agents are the only database specific components 
    within the OpenLink Multi-Tier middleware framework.  It is these components 
    that actually initiate and maintain database sessions with your OpenLink Clients, 
    basically playing the role of a data access server.</para>
    <para>Database Agents are servers implementing client data access interfaces 
    such as ODBC, JDBC, UDBC, and OLE-DB using the lower level native call level 
    interfaces provided by each supported database engine.  These call level 
    interfaces are themselves increasing based on the X/Open SQL Call Level Interface 
    (CLI) specification. The older database engines that do not support or 
    implement the X/Open SQL CLI specification simply provide traditional Embedded 
    SQL interfaces.</para>
    <para>The fact that Database Agents are built using natives interfaces provided 
    by database engine vendors has some very important implications:</para>

    <!-- ######################## -->
    <orderedlist>
      <listitem>
        <para>Through the eyes of a backend database, a database agent
        is a database client, no different to any other native client provided or
        bundled with the backend database engine.</para>
      </listitem>
      <listitem>
        <para>A database agent inherits all of the functionality of a
        traditional database client, this includes: Distributed Database, SQL
        syntax, Stored Procedure support, and anything else that may be specific
        to the relevant backend database engine.</para>
      </listitem>
      <listitem>
        <para>Configuring a database agent is no different to configuring an
        native database client, they share operating system environment variable
        dependencies etc..</para>
      </listitem>
      <listitem>
        <para>Resource utilization is identical to resource consumption for
        native clients, this means that if you have special setting for your
        native client sessions, you will be able to apply these when configuring
        your database agents.</para>
      </listitem>
      <listitem>
        <para>Any efficiencies or deficiencies in the database engines CLI
        client to database server inter process communications (IPC) also affects
        a database agent. </para>
      </listitem>
    </orderedlist>
    <para>All database engines operate under a client-server paradigm, that is 
    to say there are always two distinct processes involved in a database 
    session, the database server and the database client.  The database server 
    must be up and running before a database client can communicate with a 
    database. Database client and server processes may or may not reside on the 
    same physical machine, at the same time this has no bearing on the 
    fundamentals of database client and server process interaction as
    just explained.</para>
    <section xml:id="mt_agentconfig">
      <title>Administration Assistant</title>
      <info>
        <keywordset>
          <keyword>Administration Assistant</keyword>
        </keywordset>
      </info>
      <para>Every database engine has a one or more key
      values that need to be set in order for database clients to be able to
      communicate with database servers. These values take the form of host operating
      system environment variables, database connection string formats/parameters, or
      a combination of both. </para>
      <para>Configuring your OpenLink database agent is
      all about creating session initialization templates in the Sessions Rules Book
      which map key database client values with OpenLink Agent Template Attributes.</para>
      <para>OpenLink provides a user friendly
      utility for configuring your database agents, namely the OpenLink Admin
      Assistant. Another option is to edit the rule book manually, but the availability of the
      utility makes this a less recommended option, certainly one for experienced
      OpenLink users only.</para>

      <!--
        <section xml:id="mt_oplconfutil">
          <title>OpenLink Configuration Utility (&quot;oplcfg&quot;)</title>
          <para>At the end of the end of your OpenLink
            server components installation process, the installation program will
            automatically start the &quot;oplcfg&quot; utility, thereby enabling you to
            configure your database agent(s) as part of the installation process.</para>
          <para>If you have already installed your server
            components successfully but need to make changes to your initial database agent
            setting then you can initialize the &quot;oplcfg&quot; utility from the your
            host operating system&apos;s command line prompt, simply enter the following command
            from within the &quot;bin&quot; sub-directory under your base OpenLink server
            components installation directory:</para>
          <programlisting>oplcfg</programlisting>
          <para>You will then be presented with a character
            based menu system as depicted below:</para>
          <screen>
            OpenLink Server Components Configuration Utility
            1.  Request Broker		11. PostgresSQL
            2.  Informix 5			12. Progress 6
            3.  Informix 6			13. Progress 7
            4.  Informix 7			14. Progress 8
            5.  Progress 6			15. Solid
            6.  Virtuoso 			16. Sybase 4
            7.  OpenProgress 		17. Sybase 10
            8.  Oracle 6			18. Sybase 11
            9.  Oracle 7			19. Unify 2000
            10. Oracle 8			20. Velocis
            U.  Undo last change		V. View the current Rules Book
            C.  Clear log file		L. View log file
            B.  Backup Rules Book		R. Restore Rules Book
            I.  Verify Rules Book		N. Reinitialize running Broker
            S. Startup  Request Broker	D. Shutdown Request Broker
            Choose an item or type q to quit :
          </screen>
          <para>You then enter a number that matches the
            database engine that you will configuring your database agent(s) to work with.</para>
          <para>You will be prompted for each value.</para>
          <para>Once this is completed you will have to
            edit the rule book (the file &quot;oplrqb.ini&quot;) manually in order to set
            up any database session specific values. Another option is to start up the
            Admin Assistant which provides an intuitive GUI for configuring your database
            agents.</para>
        </section>
        -->
      <para>The preferred and much more flexible way of
      configuring your database agents is through the OpenLink Admin Assistant. This
      is a powerful HTML based GUI that is usable from any Web Browser, it provides
      you with two approaches to configuring database agents using Wizards or forms.</para>
      <section xml:id="mt_wizbasedconf">
        <title>Wizard Based Administration</title>
        <para>This approach to database agent
        administration is going to be exemplified using OpenLink Virtuoso as the
        database agent that is being administered. Please note that nothing in this
        example is database specific beyond the actual values entered. A database
        specific section follows which addresses these issues on database engine
        specific basis. </para>
        <orderedlist>
          <listitem>
            <para>Start the Admin Assistant by entering
            the following URL into your browser: http://&lt;IP Address or Network Alias of
            machine hosting the OpenLink Database Agents to be Administered&gt;:&lt;Admin
            Assistant Port number&gt;
          </para>
            <para>
            For a network machine aliased as "mainserver" using the default
            OpenLink Admin Assistant port "8000" the URL required would be
            entered as follows: http://mainserver:8000
          </para>
            <para>
            You will be presented with a screen similar to the one below:
          </para>
            <figure xml:id="mt_dbadmn01" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg023.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Expand the "Server Components
            Administration", and "Database Agent Administration" menus. Once
            this is done you need to then click on the "OpenLink Database Agent
            Settings (Wizard)" hyperlink. This will bring you to the first Database
            Agent Wizard dialog as depicted below:
          </para>
            <figure xml:id="mt_dbadmn02" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg025.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>From the list of pre-configured
            database agents select one that matches the database engine that your database
            agent will be communicating with, note that every database supported by OpenLink
            will have a pre-configured default agent initialization template listed. 
          </para>
            <figure xml:id="mt_dbadmn03" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg027.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click the "Edit" button to
            commence re configuring this database agent for your specific needs. Enter a
            name in the "Agent Name" field that is to be used to identify the
            database agent that your are configuring (it is recommended that you keep the
            default, if you do opt for a new name please don't enter names that contain
            spaces), also enter text into the "Comment" field describing your
            database agent. Once completed click on the "Next" button.
          </para>
            <figure xml:id="mt_dbadmn04" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg029.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You can force your OpenLink clients to
            connect a backend database using a pre-assigned username and password
            combination, this is done by entering the values that you want to enforce into
            the "User Name" and "Password" fields in the Wizard dialog
            depicted below. This activity implies that irrespective of what username
            password combination is entered at OpenLink client configuration or connect
            time, the values that you provide will take precedence. If you do not want to
            enforce username and password combinations for your OpenLink clients simply
            leave the "User Name" and "Password" fields blank. Click on
            the "Next" button to continue.
          </para>
            <figure xml:id="mt_dbadmn05" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg031.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a value in the "Database
            Name" field that identifies the actual database within your database engine's
            environment that you want to connect your OpenLink clients with, the format of
            these values vary by database engine type. You can control what type of
            session(s) your OpenLink clients conduct with your backend database by choosing
            the appropriate value from the "Read Only Specifier" listbox. If you
            are connecting to a database that does not reside on the same machine as your
            database agent, or circumstances require you to use the networking middleware
            provided by your database vendor (which is already installed on the same
            machine as the database agent), then you can enter the remote database
            connection values required by your remote database into the
            "ConnectOptions" field. Once completed click the "Next"
            button to continue.</para>
            <figure xml:id="mt_dbadmn06" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg033.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Some database engines allow their
            clients to configure session resources, in situations where this holds true you
            can use the "Server Options" field to set these values for your
            database agent sessions.</para>
            <para>
            You can also configure your database agents such that the database agent that
            services OpenLink clients acts as a PROXY to other database agents residing on
            a remote OpenLink server(s) within your network infrastructure. This is
            basically a 3-Tier or N-Tier Distributed Database Agent configuration and the
            key configuration values go into the "Domain Type" and "Host
            Name" fields.</para>
            <para>
            Domain Type - this is your OpenLink agent Server type (Virtuoso, Oracle.
            Informix, ODBC, PROXY, etc..), in the case of a typical 3-tier configuration
            you would enter the value PROXY, this implies that you are going to a PROXY
            agent rather than an database agent.</para>
            <para>
            Host Name - this is how you identify the machine hosting the Request Broker
            that binds your OpenLink clients with the OpenLink agent designated by the
            value entered into the "Domain Type" field.</para>
            <para>
            In most case all of these fields can simply be left blank. Click on the
            "Next button to continue.</para>
            <figure xml:id="mt_dbadmn07" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg035.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>For security purposes there are times
            when you want to validate your OpenLink clients at the operating system level
            before they actually initiate sessions with your backend database. In some
            cases backend databases presume that your ability to attempt database
            connection implies your being a valid operating system users, this can be a
            major security hole for those database engines that do not conduct their own username
            and password verification. By hatching the "Require Operating System
            Identity" checkbox your database agent will validate OpenLink clients at
            the operating system level before attempting a connection to your backend
            database. Click the "Next" button to continue.
          </para>
            <figure xml:id="mt_dbadmn08" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg037.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You can enforce consistent transaction
            behavior across your OpenLink clients through the "No Auto Commit On
            Startup" field, this ensures that database commands originating from
            OpenLink clients do not contain trailing "Commit" instructions.
            Without this restriction database integrity could easily be compromised by
            incomplete transactions creating broken records. You enable this protection by
            hatching the "No Auto Commit On Startup" checkbox.</para>
            <para>You can also enforce application specific data type translation handling
            specifically for Microsoft Jet Engine based OpenLink ODBC clients by hatching
            the "Jet Engine Catalogs" checkbox. This is a very application
            specific feature that is only required when Microsoft's Jet engine is the OpenLink
            ODBC client.</para>
            <para>Click the "Next" button to continue.</para>
            <figure xml:id="mt_dbadmn09" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg039.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>There are times when you may want to restrict the number of records
            that your database agent transmits to your OpenLink clients. In such scenarios
            you can enter a numeric value into the "Limit result set" field that
            represents the maximum number of records from a database query resultset that
            your database agent should transmit back to your OpenLink clients. This
            features protects your network from "Innocent Queries From Hell",
            these are queries that end-user unknowingly generate when using visual query
            tools, especially as they familiarize themselves with the concepts of SQL
            querying.</para>
            <para>
            There are also times when critical database functionality may not be
            implemented as part of the ODBC. JDBC., UDBC,or OLE-DB specifications,
            but you need to make use of such functionality in order to run your
            database infrastructure smoothly. When this situation arises you are
            able to use the "Initial SQL script" field to enter a value
            that points to a script file containing a set of SQL instructions that
            implemented the desired functionality. This field corresponds to
            specifying "CommandLine = +initsql filename" in the rulebook
            (oplrqb.ini).</para>
            <para>
            In some cases you may find yourself having to deal with the fact that although
            the functionality may be implemented at the ODBC, UDBC, JDBC, OLE-DB
            specification level, the client application connecting to your database via
            OpenLink simply is not making use of this functionality. In this scenario the
            "Initial SQL Script" field comes in handy. A typical example is
            default Transaction Isolation Levels handling.</para>
            <para>Click "Next" to continue.</para>
            <figure xml:id="mt_dbadmn10" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg041.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You identify the binary executable file that represents the specific
            database agent for your backend database by entering the binary files name in
            the "Executable Name" field. This set for you by default and unless
            you rename this file yourself it does not need to be changed. </para>
            <para>Many database environments are driven by operating system level environment
            variables, the "Environment Variables" field allows you to set or
            re-configure these values (see database specific settings section). 
            Click the "Next" button to continue.</para>
            <figure xml:id="mt_dbadmn11" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg043.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>There may be some database agent specific options that you need to
            apply specifically to sessions with your backend database (see usage part of "obtaining 
            database agent information"
            section for list of values), you enter these values into the "Other
            Options" field.</para>
            <para>
            You also need to indicate the directory in which your database agent executable
            binary file resides, this is only required if you have moved these files from
            their default location after installation. Click the "Next Button" to
            continue.</para>
            <figure xml:id="mt_dbadmn12" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg045.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Your database agents act as servers to your OpenLink clients, this
            implies that as server processes they do consume server operating system
            resources. You can control resource consumption by predefining how many
            database agent instances are to be started as a result of OpenLink clients
            connections, and the basis upon which these instance are reused by subsequent
            OpenLink client connections. The "Never", "Always",
            and "Conditionally" radio button allows you to choose the option that
            best suits your infrastructure's needs.</para>
            <para>
            The "Accept Up To" field allows you to enter a numeric value that
            indicates the maximum number of new database agent processes that can be
            instantiated on a given OpenLink server operating environment.</para>
            <para>If you choose the "Conditionally" radio button and then click the
            "Next" button you will be presented with an additional dialog with a
            list of checkboxes. These checkboxes allow you to customize the sets of circumstances
            under which you want an OpenLink client connection to result in the
            instantiation of a new database agent instances. Click the next
            "Button" to continue.</para>
            <figure xml:id="mt_dbadmn13" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg047.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>At the end of this Wizard interaction you can opt to make you
            database agent settings available to the next OpenLink client without shutting
            down and restarting the Request Broker, you do this by hatching the
            "Reinitialize" checkbox and then clicking the "Save" button
            to save your settings.</para>
            <figure xml:id="mt_dbadmn15" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg049.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_frmagntadm">
        <title>Forms Based Administration</title>
        <para>You can also administer database agents
        through the Admin Assistant using a "Forms" as opposed to
        "Wizards" based approach, the steps that follow guide you through
        this process using the same example (configuring the a database agent for the
        OpenLink Virtuoso database).</para>
        <orderedlist>
          <listitem>
            <para>Start the Admin Assistant by entering
            the following URL into your browser: http://&lt;IP Address or Network Alias of
            machine hosting the OpenLink Database Agents to be Administered&gt;:&lt;Admin
            Assistant Port number&gt;</para>
            <para>For a network machine aliased as "mainserver" using the default
            OpenLink Admin Assistant port "8000" the URL required would be
            entered as follows: http://mainserver:8000</para>
            <para>Expand the menus for "Server Components Administration", and
            "Database Agent Administration". Once this is done you need to then
            click on the "Database Agent Settings (Form)" hyperlink. This will
            bring you to a database agent listing as depicted below:
          </para>
            <figure xml:id="mt_dbadmn16" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg051.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>As our example for this exercise is
            based on the OpenLink Virtuoso database agent, click on the "Edit"
            hyperlink for the "generic_virt" default database agent (note you can
            substitute this with the default database agent that matches your backend
            database). Once these actions are completed you will be presented with the main
            database agent initialization template form. Complete the values for the fields
            that apply to needs and then click on the "Update" button at the
            bottom of the form to save your changes.
          </para>
            <figure xml:id="mt_dbadmn17" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg053.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the "Reinitialize Your
            OpenLink Request Broker With New Settings" hyperlink, this enables your
            new setting to be applied to subsequent connections from OpenLink clients
            without disrupting existing OpenLink client sessions.
          </para>
            <figure xml:id="mt_dbadmn18" floatstyle="normal">
              <title>Admin Assistant</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="scimg055.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <!-- ##################################### -->
    <section xml:id="mt_dbspecset">
      <info>
        <title>Agent-Specific Settings</title>
        <keywordset>
          <keyword>Agent</keyword>
          <keyword>Agent Settings</keyword>
        </keywordset>
      </info>
      <para>OpenLink database agents are database clients built using the SQL
      Call Level or Embedded SQL interfaces of the respective supported
      backend database engines. Thus, the process of configuring or
      administering a database agent is similar in essence to what you
      would have to do if you were administering a native database
      client. </para>
      <para>Database engines use environment variables to creating a database
      specific operating space within which database clients and servers
      interact, these environment typically address the following important
      database session related issues:</para>
      <itemizedlist mark="bullet">
        <listitem>
          <para>Database server identification - your database client needs
          to be able to connect to the appropriate database server, many
          database implementations support multiple database servers
          instances listening for client connections at different network
          ports on the same machine (e.g. OpenLink Virtuoso, Microsoft SQL
          Server, Sybase, Progress, Informix etc.).</para>
        </listitem>
        <listitem>
          <para>Database engine base installation directory - many database
          engine environments comprise shared or dynamically linked
          libraries and other runtime components that are required by
          database clients. Thus, there is a need for database clients to
          have a sense of what the actual base or root point of the
          database engine installation is, this enables the construct of a
          component search path (similar to the "PATH" operating
          system environment variable) at runtime.</para>
        </listitem>
        <listitem>
          <para>Database session resource allocation - most database engines
          allow database session resources to be configured for clients via
          environment variables (sometimes these variables simply identify
          resource configuration files).</para>
        </listitem>
        <listitem>
          <para>Database session optimization - some database environments
          allow query optimizers, network packet sizes, and records transmission
          values for database clients to be configured via environment variables. </para>
        </listitem>
      </itemizedlist>
      <para>The sections that follow address specific environment settings
      that affect the configuration of your OpenLink database agents, the
      values provided can supplanted values used in the Admin Assistant
      configuration examples provided in the prior section.</para>
      <section xml:id="mt_oplconfaall">
        <title>Common Agent Configuration Options</title>
        <para>The following parameters exist in all Agent Environment
        sections of the oplrqb.ini</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment xyz]</para>
                </entry>
                <entry/>
                <entry>Any agent section</entry>
              </row>
              <row>
                <entry>
                  <para>CURSOR_SENSITIVITY=</para>
                </entry>
                <entry>
                  <para>LOW</para>
                </entry>
                <entry>
                  <para>Set to HIGH after loading oplrvc.sql</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          <bridgehead>High Cursor Sensitivity</bridgehead>
        </para>
        <para>
          Enables or disables the row version cache used with dynamic cursors.</para>
        <para>
          When dynamic cursor sensitivity is set high, the Cursor Library calculates
          checksums for each row in the current rowset and compares these with the
          checksums (if any) already stored in the row version cache for the same rows
          when fetched previously. If the checksums differ for a row, the row has been
          updated since it was last fetched and the row status flag is set to
          SQL_ROW_UPDATED. The row version cache is then updated with the latest
          checksums for the rowset.</para>
        <para>
          From the user's point of view, the only visible difference between the two
          sensitivity settings is that a row status flag can never be set to
          SQL_ROW_UPDATED when the cursor sensitivity is low. (The row status is
          instead displayed as SQL_ROW_SUCCESS.) In all other respects, performance
          aside, the two settings are the same - deleted rows don't appear in the
          rowset, updates to the row since the row was last fetched are reflected in
          the row data, and inserted rows appear in the rowset if their keys fall
          within the span of the rowset.</para>
        <para>
          If your application does not need to detect the row status SQL_ROW_UPDATED,
          you should leave the 'High Cursor Sensitivity' checkbox unchecked, as
          performance is improved. The calculation and comparison of checksums for
          each row fetched carries an overhead.</para>
        <para>
          If this option is enabled, the table oplrvc must have been created
          beforehand using the appropriate oplrvc.sql script for the target database.</para>
      </section>
      <section xml:id="mt_virtspecset">
        <title>Virtuoso</title>
        <para>When configuring a Virtuoso database agent
        the critical configuration items are:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Database Identification - this is the Virtuoso Database
            Server's port number, which identifies the actual Virtuoso server process
            that links you to an actual Virtuoso database file. This is the value that
            you enter into the "Database Name" field of either your Admin
            Assistant form or wizard dialog. </para>
          </listitem>
        </itemizedlist>
        <section xml:id="mt_appserv">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are
          unable to install your OpenLink Request Broker and Database Agents on the same
          machine as the one hosting your Virtuoso database server. Irrespective of the
          reasons that lead you to this scenario, it is possible to configure your
          OpenLink database agents hosted on your Application Server machine such that
          they connect to a remote Virtuoso database on your Database Server machine
          using Virtuoso's database specific networking as opposed to OpenLink's Database
          Independent Networking. The end result being a 3-tier
          distributed OpenLink architecture in which the communication between
          OpenLink clients and database agents use OpenLink's Database independent
          Networking, while the communication between the Virtuoso database agent and the
          Virtuoso database server uses Virtuoso database specific networking.</para>
          <para>Configuration Steps:</para>
          <para>Assuming you have a Virtuoso Database
          Server called "mainserver2" that has a Virtuoso server process
          listening for clients at port 1112</para>
          <orderedlist>
            <listitem>
              <para>Ensure that you have a usable connection to Virtuoso using its
              native networking.</para>
            </listitem>
            <listitem>
              <para>Add the following value to the "Database Name" field
              within the Admin Assistant Forms or Wizards used to configure your
              database agent. If you choose to set this value on the client simply enter
              the same values into the "Database Name" Attribute associated
              with the configuration of your OpenLink client (see OpenLink ODBC or JDBC or 
	      UDBC client configuration for more details):</para>
              <programlisting><![CDATA[mainserver2:1112]]></programlisting>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_infspecset">
        <title>Informix</title>
        <para>When configuring an Informix database agent
        the critical configuration items are:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Database Identification - this is an actual database name e.g
            "stores7", which identifies the actual Informix database file
            that you want to be connected with. This is the value that you enter into
            the "Database Name" field of either your Admin Assistant's
            database agent configuration form or wizard dialog. If you choose to have
            database identification take place at the client rather than server, you
            enter this value into the "Database Name" field or connection
            attribute when configuring your OpenLink client.</para>
          </listitem>
        </itemizedlist>
        <para>Informix provides a number of environment
        variables for configuring database clients, the basic set required for
        successfully connecting your database agent to an Informix database server are
        tabulated below:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment INFORMIX5]</para>
                </entry>
                <entry/>
                <entry>
                  <para>Informix 5 Agent environment settings</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>INFORMIXDIR=</para>
                </entry>
                <entry>
                  <para>/dbs/informix5</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the Informix 5 installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>TBCONFIG=</para>
                </entry>
                <entry>
                  <para>tbconfig</para>
                </entry>
                <entry>
                  <para>Database server configuration file</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>FORCE_ONLINE_DATABASE=</para>
                </entry>
                <entry>
                  <para>1</para>
                </entry>
                <entry>
                  <para>Force mode to (0) SE or (1) ONLINE</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>[Environment INFORMIX6]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>INFORMIXDIR=</para>
                </entry>
                <entry>
                  <para>/dbs/informix6</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the Informix 6 installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>[Environment INFORMIX7]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>INFORMIXDIR=</para>
                </entry>
                <entry>
                  <para>/dbs/informix7</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the Informix 7 installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>INFORMIXSERVER=</para>
                </entry>
                <entry>
                  <para>online7</para>
                </entry>
                <entry>
                  <para>The name of Informix 7 server that you 
                  want the agent to attach to. As long as you have I-Connect or I-Net
                  installed, configured and up and running this value can connect your database
                  agent with remote Informix database servers.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ONCONFIG=</para>
                </entry>
                <entry>
                  <para>ONCONFIG</para>
                </entry>
                <entry>
                  <para>Database server configuration file</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>FORCE_ONLINE_DATABASE=</para>
                </entry>
                <entry>
                  <para>1</para>
                </entry>
                <entry>
                  <para>Force mode: 0 for Standard Engine (SE) 1 for ONLINE</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DELIMIDENT=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>This will allow quoted identifiers to be handled.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>OPL_INF_MULTISESS=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Enables Informix mutlisession mode. Y=Each ODBC connection gets its own database session. N=Each ODBC connection shares one database connection.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>OPL_SPACEPADCHAR=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Character data from a CHAR column is fetched with trailing spaces retained. The column data is padded upto the column width. N=Trailing spaces are stripped off.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <!-- ######################## -->
        <section xml:id="mt_secenhancement">
          <title>Security Enhancement</title>
          <para>Due to the fact that Informix leaves
          username and password verification to the host operating system, it is possible
          to close what could be an ODBC, UDBC, JDBC, or OLE-DB security loophole by
          utilizing the OpenLink database agent "OpsysLogin" facility which can
          be enabled through the Admin Assistant. By enabling this feature your Informix
          database agent will verify user accounts at the operating system level before
          attempting to connect to your Informix database. It is important to note that
          "super-user" or Administrator (depending on operating system)
          privileges are required to successfully use this feature. This implies that the
          account that starts the request broker must possess one of the aforementioned
          system level privileges, on the other hand these privileges aren't required for
          your actual OpenLink client sessions.</para>
        </section>
        <section xml:id="mt_rebuildinf">
          <title>Rebuilding Informix Database agents</title>
          <para>
          OpenLink provides a relinkable library and script files that enable
          you to rebuild your database agents as shared, as opposed to
          statically linked binaries, or for the purposes of getting a closer
          database implementation fit, should your Informix database environment
          be a more recent release than the actual version used by OpenLink to
          build the database agent installed on your system. Please read the
          Relinking OpenLink Database Agents section that follows, for details
          on how to perform this task.  </para>
          <para>Note that to run the Informix agents you may require the latest
          Informix Connect (a free download from the IBM/Informix site); in
          order to relink them, you require the Client SDK as well.
        </para>
        </section>
        <section xml:id="mt_appser">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are
          unable to install your OpenLink Request Broker and Database Agents on the same
          machine as the one hosting your Informix database server. Irrespective of the
          reasons that lead you to this scenario, it is possible to configure your
          OpenLink database agents hosted on your Application Server machine such that
          they connect to a remote Informix database on your Database Server machine
          using Informix database specific networking (I-Connect or I-Net) as opposed to
          OpenLink's Database Independent Networking. The end result being a 3-tier
          distributed OpenLink architecture in which the communication between
          OpenLink clients and database agents use OpenLink Database independent
          Networking, while the communication between the Informix database agent and the
          Informix database server uses I-Connect or I-Net (depending on Informix
          version).</para>
          <para>Configuration Steps:</para>
          <para>Assuming you have an Informix Database
          Server machine called "mainserver2" that has an Informix I-Connect or
          I-Net server process running (this is setup and configured via the SQLHOSTS
          file on the database server machine). </para>
          <orderedlist>
            <listitem>
              <para>On your Application Server (the machine hosting your database
              agent) create an I-connect or I-Net Connection Alias called
              "mainserver2" (for purpose of this example only) if a working
              Connection Alias doesn't already exist on this machine.</para>
            </listitem>
            <listitem>
              <para>Ensure that you have a usable connection to your remote
              Informix database using Connection Alias "mainserver2".</para>
            </listitem>
            <listitem>
              <para>Add the following values to the "Database Server
              Options" field within the Admin Assistant Forms or Wizards used to
              configure your database agent. If you choose to set this value on the
              client simply enter the same value into to the "Database Name"
              Attribute associated with the configuration of your OpenLink client (see
              OpenLink ODBC or JDBC or UDBC client configuration for more details):
            </para>
              <programlisting><![CDATA[mainserver2]]></programlisting>
              <para>You can also set the INFORMIXSERVER environment variable to
              "mainserver2".</para>
            </listitem>
          </orderedlist>
          <tip>
            <title>See Also:</title>
            <para><link linkend="mt_appserverarchitect">Application Server Architecture</link> 
            for various illustrations of distributed client-server architectures supported 
            by OpenLink database agent</para>
          </tip>
        </section>
        <section xml:id="mt_infsqlgetinfo">
          <title>Agent handling of SQLGetInfo</title>
          <para>The Informix agent is hard coded with responses to SQLGetInfo().
          These are affected by the build version:</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>SQLGetInfo() differences</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="center" colnum="1" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>Parameter</entry>
                  <entry>Build Version &lt;= 7.x</entry>
                  <entry>Build Version &gt; 7.x (eg. 9.x)</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>SQL_MAX_CATEGORY_NAME_LEN</entry>
                  <entry>8</entry>
                  <entry>32</entry>
                </row>
                <row>
                  <entry>SQL_MAX_OWNER_NAME_LEN</entry>
                  <entry>8</entry>
                  <entry>32</entry>
                </row>
                <row>
                  <entry>SQL_MAX_SCHEMA_NAME_LEN</entry>
                  <entry>18</entry>
                  <entry>128</entry>
                </row>
                <row>
                  <entry>SQL_MAX_QUALIFIER_NAME_LEN</entry>
                  <entry>18</entry>
                  <entry>128</entry>
                </row>
                <row>
                  <entry>SQL_EXPRESSIONS_IN_ORDERBY</entry>
                  <entry>N</entry>
                  <entry>N</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="mt_infunilink">
          <title>Unicode Configuration</title>
          <para>See the <link linkend="mt_uniinf">Unicode section</link>
          for configuration details.</para>
        </section>
      </section>
      <section xml:id="mt_ingspec">
        <title>Ingres</title>
        <para>When configuring an Ingres database agent
        the critical configuration items are:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Database Identification - this is an actual database name e.g
            "demo", which identifies the actual Ingres database that
            you want to be connected with. This is the value that you enter into the
            "Database Name" field of either your Admin Assistant's database
            agent configuration form or wizard dialog. If you choose to have database
            identification take at the client rather than server, you enter this value
            into the "Database Name" field or connection attribute when
            configuring your OpenLink client. </para>
          </listitem>
          <listitem>
            <para>User Authentication - To log into OpenIngres | Ingres II databases you need to create an internal user entry in the database which matches the userid that starts the OpenLink Ingres Database agent (oig[1|2]_sv). Thus if your userid is openlink you need to create a user openlink that is capable of switching to another internal user. A default OpenIngres | Ingres II database will have entries for ingres and root. You can also enable the OpenLink 'opsyslogin' feature in the OpenLink Rule Book (oplrqb.ini) that will force the userid of the agent to be changed to that of the username that has been authenticated by the Operating system, and assuming this is a valid Ingres user will be allowed to connect by the database. </para>
          </listitem>
        </itemizedlist>
        <para>Ingres provides a number of environment
        variables for configuring database clients, the basic set required for
        successfully connecting your database agent to an Ingres database server are
        tabulated below:</para>

        <!-- ######################## -->
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment OPENINGRES1]</para>
                  <para>[Environment INGRES_II]</para>
                </entry>
                <entry/>
                <entry>Parameters are common in Open Ingres 1 and Ingres II</entry>
              </row>
              <row>
                <entry>
                  <para>II_DATE_FORMAT=</para>
                </entry>
                <entry>
                  <para>US</para>
                </entry>
                <entry>
                  <para>Defines the output format for dates as dd-mmm-yyyy. This should not be
                  changed inside the Rule Book since it enables the best compatibility with
                  OpenLink. This will not affect any other Progress applications.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>II_SYSTEM=</para>
                </entry>
                <entry>
                  <para>/dbs</para>
                </entry>
                <entry>
                  <para>Full path to the directory immediately
                  below the Progress/ directory e.g. if your Progress installation directory is
                  /dbs/Progress then set this to /dbs</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ING_SET=</para>
                </entry>
                <entry>
                  <para>set lockmode session where readlock=nolock</para>
                </entry>
                <entry>
                  <para>This makes sure when the Ingres agent is started, the first thing it does is runs this
                  command. The command itself makes sure that a simple select statement does not lock all the rows it
                  selects.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>USE_OWNER=</para>
                </entry>
                <entry>
                  <para>Y or N</para>
                </entry>
                <entry>
                  <para>Only applicable for Ingres 6.4 databases. If set to Y forces the driver to return the ingres internal table owner as the schema name for the table, as this was required for early version of MSQuery.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <section xml:id="mt_ing64security">
          <title>Security Enhancement:</title>
          <para>Due to the fact that Ingres 6.4
          leaves username and password verification to the host operating system (Ingres
          II does not have this problem), it is possible to close what could be an ODBC,
          UDBC, JDBC, or OLE-DB security loophole by utilizing the OpenLink database
          agent "OpsysLogin" facility which can be enabled through the Admin
          Assistant. By enabling this feature your Ingres database agent will verify user
          accounts at the operating system level before attempting to connect to your
          Ingres database. It is important to note that "super-user" or
          Administrator (depending on operating system) privileges are required to
          successfully use this feature. This implies that the account that starts the
          request broker must possess one of the aforementioned system level privileges,
          on the other hand these privileges aren't required for your actual OpenLink
          client sessions. </para>
        </section>
        <section xml:id="mt_rebuilding">
          <title>Rebuilding Ingres Database Agents</title>
          <para>OpenLink provides a relinkable library and
          script files that enable you to rebuild your database agents as shared, as opposed
          to statically linked binaries, or for the purposes of getting a closer database
          implementation fit, should your Ingres database environment be a more recent
          release than the actual version used by OpenLink to build the database agent
          installed on your system. Please read the Relinking
          OpenLink Database Agents section that follows, for details on how to perform this
          task.</para>
        </section>
        <section xml:id="mt_appsrving">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are
          unable to install your OpenLink Request Broker and Database Agents on the same
          machine as the one hosting your Ingres database server. Irrespective of the
          reasons that lead you to this scenario, it is possible to configure your
          OpenLink database agents hosted on your Application Server machine such that
          they connect to a remote Ingres database on your Database Server machine using
          Ingres database specific networking (Ingres Net) as opposed to OpenLink's
          Database Independent Networking. The end result being a 3-tier
          distributed OpenLink architecture in which the communication between
          OpenLink clients and database agents use OpenLink Database independent
          Networking, while the communication between the Ingres database agent and the
          Ingres database server uses Ingres Net.</para>
          <para>Configuration Steps:</para>
          <para>Assuming that you have 
          an Ingres Database server machine called "mainserver2" that has
          an Ingres Net server process running. </para>
          <orderedlist>
            <listitem>
              <para>On your Application Server (the machine hosting your database
              agent) create an Ingres Net vnode called "mainserver2" (for
              purpose of this example only) if you do not have a working vnode on this
              machine.</para>
            </listitem>
            <listitem>
              <para>Ensure that you have a usable connection to your remote Ingres
              database using the vnode "mainserver2".</para>
            </listitem>
            <listitem>
              <para>Add the following values to the "Server Options"
              field within the Admin Assistant Forms or
              Wizards used to configure your database agent. If you choose to set this
              value on the client simply enter the same value into to the "Database
              Name" Attribute associated with the configuration of your OpenLink
              client (see OpenLink ODBC or JDBC or UDBC client configuration for more details):</para>
              <programlisting><![CDATA[mainserver2]]></programlisting>
            </listitem>
          </orderedlist>
          <tip>
            <title>See Also:</title>
            <para><link linkend="mt_appserverarchitect">Application Server Architecture</link> 
            for various illustrations of distributed client-server architectures supported 
            by OpenLink database agent</para>
          </tip>
          <note>
            <title>Note:</title>
            <para>
            OpenLink Drivers for Ingres II, both Single- and Multi-Tier, are
            based on the OpenAPI Interface, and are intended only for use only
            with Ingres II.  In some environments, these Drivers may also 
            permit connection to OpenIngres 1.x and 2.x, which are also based
            on the OpenAPI Interface; however, these Drivers have not been 
            certified for such connections, and they are made at the User's
            discretion and risk.  These Drivers will not support connections 
            to Ingres 6.4 or previous under any conditions.  Drivers for versions
            of Ingres prior to Ingres II may be available for some platforms;
            please inquire at 
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="mailto:product.availability@openlinksw.com">product availability</link>, 
            if you require such a Driver.  </para>
          </note>
        </section>
      </section>
      <section xml:id="mt_prospec">
        <title>Progress</title>
        <para>When configuring a Progress database agent
        the critical configuration items are:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Database Identification - this is an actual database name e.g
            "demo" or "isports", which identifies the actual
            Progress database file that you want to be connected with. This is the
            value that you enter into the "Database Name" field of either
            your Admin Assistant form or wizard dialog. If you choose to have database
            identification take at the client rather than server, you enter this value
            into the "Database Name" field or connection attribute when configuring
            your OpenLink client. </para>
          </listitem>
        </itemizedlist>
        <para>Progress provides a number of environment
        variables for configuring database clients, the basic set required for
        successfully connecting your database agent to an Progress database server are
        tabulated below:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment PROGRESS8]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>DLC=</para>
                </entry>
                <entry>
                  <para>/dbs/dlc8</para>
                </entry>
                <entry>
                  <para>Must be full path to the Progress dlc directory.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>PROCFG=</para>
                </entry>
                <entry>
                  <para>/dbs/dlc8/progress.cfg</para>
                </entry>
                <entry>
                  <para>Must be the full path and filename to the progress.cfg file. This parameter is optional. Use it if the license file can not be found.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>TABLEVIEW=</para>
                </entry>
                <entry/>
                <entry>
                  <para>Must be the full path and filename to the
                  table view file (tableview.dat). See detailed 
                  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://support.openlinksw.com/opie/kbase/print_opie_article.vsp?OP_ID=245">TABLEVIEW document</link> for more information</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>TABLEVIEW_QUALIFIER=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Add owner information to select statement</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DEADLOCK_TIMEOUT=</para>
                </entry>
                <entry>
                  <para>60</para>
                </entry>
                <entry>
                  <para>Seconds to wait for lock to release.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>INSERT_LOGICAL=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Rewrite character TRUE/FALSE to logical</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>UPDATE_LOGICAL=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Rewrite character TRUE/FALSE to logical</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>SPACE_QUOTE_IDENTIFIER=</para>
                </entry>
                <entry>Y</entry>
                <entry>
                  <para>
                  If the SPACE_QUOTE_IDENTIFIER keyword is unset, it defaults to true,
                  i.e., a space is returned as the quote character.  To make the driver
                  return an empty string for the quote character, this keyword must be
                  set to N.
                  Most applications work properly with the default behavior
                  (SPACE_QUOTE_IDENTIFIER = Y).  Known exceptions include some versions
                  of Microsoft Visio, the Microsoft SQL Server DTS Wizard and Business
                  Objects.
                </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>MIN_FIELD_LEN=</para>
                </entry>
                <entry/>
                <entry>
                  <para>Minimum length for char field or expression.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>MAX_FIELD_LEN=</para>
                </entry>
                <entry/>
                <entry>
                  <para>Minimum length for char field or expression.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>To connect to multiple databases through a
        single OpenLink client connection and/or to make use array type columns you
        must run the OpenLink provided "setup.p" utility. Please refer to the 
        setup.p document for detailed information on
        the use of this script.</para>
        <section xml:id="mt_prosessresource">
          <title>Configuring Progress Session Resources</title>
          <para>You can control default behavior and
          progress server session resource allocation by entering standard progress
          session parameters in the "Server Options" field within the Admin
          Assistant's database agent configuration wizard dialogs or forms. </para>
          <para>The following values are set for you
          by default at installation time and displayed as depicted below within the
          "Server Options" fields of the Admin Assistant Forms and Wizard
          dialogs.</para>
          <programlisting><![CDATA[-T /tmp -d mdy -TB 31 -TM 31 ]]></programlisting>
        </section>
        <section xml:id="mt_dbagntissu">
          <title>Database Agent Specific Issues</title>
          <para>Progress database servers support sockets
          and shared memory based methods of Inter Process Communication (IPC),
          unfortunately the shared memory approach which is much faster than sockets and
          the preferred approach by many users bears a cost of version incompatibility.
          This implies that your OpenLink database agents need to be an exact version
          match with your backend Progress database server in order to successfully
          initiate shared memory based database sessions (note: these agents are built
          using the Progress Embedded SQL package).</para>
        </section>
        <section xml:id="mt_rebuildpro">
          <title>Rebuilding Progress Database agents</title>
          <para>To get around the issue explained above
          OpenLink provides a relinkable library and script file that enables you to
          build an OpenLink database agent that has an exact match to the version of
          Progress that you have installed. See the section below on Relinking
          Progress Agents for details.</para>
          <para>If shared memory based IPC isn't an issue
          for you then start your Progress server with the -S, -N, and -H options
          indicating the use of a sockets based Progress database server. This mode of
          operation is Progress version independent.</para>
        </section>
        <section xml:id="mt_appservpro">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are unable to install your
          OpenLink Request Broker and Database Agents on the same machine as the
          one hosting your Progress database server. Irrespective of the reasons
          that lead you to this scenario, it is possible to configure your
          OpenLink database agents hosted on your Application Server machine
          such that they connect to a remote Progress database on your Database
          Server machine using Progress database specific networking (Progress
          Client Networking) as opposed to OpenLink's Database Independent
          Networking. The end result being a 3-tier distributed OpenLink
          architecture in which the communication between OpenLink clients and
          database agents use OpenLink Database independent Networking, while
          the communication between the Progress database agent and the Progress
          database server uses Progress Client Networking.</para>
          <para>Configuration Steps:</para>
          <para>Assuming you have a Progress Database
          Server machine called "mainserver2" that has a sockets based Progress
          Server process running, you would enter the following (assuming a TCP/IP based
          network):</para>
          <orderedlist>
            <listitem>
              <para>Ensure that you have a usable connection to Progress using its
              native networking (Progress Client Networking) using the following remote
              database connection parameters:</para>
              <programlisting><![CDATA[-S mainserver2 -H mainserver -N tcp .]]></programlisting>
            </listitem>
            <listitem>
              <para>Add the following values to the "Connect
              Options" field within the Admin Assistant Forms or Wizards
              used to configure your database agent in the Rulebook. If you
              choose to set this value on the client simply enter the same
              value into to the "Options" attribute associated with
              the configuration of your OpenLink client (see OpenLink ODBC or
              JDBC or UDBC client configuration for more details):</para>
              <programlisting><![CDATA[-S mainserver2 -H mainserver -N tcp]]></programlisting>
            </listitem>
          </orderedlist>
          <tip>
            <title>See Also:</title>
            <para>
              <link linkend="mt_conprog">Progress Connection Trouble Shooting</link>
            </para>
          </tip>
          <tip>
            <title>See Also:</title>
            <para><link linkend="mt_appserverarchitect">Application Server Architecture</link> 
            for various illustrations of distributed client-server architectures supported 
            by OpenLink database agent</para>
          </tip>
        </section>
        <section xml:id="mt_prounilink">
          <title>Unicode Configuration</title>
          <para>See the <link linkend="mt_unipro">Unicode section</link>
          for configuration details.</para>
        </section>
      </section>
      <section xml:id="mt_oraspec">
        <title>Oracle</title>
        <para>When configuring an Oracle database agent
        the critical configuration items are:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Database Identification - this is an actual Oracle System
            Identifier (SID) e.g "ORCL", which identifies the actual Oracle
            environment that you want to be connected with. This is the value that you
            enter into the "Database Name" field of either your Admin
            Assistant's database agent configuration form or wizard dialog. If you
            choose to have database identification take at the client rather than
            server, you enter this value into the "Database Name" field or
            connection attribute when configuring your OpenLink client. </para>
          </listitem>
        </itemizedlist>
        <para>Oracle provides a number of environment
        variables for configuring database clients, the basic set required for
        successfully connecting your database agent to an Oracle database server are
        tabulated below:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment ORACLE7]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>ORACLE_HOME=</para>
                </entry>
                <entry>
                  <para>/dbs/oracle7</para>
                </entry>
                <entry>
                  <para>The home directory for the Oracle installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ODBC_CATALOGS=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Uncomment after loading the "odbccat7.sql" script.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>MULTIPLEX_LDA=</para>
                </entry>
                <entry>
                  <para>5</para>
                </entry>
                <entry>
                  <para>Allow 5 OpenLink clients via a single database session</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>OPL_USER_TBLS_FIRST=</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
                <entry>
                  <para>set to Y to show OpenLink User Tables first</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>SHOW_REMARKS=</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
                <entry>
                  <para>Set to Y to retrieve SQLColumns REMARKS field</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>[Environment ORACLE8]</para>
                  <para>[Environment ORACLE9]</para>
                </entry>
                <entry/>
                <entry>Parameters are common in Oracle 8 and 9i</entry>
              </row>
              <row>
                <entry>
                  <para>ORACLE_HOME=</para>
                </entry>
                <entry>
                  <para>/dbs/oracle8 or /dbs/oracle9</para>
                </entry>
                <entry>
                  <para>The home directory for the Oracle installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ODBC_CATALOGS=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Uncomment after loading the "odbccat8.sql" script.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>MULTIPLEX_LDA=</para>
                </entry>
                <entry>
                  <para>5</para>
                </entry>
                <entry>
                  <para>Allow 5 OpenLink clients via a single database session</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>OPL_USER_TBLS_FIRST=</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
                <entry>
                  <para>set to Y to show OpenLink User Tables first</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>SHOW_REMARKS=</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
                <entry>
                  <para>Set to Y to retrieve SQLColumns REMARKS field</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>OCI_PREFETCH_ROWS=</para>
                </entry>
                <entry>
                  <para>120</para>
                </entry>
                <entry>
                  <para>Sets the number of rows to be prefetched</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>OCI_PREFETCH_MEMORY=</para>
                </entry>
                <entry>
                  <para>64</para>
                </entry>
                <entry>
                  <para>Kb of memory allocated for rows to be prefetched</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <section xml:id="mt_dbagntor">
          <title>Database Agent Specific Settings</title>
          <para>The "odbccat.sql" scripts explained:</para>
          <para>These scripts exist for each version of Oracle
          supported, the files "odbccat6.sql", "odbccat7.sql", and
          "odbccat8.sql" representing Oracle versions 6 up to version 8
          respectively. Oracle 9i can use the "odbccat8.sql" script.
          These scripts are to be applied to your Oracle instance to enable
          efficient and extended functionality between OpenLink and Oracle when handling
          ODBC, JDBC, UDBC, and OLE-DB catalog calls such as SQLForeignKeys() and
          SQLPrimaryKeys() functions. These functions have significant impact on the
          performance of your OpenLink clients.</para>
          <para>To run these scripts you need to 
          start the Oracle server manager (svrmgr or sqldba if you do this from the
          command line). Connect as internal and run the script by locating the relevant
          script file as you would any other Oracle SQL script file.</para>
        </section>
        <section xml:id="mt_rebuildora">
          <title>Rebuilding Oracle Database Agents</title>
          <para>OpenLink provides a relinkable library and
          script files that enable you to rebuild your database agents as shared, as
          opposed to statically linked binaries, or for the purposes of getting a closer
          database implementation fit if your Oracle database environment is a more recent
          release than the actual version used by OpenLink to build the database agent
          installed on your system. Please read the Relinking
          OpenLink Database Agents section that follows, for details on how to perform this task.</para>
        </section>
        <section xml:id="mt_appservor">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are
          unable to install your OpenLink Request Broker and Database Agents on the same
          machine as the one hosting your Oracle database server. Irrespective of the
          reasons that lead you to this scenario, it is possible to configure your
          OpenLink database agents hosted on your Application Server machine such that
          they connect to a remote Oracle database on your Database Server machine using
          Oracle database specific networking (SQL*Net or Net8) as opposed to OpenLink's
          Database Independent Networking. The end result being a 3-tier
          distributed OpenLink architecture in which the communication between
          OpenLink clients and database agents use OpenLink Database independent
          Networking, while the communication between the Oracle database agent and the
          Oracle database server uses Oracle SQL*Net or Net8.</para>
          <para>Configuration Steps:</para>
          <para>Assuming you have an Oracle Database Server
          machine called "mainserver2" that has an Oracle Listener process
          running, you would enter the following (presuming that your SQL*Net or Net8
          alias for this Listener is also named "mainserver2"):</para>
          <orderedlist>
            <listitem>
              <para>On your Application Server (the machine hosting your database
              agents) create a SQL*Net or Net8 Alias named "mainserver2" (for
              purposes of this example only).</para>
            </listitem>
            <listitem>
              <para>Ensure that you have a usable connection to the remote Oracle
              database server using the SQL*Net or Net8 alias "mainserver2"</para>
            </listitem>
            <listitem>
              <para>Add the following values to the "Server Options"
              field within the Admin Assistant Forms or
              Wizards used to configure your database agent. If you choose to set this
              value on the client simply enter the same value into to the "Database
              Name" Attribute associated with the configuration of your OpenLink
              client (see OpenLink ODBC or JDBC or UDBC client configuration for more details):</para>
              <programlisting><![CDATA[mainserver2]]></programlisting>
            </listitem>
          </orderedlist>
          <tip>
            <title>See Also:</title>
            <para><link linkend="mt_appserverarchitect">Application Server Architecture</link> 
            for various illustrations of distributed client-server architectures supported 
            by OpenLink database agent</para>
          </tip>
        </section>
        <section xml:id="mt_oraunilink">
          <title>Unicode Configuration</title>
          <para>See the <link linkend="mt_uniora">Unicode section</link>
          for configuration details.</para>
        </section>
      </section>
      <section xml:id="mt_sybspec">
        <title>Sybase</title>
        <note>
          <title>Note:</title>
          <para>The Sybase Agent is no longer required, all Sybase connectivity is 
          handled by the TDS Agent.</para>
          <para>See: <link linkend="mt_tdsspec">TDS Agent</link>
        </para>
          <para>This section remains purely for reference on previous OpenLink versions</para>
        </note>
        <para>When configuring a Sybase database agent
        the critical configuration items are:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Database Identification - this is the name of the Sybase 
            database to be connected to ie pubs2 in the case of the Sybase 
	    provided sample database. This is the value that you
            enter into the "Database Name" field of either your Admin
            Assistant's database agent configuration form or wizard dialog. If you
            choose to have database identification take at the client rather than
            server, you enter this value into the "Database Name" field or
            connection attribute when configuring your OpenLink client. </para>
          </listitem>
        </itemizedlist>
        <para>Sybase provides a number of environment
        variables for configuring database clients, the basic set required for
        successfully connecting your database agent to a Sybase database server are
        tabulated below:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment SYBASE4]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>SYBASE=</para>
                </entry>
                <entry>
                  <para>/dbs/sybase4</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the Sybase installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DSQUERY=</para>
                </entry>
                <entry>
                  <para>SYBASE</para>
                </entry>
                <entry>
                  <para>Name of the Sybase Query Server that you are connecting to. </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>[Environment SYBASE10]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>SYBASE=</para>
                </entry>
                <entry>
                  <para>/dbs/sybase10</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the Sybase installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DSQUERY=</para>
                </entry>
                <entry>
                  <para>SYBASE</para>
                </entry>
                <entry>
                  <para>Name of the Sybase Query Server that you are connecting to. </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>[Environment SYBASE11]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>SYBASE=</para>
                </entry>
                <entry>
                  <para>/dbs/sybase11</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the Sybase installation.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DSQUERY=</para>
                </entry>
                <entry>
                  <para>SYBASE</para>
                </entry>
                <entry>
                  <para>Name of the Sybase Query Server that you are connecting to. </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <note>
          <title>Note:</title>
          <para>On some systems, like RedHat Linux, if the environment variable LANG=en_US 
          is set it may need to be unset, or the environment variable LC_ALL=default set 
          in the RuleBook to avoid RPC:Time Out errors on connect.</para>
        </note>
        <section xml:id="mt_rebuildsyb">
          <title>Rebuilding Sybase Database Agents</title>
          <para>OpenLink provides a relinkable library and
          script files that enable you to rebuild your database agents as shared, as
          opposed to statically linked binaries, or for the purposes of getting a closer
          database implementation fit, should your Sybase database environment be a
          more recent release than the actual version used by OpenLink to build the
          database agent installed on your system. Please read the Relinking
          OpenLink Database Agents section that follows, for details on how to perform this
          task.</para>
        </section>
        <section xml:id="mt_appsrvsyb">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are
          unable to install your OpenLink Request Broker and Database Agents on the same
          machine as the one hosting your Sybase database server. Irrespective of the
          reasons that lead you to this scenario, it is possible to configure your
          OpenLink database agents hosted on your Application Server machine such that
          they connect to a remote Sybase database on your Database Server machine using
          Sybase database specific networking (Open Client) as opposed to OpenLink's
          Database Independent Networking. The end result being a 3-tier
          distributed OpenLink architecture in which the communication between
          OpenLink clients and database agents use OpenLink Database independent
          Networking, while the communication between the Sybase database agent and the
          Sybase database server uses Sybase Open Client.</para>
          <para>Configuration Steps:</para>
          <para>Assuming you have an Sybase Database Server
          machine called "mainserver2" that has an Sybase Server named
          "mainserver2" up and running:</para>
          <orderedlist>
            <listitem>
              <para>On your Application Server (the machine hosting your database
              agents) create an Open Client Database Connection Alias named
              "mainserver2" (for purposes of this example only).</para>
            </listitem>
            <listitem>
              <para>Ensure that you have a usable connection to the remote Sybase
              database server using the Open Client Database alias
              "mainserver2"</para>
            </listitem>
            <listitem>
              <para>Add the following values to the "Server Options"
              field within the Admin Assistant Forms or
              Wizards used to configure your database agent. If you choose to set this
              value on the client simply enter the same value into to the "Database
              Name" Attribute associated with the configuration of your OpenLink
              client (see OpenLink ODBC or JDBC or UDBC
              client configuration for more details):</para>
              <programlisting><![CDATA[mainserver2]]></programlisting>
              <para>
              You may also enter the following values into the "Database Server
              Options" field: -s mainserver2</para>
            </listitem>
          </orderedlist>
          <tip>
            <title>See Also:</title>
            <para><link linkend="mt_appserverarchitect">Application Server Architecture</link> 
            for various illustrations of distributed client-server architectures supported 
            by OpenLink database agent</para>
          </tip>
        </section>
        <section xml:id="mt_sybunilink">
          <title>Unicode Configuration</title>
          <para>See the <link linkend="mt_unisyb">Unicode section</link>
          for configuration details.</para>
        </section>
      </section>
      <section xml:id="mt_sqlservspec">
        <title>Microsoft SQL Server</title>
        <para>You can specify the following environment variables for this
        agent:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>FREETDSCONF</emphasis>
            : a path to the
        freetds.conf file to use.</para>
          </listitem>
          <listitem>
            <para><emphasis>DSQUERY</emphasis>
            : the section to use within
        freetds.conf</para>
          </listitem>
          <listitem>
            <para><emphasis>TDSSERVER</emphasis>
            : the IP address or alias
          name for the server running SQL Server.</para>
          </listitem>
          <listitem>
            <para><emphasis>TDSPORT</emphasis>
            : the TCP port number the
          SQLServer instance is running on</para>
          </listitem>
          <listitem>
            <para><emphasis>TDSVER</emphasis>
            : the TDS Protocol version for
          the type of SQLServer instance being used.</para>
          </listitem>
          <listitem>
            <para><emphasis>TDSDBASE</emphasis>
            : the name of the SQLServer
          Database</para>
          </listitem>
        </itemizedlist>
        <para>The following Connection Options can be passed to the
        driver:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>-H</emphasis>
             - Hostname of the machine SQL
          Server is running </para>
          </listitem>
          <listitem>
            <para><emphasis>-P</emphasis>
             - SQL Server TCP Port </para>
          </listitem>
          <listitem>
            <para><emphasis>-V</emphasis>
             - SQL Server version . Values
          supported are; 9.0 equal SQL Server 2005; 8.0 equal SQL Server 2000;
          7.0 equal SQL Server 7 </para>
          </listitem>
          <listitem>
            <para><emphasis>-S</emphasis>
             - SQL Server name on the specified
          host. A SQL Server instance can also be specified by appending
          "\InstanceName" to the ServerName?? ie
          "ServerName\InstanceName" </para>
          </listitem>
          <listitem>
            <para><emphasis>-F</emphasis>
             - Specify Fail over server name for
          Database Mirroring </para>
          </listitem>
          <listitem>
            <para><emphasis>-N</emphasis>
             - Network Packet size, which is a
          value that determines the number of bytes per network packet
          transferred from the database server to the client. The correct
          setting of this attribute can improve performance. When set to 0, the
          initial default, the driver uses the default packet size as specified
          in the Sybase server configuration. When set to -1, the driver
          computes the maximum allowable packet size on the first connect to
          the data source and saves the value in the system
          information. </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>-O Prepared Method, which is a value that
            determines whether stored procedures are created on the server
            for every call to SQLPrepare. When set to Full (2), stored
            procedures are created for every call to SQLPrepare, which can
            decrease performance when processing static statements. When
            set to Partial(1), the initial default, the driver creates
            stored procedures only if the statement contains parameters.
            Otherwise, the statement is cached and executed directly at
            SQLExecute time. When set to None (0), the driver never creates
            stored procedures. </emphasis>
            </para>
          </listitem>
          <listitem>
            <para><emphasis>-L</emphasis>
             - The name of a Microsoft SQL
          Server supported national language. The default language is
          English. </para>
          </listitem>
          <listitem>
            <para><emphasis>-C</emphasis>
             - The name of an installed
          character set on the server. By default it is the setting on the
          Microsoft SQL Server. </para>
          </listitem>
          <listitem>
            <para><emphasis>-A</emphasis>
             - Turn Off ANSI NULL
          handling </para>
          </listitem>
          <listitem>
            <para><emphasis>-E</emphasis>
             - Turn On SSL Strong Data
          Encryption </para>
          </listitem>
          <listitem>
            <para><emphasis>-R</emphasis>
             - Turn On SSL Server Certificate
          Verification </para>
          </listitem>
          <listitem>
            <para><emphasis>-D</emphasis>
             - Specify Name of Certificate
          Authority file to be used for SSL Certificate
          Verification </para>
          </listitem>
          <listitem>
            <para><emphasis>-Z</emphasis>
             - Turn On Snapshot Serializable
          Isolation </para>
          </listitem>
          <listitem>
            <para><emphasis>-M</emphasis>
             - Turn On Multiple Active Result
          Sets (MARS)</para>
          </listitem>
        </itemizedlist>
        <note>
          <para>Note on Precedence:</para>
          <para>The web-based Administrative Assistant modifies/sets
        environment variables, above. These environment variables are used
        in preference to any -H, -V or -P connect-options that might be
        specified.</para>
        </note>
        <section xml:id="mt_appsrvsql">
          <title>Application Server &amp; 3-Tier Architecture Configuration</title>
          <para>There may be situations in which you are
          unable to install your OpenLink Request Broker and Database Agents on the same
          machine as the one hosting your Microsoft SQL Server database server.
          Irrespective of the reasons that lead you to this scenario, it is
          possible to configure your OpenLink database agents hosted on your Application
          Server machine such that they connect to a remote Microsoft SQL Server database
          on your Database Server machine using Microsoft SQL Server database specific
          networking (NETLIB) as opposed to OpenLink's Database Independent Networking.
          The end result being a 3-tier
          distributed OpenLink architecture in which the communication between
          OpenLink clients and database agents use OpenLink Database independent
          Networking, while the communication between the Microsoft SQL Server database
          agent and the Microsoft SQL Server database server uses Microsoft SQL Server's
          NETLIB.</para>
          <para>Configuration Steps:</para>
          <para>Assuming you have an Microsoft SQL Server
          Database Server machine called "oplwinnt" that has a Microsoft SQL
          Server Server named "oplwinnt" up and running:</para>
          <orderedlist>
            <listitem>
              <para>On your Application Server (the machine hosting your database
              agents) create a NETLIB Database Connection Alias named
              "oplwinnt" (for purposes of this example only).</para>
            </listitem>
            <listitem>
              <para>Ensure that you have a usable connection to the remote
              Microsoft SQL Server database server using the Open Client Database alias
              "oplwinnt" (this the value you provide whenever you are prompted
              for a Server Name by native SQL Server utilities)</para>
            </listitem>
            <listitem>
              <para>Add the following values to the "Server
              Options"field within the Admin
              Assistant Forms or Wizards used to configure your database agent. If you
              choose to set this value on the client simply enter the same value into to
              the "Database Name" Attribute associated with the configuration
              of your OpenLink client ODBC or JDBC or UDBC client configuration for more
              details):</para>
              <programlisting><![CDATA[oplwinnt]]></programlisting>
              <para>
              You may also enter the following values into the "Database Server
              Options" field: -s oplwinnt</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_sqlunilink">
          <title>Unicode Configuration</title>
          <para>See the <link linkend="mt_unisql">Unicode section</link>
          for configuration details.</para>
        </section>
      </section>
      <section xml:id="mt_tdsspec">
        <title>TDS</title>
        <para>The TDS Agent supercedes the Sybase and SQLServer database agents.  
        Although they share a common connection mechanism there are some 
        subtle value differences that must be observed.</para>
        <para>TDS provides a number of environment variables for configuring
        database clients, a typical set used for successfully connecting
        your database agent to a SQL Server are tabulated below:</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment SQLServer 2000]</para>
                </entry>
                <entry/>
                <entry>
                  <para>The section name will vary with the agent version and database version.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>FREETDSCONF=</para>
                </entry>
                <entry>
                  <para>/home/openlink/bin/freetds.conf</para>
                </entry>
                <entry>
                  <para/>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DSQUERY=</para>
                </entry>
                <entry>
                  <para>SQLSERVER</para>
                </entry>
                <entry>
                  <para>Load this section from the freetds.conf file.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>TDSHOST=</para>
                </entry>
                <entry>
                  <para>sqlsrv</para>
                </entry>
                <entry>
                  <para>Point this to your SQL Server /Sybase machine</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>TDSPORT=</para>
                </entry>
                <entry>
                  <para>1433</para>
                </entry>
                <entry>
                  <para>The port on which you SQL Server/Sybase listens for
                  incoming connections. SQL Server uses port 1433 by
                  default, however Sybase uses 4100.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>TDSVER=</para>
                </entry>
                <entry>
                  <para>7.0</para>
                </entry>
                <entry>
                  <para>The required TDS connectivity version. Refer to the
                table below.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>SQLSERVER_CATALOG=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para/>
                </entry>
              </row>
              <row>
                <entry>
                  <para>CURSOR_SENSITIVITY=</para>
                </entry>
                <entry>
                  <para>LOW</para>
                </entry>
                <entry>
                  <para>You can set this to HIGH after loading oplrvc.sql</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The TDSVER option above must be set correctly for connection to the 
        desired database.  Use the following table to find which.</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>TDSVER settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Version Number</para>
                </entry>
                <entry>
                  <para>Database Supported</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>4.2</para>
                </entry>
                <entry>
                  <simplelist type="vert">
                    <member>SQLServer 6</member>
                    <member>SQLServer 6.x</member>
                  </simplelist>
                </entry>
              </row>
              <row>
                <entry>
                  <para>4.6</para>
                </entry>
                <entry>
                  <simplelist type="vert">
                    <member>Sybase 4</member>
                    <member>Sybase 4.x</member>
                  </simplelist>
                </entry>
              </row>
              <row>
                <entry>
                  <para>5.0</para>
                </entry>
                <entry>
                  <simplelist type="vert">
                    <member>Sybase 10</member>
                    <member>Sybase 11</member>
                    <member>Sybase 12</member>
                    <member>Sybase 15</member>
                  </simplelist>
                </entry>
              </row>
              <row>
                <entry>
                  <para>7.0</para>
                </entry>
                <entry>
                  <simplelist type="vert">
                    <member>SQLServer 7</member>
                  </simplelist>
                </entry>
              </row>
              <row>
                <entry>
                  <para>8.0</para>
                </entry>
                <entry>
                  <simplelist type="vert">
                    <member>SQLServer 2000</member>
                  </simplelist>
                </entry>
              </row>
              <row>
                <entry>
                  <para>9.0</para>
                </entry>
                <entry>
                  <simplelist type="vert">
                    <member>SQLServer 2005</member>
                  </simplelist>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_db2spec">
        <title>DB2</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment DB2]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>DB2DIR=</para>
                </entry>
                <entry>
                  <para>/DB2</para>
                </entry>
                <entry>
                  <para>Full path to the base directory for the DB2 installation. Note,DB2 version 5 and below use the environment variable DB2PATH instead.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>DB2INSTANCE=</para>
                </entry>
                <entry>
                  <para>DB2</para>
                </entry>
                <entry>
                  <para>Name of the instance you want to connect to. DB2 is the default DB2 instance name.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Agent Section</para>
        <para>OpsysLogin=No; Validation of users is left to DB2</para>
        <para>Database Agent default name: db2_sv</para>
        <section xml:id="mt_db2unilink">
          <title>Unicode Configuration</title>
          <para>See the <link linkend="mt_unidb2">Unicode section</link>
          for configuration details.</para>
        </section>
      </section>
      <section xml:id="mt_postgresspec">
        <title>PostgresSQL</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment POSTGRES]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>;ODBC_CATALOGS=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Uncomment after loading odbccat defs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Agent Section</para>
        <para>OpSysLogin= Yes; Users are validated against the operating system.</para>
        <para>The following options can be used in the <emphasis>ConnectOptions</emphasis> 
        field of the rule book (oplrqb.ini) to override client <emphasis>Options</emphasis> 
        settings:</para>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>-H &lt;hostname&gt;</title>
              <para>Connect to postmaster on &lt;hostname&gt;.  This defaults to localhost 
              if unspecified</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>-P &lt;port&gt;</title>
              <para>Contact postmaster on port &lt;port&gt;, which defaults to PGPORT (5432) 
              is unspecified.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>-T</title>
              <para>Disable ODBC transaction management.  All transactions will be 
              automatically committed.  This prevents palloc() failures with out-of-memory 
              errors when doing really big transactions such as Exporting 10000 records 
              from MS/Access.</para>
            </formalpara>
          </listitem>
        </itemizedlist>
        <para>Database Agent default name: pgr7_mv (or pgr7_sv which is single threaded)</para>
        <para>This ODBC database agent has been built using PostgreSQL release 7.2.  
        Using this agent with a previous version of Postgres will probably fail.  If 
        you experience any problems with older releases, please try against release 
        7.2 first before contacting OpenLink.</para>
        <section xml:id="mt_pgodtmapp">
          <title>Data type Mapping from ODBC Data types to Postgres Data types</title>
          <para>This information can be queried by the SQLTypeInfo catalog call.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Default Rule Book settings</title>
            <tgroup align="char" charoff="50" char="." cols="2">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>SQL type</entry>
                  <entry>Postgres type</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>SQL_CHAR</entry>
                  <entry>char</entry>
                </row>
                <row>
                  <entry>SQL_VARCHAR</entry>
                  <entry>varchar</entry>
                </row>
                <row>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>text</entry>
                </row>
                <row>
                  <entry>SQL_DECIMAL</entry>
                  <entry>varchar</entry>
                </row>
                <row>
                  <entry>SQL_NUMERIC</entry>
                  <entry>varchar</entry>
                </row>
                <row>
                  <entry>SQL_BIT</entry>
                  <entry>bit</entry>
                </row>
                <row>
                  <entry>SQL_TINYINT</entry>
                  <entry>int2</entry>
                </row>
                <row>
                  <entry>SQL_SMALLINT</entry>
                  <entry>int2</entry>
                </row>
                <row>
                  <entry>SQL_INTEGER</entry>
                  <entry>int4</entry>
                </row>
                <row>
                  <entry>SQL_BIGINT</entry>
                  <entry>varchar</entry>
                </row>
                <row>
                  <entry>SQL_REAL</entry>
                  <entry>float4</entry>
                </row>
                <row>
                  <entry>SQL_DOUBLE</entry>
                  <entry>float8</entry>
                </row>
                <row>
                  <entry>SQL_FLOAT</entry>
                  <entry>float8</entry>
                </row>
                <row>
                  <entry>SQL_BINARY</entry>
                  <entry>not supported</entry>
                </row>
                <row>
                  <entry>SQL_VARBINARY</entry>
                  <entry>not supported</entry>
                </row>
                <row>
                  <entry>SQL_LONGVARBINARY</entry>
                  <entry>not supported</entry>
                </row>
                <row>
                  <entry>SQL_DATE</entry>
                  <entry>not supported</entry>
                </row>
                <row>
                  <entry>SQL_TIME</entry>
                  <entry>not supported</entry>
                </row>
                <row>
                  <entry>SQL_TIMESTAMP</entry>
                  <entry>not supported</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="mt_pgpdtmapo">
          <title>Data type Mapping from Postgres Data types to ODBC Data types</title>
          <para>This information can be queried by the SQLColumns catalog call.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Default Rule Book settings</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>Postgres type</entry>
                  <entry>SQL type</entry>
                  <entry>Precision</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>bool</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>1</entry>
                </row>
                <row>
                  <entry>char</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>1</entry>
                </row>
                <row>
                  <entry>name</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>32</entry>
                </row>
                <row>
                  <entry>char16</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>16</entry>
                </row>
                <row>
                  <entry>int2</entry>
                  <entry>SQL_SMALLINT</entry>
                  <entry/>
                </row>
                <row>
                  <entry>int4</entry>
                  <entry>SQL_INTEGER</entry>
                  <entry/>
                </row>
                <row>
                  <entry>regproc</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>16</entry>
                </row>
                <row>
                  <entry>text</entry>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>8000</entry>
                </row>
                <row>
                  <entry>oid</entry>
                  <entry>SQL_INTEGER</entry>
                  <entry>(*)</entry>
                </row>
                <row>
                  <entry>tid</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>19</entry>
                </row>
                <row>
                  <entry>xid</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>12</entry>
                </row>
                <row>
                  <entry>cid</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>3</entry>
                </row>
                <row>
                  <entry>oid8</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>89</entry>
                </row>
                <row>
                  <entry>smgr</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>12</entry>
                </row>
                <row>
                  <entry>char2</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>2</entry>
                </row>
                <row>
                  <entry>char4</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>4</entry>
                </row>
                <row>
                  <entry>char8</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>8</entry>
                </row>
                <row>
                  <entry>filename</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>float4</entry>
                  <entry>SQL_REAL</entry>
                  <entry/>
                </row>
                <row>
                  <entry>float8</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry/>
                </row>
                <row>
                  <entry>abstime</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>60</entry>
                </row>
                <row>
                  <entry>reltime</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>60</entry>
                </row>
                <row>
                  <entry>tinterval</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>60</entry>
                </row>
                <row>
                  <entry>unknown</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>bpchar</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>varchar</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>date</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>10</entry>
                </row>
                <row>
                  <entry>time</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>16</entry>
                </row>
                <row>
                  <entry>other type</entry>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>8000</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>(*) Note: 
          An oid is returned as a SQL_INTEGER, because otherwise it would not be
          useable for SQLSpecialColumns.</para>
          <para>Binary data / large objects are not supported in this release.</para>
        </section>
      </section>
      <section xml:id="mt_mysqlspec">
        <title>MySQL</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Default Rule Book settings</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>
                  <para>Rule Book Section &amp; parameters</para>
                </entry>
                <entry>
                  <para>Default Rule Book Settings</para>
                </entry>
                <entry>
                  <para>Notes</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>[Environment MySQL]</para>
                </entry>
                <entry/>
                <entry/>
              </row>
              <row>
                <entry>
                  <para>;ODBC_CATALOGS=</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
                <entry>
                  <para>Uncomment after loading odbccat defs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>Agent Section</para>
        <para>OpSysLogin= Yes; Users are validated against the operating system.</para>
        <para>The following options can be used in the <emphasis>ConnectOptions</emphasis> 
        field of the rule book (oplrqb.ini) to override client <emphasis>Options</emphasis> 
        settings:</para>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>-H &lt;hostname&gt;</title>
              <para>Connect to server running on &lt;hostname&gt;.  This defaults to localhost 
              if unspecified</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>-P &lt;port&gt;</title>
              <para>Contact server on port &lt;port&gt;, which defaults to (3306) 
              is unspecified.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>-T</title>
              <para>Disable all ODBC transaction support.  The agent will never issue any 
              extra statements for transaction management (commit, rollback, modification 
              of transaction isolation level)</para>
            </formalpara>
          </listitem>
        </itemizedlist>
        <para>This ODBC database agent has been built and verified using MySQL
        release 3.23.48.</para>
        <section xml:id="mt_mysqlodtmapm">
          <title>Data type Mapping from ODBC Data types to MySQL Data types</title>
          <para>This information can be queried by the SQLTypeInfo catalog call.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Default Rule Book settings</title>
            <tgroup align="char" charoff="50" char="." cols="2">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>SQL type</entry>
                  <entry>MySQL type</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>SQL_CHAR</entry>
                  <entry>char</entry>
                </row>
                <row>
                  <entry>SQL_VARCHAR</entry>
                  <entry>varchar</entry>
                </row>
                <row>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>text</entry>
                </row>
                <row>
                  <entry>SQL_DECIMAL</entry>
                  <entry>decimal</entry>
                </row>
                <row>
                  <entry>SQL_NUMERIC</entry>
                  <entry>decimal</entry>
                </row>
                <row>
                  <entry>SQL_BIT</entry>
                  <entry>not supported</entry>
                </row>
                <row>
                  <entry>SQL_TINYINT</entry>
                  <entry>tinyint</entry>
                </row>
                <row>
                  <entry>SQL_SMALLINT</entry>
                  <entry>smallint</entry>
                </row>
                <row>
                  <entry>SQL_INTEGER</entry>
                  <entry>integer</entry>
                </row>
                <row>
                  <entry>SQL_BIGINT</entry>
                  <entry>bigint</entry>
                </row>
                <row>
                  <entry>SQL_REAL</entry>
                  <entry>real</entry>
                </row>
                <row>
                  <entry>SQL_DOUBLE</entry>
                  <entry>double</entry>
                </row>
                <row>
                  <entry>SQL_FLOAT</entry>
                  <entry>double</entry>
                </row>
                <row>
                  <entry>SQL_BINARY</entry>
                  <entry>tinyblob</entry>
                </row>
                <row>
                  <entry>SQL_VARBINARY</entry>
                  <entry>tinyblob</entry>
                </row>
                <row>
                  <entry>SQL_LONGVARBINARY</entry>
                  <entry>longblob</entry>
                </row>
                <row>
                  <entry>SQL_DATE</entry>
                  <entry>date</entry>
                </row>
                <row>
                  <entry>SQL_TIME</entry>
                  <entry>time</entry>
                </row>
                <row>
                  <entry>SQL_TIMESTAMP</entry>
                  <entry>timestamp</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="mt_mysqlmdtmapo">
          <title>Data type Mapping from MySQL Data types to ODBC Data types</title>
          <para>This information can be queried by the SQLColumns catalog call.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Default Rule Book settings</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>MySQL type</entry>
                  <entry>SQL type</entry>
                  <entry>Precision</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>bigint</entry>
                  <entry>SQL_BIGINT</entry>
                  <entry>19</entry>
                </row>
                <row>
                  <entry>blob</entry>
                  <entry>SQL_VARBINARY</entry>
                  <entry>2^16-1</entry>
                </row>
                <row>
                  <entry>char(n)</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>n</entry>
                </row>
                <row>
                  <entry>date</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>32</entry>
                </row>
                <row>
                  <entry>datetime</entry>
                  <entry>SQL_CHAR</entry>
                  <entry>32</entry>
                </row>
                <row>
                  <entry>decimal(p,s)</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>p</entry>
                </row>
                <row>
                  <entry>double</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>15</entry>
                </row>
                <row>
                  <entry>enum</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>float</entry>
                  <entry>SQL_REAL</entry>
                  <entry>7</entry>
                </row>
                <row>
                  <entry>int</entry>
                  <entry>SQL_INTEGER</entry>
                  <entry>10</entry>
                </row>
                <row>
                  <entry>longblob</entry>
                  <entry>SQL_LONGVARBINARY</entry>
                  <entry>2^32-1</entry>
                </row>
                <row>
                  <entry>longtext</entry>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>2^32-1</entry>
                </row>
                <row>
                  <entry>mediumblob</entry>
                  <entry>SQL_VARBINARY</entry>
                  <entry>2^24-1</entry>
                </row>
                <row>
                  <entry>mediumint</entry>
                  <entry>SQL_INTEGER</entry>
                  <entry>8</entry>
                </row>
                <row>
                  <entry>mediumtext</entry>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>2^24-1</entry>
                </row>
                <row>
                  <entry>set</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>smallint</entry>
                  <entry>SQL_SMALLINT</entry>
                  <entry>5</entry>
                </row>
                <row>
                  <entry>text</entry>
                  <entry>SQL_LONGVARCHAR</entry>
                  <entry>2^16-1</entry>
                </row>
                <row>
                  <entry>time</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>32</entry>
                </row>
                <row>
                  <entry>timestamp(n)</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>n</entry>
                </row>
                <row>
                  <entry>tinyblob</entry>
                  <entry>SQL_VARBINARY</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>tinyint</entry>
                  <entry>SQL_TINYINT</entry>
                  <entry>3</entry>
                </row>
                <row>
                  <entry>tinytext</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>255</entry>
                </row>
                <row>
                  <entry>varchar(n)</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>n</entry>
                </row>
                <row>
                  <entry>varchar(n) binary</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>n</entry>
                </row>
                <row>
                  <entry>year</entry>
                  <entry>SQL_VARCHAR</entry>
                  <entry>4</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
      <section xml:id="mt_odbcconf">
        <title>OpenLink ODBC Agent Installation &amp; Configuration</title>
        <para>The OpenLink ODBC Agent is an ODBC Proxy
        Service that facilitates the integration of non OpenLink ODBC Drivers in the
        Sophisticated OpenLink Multi Tier ODBC Architecture, thereby extending the
        benefit of this architecture beyond the scope of OpenLink ODBC drivers. </para>
        <section xml:id="mt_odbc_svtypicuse">
          <title>Typical Utilization:</title>
          <para>A typical and very popular use of the
          OpenLink ODBC Agent is the exposure of tradition desktop database engines
          within your organization to your new Intranet or Internet based
          infrastructures, using a client-server distributed computing model. This
          implies that you can have multiple concurrent clients within your Intranet or
          remote Internet clients connecting to your Microsoft Access, DBASE, Fox PRO,
          Paradox database engines without any compromises in security and with
          astonishing performance.</para>
        </section>
        <section xml:id="mt_odbc_svinstall">
          <title>Installation:</title>
          <para>After downloading the OpenLink Data Access
          Driver Suite for your chosen desktop operating system please perform the
          following steps:-</para>
          <orderedlist>
            <listitem>
              <para>Move into your temporary installation directory</para>
            </listitem>
            <listitem>
              <para>Extract the contents of the OpenLink ZIP archive into the
              directory in step 1</para>
            </listitem>
            <listitem>
              <para>Double click on the program "setup.exe"</para>
            </listitem>
            <listitem>
              <para>Follow the on-screen instructions</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_odbc_svpostinst">
          <title>Post Installation &amp; Pre Configuration Check List</title>
          <orderedlist>
            <listitem>
              <para>Verify that the ODBC Driver Manager
              exists on your system by opening up your desktop's control panel group.
              This will be under Administrative Tools on a Windows XP system.</para>
              <figure xml:id="mt_odbcag1" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg057.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Verify the existence of an ODBC Driver
              for the desktop database engine that you will be connecting with (the example
              below shows OpenLink and Microsoft drivers installed:</para>
              <figure xml:id="mt_odbcag2" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg059.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Verify the existence of an ODBC System
              Data Source Name (DSN) for the database engine that you will be exposing via
              the OpenLink ODBC Agent, this ODBC DSN must be associated with the appropriate
              ODBC Driver for your desktop database</para>
            </listitem>
            <listitem>
              <para>Verify the existence of an OpenLink ODBC Driver installation on your PC</para>
              <figure xml:id="mt_odbcag3" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="odbccl2.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_odbc_svconfodbcagent2dsn">
          <title>Configuring An OpenLink ODBC Agent
          Based ODBC Data Source Name (DSN)</title>
          <orderedlist>
            <listitem>
              <para>Open up the ODBC Administrator within
              your desktop control panel, and then Click on the "Add" button to
              indicate that you want to add a new ODBC DSN to the current list of installed
              ODBC DSNs</para>
              <figure xml:id="mt_odbcag4b" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="odbccl3.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the appropriate ODBC Driver
              that you will be associating this new ODBC DSN with, in this case the
              "OpenLink Generic ODBC Driver"</para>
              <figure xml:id="mt_odbcag5" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="odbccl4.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Choose a Name for your OpenLink
              ODBC DSN and then type it into the "Name" field, the example below
              presumes the DSN is to be called "ODBC Agent"</para>
              <para>Type a comment to describe the DSN.</para>
              <para>Enter the name and port of the machine hosting the OpenLink ODBC agent
              in the "Server" field. The example below presumes that the machine network
              alias for your desktop computer is "mypc" (note: you can also use the
              machines actual IP address or even use the "localhost" account if you
              are connecting to a local as opposed to remote non OpenLink ODBC DSN).
              The port is the default of 5000.</para>
              <figure xml:id="mt_odbcag6" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg067.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Choose an OpenLink "Server
              Type" of "ODBC" from the "Domain" listbox</para>
              <para>Type the name of the non OpenLink ODBC
              DSN that you would like to associate this OpenLink ODBC DSN with into the
              "Database" field. The example below presumes the existence of a non
              OpenLink ODBC DSN named "LocalAccess" that is bound to the Microsoft
              ODBC Driver for MS Access.</para>
              <para>When the "Connect now.." tick box is checked, a test connection
              is made to verify the Data Source connection.</para>
              <para>If there is no check then the Login ID and Password fields are
              ignored, and no test is performed.</para>
              <para>The Login ID is the default database UserID to use when
              logging on to a remote database engine (identified by the Domain
              above).</para>
              <para>Password is for the login of the above UserID.</para>
              <figure xml:id="mt_odbcag7" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg069.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Now define additonal connection parameters:</para>
              <formalpara>
                <title>Read-only connection</title>
                <para>Specify whether the connection is to be "Read-only".
                Make sure the checkbox is unchecked to request a "Read/Write" connection.</para>
              </formalpara>
              <formalpara>
                <title>Defer fetching of long data</title>
                <para>Check this box to defer the fetching of long data.</para>
              </formalpara>
              <formalpara>
                <title>Disable interactive login</title>
                <para>Suppress the ODBC "Username" and "Password" login
                dialog box when interacting with your ODBC DSN from within an ODBC compliant
                application.</para>
              </formalpara>
              <formalpara>
                <title>Row Buffer Size</title>
                <para>This attribute specifies the number of records to be
                transported over the network in a single network hop. Values can range from 1
                to 99.</para>
              </formalpara>
              <figure xml:id="mt_odbcag8" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg071.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The details of the DSN are now shown. To test the DSN,
              press the Test Data Source button.</para>
              <figure xml:id="mt_odbcag9" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg073.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>If a Test is requested then the status of the
              DSN test connection is shown:</para>
              <figure xml:id="mt_odbca10" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg074.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Finish" button to
              complete the creation of your new OpenLink ODBC DSN.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_odbc_svtestconodbc">
          <title>Making A Test Connection To Your
          OpenLink ODBC Agent Based ODBC DSN</title>
          <para>To verify that your installation and
          configuration is ready for use, please follow the steps below in order to make
          a test connection to the OpenLink ODBC DSN that you have just created:-</para>
          <orderedlist>
            <listitem>
              <para>Start the OpenLink Request Broker in debug mode, this can be
              done from a DOS shell by executing the command : oplrqb -dv or from your
              Services Panel (note you must change the startup mode to manual to enable
              the OpenLink Request Broker run in Debug Mode)</para>
            </listitem>
            <listitem>
              <para>Locate the program "VBDemo" or "C++ Demo"
              situated within the "OpenLink Data Access Drivers" group on your
              desktop (Windows start menu item)</para>
            </listitem>
            <listitem>
              <para>Attempt to make a connection to the OpenLink ODBC DSN </para>
            </listitem>
            <listitem>
              <para>If step 3 is successful and you see data exchanged between your
              ODBC Client and your OpenLink ODBC DSN, exit the ODBC application, and then
              shutdown and restart the Broker without the Debug Mode options using the
              command: oplrqb -v. If step 3 is unsuccessful repeat step 3 and then
              capture the Request Broker output and proceed to instigating contact with
              OpenLink Technical support via the OpenLink Support Page</para>
            </listitem>
            <listitem>
              <para>Establish connection between your own ODBC Applications and the
              OpenLink ODBC DSN created in step 3</para>
            </listitem>
            <listitem>
              <para>Shutdown the Request Broker using the command: oplshut -f</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_addoa2oldsys">
          <title>Adding An OpenLink ODBC Agent To An Early OpenLink System</title>
          <orderedlist>
            <listitem>
              <para>Place the ODBC Agent executable in the openlink/bin
              sub-directory</para>
            </listitem>
            <listitem>
              <para>Edit the OpenLink "Session Rules" Book (the file
              oplrqb.ini) using a text editor</para>
            </listitem>
            <listitem>
              <para>Insert a new OpenLink Session Mapping rule to the top of the
              "[Mapping Rules]" section of the Rule Book in the manner
              depicted below: </para>
              <programlisting><![CDATA[odbc:*:*:*:*:*:* = accept odbc_agent]]></programlisting>
            </listitem>
            <listitem>
              <para>Then create a new OpenLink Agent section as follows:</para>
              <programlisting><![CDATA[
              [odbc_agent]
              Program = odbc_sv]]></programlisting>
              <note>
                <title>Note:</title>
                <para>Program key must be set to the exact file name. (For NT this
                would be odbc_sv.exe)</para>
              </note>
            </listitem>
            <listitem>
              <para>Save the file</para>
            </listitem>
            <listitem>
              <para>Shutdown and restart your OpenLink Request Broker.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_odbcjdbcconf">
        <title>OpenLink ODBC-JDBC Agent Bridge Installation &amp; Configuration</title>
        <para>The OpenLink ODBC-JDBC Agent bridge is a JDBC Proxy
        Service enabling ODBC connectivity to a JDBC data repository via an existing JDBC driver for the data repository. Thus essentially it is the reverse of the more traditional JDBC-ODBC driver bridge used for accessing databases via JDBC.</para>
        <section xml:id="mt_jodbc_svtypicuse">
          <title>Typical Utilization:</title>
          <para>A typical and very popular use of the
          OpenLink ODBC-JDBC Agent bridge would be to access a Database written purely in Java for which a JDBC driver is the only data access mechanism available. As databases written purely in Java become more popular the use of the ODBC-JDBC bridge will become more relevant.</para>
        </section>
        <section xml:id="mt_jodbc_svinstall">
          <title>Installation:</title>
          <para>After downloading the OpenLink Data Access
          Driver Suite for your chosen desktop operating system please perform the
          following steps:-</para>
          <orderedlist>
            <listitem>
              <para>Move into your temporary installation directory</para>
            </listitem>
            <listitem>
              <para>Extract the contents of the OpenLink ZIP archive into the
              directory in step 1</para>
            </listitem>
            <listitem>
              <para>Double click on the program "setup.exe"</para>
            </listitem>
            <listitem>
              <para>Follow the on-screen instructions</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_postinst">
          <title>Post Installation &amp; Pre Configuration Check List</title>
          <orderedlist>
            <listitem>
              <para>Verify that the ODBC Driver Manager
              exists on your system by opening up your desktop's control panel group</para>
              <figure xml:id="mt_odbcag1_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg057.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Verify the Java environment for the JDBC driver to be used is
              configured. In particular the CLASSPATH and PATH environment variables must
              be set correctly for a successful connection. If this is not set in the user's
              environment by default, you can configure this via the OpenLink session Rules
              Book (oplrqb.ini) via the relevant [Environment JDBCXX] section where
              XX = 12 or 13, indicating the version of the JDK in use. Example here is
              wrapped across lines for presentation.</para>
              <programlisting><![CDATA[
              [Environment JDBC12]
              CLASSPATH = .;D:\Software\oracle\ora81\jdbc\lib\classes12.zip;D:\Softwa
              re\oracle\ora81\jdbc\lib\nls_charset12.zip;c:\program files\openlink\vi
              rtuoso 2.0\jdk1.2\virtjdbc2.jar;c:\program files\openlink\jdk1.2\opljdb
              c2.jar
              PATH = D:\Software\oracle\ora81\bin;D:\Software\oracle\ora81\jdbc\lib;D
              :\Software\jdk1.2\jre\bin;D:\Software\jdk1.2\jre\bin\classic;C:\WINNT\S
              YSTEM32;C:\WINNT
            ]]></programlisting>
            </listitem>
            <listitem>
              <para>Verify the existence of an OpenLink ODBC Driver installation on your PC</para>
              <figure xml:id="mt_odbcag3_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="odbccl2.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_jodbc_svconfodbcagent2dsn">
          <title>Configuring An OpenLink ODBC-JDBC Agent Bridge
          Based ODBC Data Source Name (DSN)</title>
          <orderedlist>
            <listitem>
              <para>Open up the ODBC Administrator within
              your desktop control panel, and then Click on the "Add" button to
              indicate that you want to add a new ODBC DSN to the current list of installed
              ODBC DSNs</para>
              <figure xml:id="mt_odbcag4b_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="odbccl3.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the appropriate ODBC Driver
              that you will be associating this new ODBC DSN with, in this case the
              "OpenLink Generic 32 Bit Driver v4.0"</para>
              <figure xml:id="mt_odbcag5_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="odbccl4.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Choose a Name for your OpenLink
              ODBC DSN and then type it into the "Name" field, the example below
              presumes the DSN is to be called "JDBC Agent"</para>
              <para>Type a comment to describe the DSN.</para>
              <para>Enter the name and port of the machine hosting the OpenLink ODBC agent
              in the "Server" field. The example below presumes that the machine network
              alias for your desktop computer is "mypc" (note: you can also use the
              machines actual IP address or even use the "localhost" account if you
              are connecting to a local as opposed to remote JDBC driver).
              The port is the default of 5000.</para>
              <figure xml:id="mt_odbcjdbc1" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg167.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Choose an OpenLink "Server
              Type" of "JDBCXX" from the "Domain" listbox
              where XX can be 12 or 13 to represent a JDK 1.2 or 1.3 installation is in use.</para>
              <para>Type the name of the JDBC driver you would like to use for your
              connection into the "Database" field. The example below assumes
              you are connecting to Oracle 8i using the JDBC driver provided by Oracle
              named "oracle.jdbc.driver.OracleDriver".</para>
              <para>Type the JDBC connect string for the Database you wish to connect
              to in the "Options" field. The example below assumes you are
              connecting to Oracle 8i using the JDBC connect string of
              "jdbc:oracle:oci8:@ORCL".</para>
              <para>When the "Connect now.." tick box is checked, a test connection
              is made to verify the Data Source connection.</para>
              <para>If there is no check then the Login ID and Password fields are
              ignored, and no test is performed.</para>
              <para>The Login ID is the default database UserID to use when
              logging on to a remote database engine (identified by the Domain
              above).</para>
              <para>Password is for the login of the above UserID.</para>
              <figure xml:id="mt_odbcag7_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg168.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>If a test is perfomed, then errors are reported like
              in this example:</para>
              <figure xml:id="mt_odbcag8_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg169.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Now define additonal connection parameters:</para>
              <formalpara>
                <title>Read-only connection</title>
                <para>Specify whether the connection is to be "Read-only".
                Make sure the checkbox is unchecked to request a "Read/Write" connection.</para>
              </formalpara>
              <formalpara>
                <title>Defer fetching of long data</title>
                <para>Check this box to defer the fetching of long data.</para>
              </formalpara>
              <formalpara>
                <title>Disable interactive login</title>
                <para>Suppress the ODBC "Username" and "Password" login
                dialog box when interacting with your ODBC DSN from within an ODBC compliant
                application.</para>
              </formalpara>
              <formalpara>
                <title>Row Buffer Size</title>
                <para>This attribute specifies the number of records to be
                transported over the network in a single network hop. Values can range from 1
                to 99.</para>
              </formalpara>
              <figure xml:id="mt_odbcag8_02" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg170.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The details of the DSN are now shown. To test the DSN,
              press the Test Data Source button.</para>
              <figure xml:id="mt_odbcag9_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg171.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>If a Test is requested then the status of the
              DSN test connection is shown. Here is an example error message:</para>
              <figure xml:id="mt_odbca10_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg172.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "Finish" button to
              complete the creation of your new OpenLink ODBC DSN.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_jodbc_svtestconodbc">
          <title>Making A Test Connection To Your
          OpenLink ODBC-JDBC agent ODBC DSN</title>
          <para>To verify that your installation and
          configuration is ready for use, please follow the steps below in order to make
          a test connection to the OpenLink ODBC DSN that you have just created:-</para>
          <orderedlist>
            <listitem>
              <para>Start the OpenLink Request Broker in debug mode, this can be
              done from a DOS shell by executing the command : oplrqb -dv or from your
              Services Panel (note you must change the startup mode to manual to enable
              the OpenLink Request Broker run in Debug Mode)</para>
            </listitem>
            <listitem>
              <para>Locate the program "VBDemo" or "C++ Demo"
              situated within the "OpenLink Data Access Drivers" group on your
              desktop (Windows start menu item)</para>
            </listitem>
            <listitem>
              <para>Attempt to make a connection to the OpenLink ODBC DSN </para>
            </listitem>
            <listitem>
              <para>If step 3 is successful and you see data exchanged between your
              ODBC Client and your OpenLink ODBC DSN, exit the ODBC application, and then
              shutdown and restart the Broker without the Debug Mode options using the
              command: oplrqb -v. If step 3 is unsuccessful repeat step 3 and then
              capture the Request Broker output and proceed to instigating contact with
              OpenLink Technical support via the OpenLink Support Page</para>
            </listitem>
            <listitem>
              <para>Establish connection between your own ODBC Applications and the
              OpenLink ODBC DSN created in step 3</para>
            </listitem>
            <listitem>
              <para>Shutdown the Request Broker using the command: oplshut -f</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_jodbc_svaddoa2oldsys">
          <title>Adding An OpenLink ODBC-JDBC Agent To An Early OpenLink System</title>
          <orderedlist>
            <listitem>
              <para>Place the ODBC-JDBC Agent executable in the openlink/bin
              sub-directory</para>
            </listitem>
            <listitem>
              <para>Edit the OpenLink "Session Rules" Book (the file
              oplrqb.ini) using a text editor</para>
            </listitem>
            <listitem>
              <para>Insert a new OpenLink Domain alias at the top of the
              "[Domain Alias]" section of the Rule Book in the manner
              depicted below: </para>
              <programlisting><![CDATA[JDBC12 = jdbc12]]></programlisting>
            </listitem>
            <listitem>
              <para>Insert a new OpenLink Session Mapping rule to the top of the
              "[Mapping Rules]" section of the Rule Book in the manner
              depicted below: </para>
              <programlisting><![CDATA[jdbc12:*:*:*:*:*:* = accept generic_jdbc12]]></programlisting>
            </listitem>
            <listitem>
              <para>Then create a new OpenLink Agent section as follows:</para>
              <programlisting><![CDATA[
              [generic_jdbc12]
              Program = jdbc12_mv.exe
              Environment = JDBC12
              ReUse       = always
            ]]></programlisting>
              <note>
                <title>Note:</title>
                <para>Program key must be set to the exact file name. (For Unix this
                would be jdbc12_mv)</para>
              </note>
            </listitem>
            <listitem>
              <para>Then create a new OpenLink Environment section as follows:
              (lines wrapped for presentation here)</para>
              <programlisting><![CDATA[
              [Environment JDBC12]
              CLASSPATH = .;D:\Software\oracle\ora81\jdbc\lib\classes12.zip;D:\Softwa
              re\oracle\ora81\jdbc\lib\nls_charset12.zip;c:\program files\openlink\vi
              rtuoso 2.0\jdk1.2\virtjdbc2.jar;c:\program files\openlink\jdk1.2\opljdb
              c2.jar
              PATH = D:\Software\oracle\ora81\bin;D:\Software\oracle\ora81\jdbc\lib;D
              :\Software\jdk1.2\jre\bin;D:\Software\jdk1.2\jre\bin\classic;C:\WINNT\S
              YSTEM32;C:\WINNT
            ]]></programlisting>
            </listitem>
            <listitem>
              <para>Save the file</para>
            </listitem>
            <listitem>
              <para>Shutdown and restart your OpenLink Request Broker.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_odbcjdbcini">
          <title>ODBC-JDBC agent</title>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Default Rule Book settings</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>
                    <para>Rule Book Section &amp; parameters</para>
                  </entry>
                  <entry>
                    <para>Default Rule Book Settings</para>
                  </entry>
                  <entry>
                    <para>Notes</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>[Environment Jdbc12*]</para>
                    <para>[Environment Jdbc13*]</para>
                  </entry>
                  <entry/>
                  <entry>Parameters are common to JDBC 1.2 and 1.3</entry>
                </row>
                <row>
                  <entry>
                    <para>JET_SQLSTATISTICSOFF=</para>
                  </entry>
                  <entry>
                    <para>FALSE</para>
                  </entry>
                  <entry>
                    <para>If it is set to 'TRUE', the function SQLStatistics returns an empty ResultSet.</para>
                    <para>It helps to resolve the problem with the SQLStatistics for some jdbc drivers.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>JET_DROPCATALOGFROMDBMETACALLS=</para>
                  </entry>
                  <entry>
                    <para>FALSE</para>
                  </entry>
                  <entry>
                    <para>If it is sets to 'TRUE', the NULL will be assigned to the field 'Catalog' in
                    the ResultSet of : SQLTables, SQLColumns &amp; SQLStatistics calls.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>JET_DROPSCHEMAFROMDBMETACALLS=</para>
                  </entry>
                  <entry>
                    <para>FALSE</para>
                  </entry>
                  <entry>
                    <para>If it is sets to 'TRUE', the NULL will be assigned to the field 'Schema' in
                    the ResultSet of : SQLTables, SQLColumns &amp; SQLStatistics calls.</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>JET_NOSUPPORTOFQUOTEDIDENTIFIER=</para>
                  </entry>
                  <entry>
                    <para>FALSE</para>
                  </entry>
                  <entry>
                    <para>If it is sets to 'TRUE', the call SQLGetInfo for 'SQL_IDENTIFIER_QUOTE_CHAR'
                    will return the space (" "). It can be used if DBMS doesn't support
                    quoted SQL like select * from "account"</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>PATCHNULLSIZEOFSQLCHAR=</para>
                  </entry>
                  <entry/>
                  <entry>
                    <para>If DBMS is returning a field of type SQLCHAR or SQLVARCHAR with zero size,
                    the size will be replaced with the value of PATCHNULLSIZEOFSQLCHAR</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>Typical settings for PointBase, HyperSonic and InstantDb are as follows:</para>
          <programlisting><![CDATA[
          [Environment Jdbc12PointBase]
          ;CLASSPATH =.;e:\java\pointbase\embedded\classes\pbembedded34EV.jar
          ;PATH =
          JET_DROPCATALOGFROMDBMETACALLS = YES
          JET_DROPSCHEMAFROMDBMETACALLS =  YES
          JET_NOSUPPORTOFQUOTEDIDENTIFIER = YES
          [Environment Jdbc12HyperSonic]
          ;CLASSPATH = .;e:\java\hypersonic\demo\hsql.jar
          ;PATH = 
          PATCHNULLSIZEOFSQLCHAR = 4096
          JET_SQLSTATISTICSOFF = YES
          [Environment Jdbc12InstantDB]
          ;CLASSPATH = .;e:\InstantDB\Classes\idb.jar
          ;PATH = 
          JET_NOSUPPORTOFQUOTEDIDENTIFIER = YES
          JET_DROPSCHEMAFROMDBMETACALLS =  YES
        ]]></programlisting>
        </section>
      </section>
      <section xml:id="mt_oplprxyag">
        <title>OpenLink Proxy Agent</title>
        <para>An OpenLink Proxy agent is a specialized
        Agent that acts on behalf of another remotely or locally situated OpenLink
        Database Agent. This Agent format is typically used in 3-Tier Internet based
        environments in which you place an Agent on an external machine (typically
        running your Web Server) and then have it masquerade for an actual database
        agent behind your organization's firewall.</para>
        <para>A Proxy Agent can also be used in
        conjunction with the Session Rules Book for
        centralized configuration and control of all of your OpenLink Clients, by
        controlling the configuration of all of the OpenLink Session Elements on one or more
        server machines.</para>
        <para>Like other Proxy services, an OpenLink
        Client connects to the Proxy Agent instead of to the actual service; the Proxy
        Agent then connects to the actual service that presumably lies on a machine
        that shouldn't normally be accessible from outside the network. With this
        setup, it is possible to grant selective access to databases that are otherwise
        not accessible from the Internet; this greatly enhances the functionality of
        data access standards like JDBC, ODBC, OLE-DB.</para>

        <!-- ##################################### -->
        <section xml:id="mt_proxyinstall">
          <title>Installation</title>
          <para>The OpenLink Proxy Agent is automatically
          installed with your Request Broker on any platform.</para>
          <para>You have to install a Request Broker
          installation archive on the machine that is to act as a host for the OpenLink
          Proxy agent (typically the middle tier machine in a three 3-tier architecture).
          You then install another Request Broker archive and relevant Database Agents
          archives on the machine(s) hosting the backend database engine(s) that you are
          connecting to via an OpenLink Client.</para>
        </section>

        <!-- ##################################### -->
        <section xml:id="mt_proxyconfig">
          <title>Configuration</title>
          <para>You configure the Proxy Agent like all
          other OpenLink Agents using the Admin Assistant. The process is broken into two
          parts, the first part involves creating a Proxy Agent Template, the second part
          involves a Session Rules that conditionally associates OpenLink Clients with
          the Proxy Agent Template that you have created.</para>
          <para>The configuration guide that follows
          presumes that we are creating a Proxy on a middle-tier server for the OpenLink
          Virtuoso Database engine such that any OpenLink Client connection (ODBC, JDBC,
          UDBC, or OLE-DB) to this Server ends up being connected to Virtuoso. The steps
          that follow guide you through this process.</para>
        </section>
        <section xml:id="mt_prxyinittmpl">
          <title>Creating Proxy Agent Initialization Template</title>
          <orderedlist>
            <listitem>
              <para>Start the Request
              Broker your middle-tier server machine</para>
            </listitem>
            <listitem>
              <para>Start a Web Browser session</para>
            </listitem>
            <listitem>
              <para>Enter the following URL into your
              browser:</para>
              <para>If you started the Request Broker on your local machine enter:</para>
              <programlisting><![CDATA[http://localhost:8000/ ]]></programlisting>
              <para>(assuming you accepted port 8000 as the Admin Assistant port number at
              installation time).</para>
              <para>If the Request Broker in on another machine enter:</para>
              <programlisting><![CDATA[http://<hostname or IP address>:8000/]]></programlisting>
              <para>(assuming you accepted port 8000 as the Admin Assistant port number at
              installation time).</para>
            </listitem>
            <listitem>
              <para>Navigate the Admin Assistant menu
              tree as follows: OpenLink Database Agent(s) Settings--&gt;Database
              Agent(s) Settings (Form).</para>
              <figure xml:id="mt_proxy01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg076.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Scroll to the bottom of the Agent
              Templates listing page and then click on the "Add" button, this opens
              up a default agent initialization template page, enter a Name and
              Description for your new Agent Initialization Template, then select the
              "create blank entry" radio button and then click the
              "Add" hyperlink. Reinitialize the Broker when prompted.</para>
              <figure xml:id="mt_proxy02" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg078.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Navigate the Admin Assistant menu
              tree as follows: OpenLink Database Agent(s) Settings--&gt;Database
              Agent(s) Settings (Form). Then locate the new Agent Template created in
              the previous step. Now click on the "Edit" hyperlink.
            </para>
              <para>
              Enter values into the following fields representing key OpenLink Session
              Elements:
            </para>
              <para>
              "User Name" - Leave empty (this is handled on the server using
              the Virtuoso Agent initialization Template)
            </para>
              <para>
              "Password" - ditto
            </para>
              <para>
              "Database Name" - ditto
            </para>
              <para>
              "Read Only" - ditto
            </para>
              <para>
              "Connect Options" - ditto
            </para>
              <para>
              "Server Options" - ditto
            </para>
              <para>
              "Server Type" - Virtuoso (you enter an valid OpenLink Domain
              values here, e.g Oracle 8, Informix 7, Progress 83B etc.)
            </para>
              <para>
              "Host Name" - enter IP address or network alias of database
              server machine. this examples presumes the IP address of the database
              server 123.123.123.100 
            </para>
              <para>
              "Executable Name" - enter "proxy_sv" (Linux or UNIX)
              or "proxy_sv.exe" (for Windows)
            </para>
              <para>
              In the "Client-Server Mapping Process &amp; Control" section of
              this page select the "Conditionally" radio button and then hatch
              the "When originating from same machine" checkbox. This ensures
              that each new OpenLink client machine has a distinct proxy agent process
              servicing all the ODBC, JDBC, UDBC, OLE-DB clients on that machine thereby
              restricting the number of new proxy agents processes initialized.
            </para>
              <para>
              Click on the "Update" button and the reinitialize the Request
              Broker.
            </para>
              <figure xml:id="mt_proxy03" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg080.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_sessrulmpxy">
          <title>Creating Session Rule That Maps Connections to Proxy Agent's Template</title>
          <orderedlist>
            <listitem>
              <para>Follow the "Server Components
              Administration"-&gt;"Session Rules
              Administration"-&gt;"Session Rules Editor" menu path which
              brings you to a screen identical to the one depicted below, this presents you
              with a list of existing session rules (all OpenLink installations come with a
              set of pre-configured session rules). Click on the "Add new rule"
              hyperlink to open up the session rule creation page.</para>
              <figure xml:id="mt_proxy03_01" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg082.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Create a new session rule by doing the following:</para>
              <para>
              Set the Rule Number field to 1 (this means that this rule gets evaluated before
              others)</para>
              <para>
              Leave the default value of "*" in the Server Type field this ensure that
              this rule applies to any Domain Type.</para>
              <para>
              Pick the "proxy_agent" initialization template from the agent
              initialization template list box used by the "Then" processing
              instruction to determine how calls associated with this rule are to be handled.</para>
              <para>
              Click on the "Add" button to save your new rule to the rule book.
              Then reinitialize the Request Broker.</para>
              <figure xml:id="mt_proxy05" floatstyle="normal">
                <title>Admin Assistant</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="scimg084.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Create an OpenLink ODBC, JDBC, UDBC or OLE-DB client session with the
              Domain Type attribute set to Proxy and the Host attribute set to your
              middle-tier server.</para>
              <para>If your database server is behind a
              firewall you need to perform the following additional additional steps:</para>
            </listitem>
          </orderedlist>
          <orderedlist>
            <listitem>
              <para>Enable UDP support, and then make port
              60001 available, this is the port number used by the OpenLink Request Broker.
              Since we are now connecting to a database server running the Request Broker
              that resides behind your firewall we need to open up this port.</para>
            </listitem>
            <listitem>
              <para>Start the Request Broker on the
              Database Server</para>
            </listitem>
            <listitem>
              <para>Start a Web Browser session and then
              initialize the Admin Assistant running on the Database Server machine by
              entering the following URL:</para>
              <programlisting><![CDATA[http://<hostname or IP address of Database Server machine>:8000/]]></programlisting>
              <para>(presuming you took the default number of 8000 for the Web Assistant at install
              time on the Database Server).</para>
            </listitem>
            <listitem>
              <para>Navigate the Admin Assistant menu tree
              to: Server Components Administration--&gt; Request Broker
              Administration--&gt;Edit Request Brokers Parameters (Form).</para>
              <para>
              Locate item number 4 on the form which reads "Only use ports in the
              range...", enter a range of TCP port numbers that you have enabled within
              your firewall software. The Broker will then automatically starts the Virtuoso
              agent (or other database agents depending on your settings) on the first
              available port in the range.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
    </section>
    <section xml:id="mt_unicode">
      <info>
        <title>Database Configuration for Unicode</title>
        <keywordset>
          <keyword>Unicode</keyword>
          <keyword>Unicode Support</keyword>
        </keywordset>
      </info>
      <para>Below are instructions on the configuration of the Unicode enabled 
drivers and databases for testing. Typically the first task to be performed 
is the creation of a Unicode enabled Database, which for most databases
means configuring them to store data  using the UTF8 encoding.
</para>
      <section xml:id="mt_uniora">
        <title>Oracle 8 &amp; 9</title>
        <para>
The Oracle 9i, 8i and 8.0 databases store Unicode data in the UTF8 encoding 
scheme, which is an ASCII compatible multibyte encoding for Unicode.
</para>
        <section xml:id="mt_unioradb">
          <title>Database Confguration</title>
          <para>
Using the Oracle Database Configuration Assistant wizard follow the options for 
creating a new database, selecting the custom option when presented and you will 
during the configuration of this Custom database be allowed to 
Change the Character Set, at which point this can be changed to UTF8.
</para>
          <para>
To check the character set in use by your database, execute the following query in SQL*Plus:
</para>
          <screen><![CDATA[
SQL> SELECT parameter, value FROM nls_database_parameters
   WHERE parameter = 'NLS_CHARACTERSET';
PARAMETER             VALUE
------------------    ---------------------
NLS_CHARACTERSET      UTF8
SQL>.
]]></screen>
          <para>
Unicode support is dependent on the Unicode features available through the 
Oracle Call Interface (OCI). OCI 8.1.5 supports inputting Unicode data 
into a database and retrieving Unicode data from a database.
</para>
          <para>The Following Oracle Data types can be using for storing Unicode data:
</para>
          <screen><![CDATA[
CHAR
VARCHAR
VARCHAR2
]]></screen>
        </section>
        <section xml:id="mt_unioradr">
          <title>Driver Configuration</title>
          <para>The Oracle configuration parameter for control character sets is 
the NLS_LANG environment variable, which should be set to the correct 
character set for your client. Oracle 8.1.7 claims to be capable of dynamically 
determining the character set in use on the client and does not require the 
NLS_LANG to be set, but it is not a bad idea to set it anyway. 
</para>
          <para>
Additional information on Oracle Unicode support can be found from 
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://otn.oracle.com/docs/products/oracle8i/doc_library/817_doc/server.817/a76966/ch3.htm#41680">
otn.oracle.com</link>
</para>
        </section>
      </section>
      <section xml:id="mt_uniinf">
        <title>Informix 9.x</title>
        <section xml:id="mt_uniinfdb">
          <title>Database Configuration</title>
          <para>
When a database is created, the DB_LOCALE in effect at the time is stored in the 
system catalog and used throughout the lifetime of the database. Using 
DBACCESS, create a new database with DB_LOCALE set beforehand to 
EN_US.UTF8. Specifying UTF8 as the codeset allows the creation of 
schema objects with names which can contain multibyte characters.
</para>
          <para>
The database locale being used by a database can be viewed in DBACCESS 
using the menu commands: Database &gt; Info &gt; NLS.
</para>
          <para>
The documentation for Informix GLS states that DB_LOCALE is also used to 
correctly interpret the locale sensitive datatypes NCHAR and NVARCHAR. The code 
set specified in DB_LOCALE specifies which characters are valid in any character 
column as well as the names of database objects. 
</para>
        </section>
        <section xml:id="mt_uniinfcl">
          <title>Setting the Client Locale</title>
          <para>
The codeset to be used by an Informix client application is specified as part of the 
client locale.  The client locale takes the form:
</para>
          <screen><![CDATA[
language_territory.codeset[@modifier]
]]></screen>
          <para>
An Informix 9 Lite driver or agent should use UTF-8 as the codeset. The language 
and territory should not matter; so it should be possible, for example,  to use 
French (fr_fr) or American English (en_us). For Informix clients on Windows, 
the client locale is typically set through SetNet32. Rather than rely on the 
SetNet32 settings, our agent or Lite driver instead sets the client locale at 
runtime. For an Informix Lite driver on Windows, you must manually add an 
entry to the registry to set the client locale under the entry for the appropriate 
DSN in the ODBC.INI hive, add the value:
</para>
          <screen><![CDATA[
ClientLocale:REG_SZ:<client locale>
e.g.
ClientLocale:REG_SZ:EN_US.57372
]]></screen>
          <para>
This example uses a codeset number (57372) rather than a codeset name 
(UTF8) to specify UTF-8 as the codeset. Either form can be used. The registry file 
included in an Informix client installation lists the supported code sets and the 
correspondence between codeset names and numbers.
</para>
        </section>
        <section xml:id="mt_uniinfdr">
          <title>Driver Configuration</title>
          <para>
For an Informix agent (on Windows or Unix), specify the CLIENT_LOCALE 
environment variable setting in the [Environment INFORMIX] section of 
the rulebook. For an Informix Unix Lite driver, set the 
CLIENT_LOCALE environment variable appropriately.
</para>
        </section>
      </section>
      <section xml:id="mt_unisyb">
        <title>Sybase 12.5 +</title>
        <section xml:id="mt_unisybdb">
          <title>Database Configuration</title>
          <para>
The pre-requisites for Unicode with Sybase are:
</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>Sybase Active Server (ASE) Version 12.5 or later. (Unicode support is NOT enabled for Version 12.0);
</para>
            </listitem>
            <listitem>
              <para>Default character set for the Sybase Server needs to be "UTF-8".
</para>
            </listitem>
          </itemizedlist>
          <para>To set this:</para>
          <orderedlist>
            <listitem>
              <para>Make sure the Sybase SQL Server is not running. (Cancel it from the "Services" screen).
 </para>
            </listitem>
            <listitem>
              <para> 
 Run "Server Configuration" from the "Sybase" entry in the Task Menu bar, or run SYCONFIG.EXE directly;
 </para>
            </listitem>
            <listitem>
              <para>
 Either Create a new Active Server or Configure an existing Active Server. (Selection is via Pushbuttons on the dialog box);
 </para>
            </listitem>
            <listitem>
              <para>For either method, select the "Language" pushbutton;</para>
            </listitem>
            <listitem>
              <para>Select the "Character Set" pushbutton;</para>
            </listitem>
            <listitem>
              <para>Select the "Set Default" pushbutton;</para>
            </listitem>
            <listitem>
              <para>Select "Unicode 3.0.1 UTF-8" from the list box.</para>
            </listitem>
          </orderedlist>
          <para>
If this entry is not available, you will have to add it. From the Character Set 
selection dialog box, select the "Add / Delete" pushbutton. Select the character 
set from the list box of those available. Select the "Add" pushbutton (or 
the "Add All" pushbutton to make all character sets available). Select OK. 
One the default character set has been selected, select "OK" and "Exit".  
Start (or restart) the Sybase SQL-Server.
</para>
        </section>
        <section xml:id="mt_unisybdr">
          <title>Driver Configuration</title>
          <para>
There is no need to set anything at the Client end. The character set in use 
is actually set using Sybase locale functions at connection time. However, it 
may be useful to ensure that "utf8" is one of the enabled character sets for 
the relevant platform, in the file [SYBASE]/locales/locales.dat.
</para>
        </section>
      </section>
      <section xml:id="mt_unipro">
        <title>Progress 9.1 (SQL-92)</title>
        <section xml:id="mt_uniprodb">
          <title>Database Configuration</title>
          <para>
The Progress database can be run in the UTF-8 Unicode codepage. The sql-92 
client can be also be run in unicode. The SQL-92 server uses the codepage of 
the connected database as its internal codepage. Conversion between the 
database codepage and the SQL-92 client codepage is done by the server.  
There are no specific functions provided for converting between codepages within 
an ESQL-92 program.
</para>
          <para>
The easiest method to create to Progress Unicode enabled database is to use 
the  proutil program to convert an existing database to utf8 format using the 
following command:
</para>
          <screen><![CDATA[
proutil <db-name> -C convchar convert utf-8
]]></screen>
          <para>
Multibyte characters can be used in character and varchar fields.  Character 
string literals and the arguments to string functions can also be multibyte 
characters. There are some provisos for specific functions noted in the 
documentation. In addition, when the SQL-92 language element syntax requires 
single quotes, double quotes, parentheses, or braces, the requirement is for 
the single-byte ASCII encoding of these characters, and other encodings are not 
equivalent. The string operators in Progress SQL-92 consider the unit of length 
to be the character count, not a byte count or a column count.
</para>
          <para>
When a column of type CHAR or VARCHAR is created the maximum length specified 
is a number of characters so the actual number of bytes storage required 
depends on the database codepage. The length of character data returned in the 
sqlda is in bytes not characters.
</para>
        </section>
        <section xml:id="mt_uniprodr">
          <title>Driver Configuration</title>
          <para>
For ESQL-92 clients the internal codepage is determined by the value of the 
client's SQL_CLIENT_CHARSET environment variable, if set. Otherwise, the 
internal codepage is that of the client's locale. There is a similar environment 
variable that controls the codepage of messages sent by the database server.
</para>
        </section>
      </section>
      <section xml:id="mt_unidb2">
        <title>DB/2 v7.x</title>
        <section xml:id="mt_unidb2db">
          <title>Database Configuration</title>
          <para>
Using the DB/2  Control Center create a new database instance using the 
wizard provide. During the create of this database you will be prompted to specify 
the locale for the new database, which should be set to a code set type of 
UTF-8. Unicode data can be stored in the following DB/2 datatypes:
</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>GRAPHIC</para>
            </listitem>
            <listitem>
              <para>VARGRAPHIC</para>
            </listitem>
            <listitem>
              <para>LONGVARGRAPHIC</para>
            </listitem>
            <listitem>
              <para>DBCLOB</para>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="mt_unidb2dr">
          <title>Driver Configuration</title>
          <para>
There are no specific environment variables that need to be set for the DB/2 
Driver to handle Unicode data. One special consideration when inserting Unicode 
data into the daatbase though is that you cannot insert literal Unicode values 
into the database. Instead these values have to be inserted as bound parameters as follows:
</para>
          <screen><![CDATA[
CREATE TABLE UTEST (F1 GRAPHIC(20), F2 VARGRAPHIC(20), F3 LONG VARGRAPHIC,
        F4 DBCLOB(100));
         Successfully connected to DSN 'UO_db2'.
SQLBindParameter:
  In: StatementHandle = 0x00751860, ParameterNumber = 1,
      InputOutputtype = SQL_PARAM_INPUT=1, ValueType = SQL_C_WCHAR=-8,
      ParameterType = SQL_WCHAR=-8, ColumnSize = 0, DecimalDigits = 0,
      ParameterValuePtr = "?????", BufferLength = 0,
      StrLen_or_IndPtr = SQL_NTS=-3, SQL_LEN_DATA_AT_EXEC = FALSE,
      Buffer Size = 600
   Return:       SQL_SUCCESS=0
SQLExecDirect:
   In: Statementhandle = 0x00751860, StatementText = "insert into utest(f1) 
values(?)", Statementlength = 31
   Return:       SQL_SUCCESS=0
SQLExecDirect:
   In: Statementhandle = 0x00751860, StatementText = "select * from utest", 
Statementlength = 19
   Return:       SQL_SUCCESS=0
Get Data All:
"F1", "F2", "F3", "F4"
"АБВГД               ", <Null>, <Null>, NO DATA
1 row fetched from 4 columns.
]]></screen>
          <para>
This is because the Graphic string data types are compatible only with other 
graphic string data types, and never with numeric, character string, or datetime 
data types. 
</para>
          <para>
Note that additional Unicode support has been added to the DB/2 agent for
VARCHAR, LONGVARCHAR, CLOB &amp; BLOB types, although a specific Patch
(FIXPAK7)  is required from IBM to obtain this support in DB/2 v 7.2 databases
and FIXPAK 3 &amp; 7 are required for DB/2 v7.1 databases.
</para>
          <para>
The application code page must be set to UTF-8, which can be done by issuing the command:
</para>
          <screen><![CDATA[
      db2set DB2CODEPAGE=1208
]]></screen>
          <para>
on the client (DB2 Lite) or server (DB2 agent) as appropriate.
</para>
        </section>
      </section>
      <section xml:id="mt_unisql">
        <title>MS SQLServer 2000</title>
        <para>
There are no Unicode-specific settings for SQLServer. When creating a
Database, the collation type for the database can be specified but there is no
UTF8 or Unicode specific setting, and a wide (Unicode) language type like
Chinese or similar has to be selected, after which wide (Unicode) data can be
inserted into the SQLServer wide character types  NCHAR &amp; NVARCHAR.
</para>
      </section>
      <section xml:id="mt_unigeninfo">
        <title>Operational Notes</title>
        <para>
If you are debugging a unicode connection, you can expect to see this
in the request broker log - note the serveropts field:
</para>
        <programlisting><![CDATA[
...
14:08:11 using mapping: db2:*:*:*:*:*:*
14:08:11 using [generic_db2] ServerProgram=db2_mv
14:08:11 connect params: domain=DB2 db=sample serveropts=W readonly=0
...
]]></programlisting>
        <para>The Unicode parameters that are supplied to the server options cannot 
be displayed properly in the broker log so the above will be seen; this is
normal behaviour.</para>
      </section>
    </section>
    <section xml:id="mt_getagntinfo">
      <info>
        <title>Obtaining Agent Information</title>
        <keywordset>
          <keyword>Agent Information</keyword>
        </keywordset>
      </info>
      <para>OpenLink Database agents have a specific naming convention, reflecting 
      the identification of a particular database engine, and in some case specific 
      versions of a given database engine.</para>
      <para>The OpenLink executable binary file naming convention consists of three 
      distinctive logical parts:</para>
      <para>&lt;db_engine&gt;[&lt;db_ver&gt;]_&lt;[sv|mv]&gt;[.exe]</para>
      <simplelist type="vert">
        <member>Database Engine - first three or four characters </member>
        <member>Database Version - next two or three characters (depending on
        database engine version number-functionality issues)</member>
        <member>OpenLink Service Provider Identifier - the characters 
        "_sv" for single threaded or "_mv" for multi-threaded.</member>
      </simplelist>
      <para>On a Windows system, the file extension is .exe which is shown as 
      optional in this description but omitted in the table below.</para>
      <para>The table below shows you how the current pool of OpenLink agents are 
      identified based on the convention described above:</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>OpenLink Service providers</title>
        <tgroup align="char" charoff="50" char="." cols="2">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Executable Binary File</entry>
              <entry>Database Engine &amp; Version</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>virt_mv</entry>
              <entry>OpenLink Virtuoso</entry>
            </row>
            <row>
              <entry>inf7_mv</entry>
              <entry>Informix 7.x (Windows)</entry>
            </row>
            <row>
              <entry>inf71_sv</entry>
              <entry>Informix 7.1 (not Windows)</entry>
            </row>
            <row>
              <entry>inf72_sv</entry>
              <entry>Informix 7.2 (not Windows)</entry>
            </row>
            <row>
              <entry>inf73_mv</entry>
              <entry>Informix 7.3 (not Windows)</entry>
            </row>
            <row>
              <entry>mys3_mv</entry>
              <entry>MySQL 3.x</entry>
            </row>
            <row>
              <entry>oig1_sv</entry>
              <entry>OpenIngres 1.x</entry>
            </row>
            <row>
              <entry>oig2_sv</entry>
              <entry>Ingres II</entry>
            </row>
            <row>
              <entry>pgr7_mv</entry>
              <entry>PostgreSQL 7</entry>
            </row>
            <row>
              <entry>pro73c_sv</entry>
              <entry>Progress 7.3C</entry>
            </row>
            <row>
              <entry>pro73e_sv</entry>
              <entry>Progress 7.3E</entry>
            </row>
            <row>
              <entry>pro82a_sv</entry>
              <entry>Progress 8.2A</entry>
            </row>
            <row>
              <entry>pro82c_sv</entry>
              <entry>Progress 8.2C</entry>
            </row>
            <row>
              <entry>pro83a_sv</entry>
              <entry>Progress 8.3A</entry>
            </row>
            <row>
              <entry>pro83b_sv</entry>
              <entry>Progress 8.3B</entry>
            </row>
            <row>
              <entry>pro90b_sv</entry>
              <entry>Progress 9.0B</entry>
            </row>
            <row>
              <entry>pro91a_sv</entry>
              <entry>Progress 9.1A</entry>
            </row>
            <row>
              <entry>pro91b_sv</entry>
              <entry>Progress 9.1B</entry>
            </row>
            <row>
              <entry>prs91_sv</entry>
              <entry>Progress 91 SQL-92</entry>
            </row>
            <row>
              <entry>pro81as_sv</entry>
              <entry>Progress 8.1A small (Windows)</entry>
            </row>
            <row>
              <entry>pro82as_sv</entry>
              <entry>Progress 8.2A small (Windows)</entry>
            </row>
            <row>
              <entry>pro82cs_sv</entry>
              <entry>Progress 8.2C small (Windows)</entry>
            </row>
            <row>
              <entry>pro83as_sv</entry>
              <entry>Progress 8.3A small (Windows)</entry>
            </row>
            <row>
              <entry>pro83bs_sv</entry>
              <entry>Progress 8.3B small (Windows)</entry>
            </row>
            <row>
              <entry>pro90bs_sv</entry>
              <entry>Progress 9.0B small (Windows)</entry>
            </row>
            <row>
              <entry>pro91as_sv</entry>
              <entry>Progress 9.1A small (Windows)</entry>
            </row>
            <row>
              <entry>pro91bs_sv</entry>
              <entry>Progress 9.1B small (Windows)</entry>
            </row>
            <row>
              <entry>ora7_sv</entry>
              <entry>Oracle 7.x</entry>
            </row>
            <row>
              <entry>ora803_mv</entry>
              <entry>Oracle 8.0.3</entry>
            </row>
            <row>
              <entry>ora805_mv</entry>
              <entry>Oracle 8.0.5</entry>
            </row>
            <row>
              <entry>ora81_mv</entry>
              <entry>Oracle 8.1.x (8i windows)</entry>
            </row>
            <row>
              <entry>ora8i_mv</entry>
              <entry>Oracle 8i (not windows)</entry>
            </row>
            <row>
              <entry>ora9i_mv</entry>
              <entry>Oracle 9i (windows)</entry>
            </row>
            <row>
              <entry>sybc10_mv</entry>
              <entry>Sybase 10.x (CTLib)</entry>
            </row>
            <row>
              <entry>sybc11_mv</entry>
              <entry>Sybase 11.x (CTLib)</entry>
            </row>
            <row>
              <entry>sql6_mv</entry>
              <entry>Microsoft SQL Server 6.x &amp; 7.x</entry>
            </row>
            <row>
              <entry>sql2k_mv</entry>
              <entry>Microsoft SQL Server 2000</entry>
            </row>
            <row>
              <entry>db2_mv</entry>
              <entry>DB2</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <!-- ######################## -->
      <section xml:id="mt_verrelfuncinfo">
        <title>Specific Agent Information</title>
        <para>In a manner similar to the Request Broker, you can obtain component 
        version, release, and functionality related information about your database 
        agent through your operating system's command line interface. </para>
        <para>To obtain the information about your database agent simply type in the 
        name of the binary executable file for the relevant agent and the --help 
        switch.  The example below shows how this is done assuming you are seeking 
        information about the OpenLink Virtuoso database agent:</para>
        <programlisting><![CDATA[virt_sv --help]]></programlisting>
        <para>The output returned is depicted below:</para>
        <programlisting><![CDATA[
        OpenLink Virtuoso Database Agent
        Version 1.2 (Release 4.0) as of Mon Jul 31 2000 (cvsid 00051).
        Compiled for Linux 2.4.0-test1 (i686-pc-linux-gnu)
        Copyright (C) OpenLink Software.
        Usage:
        virt_sv [-CmijrlLd] [+noautocommit] [+maxrows num] [+initsql arg] [+jetfix] 
	[+norowsetlimit] [+loglevel num] [+logfile arg] [+debug]
        +noautocommit 		turn autocommit off by default
        +maxrows 		maximum allowed rows to fetch
        +initsql 		execute SQL from this file for every connection made
        +jetfix 		Jet Engine Compatibility Features
        +norowset		disable the limit rowsetsize
      ]]></programlisting>
        <para>Version - relates to the actual
        source code archive from which a database agent has been assembled.</para>
        <para>Binary Platform - indicates what platform
        the database agent has been built to run on.</para>
        <para>Usage - describes the command line options
        that are to be used with a particular database agent, these can be database
        agent specific. The command line options are to be used within the Database
        Agent configuration section of "Session Rules Book" (the file
        oplrqb.ini), this is the section that handles database agent specific
        items. You can add these entries as required to the rule book, you do so
        by manually editing the rule book file or via the Web based Admin Assistant
        (see section on Configuring Database Agents).</para>
      </section>
    </section>

    <!-- ##################################### -->
    <section xml:id="mt_relinkdb">
      <info>
        <title>Linking OpenLink DB Agents</title>
        <keywordset>
          <keyword>Relink</keyword>
          <keyword>Agent Relink</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_relinkgeneral">
        <title>General Linking Approach</title>
        <para>To relink Progress database Agents, see the next section.</para>
        <para>It is sometimes necessary to link or re-link your
        OpenLink database agents when one of the following situations arise:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>No database agent executable was supplied with the
            OpenLink server components installed on your OpenLink server machine</para>
          </listitem>
          <listitem>
            <para>A database agent executable file exists but is unable to
            converse with your database server due to version incompatibility</para>
          </listitem>
        </itemizedlist>
        <para>OpenLink provides a database agent relink script for each
        supported database engine, this script is named using the following convention:</para>
        <itemizedlist>
          <listitem>
            <para>ld - indicates a link script</para>
          </listitem>
          <listitem>
            <para>XXX - first three letters (perhaps 4) of database name</para>
          </listitem>
          <listitem>
            <para>NN - major and perhaps minor release number</para>
          </listitem>
          <listitem>
            <para>mv - If the agent is multhreaded</para>
          </listitem>
        </itemizedlist>
        <para>Examples: ldora81mv is Oracle 8i mulithreaded agent. ldoig2 is for Ingres II.</para>
        <section xml:id="mt_relinksteps">
          <title>Relink Steps</title>
          <orderedlist>
            <listitem>
              <para>Move to the "lib" sub-directory of your OpenLink
              server components installation directory e.g: "/usr/openlink/lib"</para>
            </listitem>
            <listitem>
              <para>Setup key OpenLink link script environment variables which
              create a reference to key database environment variables required for making a native
              connections to your database engine:</para>
              <programlisting><![CDATA[
              DB2
              DB2DIR=$DB2INST
              Informix
              INFORMIX5DIR=$INFORMIXDIR
              INFORMIX6DIR=$INFORMIXDIR
              INFORMIX7DIR=$INFORMIXDIR
              Ingres
              INGRES6DIR=$II_SYSTEM/ingres
              INGRES7DIR=$II_SYSTEM/ingres
              Oracle
              ORACLE6DIR=$ORACLE_HOME
              ORACLE7DIR=$ORACLE_HOME
              ORACLE8DIR=$ORACLE_HOME
              Solid
              SOLIDDIR=$SOLID                                             
              Sybase
              SYBASE10DIR=$SYBASE
              SYBASE11DIR=$SYBASE
              SYBASE4DIR=$SYBASE
              Unify
              UNIFYDIR=$UNIFY../lib
              Velocis
              VELOCISDIR=$VELOCIS
              Virtuoso
              VIRTUOSODIR=$VIRTUOSO
            ]]></programlisting>
              <para>You can also opt to manually configure these values in the "dbpaths" file
              situated in the same directory as your database agent link script.</para>
            </listitem>
            <listitem>
              <para>Ensure that the "lib" subdirectory that your are
              working within is also part of your system PATH, if this isn't the case add this directory
              to the system PATH.</para>
            </listitem>
            <listitem>
              <para>Run the appropriate link script (ldXXXNN) which will attempt to
              build a new database agent (XXX_sv or XXX_mv). Once the relink process is completed the new database
              agent executable is placed in the "bin" subdirectory directory of your
              OpenLink server components installation using. The new database agent binary will be named
              accordingly using the "XXX_sv" or "XXX_mv" database agent naming convention.
            </para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_relinkpro">
        <title>Relinking Progress Agents</title>
        <para>The files described below should all be part of current agent installations.</para>
        <para>We have attempted to provide a set of generic link scripts for the versions of Progress
        we support, to enable you to relink if necessary.</para>
        <para>Please note that to relink against Progress 6 you require a HLI/C license from Progress
        in order to do so. For Progress 7, 8, 9 this is not required.</para>
        <para>Remember to back up OpenLink files before you begin.</para>
        <para>Follow the instructions below to relink an OpenLink Progress Database agent:</para>
        <orderedlist>
          <listitem>
            <para>Change directory to the 'openlink/lib' directory. 
          </para>
          </listitem>
          <listitem>
            <para>Ensure the Progress environment variable DLC is set correctly.
          </para>
          </listitem>
          <listitem>
            <para>Set the Progress PROLOAD environment variable to $DLC/probuild. 
          </para>
          </listitem>
          <listitem>
            <para>Run the 'mkdlcX' script which will produce a file called 'dlcX.o', where X represent
            Progress version  6, 7, 8, 9 depending on the major version number of your Progress installation.
          </para>
          </listitem>
          <listitem>
            <para>If you receive an error stating that any of the Progress libraries cannot be found,
            edit the "mkdlcX" script and then remove the reference to the named file. Then rerun it "mkdlcX".
          </para>
          </listitem>
          <listitem>
            <para>Run the script 'ldproX' which will build a new OpenLink Progress X agent
            (proX_sv or proX_mv), and place it directly in the 'openlink/bin' directory.
          </para>
          </listitem>
        </orderedlist>
        <note>
          <title>Note:</title>
          <para>Relinking is only necessary if you are running a different version of Progress to the one
          used for linking the agents provided</para>
        </note>
        <note>
          <title>Note:</title>
          <para>If you cannot find the files described above with your installation then you may have an
          older version of the software. Please contact OpenLink Support for assistance at:
          http://www.openlinksw.com/support/suppindx.htm .</para>
        </note>
      </section>
    </section>

    <!-- 
  $Id: conprog.xml,v 1.1.1.1 2004/09/09 10:45:20 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_conprog">
      <title>Progress Troubleshooting &amp; Advanced Configuration</title>
      <info>
        <keywordset>
          <keyword>Progress ODBC Driver</keyword>
          <keyword>Advanced</keyword>
          <keyword>Troubleshooting</keyword>
        </keywordset>
      </info>
      <formalpara>
        <title>Assumptions</title>
        <para>It assumed at this point that you have successfully
    installed OpenLink's client and server components on one or more computers within
    your I.T. infrastructure.</para>
      </formalpara>
      <formalpara>
        <title>Conceptual Overview</title>
        <para>Understanding the fundamental concepts that drive the
    OpenLink Data Access Drivers for Progress is central to you exploiting the deliberate
    simplicity of our product architecture. A failure to grasp these concepts will certainly
    make the last sentence an absolute contradiction in terms.</para>
      </formalpara>
      <section xml:id="mt_conprogudacomps">
        <title>OpenLink Data Access Components</title>
        <para>Your OpenLink Data Access Driver Suite (Multi-Tier Edition)
    consists of the following components, subdivided by prime function:</para>
        <itemizedlist>
          <listitem>
            <para>Client Components (OpenLink Database Agent Service Consumers)
      </para>
            <itemizedlist>
              <listitem>
                <para>Generic ODBC Driver (the file "oplodb32.dll" under
          windows or OS/2, "oplodbc.sl" or "oplodbc.so" under UNIX)</para>
              </listitem>
              <listitem>
                <para>Generic Driver for JDBC (the files
          "opljdbc.zip" or "opljdbc.jar")</para>
              </listitem>
              <listitem>
                <para>Generic UDBC Driver (the end product of statically linking
          the file libudbc.o or dynamically linking the file "libudbc.so" or
          libudbc.sl" under UNIX)</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Server Components (OpenLink Database Agent Service Providers)
      </para>
            <itemizedlist>
              <listitem>
                <para>OpenLink Request Broker (the file "oplrqb" or
          "oplrqb.exe" depending on operating system)</para>
              </listitem>
              <listitem>
                <para>OpenLink Database Agents (the files "pro63e_sv" or
          "pro73c_sv" or "pro82a_sv" depending on major and minor Progress
          Database Server version and sub-version number)</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <para>The prime function of your OpenLink Components does not
    determine their physical location within your I.T. infrastructure, this is driven instead
    by the logical structure and nature of your database connectivity requirements.</para>
      </section>
      <section xml:id="mt_conproghowtoprog">
        <title>How OpenLink's Data Access Drivers Connect To Your Progress Database</title>
        <para>A process diagram is provided below to assist with the
    understanding of how the various OpenLink components work in concert, with the sole
    objective of providing you with Secure, High-Performance, and Highly Configurable access
    to Progress Database Engines.</para>
        <figure xml:id="mt_conprog1" floatstyle="normal">
          <title>Progress Connection Conceptual Diagram</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="conprog1.gif" width="596"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The steps explained:</para>
        <orderedlist>
          <listitem>
            <para>An ODBC/JDBC/UDBC Application uses the relevant data access
        standards Driver binding mechanism to locate and associate itself with the relevant
        OpenLink Driver.</para>
          </listitem>
          <listitem>
            <para>The chosen OpenLink Driver then uses its in-built Database
        Independent Communications layer to broadcast an OpenLink Database Agent service request
        to the OpenLink Request Broker.</para>
          </listitem>
          <listitem>
            <para>The OpenLink Request Broker analyzes the request in step 3
        and then determines from the information obtained from the OpenLink Sessions Rules Book
        (the file oplrqb.ini), if an OpenLink Database Agent for Progress is available. If the
        OpenLink Request Broker determines that a Progress Database Agent does not exist, it will
        indicate it findings via an error condition and resultant error message viewable via your
        ODBC/JDBC/UDBC application.</para>
          </listitem>
          <listitem>
            <para>The OpenLink Request Broker initializes a new OpenLink
        Database Agent For Progress instance or associates the new Progress Database session
        request with an existing OpenLink Database Agent For Progress instance.</para>
          </listitem>
          <listitem>
            <para>OpenLink Database Agent For Progress instance uses your
        chosen Inter Process Communications (IPC) mechanism to initialize a session with a
        Progress Database Server that supports the chosen IPC mechanism. The default mechanism
        chosen by the OpenLink Database Agent For Progress is shared memory. You can opt to use
        TCP sockets by doing one of the following (as long as you have started a TCP sockets based
        Database Server for your Progress Database Engine by using the command: </para>
            <programlisting><![CDATA[
proserve &lt;dbname&gt; -S &lt;service name&gt; -N TCP H localhost):
]]></programlisting>
            <para>Place the Progress Database Connection Parameters 
        <computeroutput>- S &lt;service name&gt; -N TCP H localhost </computeroutput>
        into the "Options" field of the OpenLink ODBC Data Source Configuration Utility,
        should you be using OpenLink ODBC Drivers.</para>
            <para>Place the Progress Database Connection Parameters 
        <computeroutput>- S &lt;service name&gt; -N TCP H localhost </computeroutput>
		as "/OPTIONS" JDBC URL attribute values, should you be using OpenLink Drivers
        for JDBC.Place the Progress Database Connection Parameters 
		<computeroutput>- S &lt;service name&gt; -N TCP H localhost</computeroutput>
        as "OPTIONS" connect string values, should you be using OpenLink UDBC or
        OpenLinks Unix based ODBC Drivers.</para>
            <para>The OpenLink Session Rules Book (oplrqb.ini) allows you to control this behavior
        centrally, alleviating yourself from the cost of maintaining numerous client based
        connection parameters. This is done by placing the Progress Database Connection Parameters
        <computeroutput>- S &lt;service name&gt; -N TCP H localhost</computeroutput>
		as "ConnectOptions" section-key values within the Progress Database Agent configuration
        ("[generic_prox]") section of the Session Rules Book.</para>
          </listitem>
          <listitem>
            <para>At this point your Progress Database Session is established</para>
          </listitem>
          <listitem>
            <para>ODBC/JDBC/UDBC Driver binding and database session
        establishment is completed, and the ODBC/JDBC/UDBC Driver Manager 
		is no longer required while the Progress Database Session remains open.</para>
          </listitem>
          <listitem>
            <para>The OpenLink Request Broker like the Driver Managers in step
        7 is no longer required (until session closure) while data is being exchanged directly
        between ODBC/JDBC/UDBC applications, the OpenLink Database Agents for Progress, and your
        Progress Database Engine.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_conprogtrblesht">
        <title>Initial Connection Problems</title>
        <para>The OpenLink Database Agent for Progress is a Hybrid of
    OpenLink &amp; Progress ESQL/C components, indicating that the actual OpenLink Database
    Agent for Progress is for all intents and purposes a Progress ESQL/C client.</para>
        <para>The files "proxxx_sv" or "proxx_sv.exe"
    are your OpenLink Database Agent for Progress executables (note: xxx represents Progress
    major and minor release numbers e.g. Progress 7.3C would be represented as pro73c_sv).
    These files are always situated in the "bin" sub-directory of your OpenLink
    installation directory.</para>
        <para>When you attempt to make an ODBC/JDBC/UDBC connection to
    your Progress Database Engine(s), and you encounter a problem, one of the following error
    conditions would typically be presented to you via your ODBC/JDBC/UDBC application:</para>
        <itemizedlist>
          <listitem>
            <para>"There is no server this database you are attempting to
        connect with", even though you know there is a server running for that database. </para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>"Shared memory of a particular version was expected,
        but shared memory of another version has been found"</para>
          </listitem>
        </itemizedlist>
        <para>The conditions above arise due to the fact that the
    OpenLink Database Agent for Progress not being built using Progress ESQL/C libraries that
    do not match your Progress Database Server to the exact minor release. This is to say that
    although the OpenLink Database Agent for Progress may have been built using ESQL/C
    libraries for Progress 7.3A, you will still have a version incompatibility problem of this
    nature should you attempt to connect this ESQL/C client to a Progress 7.3C Database Server
    process.</para>
        <para>This error condition arises as a result of the fact that
    the OpenLink Database Agent for Progress defaults to using Shared Memory for its Inter
    Process Communications (IPC) , and that Shared Memory is very version sensitive nature
    albeit the fastest IPC mechanism .</para>
        <para>There are two possible ways to work around this situation
    when it arises.</para>
        <orderedlist>
          <listitem>
            <para>Change the default IPC mechanism of the OpenLink Database
        Agent for Progress, from Shared Memory to TCP sockets, as TCP 
		sockets based IPC is version sensitive.</para>
          </listitem>
          <listitem>
            <para>Rebuild/Relink your OpenLink Database Agent for Progress,
        achieved by running an OpenLink provided link script that produces a new OpenLink Database
        Agent for Progress executable with an exact Shared Memory match for your Progress Database
        Server.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_conprogsocketspro">
        <title>Making OpenLink Database Agent Use a Sockets Based IPC</title>
        <para>Pre-Configuration Check List:</para>
        <itemizedlist>
          <listitem>
            <para>Progress Database Server installation must be licensed to
        use Progress Client Networking.
        </para>
          </listitem>
          <listitem>
            <para>TCP networking must be installed, configured and up and
        running on the Progress Database Server machine. (The command: ping localhost will quickly
        determine if TCP is configured correctly on your server machine).
        </para>
          </listitem>
          <listitem>
            <para>You need to create an entry in the "services"
        file (situated in the UNIX "/etc" directory) for one or more Progress TCP
        Sockets based Database Servers. The "services" file is standard TCP
        configuration file that is used to match Service Names to the TCP port number from which
        their services can be accessed. The entries in this file follow the format shown below:</para>
            <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
              <title>  </title>
              <tgroup align="char" charoff="50" char="." cols="3">
                <thead>
                  <row>
                    <entry>Service Name</entry>
                    <entry>Port/Protocol</entry>
                    <entry>Comment</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>netwall</entry>
                    <entry>533/udp</entry>
                    <entry># -for emergency broadcasts</entry>
                  </row>
                  <row>
                    <entry>uucp</entry>
                    <entry>540/tcp</entry>
                    <entry># uucp daemon</entry>
                  </row>
                  <row>
                    <entry>remotefs</entry>
                    <entry>556/tcp</entry>
                    <entry># Brunhoff remote filesystem</entry>
                  </row>
                  <row>
                    <entry>pppmsg</entry>
                    <entry>911/tcp</entry>
                    <entry># PPP daemon</entry>
                  </row>
                  <row>
                    <entry>listen </entry>
                    <entry>1025/tcp</entry>
                    <entry># listener RFS remote_file_sharing</entry>
                  </row>
                  <row>
                    <entry>nterm</entry>
                    <entry>1026/tcp</entry>
                    <entry># remote_login network_terminal </entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </listitem>
        </itemizedlist>
        <para>You need to choose the name of a service and a port number
      that is not currently used by a tcp service (in the case illustrated above, for example,
      number 1026 is already being used). </para>
        <para>Thus, if you chose to use the name <emphasis>"pro8srv" </emphasis>for
      your Progress TCP Sockets based Database Servers Service Name. And you chose to make
      its services available at TCP port # 9001 (and you have checked the file to make sure it
      is not being used) you would add the following entry (note that the third entry is simply
      a comment as it is preceded with a "#"):</para>
        <programlisting><![CDATA[pro8srv 9001/tcp # for Progress database sales ]]></programlisting>
        <section xml:id="mt_conprogsockets">
          <title>Configuration Steps</title>
          <note>
            <title>Note:</title>
            <para>(Assuming a Progress Database named "sales.db" using as TCP Service
    "pro8srv")</para>
          </note>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis>Progress Server Components</emphasis>
              </para>
              <itemizedlist>
                <listitem>
                  <para>Assuming the database file "<emphasis>sales.db" </emphasis>is
        situated in directory "<emphasis>/usr/data"</emphasis>. Start your Progress TCP Sockets based
        Database Server process using the command:</para>
                  <programlisting><![CDATA[>proserve /usr/data/sales.db -S pro8srv N TCP H localhost ]]></programlisting>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
                <emphasis>OpenLink Server Components (Database Agent for Progress)</emphasis>
              </para>
              <itemizedlist>
                <listitem>
                  <para>The OpenLink Session Rules Book (oplrqb.ini) allows you to
        control all OpenLink Data Access clients (ODBC/JDBC/UDBC) centrally, alleviating yourself
        from the time cost of maintaining numerous client based connection parameters. </para>
                  <para>This is done by placing the Progress Database Connection Parameters 
		<computeroutput>-S &lt;service name&gt; -N TCP H localhost</computeroutput>
		as "ConnectOptions" section-key values within
        the Progress Database Agent configuration ( "[generic_prox]" ) section of the
        Session Rules Book e.g.:</para>
                  <programlisting><![CDATA[
[generic_pro8]
Program = pro8_sv
ServerOptions = -q d mdy TB 30 TM 30 e 25
Database = /usr/data/sales.db
ConnectOptions = -S pro8srv N TCP H localhost
]]></programlisting>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
                <emphasis>OpenLink Client Components 
	(Drivers for ODBC/JDBC/UDBC)</emphasis>
              </para>
              <para>You only have to resort to the steps below if circumstances
    within your organization demand client side configuration, otherwise the server based
    approach using the OpenLink Session Rules Book (oprqb.ini) is much more effective and
    convenient.</para>
              <itemizedlist>
                <listitem>
                  <para><emphasis>OpenLink ODBC Drivers</emphasis>
                   - Place the Progress Database
        Connection Parameters: 
                  <computeroutput>-S pro8srv N TCP H localhost</computeroutput>
        into the "Options" field of the OpenLink ODBC Data Source Configuration Utility
        </para>
                </listitem>
                <listitem>
                  <para><emphasis>OpenLink Drivers for JDBC</emphasis> - Use the Progress
        Database Connection Parameters:
       <computeroutput>-S pro8srv N TCP H localhost</computeroutput> 
	   as "/OPTIONS" OpenLink JDBC URL attribute values e.g.:</para>
                  <programlisting><![CDATA[
jdbc:openlink://dbservermachine/DSN=dsn_progress/OPTIONS=-S pro8srv N TCP H localhost
]]></programlisting>
                </listitem>
                <listitem>
                  <para><emphasis>OpenLink UNIX based ODBC or UDBC Drivers</emphasis> - 
	  Use the Progress Database Connection Parameters:
	  <computeroutput>-S pro8srv N TCP H localhost</computeroutput> as 
	  "OPTIONS" connect string values e.g.:</para>
                  <programlisting><![CDATA[
DSN=dsn_progress;OPTIONS=-S pro8srv N TCP H localhost
]]></programlisting>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="mt_conprogrebuildlink">
          <title>REBUILDING/RELINKING
    Your OpenLink Database Agent For Progress</title>
          <para>As explained earlier an OpenLink Database Agent for
    Progress is a combination of OpenLink specific libraries (data access and network server
    modules) and Progress specific libraries provided situated in the "probuild"
    sub-directory under your Progress installations $DLC directory.</para>
          <para>Should you desire the superior performance that Shared
    Memory has over TCP sockets, then rebuilding/relinking your OpenLink Database Agent for
    Progress provides an alternative solution to Shared Memory incompatibility problems that
    may be impeding your ability to establish an OpenLink session with your Progress Database
    Server.</para>
          <para>
            <emphasis>Activity Prerequisites </emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>You must have a C library linker installed and running on your 
  machine (part of your operating systems C compiler kit)</para>
            </listitem>
            <listitem>
              <para>You must have a "probuild" sub-directory situated
      under the $DLC (progress installation directory) directory.</para>
            </listitem>
            <listitem>
              <para>You must have a "lib" sub-directory situated
      under your OpenLink Server Components installation directory, and it must contain the
      following components:
      </para>
              <itemizedlist>
                <listitem>
                  <para>A link script file named "mkdlcX" (where X
          represents your Progress installations major release number e.g. for Progress 7.3C
          this would be lddlc7).</para>
                </listitem>
                <listitem>
                  <para>A link script named "ldproX" (where X represents
          your Progress installations major release number e.g. for Progress 7.3C this would
          be ldpro7).</para>
                </listitem>
                <listitem>
                  <para>An OpenLink specific link library file named
          "pro7_sv.o"</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>Rebuild/Relink Steps</emphasis>
          </para>
          <orderedlist>
            <listitem>
              <para>Create a UNIX environment variable named "
              <emphasis>DLC" </emphasis>
              and
        set its value your Progress installation directory. You do not need to do this as this
        environment variable is already set, the output from the command: echo $DLC will enable
        you determine if this has been set.</para>
            </listitem>
            <listitem>
              <para>Create a UNIX environment variable named "<emphasis>PROLOAD"
        </emphasis>and set its value to <emphasis>$DLC/probuild </emphasis>From 
		the UNIX command line prompt this is
        achieved by typing in the following:</para>
              <programlisting><![CDATA[
PROLOAD=$DLC/probuild ; export PROLOAD
]]></programlisting>
            </listitem>
            <listitem>
              <para>Change directory to the lib sub-directory under
        your OpenLink Server Components installation directory
        </para>
            </listitem>
            <listitem>
              <para>Run the script "
              <emphasis>mkdlcX", </emphasis>
              the aim here being
        the production of a file named 
              <emphasis>'dlcX.o'</emphasis>
               (where X represents your Progress
        installations major release number)</para>
            </listitem>
            <listitem>
              <para>If you receive an error messages from 
              <emphasis>step 4</emphasis>
               stating
        that one or more Progress libraries cannot be found, please edit 
              <emphasis>mkdlcX</emphasis>
               and remove
        any references to the file(s) identified in the error message.</para>
            </listitem>
            <listitem>
              <para>Run the script '
              <emphasis>ldproX</emphasis>
              ' . This will produce a new
        OpenLink Database Agent for Progress version X (proX_sv), and place the new executable
        file in the "bin" sub-directory of your OpenLink installation directory (the
        directory immediately adjacent to the "lib" directory from where you performed
        steps 1  5).</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_conprogDistributedDatabases">
        <title>Distributed Databases, Array Fields, Database Triggers</title>
        <para>Our ODBC Drivers facillate the support of the above through
    the use of a custom "Data Dictionary File", this file is built by running the
    OpenLink provided Progress Program File "<emphasis>setup.p</emphasis>"
    situated in the "bin" sub-directory below the OpenLink base installation
    directory. </para>
        <para>Once the script has been run, modify the OpenLink
    "Session Rules Book" using the gudilines displayed when the "
	<emphasis>setup.p</emphasis>" program completes.</para>
        <para>Note: To make use of Progress Database Triggers please
    ensure that the Logical Database name to which your Triggers have been compiled matches
    the value that you provide to the "-ld" parameter when setting your Progress
    Database Connect options during the execution of "setup.p" . </para>
        <para>
          <emphasis>Example: </emphasis>
        </para>
        <para>If you have compiled your triggers against a database
    physically identified as "/usr/progress/demo.db" but logically identified as
    "mydemo" your "setup.p" Database Connection String would be:</para>
        <para>/usr/progress/demo -ld mydemo</para>
      </section>
      <section xml:id="mt_conprogusingoplodbc">
        <title>Using OpenLink ODBC, Progress &amp; Microsoft Access</title>
        <para>
          <emphasis>The Mysterious "Admin" Account &amp;
    Disabling the JET Scrollable Cursor (Dynaset) Facility</emphasis>
        </para>
        <para>Please ensure that you have the following OpenLink Settings
    enabled :</para>
        <para>
          <emphasis>Client</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>OpenLink ODBC DSN "no login dialog box" check
      box is checked</para>
          </listitem>
          <listitem>
            <para>OPENLINK.INI settings 
            <computeroutput>\Local Machine\Software\ODBC\OPENLINK.INI\Communications</computeroutput>
	  ShowErrors Key is also set to "No" , this ensures that OpenLink Specific 
	  error messages aren't shown.</para>
          </listitem>
        </itemizedlist>
        <para>
          <emphasis>Server</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>Ensure the following Mapping Rule exists as the first
      line of the [Mapping Rules] section of yor "Session Rules Book" :</para>
          </listitem>
        </itemizedlist>
        <programlisting><![CDATA[
[Mapping Rules]
;*:*:blank:*:*:*:rw = reject You should specify a username and password
*:*:Admin:*:*:*:rw = reject User Admin Account Does Not Exist In Your Progress Database
]]></programlisting>
        <para>The above alleviates the need to depend of JetTryAuth or TryJetAuth.</para>
      </section>
      <section xml:id="mt_conprogjetsetngs">
        <title>Key Microsoft Access Jet Engines Setting That Can Affect Your OpenLink ODBC Experience</title>
        <para>The following sections describe Windows registry settings
    settings for the Microsoft Jet database engine for connection to an ODBC database. These
    registry settings must be added by the user or by your application; the ODBC Driver Setup
    program does not write default values to the location:</para>
        <programlisting><![CDATA[
\HKEY_LOCAL_MACHINE\Software\Microsoft\Access\7.0\Jet\3.5\Engines\ODBC
]]></programlisting>
        <para>Initialization Settings for Jet-connected ODBC Databases, found at:</para>
        <programlisting><![CDATA[
\HKEY_LOCAL_MACHINE\Software\Microsoft\Office\8.0\Access\Jet\3.5\Engines\ODBC
]]></programlisting>
        <para>folder contains initialization settings for the Microsoft Jet 
	database engine. Before you can add any of the following values to the 
	registry, you must create the ODBC folder under the Jet\3.5\Engines folder.</para>
        <para>To create the new folder, open the Jet\3.5\Engines folder
    in the Registry Editor and click Add Key on the Edit menu. In the Key Name: edit box, type
    ODBC and click OK. The Registry Editor creates a new folder below the Jet\3.5\Engines
    folder.</para>
        <note>
          <title>Note:</title>
          <para>If you are using Windows NT, the Add Key dialog box
    also contains an edit box for the registry key class; you 
	can leave this setting blank.</para>
        </note>
        <para>Typical settings for the entries in the
    Jet\3.5\Engines\ODBC folder are shown in the following example.</para>
        <programlisting><![CDATA[
LoginTimeout=20
QueryTimeout=60
ConnectionTimeout=600
AsyncRetryInterval=500
AttachCaseSensitive=0
AttachableObjects=&#39;TABLE&#39;,&#39;VIEW&#39;,&#39;SYSTEM TABLE&#39;,&#39;ALIAS&#39;,&#39;SYNONYM&#39;
SnapshotOnly=0
TraceSQLMode=0
TraceODBCAPI=0
DisableAsync=0
JetTryAuth=1
PreparedInsert=0
PreparedUpdate=0
FastRequery=0
]]></programlisting>
        <para>The Jet database engine uses the ODBC entries as follows:</para>
        <formalpara>
          <title>LoginTimeout</title>
          <para>The number of seconds a login attempt can continue before 
	 timing out. The default is 20 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>QueryTimeout</title>
          <para>The number of seconds a query can run (total processing time) 
	 before timing out. The default is 60 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>ConnectionTimeout</title>
          <para>The number of seconds a cached connection can remain idle
	 before timing out. The default is 600 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>AsyncRetryInterval</title>
          <para>The number of milliseconds between polls to determine if the server 
	is done processing a query. This entry is used for asynchronous processing 
	only. The default is 500 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>AttachCaseSensitive</title>
          <para>An indicator of whether to match table names exactly when linking. 
	Values are 0 (link the first table matching the specified name, regardless 
	of case) and 1 (link a table only if the name matches exactly).  
    The default is 0 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>AttachableObjects</title>
          <para>A list of server object types to which linking will be allowed. The 
	default is: 'TABLE', 'VIEW', 'SYSTEM TABLE', 'ALIAS',
    'SYNONYM' (values are of type REG_SZ).</para>
        </formalpara>
        <formalpara>
          <title>SnapshotOnly</title>
          <para>An indicator of whether Recordset objects are forced to be of snapshot 
	 type. Values are 0 (allow dynasets) and 1 (force snapshots only). The default 
	 is 0 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>TraceSQLMode</title>
          <para>An indicator of whether the Jet database engine will trace SQL statements 
	 sent to an ODBC data source in SQLOUT.txt.  Values are 0 (no) and 1 (yes). 
	 The default is 0 (values are of type REG_DWORD). This entry 
    is interchangeable with SQLTraceMode.</para>
        </formalpara>
        <formalpara>
          <title>TraceODBCAPI </title>
          <para>An indicator of whether to trace ODBC API calls in ODBCAPI.txt. Values 
	are 0 (no) and 1 (yes). The default is 0 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>DisableAsync</title>
          <para>An indicator of whether to force synchronous query execution. 
	 Values are 0 (use asynchronous query execution if possible) and 1 (force 
	 synchronous query execution). The default is 1 (values are of type
    REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>JetTryAuth</title>
          <para>An indicator of whether to try using the Microsoft Access user name 
	 and password to log in to the server before prompting.  Values are 0 (no) 
	 and 1 (yes). The default is 1 (values are of type REG_DWORD).</para>
        </formalpara>
        <formalpara>
          <title>PreparedInsert</title>
          <para>An indicator of whether to use a prepared INSERT statement that 
	 inserts data in all columns. Values are 0 (use a custom
    INSERT statement that inserts only non-Null values) and 1 (use a prepared INSERT
    statement). The default is 0 (values are of type REG_DWORD).Using prepared INSERT
    statements can cause Nulls to overwrite server defaults and can cause triggers to execute
    on columns that weren't inserted explicitly.</para>
        </formalpara>
        <formalpara>
          <title>PreparedUpdate</title>
          <para>An indicator of whether to use a prepared UPDATE statement that 
	 updates data in all columns. Values are 0 (use a custom
    UPDATE statement that sets only columns that have changed) and 1 (use a prepared UPDATE
    statement). The default is 0 (values are of type REG_DWORD).Using prepared UPDATE
    statements can cause triggers to execute on unchanged columns.</para>
        </formalpara>
        <formalpara>
          <title>FastRequery</title>
          <para>An indicator of whether to use a prepared SELECT statement 
	 for parameterized queries. Values are 0 (no) and 1 (yes). The
    default is 0 (values are of type REG_DWORD).</para>
        </formalpara>
      </section>
    </section>
    <section xml:id="mt_appserverarchitect">
      <title>Application Server Architecture</title>
      <info>
        <keywordset>
          <keyword>Application Server</keyword>
        </keywordset>
      </info>
      <figure xml:id="mt_appsrv001" floatstyle="normal">
        <title>Application Server Conceptual Architecture - Three Tier Distributed</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="appsrv001.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
      <figure xml:id="mt_appsrv002" floatstyle="normal">
        <title>Application Server Conceptual Architecture - Avoiding DB Server Install</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="appsrv002.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
      <figure xml:id="mt_appsrv003" floatstyle="normal">
        <title>Application Server Conceptual Architecture - Same Machine</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="appsrv003.gif"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </chapter>

  <!-- 
  $Id: uda52ssl.xml,v 1.3 2005/02/28 14:07:54 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_uda52ssl">
    <info>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>SSL</keyword>
        <keyword>secure ODBC connection</keyword>
        <keyword>encrypted ODBC</keyword>
      </keywordset>
      <title>Securing a Multi-Tier connection using SSL</title>
      <abstract>
        <para>This document provides information on configuring OpenLink
Multi-Tier for use with SSL, both on the client and server sides. SSL,
implemented with <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.openssl.org">OpenSSL</link>,
facilitates strong cryptographic encryption the whole network
communication layer.</para>
      </abstract>
    </info>
    <section xml:id="mt_ssloverview">
      <title>Overview</title>
      <para>As of version 5.2, OpenLink UDA now comes with optional support
for using <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.openssl.org">OpenSSL</link> to
encrypt the data layer between generic client and request broker /
agent.</para>
      <para>Features of the SSL implementation:</para>
      <simplelist type="vert">
        <member>
secures connections to both the broker and all database agents
</member>
        <member>
encryption is optional, although it can be made mandatory
</member>
        <member>
the same connection endpoint endpoint (port) handles both encrypted and
non-encrypted clients
</member>
        <member>
fully backward-compatible
</member>
        <member>
per-agent certificates
</member>
        <member>
all changes are in the OpenLink communications layer: there is no need
to change any of the database agents to cater for SSL.
</member>
      </simplelist>
    </section>
    <section xml:id="mt_sslimplementation">
      <title>Implementing SSL Encryption</title>
      <section xml:id="mt_sslserverside">
        <title>Server-side Configuration for SSL</title>
        <para>In order to make use of this functionality, you need to create a
certificate on the server running the request broker. On Unix
platforms we have provided a bin/mkcert.sh script as part of the
installation. On other platforms you may have to run openssl by hand
or use another system to generate the PEM file (such as generating it
on a unix server and copying the files across). </para>
        <para>A sample run of the mkcert.sh script, showing the various
questions it asks to identify your organization, follows: </para>
        <programlisting><![CDATA[
bash$ cd /usr/openlink/bin/
bash$ ./mkcert.sh mykey
Checking OpenSSL: OpenSSL 0.9.7d 17 Mar 2004
Generating a 512 bit RSA private key
.++++++++++++
.......++++++++++++
writing new private key to 'mykey.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Host name (externally visible) [host.example.com]:purple
Organization (eg. company) [OpenLink Software]:
Organizational Unit [Research & Development]:Product Development
State or Province Name (full name) []:Surrey
Locality Name (eg. city) []:Croydon
Country Name (2 letter code) [US]:UK
1024 semi-random bytes loaded
Generating DH parameters, 512 bit long safe prime, generator 2
This is going to take a long time
..+........................+...........................+.......+...........
[]
.+.....++*++*++*++*++*++*
subject= /CN=purple/O=OpenLink Software/OU=Product Development/ST=Surrey/L=Croydon/C=UK
notBefore=Nov 12 10:43:14 2004 GMT
notAfter=Nov 10 10:43:14 2014 GMT
MD5 Fingerprint=E0:DB:53:E7:E7:68:21:53:1C:2B:1E:8E:D9:BF:25:F0
Created private key parameters in mykey.key
Created public key parameters in mykey.cer
bash$
]]></programlisting>
        <para>Having created the key-pair, you now need to tell the request
broker to use them. This requires the following lines to be present in
the rulebook (oplrqb.ini):
</para>
        <programlisting><![CDATA[
[Request Broker]
....
SSLKeyFile = mykey.pem
SSLRequired = No            
]]></programlisting>
        <para>The SSLKeyFile is the filename of the key you just created; to
deny connections without SSL, set SSLRequired=Yes instead.
</para>
        <para>You can also put these options in the individual database agent
sections, such that one key is used for e.g. Ingres, and another for
SQL Server, or one for your sales database and another for people
coming in from VPN IP#s (by editing the mapping rules to match on a
per-IP# basis). For example: 
</para>
        <programlisting><![CDATA[
[generic_sqlserver]
.....
SSLKeyFile = mykey-sqlserver.pem
SSLRequired = Yes                  ; All SQLServer connections
MUST use SSL]]></programlisting>
        <para>As an alternative to editing oplrqb.ini by hand, you can use the
web-based Administrator GUI, either the form or wizards, to set the
SSL Key File and SSL Required fields, thus: </para>
        <figure xml:id="mtsslserverbrokerform" floatstyle="normal">
          <title>
    Server-side SSL Configuration of Request Broker via Web Assistant
  </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ssl-server-form.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure xml:id="mtsslagentform" floatstyle="normal">
          <title>Server-side SSL Configuration at the database agent level via
  Web Assistant Form</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="sslagent-www-form.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_sslclientside">
        <title>Client-side Configuration for SSL</title>
        <section xml:id="mt_sslclientwindows">
          <title>SSL Configuration for Windows Clients</title>
          <para>On the client, when you configure a new DSN there is now a
checkbox for "secure connection" adjacent to the username
and password. Checking this will invoke use of SSL on the server for
connections going through this DSN. This applies also to the web-based
DSN configuration utility.
</para>
          <figure xml:id="mtsslwwwform" floatstyle="normal">
            <title>Client-side SSL DSN Configuration via
  Web Assistant Form</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="mtssl-www-form.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure xml:id="mtsslwwwwizard" floatstyle="normal">
            <title>Client-side SSL DSN Configuration via
  Web Assistant Form</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="mtssl-www.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure xml:id="mtsslagentform_01" floatstyle="normal">
            <title>Client-side SSL DSN Configuration through native Windows 
  ODBC Administrator interface</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="mtssl.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section xml:id="mt_sslclientjdbc">
          <title>SSL with JDBC Clients</title>
          <para>The Java JDBC classes make use of J2SSE from Sun: as such, SSL is
not supported with users of JDK1.1; it requires <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/products/jsse/index.jsp">a separate download
from Sun</link> for JDK1.2 and 1.3; and these classes come as
standard with JDK 1.4 and 1.5.</para>
          <para>An SSL connection can be made by specifying the /UseSSL
attribute in your JDBC connectstring, thus:</para>
          <programlisting><![CDATA[
jdbc:openlink://localhost:5001/SVT=SQLServer/Database=pubs/UseSSL/UID=sa/PWD=
java -classpath .;.\opljdbc3.jar -Djavax.net.ssl.trustStore=<KeystoreFile> sample
]]></programlisting>
          <para>where 'sample' is the name the JDBC Program. Note the use of the
keystore file which is a unique feature of the JSSE implmentation,
being the location where the certificate information is stored.</para>
          <para>Should the JSSE classes not be located the JDBC client will return an
error of the form:</para>
          <programlisting><![CDATA[
"You need to add JSSE to your CLASSPATH in order to make a SSL connection
java.sql.SQLException: [OpenLink][OPLJDBC2]Connection failed:
java.io.IOException: java.lang.NoClassDefFoundError:javax/net/ssl/SSLSocket"
]]></programlisting>
        </section>
      </section>
      <section xml:id="mt_sslpossibleerrors">
        <title>Error Messages</title>
        <para>The introduction of SSL brings two new possible error messages
 to be seen at connect-time:</para>
        <simplelist type="vert">
          <member>IM600 (ER_SSL_NOT_IN_CLIENT) "SSL initialization failure":
this indicates that the client either has no SSL support built in, or
that the underlying SSL library failed to initialize properly.
</member>
          <member>
IM601 (ER_SSL_NOT_IN_SERVER) "The server does not support SSL": this
indicates that the server has no SSL support built in, or that the SSL
library failed to initialize properly. It could also mean that the
required certificate could not be loaded on the server.  
</member>
        </simplelist>
      </section>
    </section>
  </chapter>

  <!--
  $Id: UDAZeroConf.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_UDAZeroConf">
    <title>Zero Configuration Networking</title>
    <info>
      <abstract>
        <para>Zero Configuration Networking is a server administered service that 
 broadcasts configured available services over IP to allow clients 
 to discover and used them with no prior knowledge or client specific 
 configuration.</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Zero Configuration</keyword>
        <keyword>Zero Configuration Networking</keyword>
      </keywordset>
    </info>
    <section xml:id="mt_zeroconfintro">
      <title>Introduction</title>
      <formalpara>
        <title>What is it?</title>
        <para>Zero Configuration Networking, also known as ZeroConf, is networking that 
 needs nothing to be pre-configured and no administration to operate.  Zero 
 Configuration Networking uses industry standard IP protocols to allow devices 
 to automatically find each other without the need to enter IP addresses or 
 configure DNS servers.</para>
      </formalpara>
      <formalpara>
        <title>Why is it Important?</title>
        <para>ZeroConf enables services on a network built with this support to be 
 automatically discovered, thereby requiring no knowledge on the part of the 
 end user attempting to use this service about the specifics of its configuration, 
 just that it is available for use if selected.</para>
      </formalpara>
      <para>Using ZeroConfig for installation rollouts or for site maintenance 
  can significantly reduce administration overhead.  Because the client ODBC 
  Driver is bound to a service name only, should the details of that service change 
  the client will automatically re-acquire the new details (this does not include changes 
  to the name of the service).  For example, 200 client installations configured to 
  use the service "SalesDB1",  moving the "Sales" database to another server, 
  perhaps even a different database does not required any further client 
  configuration, they will automatically connect to the new server.</para>
      <para>ZeroConf configuration on the server is kept to a minimum.  The 
  host and port number of the Request Broker are automatically supplied to the 
  ZeroConf service descriptions on the server when they are broadcast over 
  the network.  Furthermore, ZeroConf service descriptions can be based 
  directly on a Server Type that maps to a Database Agent.  
  If we consider the above example again, moving the "Sales" 
  database to another machine will not need any ZeroConf adjustment on the
  server either, the new host and port and automatically discovered and 
  broadcast with no administrator intervention other than to start the 
  new Broker and Database.</para>
    </section>
    <section xml:id="mt_zerosrvconf">
      <title>Server Configuration</title>
      <info>
        <keywordset>
          <keyword>Zero Configuration Server</keyword>
          <keyword>Server</keyword>
          <keyword>Zero Config</keyword>
        </keywordset>
      </info>
      <para>The OpenLink Multi-Tier Request Broker now has the ability to Broadcast 
  ZeroConf services of available Database agent connections on the network.  
  These can be discovered by the the OpenLink Multi-Tier ODBC client.</para>
      <section xml:id="mt_zeroconfini">
        <title>Configuration by Rule Book Edit</title>
        <para>ZeroConf Support in the Request Broker is configured via the Rule Book.  
  The Rule Book now contains a new section called [Zero Config].  This section 
  contains a list of DSN="Connect String" pairs.  The DSN is the name that will 
  be presented to clients listing available ZeroConf data source, the 
  Connect String is a string of connection attributes necessary for making 
  a connection to a Database Agent as the example below shows:</para>
        <programlisting><![CDATA[
[Zero Config]
ZJDBC3= "ServerType=JDBC13;Database=virtuoso.jdbc2.Driver;UID=dba"
ZSQL2K = "ServerType=SQLServer 2000;Database=pubs;UID=sa"
SQLServer 2000="Database=pubs;UID=sa"
]]></programlisting>
        <para>The syntax is:</para>
        <programlisting><![CDATA[<Service_name>="Connect String"]]></programlisting>
        <para>or:</para>
        <programlisting><![CDATA[<Server Type>="Connect String"]]></programlisting>
        <para>In this second case, there is no Server Type defined within
  the connect string itself.</para>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>&lt;Service_name&gt;</title>
              <para>This is the service name you want this specific ZeroConf service to be known 
  as when discovered by any Multi-Tier ZeroConf clients on the network.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>Connect String</title>
              <para>A semi-colon (;) separated list of connection attributes that the Request 
 Broker will supply to clients for automatically connecting the the requested 
 DSN.  Note that these attributes can be any of those used by a normal Multi-Tier 
 client, since this is effectively making DSN-less connection string for clients 
 to use.  Host and Port cannot be specified, these are automatically supplied by 
 the broker when the service is requested.</para>
            </formalpara>
            <note>
              <title>Note:</title>
              <para>The Host and Port number of the Request Broker are not specifiable, 
 the Broker will supply these to the services broadcasted automatically.  This 
 brings a huge saving on administration overhead; if the circumstances of the 
 networking infrastructure change, the installation is simply moved to another 
 machine or a backup server activated, no modifications to the ZeroConf details 
 are required, and the new host:port will be automatically supplied from then on.</para>
            </note>
            <para>The Connect String must be enclosed in double-quotes.</para>
            <para>The list of available attributes are:</para>
            <itemizedlist>
              <listitem>
                <formalpara>
                  <title>ServerType [SVT]</title>
                  <para>Specify agent domain.  This is used by the broker to determine which 
   agent section to connect the client request to using mapping rules.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>ServerOptions</title>
                  <para>Server startup options specific to agent/database.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>Database [DATABASE]</title>
                  <para>Database to use. Agent/database specific.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>Options [OPTIONS]</title>
                  <para>Database connect options. Agent/database specific.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>UserName [UID]</title>
                  <para>Username to connect as.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>Password [PWD]</title>
                  <para>Password for user.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>ReadOnly [READONLY]</title>
                  <para>Specify Y(es) for read-only (ro) or N(o) for read-write (rw) 
   connections. Read only connections are sometimes faster, but can never 
   modify any database.</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>FetchBufferSize [FBS]</title>
                  <para>Number of rows (records) to be fetched per call from database agent.  
   Values range from 1 to 99</para>
                </formalpara>
              </listitem>
              <listitem>
                <formalpara>
                  <title>Persist</title>
                  <para>Controls whether the Zero Config DSN should be persisted on the client 
   when select. If set to Yes/Y/T then it will, and if for set to No/N/F then it will only 
   be used at connect time and not stored in the client which may be deemed a 
   securty breach.</para>
                </formalpara>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="mt_zeroconfwiz">
        <title>Configuration by Wizard</title>
        <para>The OpenLink Universal Data Access Admin Assistant provides a 
  graphical remote access interface to the server settings such as those found 
  in the Rule Book.  This interface has been extended to support configuration of 
  the ZeroConf settings in the Server Component Administration Section, called Zero 
  Config Administration.</para>
        <para>The Zero Config Administration pages are very much like Client 
  Data Source configuration pages, they have the same layout and descriptions as 
  they are essentially data sources stored on the server.</para>
        <para>To make a new Zero Configuration entry, follow this sequence:</para>
        <orderedlist>
          <listitem>
            <para>From the Server Components Administration menu, chose the
  Zero Config Administration sub menu, and then Zero Config Administration by Wizard.
  A list of current confirguations is shown:</para>
            <figure xml:id="mt_zerowiz01" floatstyle="normal">
              <title>Zero Config by Wizard - Admin Assistant Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="zerowiz01.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Press the Add button. Enter a suitable name for the configuration:</para>
            <figure xml:id="mt_zerowiz02" floatstyle="normal">
              <title>Zero Config by Wizard - Admin Assistant Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="zerowiz02.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter the database details. The parameters are identical to those
  in the <link linkend="mt_WizardBasedDSNs">ODBC DSN configuration wizard</link>.</para>
            <para>For each parameter you wish to configure, you need
  to enable it by checking the box on the left side.
  Each field is disabled until the check box is marked.</para>
            <figure xml:id="mt_zerowiz03" floatstyle="normal">
              <title>Zero Config by Wizard - Admin Assistant Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="zerowiz03.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter the additional connection parameters. In same way as previous
  page, each parameter
  field needs to be enabled by the check mark on the left side.</para>
            <figure xml:id="mt_zerowiz04" floatstyle="normal">
              <title>Zero Config by Wizard - Admin Assistant Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="zerowiz04.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>The complete configuration parameters are now shown:</para>
            <figure xml:id="mt_zerowiz05" floatstyle="normal">
              <title>Zero Config by Wizard - Admin Assistant Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="zerowiz05.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>The Zero Config entry now appears in the list:</para>
            <figure xml:id="mt_zerowiz07" floatstyle="normal">
              <title>Zero Config by Wizard - Admin Assistant Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="zerowiz07.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_zeroconfform">
        <title>Configuration by Form</title>
        <para>From the Server Components Administration menu, chose the
  Zero Config Administration sub menu, and then Zero Config Administration by Form.
The list of current configurations is shown. Chose one to edit or delete,
or select "add" to make a new configuration.</para>
        <figure xml:id="mt_zeroform01" floatstyle="normal">
          <title>Zero Config by Forms - Admin Assistant Configuration</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="zeroform01.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The parameters required in the form are the same as those detailed in the
  previous section on Rule Book Configuration.
  The Host and Port fields are not available since this information is 
  supplied by the Request Broker hosting the service.</para>
      </section>
    </section>
    <section xml:id="mt_zeroclientconf">
      <title>Client Configuration</title>
      <info>
        <keywordset>
          <keyword>Zero Configuration Client Configuration</keyword>
          <keyword>Client Configuration</keyword>
          <keyword>Zero Config</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_zeroclientdm">
        <title>Configuration by Windows ODBC Driver Manager</title>
        <para>During the configuration of a DSN in the Windows ODBC Driver Manager
  the Server field offers a drop down list of available Zero Config
  servers:</para>
        <figure xml:id="mt_odbccl5b" floatstyle="normal">
          <title>Windows ODBC Configuration</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="odbccl5.gif"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="mt_zeroclientaa">
        <title>Configuration by Admin Assistant</title>
        <para>During the configuration of a DSN in the Admin Assistant
  it is currently not possible to discover the Zero Config entries.
  However on Windows it is possible to put the name of a
  Zero Config entry in the Server field.</para>
        <figure xml:id="mt_zerowiz10" floatstyle="normal">
          <title>Windows Zero Config DSN Configuration</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="zerowiz10.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
    </section>
  </chapter>

  <!--
  $Id: JDBCClientClasses.xml,v 1.2 2004/11/09 21:49:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_JDBCClientClasses">
    <title>JDBC Components</title>
    <info>
      <abstract>
        <para>Guide for successfully installing and running the OpenLink JDBC Client
  Classes.</para>
        <para>The OpenLink Drivers for JDBC enable the development, deployment, and
  utilization of database independent Java Applications, Applets, Servlets,
  and Bean Components (collectively called JDBC Clients) that conform to the
  JDBC 1.1.x, or JDBC 2.0.x specifications from JavaSoft.</para>
        <para>JDBC clients are built by importing the "java.sql.*"
  collection of classes known as the JDBC Driver Manager interface.  The JDBC
  Driver Manager uses JDBC URLs to link JDBC clients with JDBC Drivers.  It is
  important to note that JDBC URLs are JDBC Driver specific. Detailed
  information regarding JDBC is available from:
  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://java.sun.com/products/jdbc/index.html">java.sun.com</link>.</para>
      </abstract>
      <keywordset>
        <keyword>JDBC</keyword>
        <keyword>JDBC Driver</keyword>
        <keyword>JDBC Drivers</keyword>
        <keyword>Client Classes</keyword>
        <keyword>JDBC Client</keyword>
        <keyword>JDBC Client Classes</keyword>
        <keyword>Type 1</keyword>
        <keyword>Type 2</keyword>
        <keyword>Type 3</keyword>
        <keyword>Type 4</keyword>
        <keyword>Thin</keyword>
        <keyword>Lite</keyword>
      </keywordset>
    </info>

    <!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
    <section xml:id="mt_opljava">
      <title>OpenLink JDBC Drivers</title>
      <section xml:id="mt_New_Features_Summary">
        <title>New JDBC Driver Packages</title>
        <para>OpenLink now has a broader range of JDBC Driver types which also
transcend JDBC versions.</para>
        <para>The drivers are now categorized as follows:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Generic Drivers for JDBC 1.1.x (compatible with Java
Virtual Machine version 1.1.x)</para>
          </listitem>
          <listitem>
            <para>Generic Drivers for JDBC 2.0 (compatible with Java
Virtual Machine version 1.2 &amp; 1.3)</para>
          </listitem>
          <listitem>
            <para>Generic Drivers for JDBC 3.0 (compatible with Java
Virtual Machine version 1.4)</para>
          </listitem>
          <listitem>
            <para>Megathin Drivers for JDBC 1.1.x (compatible with
Java Virtual Machine version 1.1.x)</para>
          </listitem>
          <listitem>
            <para>Megathin Drivers for JDBC 2.0 (compatible with
Java Virtual Machine version 1.2 &amp; 1.3)</para>
          </listitem>
          <listitem>
            <para>Megathin Drivers for JDBC 3.0 (compatible with
Java Virtual Machine version 1.4)</para>
          </listitem>
        </itemizedlist>
        <para>The following table depicts how each of these drivers is packaged, what
JDBC Driver formats are supported, and whether they are certified 100% Pure
Java or Not:</para>
        <table>
          <title/>
          <tgroup cols="1">
            <thead>
              <row>
                <entry>
                  <para>Product Name</para>
                </entry>
                <entry>
                  <para>Java Package</para>
                </entry>
                <entry>
                  <para>JDBC Driver Name</para>
                </entry>
                <entry>
                  <para>JDBC Driver Formats </para>
                </entry>
                <entry>
                  <para>100% Pure Java ?</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Generic Drivers for JDBC 1.1.x</para>
                </entry>
                <entry>
                  <para>opljdbc.jar</para>
                </entry>
                <entry>
                  <para>openlink.jdbc.Driver</para>
                </entry>
                <entry>
                  <para>1,3</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Generic  Drivers for JDBC 2.0</para>
                </entry>
                <entry>
                  <para>opljdbc2.jar</para>
                </entry>
                <entry>
                  <para>openlink.jdbc2.Driver</para>
                </entry>
                <entry>
                  <para>1,3</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Generic  Drivers for JDBC 3.0</para>
                </entry>
                <entry>
                  <para>opljdbc3.jar</para>
                </entry>
                <entry>
                  <para>openlink.jdbc3.Driver</para>
                </entry>
                <entry>
                  <para>1,3</para>
                </entry>
                <entry>
                  <para>N</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Megathin Drivers for JDBC 1.1.x</para>
                </entry>
                <entry>
                  <para>megathin.jar</para>
                </entry>
                <entry>
                  <para>openlink.jdbc.Driver</para>
                </entry>
                <entry>
                  <para>3</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Megathin Drivers for JDBC 2.0</para>
                </entry>
                <entry>
                  <para>megathin2.jar</para>
                </entry>
                <entry>
                  <para>openlink.jdbc2.Driver</para>
                </entry>
                <entry>
                  <para>3</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Megathin Drivers for JDBC 3.0</para>
                </entry>
                <entry>
                  <para>megathin3.jar</para>
                </entry>
                <entry>
                  <para>openlink.jdbc3.Driver</para>
                </entry>
                <entry>
                  <para>3</para>
                </entry>
                <entry>
                  <para>Y</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_newfeat">
        <title>New Features &amp; Enhancements</title>
        <orderedlist>
          <listitem>
            <formalpara>
              <title>Unicode Support</title>
              <para>The OpenLink JDBC client is fully Unicode aware.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>Enhanced Communications Layer</title>
              <para>Prior to Release 4.1, the JDBC driver sent preformed database metadata calls in
a manner considered to be redundant prior to SELECT statements. With this new release, each
SELECT statement only sends and receives TCP packets associated with these metadata calls one
time prior to execution.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>Connection Pooling Support</title>
              <para>The JDBC driver now supports connection pooling as defined in the
JDBC 3.0 specification.</para>
            </formalpara>
          </listitem>
          <listitem>
            <para>
              <bridgehead>Scrollable Cursors</bridgehead>
            </para>
            <para>A new OpenLink RowSet class enables JDBC applications to take advantage of ODBC-style scrollable cursors functionality, with the ability to: retrieve rowsets, go to any row in the resultset or rowset, add new rows to the database, refresh and update any row with a single method invocation, lock and unlock any row, retrieve the current row number, as well as use ODBC-style bookmarks. This is an OpenLink extension to JDBC.</para>
            <para>
The Drivers for JDBC 2.0 implement the Scrollable Cursor Interfaces introduced in JDBC 2.0. They also retain support for the OpenLink Scrollable Cursor extension so as to provide access to those Scrollable Cursor features that exist in ODBC but are missing from the JDBC 2.0 specification.</para>
          </listitem>
          <listitem>
            <para>
              <bridgehead>Array Binding</bridgehead>
            </para>
            <para>As part of the new RowSet class. It is now possible to bind data arrays to the columns of the OpenLink RowSet object, and retrieve the data directly into the arrays with a single invocation of the RowSet.next() method. Please see the accompanying demonstration application for an example of its usage.</para>
            <para>
This approach enables you to retrieve multiple records with a reduced number of
calls to the RowSet.next() method. It basically improves JDBC Application
performance.</para>
          </listitem>
          <listitem>
            <para>
              <bridgehead>openlink.sql.Statement</bridgehead>
            </para>
            <para>This is a new OpenLink interface that extends java.sql.Statement to
provide additional methods for configuring the ODBC-Style Scrollable Cursors
functionality.</para>
            <para>
You only need this functionality when working with the OpenLink Scrollable
Cursor extensions. The Drivers for JDBC 2.0 implement similar features for the
JDBC 2.0 Scrollable Cursor specification.</para>
          </listitem>
          <listitem>
            <formalpara>
              <title>Security</title>
              <para>The OpenLink client and server components for JDBC encrypt the
data sent across the network between the client and server. This provides for
enhanced security, particularly over a WAN. This is transparent to the
application, and there are no driver specific properties for the application
to set.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>Version self-checking</title>
              <para>The OpenLink client component for JDBC now cross checks version
numbers with the server Agent for JDBC at connect time, this ensures that
compatible components always in use. An exception will be thrown when
incompatibilities are encountered, this exception will also contain information
about the component versions relating to the exception.</para>
            </formalpara>
          </listitem>
          <listitem>
            <para>
              <bridgehead>Easier Client Version checking</bridgehead>
            </para>
            <para>There is now an easier way of checking the OpenLink client for JDBC
version. Make sure that the driver is in the classpath and then at
your command prompt enter the command:</para>
            <programlisting><![CDATA[java openlink.jdbc.Driver]]></programlisting>
            <para>(for JDK 1.x Drivers)</para>
            <para>or</para>
            <programlisting><![CDATA[java openlink.jdbc2.Driver]]></programlisting>
            <para>(for JDK 1.2 or 1.3/2.0 Drivers)</para>
            <para>or</para>
            <programlisting><![CDATA[java openlink.jdbc3.Driver]]></programlisting>
            <para>(for JDK 1.4/3.0 Drivers)</para>
            <para>or</para>
            <programlisting><![CDATA[java openlink.jdbc.Driver]]></programlisting>
            <para>(for 100% Pure Java Drivers for JDK 1.x)</para>
            <para>or</para>
            <programlisting><![CDATA[java openlink.jdbc2.Driver]]></programlisting>
            <para>(for 100% Pure Java Drivers for JDK 1.2 or 1.32.0)</para>
            <para>or</para>
            <programlisting><![CDATA[java openlink.jdbc3.Driver]]></programlisting>
            <para>(for 100% Pure Java Drivers for JDK 1.4/3.0)</para>
            <para>The driver will respond with appropriate version and release number
information.</para>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
    <section xml:id="mt_downloading">
      <title>Downloading Driver Software</title>
      <para>The OpenLink Drivers for JDBC are packaged either as a bundle alongside the other OpenLink
    data access drivers (ODBC and OLE-DB) that make up the OpenLink Universal Data
    Access Driver Suite or as a separate release archive which contains only the OpenLink
    Megathin Drivers for JDBC.</para>
      <para>The Megathin Driver for JDBC is a 100% pure Type 3 Network enabled Java Driver.</para>
      <para>If you are not installing these Drivers from a CD you would have to visit the OpenLink Web Site's
    download page, http://www.openlinksw.com, to obtain these Drivers.</para>
      <para>The screen shots that follow depict the OpenLink download
    wizard interaction that is required in order to download either the JDBC Driver bundle or
    the standalone Megathin Drivers.</para>
      <section xml:id="mt_downwizintjbundle">
        <title>OpenLink Web Download Wizard Interaction for obtaining OpenLink Drivers for JDBC Bundle</title>
        <orderedlist>
          <listitem>
            <para>Select a Client Operating System from the "Select
        Client Operating System" listbox and then select a database engine that you will be
        connecting to via your Driver for JDBC using the "Select Database" listbox.</para>
            <figure xml:id="mt_fg-jcc001" floatstyle="normal">
              <title>Client OS</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls01.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Pick one or more server components matching the server
        operating system that will host the OpenLink Server components required by the Drivers for
        JDBC. Then click on the "Download Selected Software" button.</para>
            <figure xml:id="mt_fg-jcc002" floatstyle="normal">
              <title>Client OS</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls02.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Download all the software components presented in the
        "Software Download" page.</para>
            <figure xml:id="mt_fg-jcc003" floatstyle="normal">
              <title>Software Download</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls03.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_downwizjmthin">
        <title>Download Wizard Interaction for obtaining OpenLink Megathin Drivers for JDBC</title>
        <orderedlist>
          <listitem>
            <para>Select a Java Virtual Machine version from the
        "Select Client Operating System" listbox and then select a database engine that
        you will be connecting to via your Driver for JDBC using the "Select Database"
        listbox.</para>
            <figure xml:id="mt_fg-jcc004" floatstyle="normal">
              <title>Software Download</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls04.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Pick one or more server components matching the server
        operating system that will host the OpenLink Server components required by the Drivers for
        JDBC.  Then click on the "Download Selected Software" button.</para>
            <figure xml:id="mt_fg-jcc005" floatstyle="normal">
              <title>Software Download</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls05.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Download all the software components presented in the
        "Software Download" page.</para>
            <figure xml:id="mt_fg-jcc006" floatstyle="normal">
              <title>Software Download</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls06.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
    </section>

    <!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
    <section xml:id="mt_InstallConfig">
      <title>OpenLink Drivers for JDBC Installation &amp; Configuration</title>
      <para>Once you have downloaded your OpenLink drivers for
    JDBC using the instructions provided above, the next step in the process is the actual
    configuration of these drivers for use within your operating environment.</para>
      <para>Java is operating system independent by virtue of
    its core philosophy, but JDBC Drivers may or may not be operating system independent as
    this is JDBC Driver format and implementation specific. The sections that follow walk your
    through the OpenLink Driver for JDBC installation and configuration process.</para>
      <section xml:id="mt_WIN32LocalClientServer">
        <title>Windows 95/98/NT/2000 Based Local Client-Server Environment</title>
        <para>In this scenario your Windows machine is acting as the host
    machine for both your OpenLink client and server components, implying that you are going
    to install your OpenLink Client and Server components for JDBC on the same machine.</para>
        <para>Installation Process</para>
        <orderedlist>
          <listitem>
            <para>Download appropriate driver software
        installation archive using the instructions provided in the section that covers
        interaction with the OpenLink Software Download Wizard.</para>
          </listitem>
          <listitem>
            <para>As Windows 95/98/NT/2000 is playing the dual role of both
        Client and Server machine for your OpenLink components, you would have downloaded a ZIP
        archive that contains both the OpenLink Client &amp; Server components for this platform.
        Extract the contents of this ZIP archive to a temporary installation folder and then run
        the "Setup.exe" program</para>
          </listitem>
          <listitem>
            <para>The archive you have downloaded will contain the entire
        suite of Data Access Drivers for this platform. If you do not require the OpenLink ODBC or
        OLE-DB Drivers simply uncheck these components using the installers component list dialog
        when presented during the install process.</para>
          </listitem>
          <listitem>
            <para>The installer will automatically determine what version of
        the Java Virtual Machine is installed on your machine and then automatically checks which
        OpenLink Drivers for JDBC java classes should be checked for installation by default. You
        can override this settings during the installation process so as to match your specific
        requirements should they differ from those derived by the installer. </para>
          </listitem>
          <listitem>
            <para>The installer will also add the OpenLink Driver for JDBC
        class files that you have selected in step 3 to the CLASSPATH environment variable on your
        system</para>
          </listitem>
          <listitem>
            <para>Reboot your system.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
            <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Generic Driver for JDBC 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Generic Driver for JDBC 1.2.x or 2.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Generic Driver for JDBC 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDBC 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDBC 1.2.x or 2.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDBC 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
            <para>http://localhost:8000/</para>
            <para>If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
ingii_sv --help   (this will verify the Ingres II Database Agent)
db2_sv --help     (this will verify the IBM DB2 Database Agent)]]></programlisting>
            <para>
        See the detailed section about <!-- href="../unix/agntspec.htm" -->

OpenLink Database Agents
        for additional information.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_WIN32ClientServer">
        <title>Windows 95/98/NT/2000 Based Client-Server (2-Tier Configuration) Environment</title>
        <para>In this scenario one or more Windows machines act
    as the host machine for your OpenLink client components, while a separate Windows server
    machine hosts your OpenLink server components. This Windows server machine also hosts the
    database engine that you will be connecting to via JDBC, this machine is typically
    referred to as your Database Server machine.</para>
        <section xml:id="mt_clicomponent">
          <title>Client Components Installation</title>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        driver software using the instructions provided in the section that covers interaction
        with the OpenLink Software Download Wizard on to your designated client machine</para>
            </listitem>
            <listitem>
              <para>As Windows 95/98/NT/2000 is playing the single role of
        Client  machine for your OpenLink Drivers for JDBC, you would have downloaded a ZIP
        archive that contains only the OpenLink Client components. Extract the contents of this
        ZIP archive to a temporary installation folder and then run the "Setup.exe"
        program</para>
            </listitem>
            <listitem>
              <para>The archive you have downloaded will contain the entire
        suite of Data Access Drivers for this platform. If you do not require the OpenLink ODBC or
        OLE-DB Drivers simply uncheck these components using the installers component list dialog
        when presented during the install process</para>
            </listitem>
            <listitem>
              <para>The installer will automatically determine what version of
        the Java Virtual Machine is installed on your machine and then automatically checks which
        OpenLink Drivers for JDBC java classes should be checked for installation by default. You
        can override this settings during the installation process so as to match your specific
        requirements should they differ from those derived by the installer</para>
            </listitem>
            <listitem>
              <para>The installer will also add the OpenLink Driver for JDBC
        class files that you have selected in step 3 to the CLASSPATH environment variable on your
        system</para>
            </listitem>
            <listitem>
              <para>Reboot your system</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>JDBC Driver Version Commands</title>
                <tgroup align="char" charoff="50" char="." cols="2">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>OpenLink Driver for JDBC Type</entry>
                      <entry>Verification Command</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>Generic Driver for JDBC 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDBC 1.2.x or 2.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDBC 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDBC 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDBC 1.2.x or 2.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDBC 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
              <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_srvcomponent">
          <title>Server Components Installation</title>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        server components software using the instructions provided in the section that covers
        interaction with the OpenLink Software Download Wizard on to your designated server machine</para>
            </listitem>
            <listitem>
              <para>As Windows 95/98/NT/2000 is playing the single role of
        Server machine for your OpenLink Drivers for JDBC, you would have downloaded a ZIP archive
        that contains only the OpenLink Server components. Extract the contents of this ZIP
        archive to a temporary installation folder and then run the "Setup.exe" program</para>
            </listitem>
            <listitem>
              <para>The archive you have downloaded will contain both OpenLink
        client and Server components for this platform. Since you are setting up a Server machine
        simply uncheck the OpenLink Client components (ODBC, JDBC, OLE-DB) using the installers
        component list dialog when presented during the install process, this ensures that you
        only install OpenLink Server components on your Server machine(s)</para>
            </listitem>
            <listitem>
              <para>If you are an existing OpenLink user please ensure that
        you do not have an OpenLink Request Broker process running (check your services control panel item),
        if there is a Request Broker process running please shut it down at this point</para>
            </listitem>
            <listitem>
              <para>Run the "setup.exe" program</para>
            </listitem>
            <listitem>
              <para>Start the OpenLink Request Broker, you this by either
        going into your "Services" control panel (for Windows NT) or to the
        "OpenLink Data Access Drivers" Windows Start Menu, and then click on the "Broker Startup"
        menu item</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session from either your OpenLink Client or Server
        machine and then enter one of the following URLs:</para>
              <para>From Client Machine:</para>
              <programlisting><![CDATA[http://<server name or IP address>:8000]]></programlisting>
              <para>From Server Machine:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.
            </para>
            </listitem>
            <listitem>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ingii_sv --help   (this will verify the Ingres II Database Agent)
db2_sv --help     (this will verify the IBM DB2 Database Agent)]]></programlisting>
              <para>
        See the detailed section about OpenLink Database Agents
        for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_WIN32AppServer">
        <title>Windows 95/98/NT/2000 Based Application-Server (3-Tier Configuration) Environment</title>
        <para>In this scenario your OpenLink Client and Server
    components for JDBC are installed on an Application Server, as this is where your JDBC
    based application will be hosted and developed (if you are building a JDBC based
    3-Tier solution). Thus, the installation process is broken down into two parts,
    Application Server, and Database Server components installation. You will not need to
    install any software on the client machines being used by your JDBC solutions end-users.
    Application Server Components Installation </para>
        <orderedlist>
          <listitem>
            <para>Download appropriate
        server components software using the instructions provided in the section that covers
        interaction with the OpenLink Software Download Wizard on to your designated server machine</para>
          </listitem>
          <listitem>
            <para>As this machine needs to host both Client and Server
        components (by virtue of this machine playing the role of Application Server), you would
        have downloaded a ZIP archive that contains both the OpenLink Client &amp; Server
        components for this platform. Extract the contents of this ZIP archive to a temporary
        installation folder and then run the "Setup.exe" program</para>
          </listitem>
          <listitem>
            <para>The archive you have downloaded will contain the entire
        suite of Data Access Drivers for this platform. If you do not require the OpenLink ODBC or
        OLE-DB Drivers simply uncheck these components using the installers component list dialog
        when presented during the install process.</para>
          </listitem>
          <listitem>
            <para>If you choose to use OpenLink's Database Independent
        Networking to connect to remote database engines hosted on one or more dedicated Database
        Server machine, then ensure that an OpenLink Database Agent checkbox for each Database
        Engine type is checked from the component list presented by the installer. If on the other
        hand you choose to use Database Specific Networking provided by your database vendor(s)
        when connecting to your remote Database Engine(s) hosted on your dedicated Database Server
        machines, then  simply leave all the OpenLink Database Agent checkboxes unchecked. </para>
            <para>SQL*Net, Open Client, Progress Client. I-Connect, Ingres Net, and Netlib are database
        specific networking products for Oracle, Sybase, Progress, Informix, Ingres, and Microsoft
        SQL Server respectively.</para>
          </listitem>
          <listitem>
            <para>The installer will automatically determine what version of
        the Java Virtual Machine is installed on your machine and then automatically checks which
        OpenLink Drivers for JDBC java classes should be checked for installation by default. You
        can override this settings during the installation process so as to match your specific
        requirements should they differ from those derived by the installer</para>
          </listitem>
          <listitem>
            <para>The installer will also add the OpenLink Driver for JDBC
        class files that you have selected in step 3 to the CLASSPATH environment variable on your
        system</para>
          </listitem>
          <listitem>
            <para>Reboot your system </para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
            <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Generic Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Generic Driver for JDK 1.2.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Generic Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Generic Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session from either your OpenLink Client or Server
        machine and then enter one of the following URLs:</para>
            <para>From Client Machine:</para>
            <programlisting><![CDATA[http://<server name or IP address>:8000]]></programlisting>
            <para>From Server Machine:</para>
            <programlisting><![CDATA[http://localhost:8000]]></programlisting>
            <para>If you are presented with the Home Page of the "OpenLink Admin Assistant" then
        this confirms that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>If you are going to be connecting to your remote database
        servers using database specific networking provided by one or more database vendors then
        you need to perform an additional check to ensure that your database agents have been
        installed properly. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
ingii_sv --help   (this will verify the Ingres II Database Agent)
db2_sv --help     (this will verify the IBM DB2 Database Agent)]]></programlisting>
            <para>See the detailed section about OpenLink Database Agents
        for additional information.</para>
          </listitem>
        </orderedlist>
        <section xml:id="mt_dbsrvcomponent">
          <title>Database Server Components Installation </title>
          <para>This step is only required if your are connecting your
    Application Server components installed in the prior section to a remote database engine
    hosted on a dedicated Database Server machine using OpenLink's Database Independent
    Networking.</para>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        server components software using the instructions provided in the section that covers
        interaction with the OpenLink Software Download Wizard on to your designated server machine</para>
            </listitem>
            <listitem>
              <para>As Windows 95/98/NT/2000 is playing the single role of a
        dedicated Database Server machine for your OpenLink Application Server components for
        JDBC, you would have downloaded a ZIP archive that contains only the OpenLink Server
        components. Extract the contents of this ZIP archive to a temporary installation folder
        and then run the "Setup.exe" program</para>
            </listitem>
            <listitem>
              <para>The archive you have downloaded will contain both OpenLink
        client and Server components for this platform. Since you are setting up a Server machine
        simply uncheck the OpenLink Client components (ODBC, JDBC, OLE-DB) using the installers
        component list dialog when presented during the install process, this ensures that you
        only install OpenLink Server components on your Server machine(s)</para>
            </listitem>
            <listitem>
              <para>Ensure that an OpenLink Database Agent checkbox for each
        Database Engine type is checked from the component list presented by the installer.
        Uncheck all JDBC component related checkboxes unless you anticipate using this dedicated
        Database Server as an Application Server at a later date.</para>
            </listitem>
            <listitem>
              <para>If you are an existing OpenLink user please ensure that
        you do not have an OpenLink Request Broker process running (check your services control
        panel item), if there is a Request Broker process running please shut it down at this
        point</para>
            </listitem>
            <listitem>
              <para>Run the "setup.exe" program</para>
            </listitem>
            <listitem>
              <para>Start the OpenLink Request Broker, you do this by either
        going into your "Services" control panel (for Windows NT) or to the
        "OpenLink Data Access Drivers" Windows Start Menu, and then click on the
        "Broker Startup" menu item</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Database server components
        installation by starting a Web Browser session from either your OpenLink Client,
        Application or Server machine and then enter one of the following URLs:</para>
              <para>From Client or Application Server Machine:</para>
              <programlisting><![CDATA[http://<server name or IP address>:8000]]></programlisting>
              <para>From Database Server Machine:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>If you are presented with the Home Page of the "OpenLink Admin Assistant" then
        this confirms that your OpenLink Server environment is also correctly setup.</para>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ora8_sv --help    (this will verify the Oracle Database Agent)
db2_sv --help     (this will verify the IBM DB2 Database Agent)]]></programlisting>
              <para>See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_UNIXLocalClientServer">
          <title>Linux or UNIX Based Local Client-Server Configuration</title>
          <para>In this scenario your Linux or UNIX machine is acting as
    the host machine for both your OpenLink client and server components, implying that you
    are going to install your OpenLink Client and Server components for JDBC on the same
    machine.</para>
          <para>Installation Process</para>
          <orderedlist>
            <listitem>
              <para>Download appropriate driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard.
        Ensure that you hatched a checkbox for each Database Engine type that you will be connecting to via JDBC.</para>
            </listitem>
            <listitem>
              <para>Move the Request Broker and Database Agent archives into a
        temporary installation folder on your Linux or UNIX machine then run the following
        command from the command line prompt:</para>

              <!--
        <para>Linux:</para>
        <programlisting>rpm -ivh openlink-4.0-2.rpm</programlisting>
        <programlisting>rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm</programlisting>
        <para>(for glibc2 based Linux Environments) or</para>
        <programlisting>rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm</programlisting>
         <para>(for libc5 based Linux Environments) </para>
        <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
 -->
              <programlisting><![CDATA[sh install.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Follow the instructions presented by the installer for
        configuring your OpenLink Database Agents.





<!-- , if you installed via a Linux RPM archive, post
        RPM installation you will need to run the &quot;oplcfg&quot;  located in the
        &quot;openlink/bin&quot; sub-directory of your OpenLink base installation directory
 -->

                        </para>
            </listitem>
            <listitem>
              <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation's base installation directory.
        This files contains the following entries which you can modify so as to match the OpenLink
        Drivers for JDBC to the appropriate  Java environment on your machine:</para>
              <programlisting><![CDATA[
CLASSPATH=$CLASSPATH:/dbs/openlink/v40/openlink/jdk1.1.x/opljdbc.jar
#CLASSPATH=$CLASSPATH:/dbs/openlink/v40/openlink/jdk1.2.x/opljdbc2.zip
]]></programlisting>
            </listitem>
            <listitem>
              <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your .profile file) by executing the following command from
        your Linux or UNIX command line prompt:</para>
              <programlisting><![CDATA[. openlink.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>JDBC Driver Version Commands</title>
                <tgroup align="char" charoff="50" char="." cols="2">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>OpenLink Driver for JDBC Type</entry>
                      <entry>Verification Command</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>Generic Driver for JDK 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.2.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.4.x</entry>
                      <entry>java openlink.jdbc3.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.2.x </entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.4.x</entry>
                      <entry>java openlink.jdbc3.Driver</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
              <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>or</para>
              <programlisting><![CDATA[http://<hostname of current machine>:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
            </listitem>
            <listitem>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ora8_sv --help   (this will verify the Oracle Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_UNIXClientServer">
          <title>Linux or UNIX Based Client-Server (2-Tier Configuration) Installation</title>
          <para>In this scenario one or more Linux or UNIX machines act as
    the host machine for your OpenLink client components, while a separate Linux or UNIX
    server machine hosts your OpenLink server components. This Linux or UNIX server machine
    also hosts the database engine that you will be connecting to via JDBC, this machine is
    typically referred to as your Database Server machine.</para>
          <para>Client Components Installation</para>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard</para>
            </listitem>
            <listitem>
              <para>Although Linux or UNIX is only playing role of both Client
        machine for your OpenLink components, you still need to download a
        compressed TAR archive containing the OpenLink Request Broker (the download page
        clearly identifies this archive), this contains both the OpenLink Request Broker and the
        OpenLink Driver for JDBC components. Move this archive to a temporary installation folder
        and then run the following installation program:</para>

              <!--
        <para>Linux:</para>
        <programlisting>rpm -ivh openlink-4.0-2.rpm</programlisting>
        <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
 -->
              <programlisting><![CDATA[sh install.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation base installation directory.
        This files contains the following entry which you can modify so as to match the OpenLink
        Drivers for JDBC to the appropriate  Java environment on your machine:</para>
              <programlisting><![CDATA[
CLASSPATH=$CLASSPATH:/dbs/openlink/v40/openlink/jdk1.1.x/opljdbc.jar
#CLASSPATH=$CLASSPATH:/dbs/openlink/v40/openlink/jdk1.2.x/opljdbc2.zip]]></programlisting>
            </listitem>
            <listitem>
              <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your .profile file) by executing the following command from
        your Linux or UNIX command line prompt:</para>
              <programlisting><![CDATA[. openlink.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>JDBC Driver Version Commands</title>
                <tgroup align="char" charoff="50" char="." cols="2">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>OpenLink Driver for JDBC Type</entry>
                      <entry>Verification Command</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>Generic Driver for JDK 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.2.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.4.x</entry>
                      <entry>java openlink.jdbc3.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.2.x </entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.4.x</entry>
                      <entry>java openlink.jdbc3.Driver</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
              <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>or</para>
              <programlisting><![CDATA[http://<hostname of current machine>:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
            </listitem>
            <listitem>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ora80_sv --help  (this will verify the Oracle Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
          <para>Database Server Components Installation</para>
          <para>Only perform these steps if you are connecting to database
    engines hosted on your dedicated Database Server using OpenLink's Database Independent
    Networking:</para>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        server components installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard.
        Ensure that you hatched a checkbox for each Database Engine type that
        you will be connecting to via JDBC. </para>
            </listitem>
            <listitem>
              <para>Move the Request Broker and Database Agent archives into a
        temporary installation folder on your Database Server machine then run the following
        command from the command line prompt:</para>

              <!--
        <para>Linux:</para>
        <programlisting>rpm -ivh openlink-4.0-2.rpm</programlisting>
        <programlisting>rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm</programlisting>
        <para>(for glibc2 based Linux Environments) or</para>
        <programlisting>rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm</programlisting>
          <para>(for libc5 based Linux Environments)</para>
        <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
 -->
              <programlisting><![CDATA[sh install.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Follow the instructions presented by the installer for
        configuring your OpenLink Database Agents</para>
            </listitem>
            <listitem>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ora80_sv --help  (this will verify the Oracle Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_UNIXAppServer">
          <title>Linux or UNIXBased Application-Server (3-Tier Configuration) Installation</title>
          <para>In this scenario your OpenLink Client machine plays the role of an Application Server,
    as this is where your JDBC based application will be hosted
    and  developed (if you are building a 3-Tier JDBC solution). Thus, the installation
    process is broken down into two parts, Application Server, and Database Server components
    installation. You will not need to install any software on the machines being used by your
    JDBC solution's end-users.</para>
          <para>Application Server Components Installation</para>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard.
        Ensure that you hatched a checkbox for each Database Engine type that
        you will be connecting to via JDBC.</para>
            </listitem>
            <listitem>
              <para>Although Linux or UNIX is only playing role of Client
        machine for your OpenLink components, you still need to download Linux RPMs or
        a UNIX compressed TAR archives containing the OpenLink Request Broker and the Database
        Agents for each database engine that you will be connecting to via JDBC (the download page
        clearly identifies these archives).</para>
            </listitem>
            <listitem>
              <para>Move the Request Broker and this archive to a temporary
        installation folder, if you choose to use OpenLink's Database Independent Networking to
        connect to remote database engines hosted on one or more dedicated Database Server
        machines, do not move the  Database Agent archives into the temporary installation
        directory on the Application Server. Run the following installation programs from the
        temporary installation directory on your Application Server machine:</para>
              <para>Linux:</para>
              <programlisting><![CDATA[rpm -ivh openlink-4.0-2.rpm]]></programlisting>
              <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
              <programlisting><![CDATA[sh install.sh]]></programlisting>
              <para>Linux:</para>
              <programlisting><![CDATA[
        rpm -ivh openlink-4.0-2.rpm]]></programlisting>
              <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
              <programlisting><![CDATA[sh install.sh]]></programlisting>
              <para>
        * Ignore the Database Agent configuration menu when presented to you by the installer. *</para>
              <para>
        If on the other hand you choose to use Database Specific Networking provided by your
        database vendor(s) when connecting to your remote Database Engine(s) hosted on your
        dedicated Database Server machines, then then move each Database Agent archive into a
        temporary installation directory alongside the Request Broker archive and then run the
        following installation programs:</para>
              <para>Linux:</para>
              <programlisting><![CDATA[rpm -ivh openlink-4.0-2.rpm]]></programlisting>
              <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm]]></programlisting>
              <para>(for glibc2 based Linux Environments) or</para>
              <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm]]></programlisting>
              <para> (for libc5 based Linux Environments)</para>
              <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
              <programlisting><![CDATA[sh install.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation base installation directory.
        This files contains the following entry which you can modify so as to match the OpenLink
        Drivers for JDBC to the appropriate  Java environment on your machine:</para>
              <programlisting><![CDATA[
CLASSPATH=$CLASSPATH:/dbs/openlink/v40/openlink/jdk1.1.x/opljdbc.jar
#CLASSPATH=$CLASSPATH:/dbs/openlink/v40/openlink/jdk1.2.x/opljdbc2.zip]]></programlisting>
            </listitem>
            <listitem>
              <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your .profile file) by executing the following command from
        your Linux or UNIX command line prompt:</para>
              <programlisting><![CDATA[
        . openlink.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>JDBC Driver Version Commands</title>
                <tgroup align="char" charoff="50" char="." cols="2">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>OpenLink Driver for JDBC Type</entry>
                      <entry>Verification Command</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>Generic Driver for JDK 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.2.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Generic Driver for JDK 1.4.x</entry>
                      <entry>java openlink.jdbc3.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.1.x</entry>
                      <entry>java openlink.jdbc.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.2.x </entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.3.x</entry>
                      <entry>java openlink.jdbc2.Driver</entry>
                    </row>
                    <row>
                      <entry>Megathin Driver for JDK 1.4.x</entry>
                      <entry>java openlink.jdbc3.Driver</entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
              <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
              <programlisting><![CDATA[
        http://localhost:8000 or http://<hostname of current machine>:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Database server components
        installation by starting a Web Browser session from either your OpenLink Client,
        Application or Server machine and then enter one of the following URLs:</para>
              <para>From Client Machine:</para>
              <programlisting><![CDATA[http://<server name or IP address>:8000]]></programlisting>
              <para>From Database Server Machine:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the "OpenLink Admin Assistant" then
        this confirms that your OpenLink Server environment is also correctly setup.</para>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ora80_sv --help  (this will verify the Oracle Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>
        See the detailed section about OpenLink Database Agents for additional information.
        </para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_dbsrvcompinst">
          <title>Database Server Components Installation</title>
          <para>Only perform these steps if you are connecting to database
    engines hosted on your dedicated Database Server using OpenLink's Database Independent
    Networking:</para>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        server components installation archive using the instructions provided in the section that
        covers interaction with the OpenLink <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#Downloading and Installing the Software">Software
        Download Wizard</link>. Ensure that you hatched a checkbox for each Database Engine type that
        you will be connecting to via JDBC. </para>
            </listitem>
            <listitem>
              <para>Move the Request Broker and Database Agent archives into a
        temporary installation folder on your Database Server machine then run the following
        commands from the command line prompt:</para>
              <para>Linux:</para>
              <programlisting><![CDATA[rpm -ivh openlink-4.0-2.rpm]]></programlisting>
              <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm]]></programlisting>
              <para> (for glibc2 based Linux Environments) or</para>
              <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm]]></programlisting>
              <para> (for libc5 based Linux Environments)</para>
              <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
              <programlisting><![CDATA[sh install.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Follow the instructions presented by the installer for
        configuring your OpenLink Database Agents</para>
            </listitem>
            <listitem>
              <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation's base installation directory. </para>
            </listitem>
            <listitem>
              <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your .profile file) by executing the following command from
        your Linux or UNIX command line prompt:</para>
              <programlisting><![CDATA[. openlink.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Database server components
        installation by starting a Web Browser session from either your OpenLink Client,
        Application or Server machine and then enter one of the following URLs:</para>
              <para>From Client or Application Server Machine:</para>
              <programlisting><![CDATA[http://<server name or IP address>:8000]]></programlisting>
              <para>From Database Server Machine:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the "OpenLink Admin Assistant" then
        this confirms that your OpenLink Server environment is also correctly setup.</para>
              <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ora80_sv --help  (this will verify the Oracle Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>
        See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
    </section>
    <section xml:id="mt_JavaLocalClientServer">
      <title>Java Based Local Client-Server</title>
      <para>In this scenario the Java Virtual Machine is acting as the
    host of your OpenLink client component for JDBC (a 100% Pure Java Driver for JDBC). The
    operating system hosting your Java Virtual Machine, also hosts the OpenLink Server server
    components for JDBC. Thus, you are going to install your OpenLink Client and Server
    components for JDBC on the same machine.</para>
      <section xml:id="mt_clicompins">
        <title>Client Components Installation Process</title>
        <orderedlist>
          <listitem>
            <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software
        Download Wizard. You would have selected "Java Virtual Machine" as you
        client operating system when interacting with the OpenLink download Wizard and then have
        the files "megathin.jar" or "megathin2.jar" presented in the download
        results page depending on the version of the Java Virtual Machine selected</para>
          </listitem>
          <listitem>
            <para>Place the
        "megathin.jar" or "megathin2.jar" file into directory of your choice
        then add the directory and reference to the JAR file to your CLASSPATH environment
        variable. See example below:</para>
            <para>
        Windows 95/98/NT/2000</para>
            <para>
        Presuming you place the "megathin.jar" file in the "\program
        files\openlink\jdk11" on your Windows machine, you would add the following line to
        your "autoexec.bat" if you are running Windows 95/98:</para>
            <programlisting><![CDATA[
        set CLASSPATH=%CLASSPATH%;"c:\program files\openlink\jdk11\megathin.jar":. ]]></programlisting>
            <para>
        If you are using NT or Windows 2000 " then you need to open the "System
        Environment" properties of the "System" Control Panel applet and then add
        the same entry to the "System Variables" section if you want the driver to be
        accessible to all users, if not place the entry in the "User Variables" section.</para>
            <formalpara>
              <title>Linux or UNIX</title>
              <para>
        Presuming you place the "megathin.jar" file in the
        "/opt/openlink/jdk11" on your Linux or UNIX machine, you would need to modify
        the following line in the file "openlink.sh" so that they match what is listed
        below:
              <programlisting><![CDATA[CLASSPATH=$CLASSPATH:/opt/openlink/jdk1.1.x/megathin.jar]]></programlisting></para>
            </formalpara>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_servcomp">
        <title>Server Components Installation</title>
        <para>Windows 95/98/NT/2000</para>
        <orderedlist>
          <listitem>
            <para>As Windows 95/98/NT/2000 is playing the dual role of both
        Client and Server machine for your OpenLink components, you would have downloaded a ZIP
        archive that contains both the OpenLink Client &amp; Server components for this platform.
        Extract the contents of this ZIP archive to a temporary installation folder and then run
        the "Setup.exe" program</para>
          </listitem>
          <listitem>
            <para>The archive you have downloaded will contain the entire
        suite of Data Access Drivers for this platform. If you do not require the OpenLink ODBC or
        OLE-DB Drivers simply uncheck these components using the installers component list dialog
        when presented during the install process. </para>
          </listitem>
          <listitem>
            <para>Reboot your system </para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
            <table>
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
            <programlisting><![CDATA[http://localhost:8000]]></programlisting>
            <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
inf73_sv --help  (this will verify the Informix Database Agent)
ingii_sv --help  (this will verify the Ingres II Database Agent)
]]></programlisting>
            <para>
        See the detailed section about OpenLink Database Agents for additional information.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_linunixsrvcomp">
        <title>Linux or UNIX Server Components Installation</title>
        <orderedlist>
          <listitem>
            <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard.
        Ensure that you hatched a checkbox for each Database Engine type that
        you will be connecting to via JDBC.</para>
          </listitem>
          <listitem>
            <para>Move the Request Broker and Database Agent archives into a
        temporary installation folder on your Linux or UNIX machine then run the following
        commands from the command line prompt:</para>
            <para>Linux:</para>
            <programlisting><![CDATA[rpm -ivh openlink-4.0-2.rpm]]></programlisting>
            <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm]]></programlisting>
            <para>(for glibc2 based Linux Environments) or</para>
            <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm]]></programlisting>
            <para>(for libc5 based Linux Environments)</para>
            <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
            <programlisting><![CDATA[sh install.sh]]></programlisting>
          </listitem>
          <listitem>
            <para>Follow the instructions presented by the installer for
        configuring your OpenLink Database Agents.





<!-- , if you installed via a Linux RPM archive, post
        RPM installation you will need to run the &quot;oplcfg&quot;  located in the
        &quot;openlink/bin&quot; sub-directory of your OpenLink base installation directory.
 -->

                    </para>
          </listitem>
          <listitem>
            <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation's base installation directory.
        This files contains the following entries which you can modify so as to match the OpenLink
        Drivers for JDBC to the appropriate Java environment on your machine:</para>
            <programlisting><![CDATA[CLASSPATH=$CLASSPATH:/openlink/openlink/jdk1.1.x/megathin.jar]]></programlisting>
            <note>
              <title>Note:</title>
              <para>This step is only required because the Linux and UNIX installer archives
        automatically install all the OpenLink Driver types for JDBC, and also perform the default
        CLASSPATH entry configuration.</para>
            </note>
          </listitem>
          <listitem>
            <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your ".profile" file) by executing the following
        command from your Linux or UNIX command line prompt:</para>
            <programlisting><![CDATA[. openlink.sh]]></programlisting>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a Linux or UNIX command prompt:</para>
            <table>
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
            <programlisting><![CDATA[http://localhost:8000]]></programlisting>
            <para>or</para>
            <programlisting><![CDATA[http://<hostname of current machine>:8000]]></programlisting>
            <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
syb11_sv --help  (this will verify the Sybase Database Agent)
inf73_sv --help  (this will verify the Informix Database Agent)
]]></programlisting>
            <para>See the detailed section about OpenLink Database Agents for additional information.</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section xml:id="mt_JavaClientServer">
      <title>Java Based Client-Server (2-Tier) Installation</title>
      <para>In this scenario the Java Virtual Machine and OpenLink
    Drivers for JDBC reside on separate to OpenLink Server server components for JDBC and
    Database Connectivity. Thus, you are going to install your OpenLink Client and Server
    components for JDBC on separate machines, one acting as the Client and the other the
    Server. The Server also hosts the actual database engine that you will be connecting to
    via JDBC.</para>
      <section xml:id="mt_winclicomp">
        <title>Windows 95/98/NT/2000 Client Components Installation Process</title>
        <orderedlist>
          <listitem>
            <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard.
        You would have selected "Java Virtual Machine" as you
        client operating system when interacting with the OpenLink download Wizard and then have
        the files "megathin.jar" or "megathin2.jar" presented in the download
        results page depending on the version of the Java Virtual Machine selected</para>
          </listitem>
          <listitem>
            <para>Place the "megathin.jar" or "megathin2.jar" file into directory of your choice
        then add the directory and reference to the JAR file to your CLASSPATH environment
        variable. See example below:</para>
            <para>Windows 95/98/NT/2000</para>
            <para>
        Presuming you place the "megathin.jar" file in the "\program
        files\openlink\jdk11" on your Windows machine, you would add the following line to
        your "autoexec.bat" if you are running Windows 95/98:</para>
            <programlisting><![CDATA[set CLASSPATH=%CLASSPATH%;"c:\program files\openlink\jdk11\megathin.jar":. ]]></programlisting>
            <para>
        If you are using NT or Windows 2000 " then you need to open the "System
        Environment" properties of the "System" Control Panel applet and then add
        the same entry to the "System Variables" section if you want the driver to be
        accessible to all users, if not place the entry in the "User Variables" section.</para>
          </listitem>
          <listitem>
            <para>Reboot your machine</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
            <table>
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_linunixclicomp">
        <title>Linux or UNIX Client Components Installation</title>
        <orderedlist>
          <listitem>
            <para>Presuming you place the "megathin.jar" file in the
        "/opt/openlink/jdk11" on your Linux or UNIX
        machine, you would need to modify the following line in the file "openlink.sh"
        so that they match what is listed below:</para>
            <programlisting><![CDATA[CLASSPATH=$CLASSPATH:/opt/openlink/jdk1.1.x/megathin.jar]]></programlisting>
          </listitem>
          <listitem>
            <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your ".profile" file) by executing the following
        command from your Linux or UNIX command line prompt:</para>
            <programlisting><![CDATA[. openlink.sh]]></programlisting>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a Linux or UNIX command prompt:</para>
            <table>
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_srvcompinst">
        <title>Server Components Installation</title>
        <para>Only perform these steps if you are connecting to database engines hosted on your
    dedicated Database Server using OpenLink's Database Independent Networking:</para>
        <para>Windows 95/98/NT/2000</para>
        <orderedlist>
          <listitem>
            <para>As a separate Windows 95/98/NT/2000 is playing the role of
        Server machine, you would have downloaded a ZIP archive that contains both the OpenLink
        Client &amp; Server components for this platform. Extract the contents of this ZIP archive
        to a temporary installation folder on the Windows Server machine and then run the
        "Setup.exe" program</para>
          </listitem>
          <listitem>
            <para>The archive you have downloaded will contain the entire
        suite of Data Access Drivers for this platform. If you do not require the OpenLink ODBC or
        OLE-DB Drivers simply uncheck these components using the installers component list dialog
        when presented during the install process. </para>
          </listitem>
          <listitem>
            <para>Reboot your system </para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
            <programlisting><![CDATA[http://localhost:8000/]]></programlisting>
            <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
pro83a_sv --help (this will verify the Progress Database Agent)
syb11_sv --help  (this will verify the Sybase Database Agent)
]]></programlisting>
            <para>
        See the detailed section about OpenLink Database Agents for additional information.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_linunixsrccompi">
        <title>Linux or UNIX Server Components Installation</title>
        <orderedlist>
          <listitem>
            <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard. Ensure that you hatched a
        checkbox for each Database Engine type that you will be connecting to via JDBC. </para>
          </listitem>
          <listitem>
            <para>Move the Request Broker and Database Agent archives into a
        temporary installation folder on your Linux or UNIX machine then run the following
        commands from the command line prompt:</para>
            <para>Linux:</para>
            <programlisting><![CDATA[rpm -ivh openlink-4.0-2.rpm]]></programlisting>
            <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm]]></programlisting>
            <para>(for glibc2 based Linux Environments) or</para>
            <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm]]></programlisting>
            <para>(for libc5 based Linux Environments)</para>
            <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
            <programlisting><![CDATA[sh install.sh]]></programlisting>
          </listitem>
          <listitem>
            <para>Follow the instructions presented by the installer for
        configuring your OpenLink Database Agents.





<!-- , if you installed via a Linux RPM archive, post
        RPM installation you will need to run the &quot;oplcfg&quot;  located in the
        &quot;openlink/bin&quot; sub-directory of your OpenLink base installation directory
 -->

		    </para>
          </listitem>
          <listitem>
            <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation's base installation directory.
        This files contains the following entries which you can modify so as to match the OpenLink
        Drivers for JDBC to the appropriate Java environment on your machine:</para>
            <programlisting><![CDATA[CLASSPATH=$CLASSPATH:/openlink/openlink/jdk1.1.x/megathin.jar]]></programlisting>
            <note>
              <title>Note:</title>
              <para>This step is only required because the Linux and UNIX installer archives
        automatically install all the OpenLink Driver types for JDBC, and also perform the default
        CLASSPATH entry configuration.</para>
            </note>
          </listitem>
          <listitem>
            <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your ".profile" file) by executing the following
        command from your Linux or UNIX command line prompt:</para>
            <programlisting><![CDATA[. openlink.sh]]></programlisting>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
            <programlisting><![CDATA[http://localhost:8000]]></programlisting>
            <para>or</para>
            <programlisting><![CDATA[http://<hostname of current machine>:8000]]></programlisting>
            <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>An additional but non compulsory check that you may perform is to actually verify the
        existence and state of the OpenLink Database server components called the OpenLink
        Database agents. Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
ingii_sv --help  (this will verify the Ingres II Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
            <para>
        See the detailed section about OpenLink Database Agents for additional information.</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
    <section xml:id="mt_JavaAppServer">
      <title>Java Based Application-Server (3-Tier) Installation</title>
      <para>In this scenario the Java Virtual Machine and OpenLink
    Drivers for JDBC and  the OpenLink Server server components for JDBC reside on the
    same machine which is known as the Application Server. The OpenLink Database Server
    components reside on a separate Database Server machine (if required) which hosts the
    database that you will be connecting to via JDBC. </para>
      <section xml:id="mt_wincli">
        <title>Windows 95/98/NT/2000 Client Components Installation Process.</title>
        <para>Windows 95/98/NT/2000 Application Server Components Installation</para>
        <orderedlist>
          <listitem>
            <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink Software Download Wizard.
            You would have selected "Java Virtual Machine" as your
        client operating system when interacting with the OpenLink download Wizard and then have
        the files "megathin.jar" or "megathin2.jar" presented in the download
        results page depending on the version of the Java Virtual Machine selected</para>
          </listitem>
          <listitem>
            <para>Place the
        "megathin.jar" or "megathin2.jar" file into directory of your choice
        then add the directory and reference to the JAR file to your CLASSPATH environment
        variable. See example below:</para>
            <para>Windows 95/98/NT/2000</para>
            <para>
        Presuming you place the "megathin.jar" file in the "\program
        files\openlink\jdk11" on your Windows machine, you would add the following line to
        your "autoexec.bat" if you are running Windows 95/98:</para>
            <programlisting><![CDATA[set CLASSPATH=%CLASSPATH%;"c:\program files\openlink\jdk11\megathin.jar":. ]]></programlisting>
            <para>
        If you are using NT or Windows 2000 " then you need to open the "System
        Environment" properties of the "System" Control Panel applet and then add
        the same entry to the "System Variables" section if you want the driver to be
        accessible to all users, if not place the entry in the "User Variables" section.</para>
          </listitem>
          <listitem>
            <para>Reboot your machine</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
            <table>
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink
        Driver for JDBC server components installation by starting a Web Browser session and then
        entering the following URL:</para>
            <para>
        http://localhost:8000 or http://&lt;hostname of current machine&gt;:8000</para>
            <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Database server components.
		     Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
            <programlisting><![CDATA[
ora80_sv --help  (this will verify the Oracle Database Agent)
pro83a_sv --help (this will verify the Progress Database Agent)
syb10_sv --help  (this will verify the Sybase Database Agent)
inf73_sv --help  (this will verify the Informix Database Agent)
ingii_sv --help  (this will verify the Ingres II Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
            <para>
        See the detailed section about OpenLink Database Agents for additional information.
        </para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_linunixappsrvcomp">
        <title>Linux or UNIX Application Server Components Installation</title>
        <orderedlist>
          <listitem>
            <para>Presuming you place the
        "megathin.jar" file in the "/opt/openlink/jdk11" on your Linux or UNIX
        machine, you would need to modify the following line in the file "openlink.sh"
        so that they match what is listed below:</para>
            <programlisting><![CDATA[CLASSPATH=$CLASSPATH:/opt/openlink/jdk1.1.x/megathin.jar]]></programlisting>
          </listitem>
          <listitem>
            <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your ".profile" file) by executing the following
        command from your Linux or UNIX command line prompt:</para>
            <programlisting><![CDATA[. openlink.sh]]></programlisting>
          </listitem>
          <listitem>
            <para>Verify your OpenLink Driver for JDBC client components
        installation by running one of the following commands (depending on your choice of driver
        for JDBC) from a DOS Window's command prompt:</para>
            <table>
              <title>JDBC Driver Version Commands</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>OpenLink Driver for JDBC Type</entry>
                    <entry>Verification Command</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Megathin Driver for JDK 1.1.x</entry>
                    <entry>java openlink.jdbc.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.2.x </entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.3.x</entry>
                    <entry>java openlink.jdbc2.Driver</entry>
                  </row>
                  <row>
                    <entry>Megathin Driver for JDK 1.4.x</entry>
                    <entry>java openlink.jdbc3.Driver</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>If you receive output indicating the relevant OpenLink
        component branding then this indicates that the drivers have been installed correctly and
        are ready for use with you Java environment, anything else indicates something is wrong.
        Typically this would be a mismatch between the Java Virtual machine (your default Java
        environment) and the OpenLink Driver for JDBC classes. Correcting your PATH or CLASSPATH
        environment variable entries will typically resolve these problems.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_dbsrvcmpins">
        <title>Database Server Components Installation</title>
        <para>Only perform these steps if you are connecting to database engines hosted on your dedicated Database Server using
    OpenLink's Database Independent Networking:</para>
        <section xml:id="mt_win">
          <title>Windows 95/98/NT/2000</title>
          <orderedlist>
            <listitem>
              <para>As a separate Windows 95/98/NT/2000 is playing the role of
        Server machine, you would have downloaded a ZIP archive that contains both the OpenLink
        Client &amp; Server components for this platform. Extract the contents of this ZIP archive
        to a temporary installation folder on the Windows Server machine and then run the
        "Setup.exe" program</para>
            </listitem>
            <listitem>
              <para>The archive you have downloaded will contain the entire
        suite of Data Access Drivers for this platform. If you do not require the OpenLink ODBC or
        OLE-DB Drivers simply uncheck these components using the installers component list dialog
        when presented during the install process. </para>
            </listitem>
            <listitem>
              <para>Reboot your system.
        </para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
              <para>
        http://localhost:8000/</para>
              <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
            </listitem>
            <listitem>
              <para>Verify the existence and state of the OpenLink Database
        server components called the OpenLink Database agents.
	Do this by changing into the "bin" sub-directory of the
        OpenLink base directory. Then run an agent with the --help parameter. For example:
        </para>
              <programlisting><![CDATA[
ingii_sv --help  (this will verify the Ingres II Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_linunixsrv">
          <title>Linux or UNIX Server</title>
          <orderedlist>
            <listitem>
              <para>Download appropriate
        driver software installation archive using the instructions provided in the section that
        covers interaction with the OpenLink <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#Downloading and Installing the Software">Software
        Download Wizard</link>. Ensure that you hatched a checkbox for each Database Engine type that
        you will be connecting to via JDBC. </para>
            </listitem>
            <listitem>
              <para>Move the Request Broker and Database Agent archives into a
        temporary installation folder on your Linux or UNIX machine then run the following
        commands from the command line prompt:</para>
              <para>Linux:</para>
              <programlisting><![CDATA[rpm -ivh openlink-4.0-2.rpm]]></programlisting>
              <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-glibc2.rpm]]></programlisting>
              <para> (for glibc2 based Linux Environments) or</para>
              <programlisting><![CDATA[rpm -ivh openlink-agents-4.0-2.i386-libc5.rpm]]></programlisting>
              <para> (for libc5 based Linux Environments)</para>
              <para>Linux (if your Linux system does not have the RPM facility) and UNIX:</para>
              <programlisting><![CDATA[sh install.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Follow the instructions presented by the installer for
        configuring your OpenLink Database Agents.




	<!-- if you installed via a Linux RPM archive, post
        RPM installation you will need to run the &quot;oplcfg&quot; located in the
        &quot;openlink/bin&quot; sub-directory of your OpenLink base installation directory. -->

        </para>
            </listitem>
            <listitem>
              <para>The installer creates an OpenLink environment setup script
        named "openlink.sh" in the openlink installation's base installation directory.
        This files contains the following entries which you can modify so as to match the OpenLink
        Drivers for JDBC to the appropriate  Java environment on your machine:</para>
              <programlisting><![CDATA[CLASSPATH=$CLASSPATH:/openlink/openlink/jdk1.1.x/megathin.jar]]></programlisting>
              <note>
                <title>Note:</title>
                <para>This step is only required because the Linux and UNIX installer archives
        automatically install all the OpenLink Driver types for JDBC, and also perform the default
        CLASSPATH entry configuration.</para>
              </note>
            </listitem>
            <listitem>
              <para>Run the script "openlink.sh" (you may also want
        to add a reference to this in your ".profile" file) by executing the following
        command from your Linux or UNIX command line prompt:</para>
              <programlisting><![CDATA[. openlink.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Driver for JDBC server components
        installation by starting a Web Browser session and then entering the following URL:</para>
              <programlisting><![CDATA[http://localhost:8000]]></programlisting>
              <para>or </para>
              <programlisting><![CDATA[http://<hostname of current machine>:8000]]></programlisting>
              <para>
        If you are presented with the Home Page of the OpenLink Admin Assistant then this confirms
        that your OpenLink Server environment is also correctly setup.</para>
            </listitem>
            <listitem>
              <para>Verify your OpenLink Database server components, you do
        this by moving into the "bin" sub-directory of your OpenLink installation's base
        installation directory. Then run one of the following commands (depending on what
        database(s) you will be connecting to via JDBC):</para>
              <programlisting><![CDATA[
ora80_sv --help  (this will verify the Oracle Database Agent)
pro83a_sv --help (this will verify the Progress Database Agent)
syb11_sv --help  (this will verify the Sybase Database Agent)
inf73_sv --help  (this will verify the Informix Database Agent)
ingii_sv --help  (this will verify the Ingres II Database Agent)
db2_sv --help    (this will verify the IBM DB2 Database Agent)
]]></programlisting>
              <para>See the detailed section about OpenLink Database Agents for additional information.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_MixedEnvironmentInstallations">
        <title>Mixed Environment Installations</title>
        <para>It is important to note that the client and server
    operating systems hosting your OpenLink  Software do not have to be the same. The
    Installation instructions have only taken this approach in order to simplify understanding
    of the installation process. A Linux or UNIX machine can act as a client to a Windows
    machine and vice versa, all you have to do is follow the steps for installing either the client
    or server components on the appropriate platform.</para>
      </section>
    </section>

    <!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
    <section xml:id="mt_OpenLinkMiddleware">
      <title>OpenLink Server Components Configuration</title>
      <para>The OpenLink JDBC agent and OpenLink Database agents form
    the OpenLink server components, In the prior section you would have installed these
    components on the appropriate server machine. </para>
      <para>Following installation you have to configure these server components in order to enable
    connectivity between your backend database(s) and your OpenLink Driver for JDBC. Both of
    these components are exposed to your OpenLink Driver for JDBC via the OpenLink Request Broker.</para>
      <para>This new OpenLink release enables the direct connection to an OpenLink Database agent from your OpenLink Java client classes, as JDBC support in now built in to the database agents. Thus you no longer have to connect via the OpenLink JDBC Agent proxy, as in the past, although connection via this method is still supported. Obviously connecting directly to the Database agent will provide better performance, and is now the recomended connection method whenever possible.
</para>
      <para>
        <bridgehead>Database Agents</bridgehead>
      </para>
      <para>OpenLink Database Agents are the OpenLink data access
    server components that actually provide database connectivity services to your OpenLink
    Driver for JDBC. A Database Agent exists for each database engine supported by OpenLink,
    the supported database list currently includes: Oracle, DB2, Informix, Sybase, Ingres,
    Progress, Microsoft SQL Server, OpenLink Virtuoso, Solid, PostgresSQL, and other ODBC
    based databases.</para>
      <para>Please follow the instructions
provided in the OpenLink Database Agents configuration guide prior to attempting to use
your OpenLink Drivers for JDBC (if you haven't already done so as part of the installation process).
            </para>
    </section>

    <!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
    <section xml:id="mt_OPLDriversUtilization">
      <title>OpenLink Drivers for JDBC Utilization</title>
      <para>OpenLink Drivers for JDBC are available in three
    different JDBC Driver formats.</para>
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>JDBC Type 1</title>
            <para>Driver for JDBC is implemented as a bridge to ODBC Drivers, thereby implementing the JDBC
        Driver classes through native methods, this is due to the fact that ODBC is a 'C' language
        based data access application programming interface. Thus, this driver format is
        inherently part Java and part Native, implying that it is inherently platform specific
        rather than independent.
        </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>JDBC Type 3</title>
            <para>Driver for JDBC is implemented in Java
        sitting atop a database independent networking layer bridge also implemented in Java.
        Thus, the entire driver is Pure Java and thereby operating system independent.</para>
          </formalpara>
        </listitem>
      </itemizedlist>
      <para>JDBC Applets, Applications, Bean Components, and Servlets
    communicate with JDBC drivers through JDBC Uniform Resource Locators (URLs). Theses URLs
    are service request and binding formats implemented slightly differently for each OpenLink
    Driver for JDBC format. The general JDBC URL format is:</para>
      <para>jdbc:&lt;jdbc-subprotocol&gt;:[jdbc implementation
    specific URL attributes]</para>
      <para>The "sub-protocol" component of the URL above
    identifies each JDBC implementation and typically identifies the JDBC driver vendor, the
    actual URL attributes are vendor specific. Each OpenLink Driver for JDBC type has a
    different JDBC URL format, the sections that follow depict and provides examples of these
    formats.</para>
      <section xml:id="mt_JDBCType1">
        <title>OpenLink Driver for JDBC Type 1 </title>
        <para>This driver format connects you to ODBC Data Source Names (DSNs) via JDBC. The URL format
    is as follows:</para>
        <programlisting><![CDATA[jdbc:openlink://ODBC[/DSN][/UID][/PWD][/READONLY]]]></programlisting>
        <formalpara>
          <title>URL Format</title>
          <para>
            <simplelist type="vert">
              <member>/DSN - ODBC Data Source Name</member>
              <member>/UID - Username</member>
              <member>/PWD - Password</member>
              <member>/READONLY - Determines session mode, read-write or read-only.</member>
            </simplelist>
          </para>
        </formalpara>
        <formalpara>
          <title>Example</title>
          <para>If you were attempting to connect to an ODBC DSN on your machine named "CustomerDatabase" in read-only mode then you would enter the following JDBC URL:
          <programlisting><![CDATA[jdbc:openlink://ODBC/DSN=CustomerDatabase/UID=test/PWD=test/READONLY=Y]]></programlisting>
          <note><title>Note:</title><para>In the case of OpenLink ODBC DSNs you do not have
    to provide values for the /UID and /PWD attributes since these can be controlled and
    configured on the database or application server using the OpenLink Session Rules Book.
    </para></note>
          </para>
        </formalpara>
      </section>
      <section xml:id="mt_JDBCType3">
        <title>OpenLink Driver for JDBC Type 3</title>
        <para>URL Format</para>
        <para>This driver format connects you to remote database using
    remote ODBC DSNs.  It also supports direct DSN-Less connections to
    remote databases. The URL format is as follows:</para>
        <programlisting><![CDATA[
jdbc:openlink://<Hostname>:[portnumber] [/UID] [/PWD] [/READONLY] [/SVT]
      [/APPLICATION] [/FBS|FETCHBUFFERSIZE] [/ENCRYPTED] [/CHARSET] [/UNICODE]
      [/DLF] [/DATABASE] [/OPTIONS] [/DRIVER]]]></programlisting>
        <formalpara>
          <title>URL Attributes</title>
          <para>
            <simplelist type="vert">
              <member>Hostname - Network Alias or IP address of server machine
    running an OpenLink Request Broker instance</member>
              <member>Port Number - Port number that identifies location of
    OpenLink JDBC Agent Service, the default value is 5000</member>
              <member>/UID - Username</member>
              <member>/PWD - Password</member>
              <member>/READONLY - Determines session mode, read-write or
    read-only</member>
              <member>/SVT - Determines OpenLink Database Agent type (Oracle,
    Informix, Sybase, Progress, Ingres, SQL Sever, Sybase etc.) </member>
              <member>/APPLICATION - Set the Application name with which
			  connections have to be obtained.</member>
              <member>/FBS - (also FETCHBUFFERSIZE) Sets the Fetch Buffer Size,
			  which is the number of JDBC resultset rows that get packed
    into a single network packet</member>
              <member>/ENCRYPTED - Set the Encrypted flag for outgoing packets with which
		connections have to be obtained. The encryption isn't used by
		default. The value may be '1', '0', 'Y', 'N', 'y', 'n'</member>
              <member>/CHARSET	- Set the charset of remote database with which connections
		have to be obtained. The default value is get from
		System.getProperty("file.encoding")</member>
              <member>/UNICODE  - Set the Unicode attribute with which connections have to be
		 obtained. The unicode connection isn't used by default.
		 The value may be '1', '0', 'Y', 'N', 'y', 'n'</member>
              <member>/DLF	- Set the DeferLongFetch attribute with which connections have
		 to be obtained. The defer Long etch isn't used by default.
		 The value may be '1', '0', 'Y', 'N', 'y', 'n'</member>
              <member>/DATABASE - Actual database name within a particular
    database environment</member>
              <member>/OPTIONS - Values used to connect to OpenLink Database
    Agents to remote database servers using database vendors networking</member>
              <member>/DRIVER - IS the Driver name in {}, used when making a DSN-Less
			  connection to a remote ODBC Driver</member>
            </simplelist>
          </para>
        </formalpara>
      </section>
      <section xml:id="mt_examples">
        <title>Examples</title>
        <section xml:id="mt_connremoteodbc">
          <title>Connecting To Remote Database</title>
          <para>If you were attempting to connect to a remote Database
    Server Type "SQLServer 2000", hosted on a database server machine with the network
    alias "pluto", with an OpenLink JDBC server listening at port 5001 (rather than default of 5000), and you wanted
    this session to be in read-only mode then you would enter the following JDBC URL:</para>
          <programlisting><![CDATA[jdbc:openlink://pluto:5001/SVT=SQLServer 2000/UID=test/PWD=test/
		READONLY=YES/FBS=55]]></programlisting>
          <note>
            <title>Note:</title>
            <orderedlist>
              <listitem>
                <para>In the case of OpenLink ODBC DSNs you do not have to
        provide values for the /UID and /PWD attributes since these can be controlled and
        configured on the database or application server using the OpenLink Session Rules Book</para>
              </listitem>
              <listitem>
                <para>"/FBS" ensures that each iteration of a JDBC
        Resultset fetch loop returns 55 records or less until all records have been retrieved from
        a remote database server</para>
              </listitem>
            </orderedlist>
          </note>
        </section>
        <section xml:id="mt_dsnlessconnection">
          <title>Connecting directly via your OpenLink Database agent</title>
          <para>As your OpenLink Database Agent now has built-in support for JDBC, you can make a direct connection to the database using the Type-3 format by specifying the OpenLink Database Type and Database Name attributes as part of your JDBC URL. This is the recommended connection method for a JDBC Type-3 connection whenever possible.</para>
          <para>To connect to a remote Microsoft SQL Server 6 or 7 database using this format you would construct the following URL:</para>
          <programlisting><![CDATA[jdbc:openlink://saturn:5001/SVT=SQLServer 6/DATABASE=pubs/UID=sa/
        PWD=/FBS=55/READONLY=Y]]></programlisting>
          <note>
            <title>Notes:</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>You do not necessarily have to
        provide values for the /UID and /PWD attributes since these can be controlled and
        configured on the database or application server using the OpenLink Session Rules Book</para>
                </listitem>
                <listitem>
                  <para>Since we are using the direct Database Agent connection type, no JDBC agent reference will be needed in the URL string.</para>
                </listitem>
              </orderedlist>
            </para>
          </note>
        </section>
        <section xml:id="mt_dsnlessodbcdriverconn">
          <title>Connecting To Database via ODBC Driver Without A DSN (DSN-Less Connection)</title>
          <para>DSN-Less connections require you to
    determine the ODBC connect string attributes for the ODBC Driver that you are using. For
    OpenLink ODBC Drivers these values are:</para>
          <table>
            <title>Connect String Attributes</title>
            <tgroup align="char" charoff="50" char="." cols="2">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>Attribute</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Driver</entry>
                  <entry>Full driver name as defined in the ODBC control panel</entry>
                </row>
                <row>
                  <entry>ServerType</entry>
                  <entry>Database Agent Type</entry>
                </row>
                <row>
                  <entry>Host</entry>
                  <entry>Machine hosting the Database Agent serving an OpenLink ODBC Driver</entry>
                </row>
                <row>
                  <entry>Username</entry>
                  <entry>Valid Database Username</entry>
                </row>
                <row>
                  <entry>Password</entry>
                  <entry>Valid Password for Username</entry>
                </row>
                <row>
                  <entry>FetchBufferSize</entry>
                  <entry>Number of resultset records fetched during each ODBC fetch loop</entry>
                </row>
                <row>
                  <entry>Database</entry>
                  <entry>Actual database name within database server environment</entry>
                </row>
                <row>
                  <entry>NoLoginBox</entry>
                  <entry>Disables OpenLink ODBC
    Drivers attempt to present dialog when ODBC Driver determines an incomplete ODBC connect
    string (collection of ODBC attributes passed at connect time) good examples being missing
    or blank "Username" and "Password" attributes.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>If you were connecting a remote Oracle database on a
    machine called "pluto" and you wanted this session to be read-only, your URL
    formal would be as follows:</para>
          <programlisting><![CDATA[jdbc:openlink://pluto/DRIVER={OpenLink Generic ODBC Driver}/Database=ORCL/Username=test/
            PWD=test/ReadOnly=Yes/FBS=55/ServerType=Oracle 8/Host=pluto]]></programlisting>
        </section>
        <section xml:id="mt_ConnectingToRemoteDBonSepServer">
          <title>Connecting To Remote Databases on a Separate Server Machine (OpenLink 3-Tier Architecture)</title>
          <para>You may choose to install your OpenLink Drivers for JDBC
    on an Application Server and then install your OpenLink Data Access Server components
    (Request Broker and Database Agents) on your dedicated database server machine. In such a
    scenario, you will be connecting to your remote database engine using OpenLink Database Independent
    networking as opposed to your Database vendor's database specific networking middleware. Please note that you
    would need the OpenLink server components installed on both the application server and the database server in this
    scenario.</para>
          <para>If you were connecting from an Application Server
    called "pluto" to a dedicated Database Server machine named
    "ora_server", hosting an Oracle 8i database identified as "ORCL"
    you would construct the following JDBC URL:</para>
          <programlisting><![CDATA[jdbc:openlink://pluto/SVT=JDBC/HOST=ora_server/DATABASE=ORCL/UID=test/PWD=test]]></programlisting>
          <note>
            <title>Notes:</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>This URL string assumes that you have already configured the Generic JDBC client to point to
                                 the "Oracle 8.1.x" Server Type. This is done via the Admin Assistant, under "Database Agent Administration".</para>
                </listitem>
                <listitem>
                  <para>You could also have used the "/DSN"
        attribute to point to an ODBC DSN which has been configured to connect to the
        Database Server machine. This requires you to have configured an ODBC DSN on your
        Application Server machine, but it removes the necessity to embed connection attributes such as Database name and Username/Password
        in your URL string.</para>
                </listitem>
              </orderedlist>
            </para>
          </note>
        </section>
        <section xml:id="mt_ConnectingToRemoteDBUsingDBComs">
          <title>Connecting To Remote Databases On Separate Server Machine Using Database Vendor's Networking (Mixed 3-Tier Architecture)</title>
          <para>Organizational standards or individual preference may
    present you with a scenario in which you have two server machines in use: one acting as an
    Application Server hosting your OpenLink Drivers for JDBC and OpenLink Data Access Server
    components (Request Broker &amp; Database Agents), and the other acting as a dedicated
    Database Server. You may not have the necessary authority to install the OpenLink Data
    Access Server components on the Database Server, or you simply prefer to use your database
    vendor's networking software which is already configured on your Application Server. This
    scenario can be described as a "Mixed 3-Tier" architecture, as you are going to use your OpenLink Database Agents atop database-vendor-provided networking,
    rather than connecting to an OpenLink Database Agent using OpenLink Database-independent networking. (Thus, no OpenLink
    server components would need to be installed on your Application Server.)</para>
          <para>If you were connecting to a remote Oracle 8i database
    somewhere on your network from an application server called "pluto", you would construct the following JDBC URL (assuming an existing TNS alias / Net*8 server alias, called "ora_pluto"):</para>
          <programlisting><![CDATA[jdbc:openlink://pluto/SVT=Oracle 8.1.x/UID=test/PWD=test/OPTIONS=ora_pluto]]></programlisting>
          <note>
            <title>Notes:</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>The "/OPTIONS" JDBC URL attribute provides the
        entry or bind point for connecting OpenLink Database agents to a Database vendor's networking
        products. This applies to all supported OpenLink databases.  See the OpenLink Database Agents configuration guide for
        additional information relating to the database-specific formats of values passed to the
        "/OPTIONS" JDBC URL attribute.</para>
                </listitem>
                <listitem>
                  <para>You could also have used the "/DSN"
        attribute to point to an ODBC DSN which has been configured to connect to the
        Database Server machine, this simply reduces the size of your JDBC URL, but imposes the
        use of DSNs upon you.</para>
                </listitem>
              </orderedlist>
            </para>
          </note>
        </section>
      </section>
    </section>

    <!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
    <section xml:id="mt_JDBCDemos">
      <title>OpenLink Demonstration Programs</title>
      <para>To assist you further during your utilization or evaluation
    of OpenLink's Drivers for JDBC a number of demonstration JDBC
    compliant Applets and Applications are bundled with your OpenLink Driver for JDBC
    installation, these programs are provided  in both binary and source code format for
    your free use. The sections that follow guide you through the process of using these
    programs</para>
      <section xml:id="mt_JDBCAppletDemos">
        <title>JDBC Compliant Applet Demos</title>
        <para>Three JDBC applet samples are bundled with your OpenLink
    Driver for JDBC installation, each one of these demonstrating practical use of JDBC
    applets and highlighting OpenLink specific functionality. Each of these demos reside in
    the "samples\jdbc\jdk[10 or 11 or 12]" sub-directory below the directory into
    which you installed your OpenLink software. Each applet is accessible from the OpenLink
    Admin Assistant (an OpenLink agent that provides HTTP services like any Web Server does).
    The programs are:</para>
        <orderedlist>
          <listitem>
            <formalpara>
              <title>JDBCDemo</title>
              <para>demonstrates basic JDBC functionality via an Applet</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>ScrollDemo</title>
              <para>demonstrates JDBC
        functionality via an Applet. It also demonstrates the additional Resultset navigation
        functionality provided by OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC
        on a Record by Record Basis.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>ScrollDemo2</title>
              <para>demonstrates JDBC
        functionality via an Applet. It also demonstrates the additional Resultset navigation
        functionality provided by JDBC 2.0</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>RowSetDemo</title>
              <para>demonstrates JDBC
        functionality via an Applet. It also demonstrates the additional Resultset navigation
        functionality provided by OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC
        on a RowSet by RowSet Basis.</para>
            </formalpara>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_SimpleJDBCDemo">
        <title>JDBCDemo</title>
        <para>This applet demonstrates basic JDBC functionality via an Applet.</para>
        <para>Utilization Steps:</para>
        <orderedlist>
          <listitem>
            <para>Start the OpenLink Request Broker




    <!-- (click <ulink url="../nt/servnt.htm#Startup">here</ulink> for instructions on how to do this under Windows
        and <ulink url="../servadm.htm#Startup">here</ulink> on how to do this on Linux or UNIX machines)<br> -->

                    </para>
          </listitem>
          <listitem>
            <para>Start up your Web Browser
        </para>
          </listitem>
          <listitem>
            <para>Enter one of the following URLs into your browser depending on the location of your OpenLink Request Broker:</para>
            <para>Local To you:</para>
            <programlisting><![CDATA[http://localhost:8000]]></programlisting>
            <para>Remote Server:</para>
            <programlisting><![CDATA[http://<hostname or IP address of remote server>:8000]]></programlisting>
            <note>
              <title>Note:</title>
              <para>Port "8000" presumes that you provide this value when prompted during your
        OpenLink Sever components installation.</para>
            </note>
          </listitem>
          <listitem>
            <para>Follow the Admin Assistant's Menu tree to the location of
        the "Sample Applications-&gt;JDBC Applet Demos" menu item. The graphic below
        depicts this process.</para>
            <figure xml:id="mt_fg-001" floatstyle="normal">
              <title>JDBC Applet Demos</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls0x.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the hyperlink that reads "Applet
        demonstration with OpenLink Software JDBC Driver"
        </para>
          </listitem>
          <listitem>
            <para>Use the Applet's File-&gt;Set Connection URL menu item to enter
        a URL to the data source. If uncertain follows the instructions laid out in
        the section covering OpenLink JDBC URL formats which
        shows you how to construct Type 1, 2, and 3 URL formats for your OpenLink Drivers for JDBC. This applet
        will run with non OpenLink Drivers for JDBC but you will need to obtain URL construction
        information from the relevant driver vendor.</para>
            <para>
        The line below depicts the URL construction dialog presented:</para>
            <programlisting><![CDATA[jdbc:openlink://localhost/SVT=Oracle 7/DATABASE=ORCL/UID=scott/PWD=tiger]]></programlisting>
          </listitem>
          <listitem>
            <para>Enter a valid SQL statement for the backend database that
        you are connecting to via JDBC and then click on the "Query" button. The screen
        shot below depicts this process:</para>
            <figure xml:id="mt_fg-002" floatstyle="normal">
              <title>WebJDBC Applet Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls09.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Basic JDBC 1.1 functionality provides Forward-Only as
        opposed to Bi-Directional record Scrolling, this is why the basic JDBC applet on has a
        "Next" button. When you click on the "Next" button you are moved to
        the next record in your JDBC resultset, unfortunately you have to hit the
        "Query" button again and re-start the Forward-Only resultset navigation if you
        need to see the First or Prior resultset records from your current position. The examples
        that follow show how OpenLink and the new release of JDBC (version 2.0) address the
        Bi-Directional Scrolling Limitation demonstrated by this Applet.
        </para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_ScrollDemo">
        <title>ScrollDemo</title>
        <para>This program demonstrates JDBC functionality via an
    Applet. It also demonstrates the additional Resultset navigation functionality provided by
    OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC on a Record by Record
    Basis.</para>
        <para>Utilization Steps:</para>
        <orderedlist>
          <listitem>
            <para>Start the OpenLink Request Broker.





<!-- (click <ulink url="../nt/servnt.htm#Startup">here</ulink> for instructions on how to do this under Windows
        and <ulink url="../servadm.htm#Startup">here</ulink> on how to do this on Linux or UNIX machines)<br> -->

                    </para>
          </listitem>
          <listitem>
            <para>Start up your Web Browser</para>
          </listitem>
          <listitem>
            <para>Enter one of the following URLs into your browser
        depending on the location of your OpenLink Request Broker:</para>
            <para>Local To you:</para>
            <para>http://localhost:8000</para>
            <para>Remote Server:</para>
            <para>http://&lt;hostname or IP address of remote server&gt;:8000</para>
            <note>
              <title>Note:</title>
              <para>Port "8000" presumes that you provide this value when prompted during your
        OpenLink Sever components installation.
        </para>
            </note>
          </listitem>
          <listitem>
            <para>Follow the Admin Assistant's Menu tree to the location of
        the "JDBC Applet Demos" menu item. The graphic below depicts this process.</para>
            <figure xml:id="mt_fg-003" floatstyle="normal">
              <title>WebJDBC Applet Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls0x.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the hyperlink that reads "Applet
        demonstration with OpenLink Software JDBC Scrollable Cursor extensions"
        </para>
          </listitem>
          <listitem>
            <para>Use the Applet's File-&gt;Set Connection URL menu item to enter
        a URL to the data source. If uncertain follows the instructions laid out in
        the section covering OpenLink JDBC URL formats which
        shows you how to construct Type 1, 2, and 3 URL formats for your OpenLink Drivers for JDBC.</para>
            <para>The line below depicts the URL construction dialog presented:</para>
            <programlisting><![CDATA[jdbc:openlink://localhost/SVT=Oracle 7/DATABASE=ORCL/UID=scott/PWD=tiger]]></programlisting>
          </listitem>
          <listitem>
            <para>Enter a valid SQL statement for the backend database that
        you are connecting to via JDBC and then click on the "Query" button. The screen
        shot below depicts this process:</para>
            <figure xml:id="mt_fg-004" floatstyle="normal">
              <title>WebScroll Applet Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls12.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>JDBC 1.1 functionality provides Forward-Only as opposed to
        Bi-Directional Resultset Scrolling, OpenLink's Scrollable Resultset Extensions for JDBC
        enable Bi-Directional Resultset Scrolling. This is why this applet has an additional set
        of Resultset Navigation buttons: "First","Next",
        "Prior","Last", "Lock", "Unlock", "Add",
        "Update", "Get Bookmark", "Set Bookmark", "and Go
        To" .  The existence of Bi-directional Scrollable Resultsets (or Cursors) is
        often presumed by end-users and developers alike, its importance rarely understood prior
        to embarking upon JDBC application development or product selection, the unfortunate
        consequence being complex application re-writes or implementation of sub par JDBC
        solutions. Each of the button in the applet demo is explained below so as to understand
        the magnitude of this issue:</para>
            <table>
              <title>Scroll Demo Keys Explained</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>Button</entry>
                    <entry>Explanation</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>First</entry>
                    <entry>takes you to first record in the Resultset</entry>
                  </row>
                  <row>
                    <entry>Next</entry>
                    <entry>takes you to the next record in the Resultset from your current position</entry>
                  </row>
                  <row>
                    <entry>Prior</entry>
                    <entry>takes you to the previous record in the Resultset from your current position</entry>
                  </row>
                  <row>
                    <entry>Last</entry>
                    <entry>takes you to the last record in the Resultset</entry>
                  </row>
                  <row>
                    <entry>Lock</entry>
                    <entry>locks the current record</entry>
                  </row>
                  <row>
                    <entry>Unlock</entry>
                    <entry>unlocks the current record</entry>
                  </row>
                  <row>
                    <entry>Add</entry>
                    <entry>add a new record to database</entry>
                  </row>
                  <row>
                    <entry>Update</entry>
                    <entry>change current record</entry>
                  </row>
                  <row>
                    <entry>Delete</entry>
                    <entry>remove current record from database</entry>
                  </row>
                  <row>
                    <entry>Get Bookmark</entry>
                    <entry>mark current record position for future revisit</entry>
                  </row>
                  <row>
                    <entry>Set Bookmark</entry>
                    <entry>revisit previous marked position in current ResultSet</entry>
                  </row>
                  <row>
                    <entry>Go To</entry>
                    <entry>go directly to a specific record number within the current ResultSet</entry>
                  </row>
                  <row>
                    <entry>Refresh</entry>
                    <entry>Reopen current resultset</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_Scroll2Demo">
        <title>ScrollDemo2</title>
        <para>This applet demonstrates JDBC functionality via an
    Applet. It also demonstrates the additional Resultset navigation functionality provided by
    JDBC 2.0</para>
        <para>This Applet require a browser that is Java Virtual Machine version 1.2.x or 2.x compliant.
    If you do not have such a Browser, you can simply run the JDBC Application version of this program.</para>
        <para>Utilization Steps:</para>
        <orderedlist>
          <listitem>
            <para>Start the OpenLink Request Broker</para>
          </listitem>
          <listitem>
            <para>Start up your Web Browser</para>
          </listitem>
          <listitem>
            <para>Enter one of the following URLs into your browser
        depending on the location of your OpenLink Request Broker:</para>
            <para>Local To you:</para>
            <para>http://localhost:8000/</para>
            <para>Remote Server:</para>
            <para>http://&lt;hostname or IP address of remote server&gt;:8000</para>
            <note>
              <title>Note:</title>
              <para>Port "8000" presumes that you provide this value when prompted during your
        OpenLink Sever components installation.</para>
            </note>
          </listitem>
          <listitem>
            <para>Follow the Admin Assistant's Menu tree to the location of
        the "Sample Applications-&gt;JDBC Applet Demos" menu item. The graphic below
        depicts this process.</para>
            <figure xml:id="mt_fg-005" floatstyle="normal">
              <title>Scroll2 Applet Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls0x.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the hyperlink that reads "Applet
        demonstration with OpenLink Software JDBC 2.0 Scrollable Cursors"
        </para>
          </listitem>
          <listitem>
            <para>Use the Applet's File-&gt;Set Connection URL menu item set
        register your Driver for JDBC 2.0 and then enter a URL pointing to an ODBC DSN. If
        uncertain follow the instructions laid out in the section covering OpenLink JDBC URL formats which shows you how to
        construct Type 1, and 3 URL formats for your OpenLink Drivers for JDBC. This applet will
        run with non OpenLink Drivers for JDBC but you will need to obtain Driver registration and
        JDBC URL construction information from the relevant Driver vendor.</para>
            <para>
        The screen shot below depicts the URL construction dialog presented:</para>
            <figure xml:id="mt_fg-006" floatstyle="normal">
              <title>Connection dialog</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls08.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a valid SQL statement for the backend database that
        you are connecting to via JDBC and then click on the "Query" button.
        </para>
          </listitem>
          <listitem>
            <para>JDBC 1.1 functionality provides Forward-Only as opposed to
        Bi-Directional Resultset Scrolling, JDBC 2.0 on the other hand supports Bi-Directional
        Resultset Scrolling. As a result this applet has an additional set of Resultset Navigation
        buttons: "First","Next", "Previous","Last",
        "Insert", "Update", "Absolute", "Relative".
        Unfortunately JDBC 2.0 does not provide Bookmarking or Row Level concurrency control hence
        the exclusion of the "Lock", "UnLock", "Go To", "Set
        Bookmark", "Get Bookmark" navigation buttons provided in the
        "ScrollDemo" applet. To use this functionality in a JDBC 2.0 environment you
        simply make use of the OpenLink Scrollable ResultSet &amp; RowSet Extensions.</para>
            <para>
        Each navigation button is described below so as to shed more light on the Scrollable
        ResultSet functionality provided by JDBC 2.0.</para>
            <table>
              <title>Scroll Demo Keys Explained</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>Button</entry>
                    <entry>Explanation</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>First</entry>
                    <entry>takes you to first record in the Resultset</entry>
                  </row>
                  <row>
                    <entry>Next</entry>
                    <entry>takes you to the next record in the Resultset from your current position</entry>
                  </row>
                  <row>
                    <entry>Previous</entry>
                    <entry>takes you to the previous record in the Resultset from your current position</entry>
                  </row>
                  <row>
                    <entry>Last</entry>
                    <entry>takes you to the last record in the Resultset</entry>
                  </row>
                  <row>
                    <entry>Add</entry>
                    <entry>add a new record to database</entry>
                  </row>
                  <row>
                    <entry>Update</entry>
                    <entry>change current record</entry>
                  </row>
                  <row>
                    <entry>Delete</entry>
                    <entry>remove current record from database</entry>
                  </row>
                  <row>
                    <entry>Relative</entry>
                    <entry>moves N number of records forward from the current record
        where N represents a value entered into the field beside the "Relative" button.
        IF the field contains a negative number then it indicates a backwards move.</entry>
                  </row>
                  <row>
                    <entry>Absolute</entry>
                    <entry>go directly to  record number N within the current
        ResultSet where N represents a value entered into the field beside the
        "Relative" button, the actual direction of Resultset navigation depends on the
        actual location of the record in question</entry>
                  </row>
                  <row>
                    <entry>Refresh</entry>
                    <entry>Reopen current resultset</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_RowSetDemo">
        <title>RowSetDemo</title>
        <para>This applet demonstrates JDBC functionality via an
    Applet. It also demonstrates the additional Resultset navigation functionality provided by
    OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC on a RowSet by RowSet
    Basis.</para>
        <para>Utilization Steps:</para>
        <orderedlist>
          <listitem>
            <para>Start the OpenLink Request Broker</para>
          </listitem>
          <listitem>
            <para>Start up your Web Browser</para>
          </listitem>
          <listitem>
            <para>Enter one of the following URLs into your browser depending on the location of your OpenLink Request Broker:</para>
            <para>Local To you:</para>
            <programlisting><![CDATA[http://localhost:8000]]></programlisting>
            <para>Remote Server:</para>
            <programlisting><![CDATA[http://<hostname or IP address of remote server>:8000]]></programlisting>
            <note>
              <title>Note:</title>
              <para>Port "8000" presumes that you provide this value when prompted during your
        OpenLink Sever components installation.</para>
            </note>
          </listitem>
          <listitem>
            <para>Follow the Admin Assistant's Menu tree to the location of
        the "Sample Applications-&gt;JDBC Applet Demos" menu item. The graphic below
        depicts this process.</para>
            <figure xml:id="mt_fg-007" floatstyle="normal">
              <title>Connection dialog</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls0x.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the hyperlink that reads "Applet
        demonstration with OpenLink Software JDBC Scrollable Cursor RowSet Extensions"</para>
          </listitem>
          <listitem>
            <para>Use the Applet's File-&gt;Set Connection URL menu item set
        a URL pointing to an ODBC DSN. If uncertain follows the instructions laid out in
        the section covering OpenLink JDBC URL formats which shows you how to construct Type 1 and 3 URL
            formats for your OpenLink Drivers for JDBC. This applet
        will run with non OpenLink Drivers for JDBC but you will need to obtain URL construction
        information from the relevant driver vendor.</para>
            <para>The screen shot below depicts the URL construction dialog presented:</para>
            <figure xml:id="mt_fg-008" floatstyle="normal">
              <title>URL Construction</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls08.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a valid SQL statement for the backend database that
        you are connecting to via JDBC and then click on the "Query" button. The screen
        shot below depicts this process:</para>
            <figure xml:id="mt_fg-009" floatstyle="normal">
              <title>Querying</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="clicls15.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>JDBC 1.1 functionality provides Forward-Only as opposed to
        Bi-Directional Resultset Scrolling, JDBC 2.0 provides Scrollable Resultsets but does not
        provide Bookmarking or Attached RowSets (transient RowSets located in the same process
        space as the ResultSet). OpenLink's Scrollable Resultset Extensions for JDBC address these
        issues irrespective of JDBC version. As a result this applet has an additional set of
        Resultset Navigation buttons when compared to the basic JDBC 2.0 Applet
        in the prior section, the buttons are: "First","Next",
        "Prior","Last", "Lock", "Unlock", "Add",
        "Update", "Get Bookmark", "Set Bookmark", "and Go
        To" .  The existence of transient RowSets due to Bi-directional Scrollable
        Resultsets (or Cursors) in JDBC 2.0 is more than likely presumed to exist by end-users and
        developers alike, it is important that you take note of this before embarking upon JDBC
        2.0 application development or product selection. Each of the buttons in the Applet demo
        is explained below so as to assist in the understanding of these matters:</para>
            <table>
              <title>Scroll Demo Keys Explained</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>Button</entry>
                    <entry>Explanation</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>First</entry>
                    <entry>takes you to first RowSet in the Resultset</entry>
                  </row>
                  <row>
                    <entry>Next</entry>
                    <entry>takes you to the next RowSet in the Resultset from your current position</entry>
                  </row>
                  <row>
                    <entry>Prior</entry>
                    <entry>takes you to the previous RowSet in the Resultset from your current position</entry>
                  </row>
                  <row>
                    <entry>Last</entry>
                    <entry>takes you to the last RowSet in the Resultset</entry>
                  </row>
                  <row>
                    <entry>Lock</entry>
                    <entry>locks the current RowSet</entry>
                  </row>
                  <row>
                    <entry>Unlock</entry>
                    <entry>unlocks the current RowSet</entry>
                  </row>
                  <row>
                    <entry>Add</entry>
                    <entry>add a new record to database</entry>
                  </row>
                  <row>
                    <entry>Update</entry>
                    <entry>change current record with the current RowSet of </entry>
                  </row>
                  <row>
                    <entry>Delete</entry>
                    <entry>remove current record from within the current RowSet from the database</entry>
                  </row>
                  <row>
                    <entry>Get Bookmark</entry>
                    <entry>mark current RowSet within Resultset for future revisit</entry>
                  </row>
                  <row>
                    <entry>Set Bookmark</entry>
                    <entry>revisit previous marked RowSet position in current ResultSet</entry>
                  </row>
                  <row>
                    <entry>Go To</entry>
                    <entry>go directly to a specific record number within the current ResultSet</entry>
                  </row>
                  <row>
                    <entry>Refresh</entry>
                    <entry>Reopen current resultset</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_JDBCDemoApplications">
        <title>JDBC compliant Application Demos</title>
        <para>All the JDBC compliant Applet demos described in the
    previous sections have also been implemented as JDBC compliant Applications Demos, you can
    run these programs in a number of ways depending on operating system hosting your Java
    Virtual Machine.</para>
        <section xml:id="mt_WindowsJDBCAppDemos">
          <title>Windows 95/98/NT/2000</title>
          <orderedlist>
            <listitem>
              <para>Click on your Windows Start Menu Button</para>
            </listitem>
            <listitem>
              <para>Select the "OpenLink Data Access Drivers" Start Menu Group
        </para>
            </listitem>
            <listitem>
              <para>Locate the "JDBC Samples" Menu Item
        </para>
            </listitem>
            <listitem>
              <para>Choose from the list of JDBC Applications presented
        </para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_LinuxJDBCAppDemos">
          <title>Linux or UNIX</title>
          <orderedlist>
            <listitem>
              <para>Move into your OpenLink base installation directory
        </para>
            </listitem>
            <listitem>
              <para>The move to the following directory listing output maps
        out the location of the various JDBC Application demos by Java Virtual Machine version:
        </para>
              <screen><![CDATA[
JDBC/jdk1.1.x/Applications:
JDBCDemo RowSetDemo ScrollDemo
JDBC/jdk1.1.x/Applications/JDBCDemo:
DialogConnection.class JDBCDemo.class
DialogConnection.java JDBCDemo.java
JDBC/jdk1.1.x/Applications/RowSetDemo:
DataTextField.class DialogConnection.java readme.txt
DataTextField.java RowSetDemo.class
DialogConnection.class RowSetDemo.java
JDBC/jdk1.1.x/Applications/ScrollDemo:
DialogConnection.class ScrollDemo.class readme.txt
DialogConnection.java ScrollDemo.java
JDBC/jdk1.2.x/Applications:
JDBCDemo RowSetDemo ScrollDemo ScrollDemo2
JDBC/jdk1.2.x/Applications/JDBCDemo:
DialogConnection.class JDBCDemo.class
DialogConnection.java JDBCDemo.java
JDBC/jdk1.2.x/Applications/RowSetDemo:
DataTextField.class DialogConnection.java readme.txt
DataTextField.java RowSetDemo.class
DialogConnection.class RowSetDemo.java
JDBC/jdk1.2.x/Applications/ScrollDemo:
DialogConnection.class ScrollDemo.class readme.txt
DialogConnection.java ScrollDemo.java
JDBC/jdk1.2.x/Applications/ScrollDemo2:
DialogConnection.class ScrollDemo2.class
DialogConnection.java ScrollDemo2.java
JDBC/jdk1.3.x/Applications:
JDBCDemo RowSetDemo ScrollDemo ScrollDemo2
JDBC/jdk1.3.x/Applications/JDBCDemo:
DialogConnection.class JDBCDemo.class
DialogConnection.java JDBCDemo.java
JDBC/jdk1.3.x/Applications/RowSetDemo:
DataTextField.class DialogConnection.java readme.txt
DataTextField.java RowSetDemo.class
DialogConnection.class RowSetDemo.java
JDBC/jdk1.3.x/Applications/ScrollDemo:
DialogConnection.class ScrollDemo.class readme.txt
DialogConnection.java ScrollDemo.java
JDBC/jdk1.3.x/Applications/ScrollDemo2:
DialogConnection.class ScrollDemo2.class
DialogConnection.java ScrollDemo2.java
]]></screen>
            </listitem>
            <listitem>
              <para>Move into the appropriate directory and then execute the
        following command:</para>
              <programlisting><![CDATA[java <classname>]]></programlisting>
              <para>where "&lt;classname&gt;" represents the JDBC class file hosting your JDBC
        application demo. For instance if you wanted to run the "RowSetDemo" JDBC
        application you would type the following:</para>
              <programlisting><![CDATA[java RowSetDemo]]></programlisting>
            </listitem>
          </orderedlist>
        </section>
      </section>
    </section>

    <!-- ######################################## -->
    <section xml:id="mt_ImportantJDBCIssues">
      <title>Important Multi-User JDBC Solution Development &amp; Utilization Issues</title>
      <section xml:id="mt_ChangeSensitivity">
        <title>Sensitivity To Changes In Underlying Database</title>
        <para>It is extremely important to application developers and end-users alike to understand the
    degree to which the Resultsets presented to them by a JDBC solution are actually sensitive
    to underlying changes in the source database. JDBC 1.1 not only fails to provide you with
    Bi-directional Resultset Scrolling, it also presents what is basically a snapshot of the
    data in your database at the time a JDBC query is executed. This has the effect of
    increasing Multi-User JDBC solution development complexity or limiting the functionality
    and usability of JDBC by end-users.</para>
        <para>Sensitive to changes in underlying database takes many
    forms, this includes: Static, KeySet, Dynamic, and Mixed modes of sensitivity.</para>
        <formalpara>
          <title>Static</title>
          <para> - same as basic JDBC, records scrolling occurs over a database
    snapshot and is insensitive to underlying change by other users</para>
        </formalpara>
        <formalpara>
          <title>KeySet</title>
          <para> - JDBC resultset records scroll over a set of record identifiers
    uniquely identifying records in the underlying database, this type of scrolling is
    sensitive to changes is those records with identifiers at the time of query execution.
    This form of scrolling is insensitive to record record additions or deletions.</para>
        </formalpara>
        <formalpara>
          <title>Dynamic</title>
          <para> - JDBC resultset records scroll over a set of record identifiers
    uniquely identifying records in the underlying database, these unique identifiers are
    recreated before each RowSet traversal (collection of resultset records used as scrolling
    marker or sliding window or Cursor), rather than once at query execution time. This type
    of scrolling is sensitive to all changes in the underlying database but may introduce a
    performance penalties depending on the size of RowSets and available network bandwidth.</para>
        </formalpara>
        <formalpara>
          <title>Mixed</title>
          <para> - JDBC resultset records scroll over a set of record identifiers
    uniquely identifying records in the underlying database, these unique identifiers are
    created to a limited size (known as the KeySet Size) at query execution time, only when
    RowSet traversal goes beyond the existing set of unique row identifiers is another
    collection of unique identifiers assembled. This type of scrolling is sensitive to all
    changes in the underlying database, but insensitive to Additions or Deletions affecting
    records in the current RowSet scrolling across a current KeySet, once KeySet boundaries
    are crossed Insertions or Deletions are recognized. This mode of sensitivity provides
    increased performance and the expense of reduced sensitivity.</para>
        </formalpara>
      </section>
      <section xml:id="mt_ConcurrencyControl">
        <title>Concurrency Control</title>
        <para>In addition to being sensitive to changes in the underlying database, Multi-User
    applications need to be able to protect users and application processes from the effects
    of one another when the same record or collection of records are being manipulated at the
    same time. The process by which these issue are addressed is known as Concurrency Control.</para>
        <para>
    Concurrency control occurs in one of two ways, Optimistic or Pessimistic control. </para>
        <formalpara>
          <title>Optimistic Concurrency Control</title>
          <para> - presumes that probability and frequency
    of multiple users and processes instigating changes to the same database records is low.
    As result when an end-user or  process attempts to change records it first of all
    determines if the record values at the point of change are still the same as what they
    were at the time of retrieval. If they are unchanged at the point of change then the
    change occurs otherwise the change process is rejected and then re-attempted. Although
    this reduces concurrent user latency, it does have the knock on effect of reducing data
    integrity if changes rejections aren't managed carefully.</para>
        </formalpara>
        <formalpara>
          <title>Pessimistic Concurrency Control</title>
          <para> - presumes that the probability and
    frequency of multiple user processing and instigating changes to the same records is high.
    As a result an end-user or process attempts to changes records it first of all secures
    Exclusive Locks on the records in question, performs the changes, and then releases the
    locks. Although this increases and preserves data integrity it does introduce concurrent
    use latency , which is perceived as performance degradation by the end-user or application
    developer.</para>
        </formalpara>
        <para>
    OpenLink's Scrollable ResultSet and RowSet extensions for JDBC all the Multi-User JDBC
    solution issues raised in this section, our bundled and </para>
        <programlisting><![CDATA[http://www.openlinksw.com/demo]]></programlisting>
        <para>live online demonstrations enable you to evaluate this for yourself and ultimately make a
    knowledgeable JDBC Driver product and vendor selection.</para>
      </section>
    </section>
    <section xml:id="mt_jdbcref">
      <info>
        <title>JDBC 3 Driver Classes</title>
        <keywordset>
          <keyword>JDBC3 Driver</keyword>
          <keyword>JDBC 3 Driver</keyword>
        </keywordset>
      </info>
      <para>The OpenLink JDBC driver for JDBC 3.0 has the following classes:</para>
      <section xml:id="mt_jd1.1" xreflabel="Class BaseRowSet">
        <title>Class BaseRowSet</title>
        <indexterm significance="normal">
          <primary>BaseRowSet</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>BaseRowSet</secondary>
        </indexterm>
        <section xml:id="mt_jd1.1.1">
          <title>Synopsis</title>
          <programlisting><![CDATA[
abstract public class ]]><emphasis role="strong">BaseRowSet</emphasis><![CDATA[ implements RowSet,Serializable {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">BaseRowSet</emphasis><![CDATA[();
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">addRowSetListener</emphasis><![CDATA[(javax.sql.RowSetListener ]]><emphasis>rowsetlistener</emphasis><![CDATA[);
  public void ]]><emphasis role="strong">removeRowSetListener</emphasis><![CDATA[(javax.sql.RowSetListener ]]><emphasis>rowsetlistener</emphasis><![CDATA[);
  public void ]]><emphasis role="strong">clearParameters</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getCommand</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getConcurrency</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getDataSourceName</emphasis><![CDATA[();
  public boolean ]]><emphasis role="strong">getEscapeProcessing</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getFetchDirection</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getFetchSize</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getMaxFieldSize</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getMaxRows</emphasis><![CDATA[() throws java.sql.SQLException;
  public Object[] ]]><emphasis role="strong">getParams</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getPassword</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getQueryTimeout</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getTransactionIsolation</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getType</emphasis><![CDATA[() throws java.sql.SQLException;
  public Map ]]><emphasis role="strong">getTypeMap</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getUrl</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getUsername</emphasis><![CDATA[();
  public boolean ]]><emphasis role="strong">isReadOnly</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setArray</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setAsciiStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                             int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setBigDecimal</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setBinaryStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                              int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setBlob</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setBoolean</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setByte</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setBytes</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setCharacterStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                 int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setClob</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setDate</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setDate</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[, 
                      java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setDouble</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setFloat</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setInt</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setLong</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setRef</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setShort</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setString</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTime</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTime</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[, 
                      java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTimestamp</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTimestamp</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[, 
                           java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setUnicodeStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                               int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setNull</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, int ]]><emphasis>sqlType</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setNull</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, int ]]><emphasis>sqlType</emphasis><![CDATA[, 
                      java.lang.String ]]><emphasis>typeName</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setObject</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setObject</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                        int ]]><emphasis>targetSqlType</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setObject</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                        int ]]><emphasis>targetSqlType</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setCommand</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setConcurrency</emphasis><![CDATA[(int ]]><emphasis>i</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setDataSourceName</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setEscapeProcessing</emphasis><![CDATA[(boolean ]]><emphasis>flag</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setFetchDirection</emphasis><![CDATA[(int ]]><emphasis>direction</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setFetchSize</emphasis><![CDATA[(int ]]><emphasis>rows</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setMaxFieldSize</emphasis><![CDATA[(int ]]><emphasis>max</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setMaxRows</emphasis><![CDATA[(int ]]><emphasis>max</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setQueryTimeout</emphasis><![CDATA[(int ]]><emphasis>seconds</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setReadOnly</emphasis><![CDATA[(boolean ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setPassword</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTransactionIsolation</emphasis><![CDATA[(int ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setType</emphasis><![CDATA[(int ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTypeMap</emphasis><![CDATA[(java.util.Map ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setUrl</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setUsername</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) throws java.sql.SQLException;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.BaseRowSet</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.1.2">
          <title>Members</title>
          <section xml:id="mt_jd1.1.2.1" xreflabel="Method addRowSetListener(javax.sql.RowSetListener)">
            <title>Method addRowSetListener(RowSetListener)</title>
            <indexterm significance="normal">
              <primary>addRowSetListener</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>addRowSetListener</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">addRowSetListener</emphasis><![CDATA[(
                        javax.sql.RowSetListener ]]><emphasis>rowsetlistener</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>listener</literal></emphasis> - an event listener</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
RowSet listener registration. Listeners are notified
 when an event occurs.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.2" xreflabel="Method clearParameters()">
            <title>Method clearParameters()</title>
            <indexterm significance="normal">
              <primary>clearParameters</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>clearParameters</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">clearParameters</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
In general, parameter values remain in force for repeated use of a
 RowSet. Setting a parameter value automatically clears its
 previous value. However, in some cases it is useful to immediately
 release the resources used by the current parameter values; this can
 be done by calling clearParameters.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.3" xreflabel="Method getCommand()">
            <title>Method getCommand()</title>
            <indexterm significance="normal">
              <primary>getCommand</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCommand</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getCommand</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the rowset's command property.
 The command property contains a command string that can be executed to
 fill the rowset with data. The default value is null.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.4" xreflabel="Method getConcurrency()">
            <title>Method getConcurrency()</title>
            <indexterm significance="normal">
              <primary>getConcurrency</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConcurrency</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getConcurrency</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the rowset concurrency.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.5" xreflabel="Method getDataSourceName()">
            <title>Method getDataSourceName()</title>
            <indexterm significance="normal">
              <primary>getDataSourceName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDataSourceName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getDataSourceName</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
The JNDI name that identifies a JDBC data source. Users should set
 either the url or data source name properties. The most recent
 property set is used to get a connection.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.6" xreflabel="Method getEscapeProcessing()">
            <title>Method getEscapeProcessing()</title>
            <indexterm significance="normal">
              <primary>getEscapeProcessing</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getEscapeProcessing</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getEscapeProcessing</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL to the database.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.7" xreflabel="Method getFetchDirection()">
            <title>Method getFetchDirection()</title>
            <indexterm significance="normal">
              <primary>getFetchDirection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFetchDirection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getFetchDirection</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine the fetch direction.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.8" xreflabel="Method getFetchSize()">
            <title>Method getFetchSize()</title>
            <indexterm significance="normal">
              <primary>getFetchSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFetchSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getFetchSize</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Determine the default fetch size.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.9" xreflabel="Method getMaxFieldSize()">
            <title>Method getMaxFieldSize()</title>
            <indexterm significance="normal">
              <primary>getMaxFieldSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMaxFieldSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMaxFieldSize</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The maxFieldSize limit (in bytes) is the maximum amount of data
 returned for any column value; it only applies to BINARY,
 VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR
 columns. If the limit is exceeded, the excess data is silently
 discarded.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.10" xreflabel="Method getMaxRows()">
            <title>Method getMaxRows()</title>
            <indexterm significance="normal">
              <primary>getMaxRows</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMaxRows</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMaxRows</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The maxRows limit is the maximum number of rows that a
 RowSet can contain. If the limit is exceeded, the excess
 rows are silently dropped.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.11" xreflabel="Method getParams()">
            <title>Method getParams()</title>
            <indexterm significance="normal">
              <primary>getParams</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getParams</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object[] ]]><emphasis role="strong">getParams</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the parameters that were set on the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.12" xreflabel="Method getPassword()">
            <title>Method getPassword()</title>
            <indexterm significance="normal">
              <primary>getPassword</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPassword</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getPassword</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
The password used to create a database connection. The password
 property is set at runtime before calling execute(). It is
 not usually part of the serialized state of a rowset object.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.13" xreflabel="Method getQueryTimeout()">
            <title>Method getQueryTimeout()</title>
            <indexterm significance="normal">
              <primary>getQueryTimeout</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getQueryTimeout</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getQueryTimeout</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The queryTimeout limit is the number of seconds the driver will
 wait for a Statement to execute. If the limit is exceeded, a
 SQLException is thrown.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.14" xreflabel="Method getTransactionIsolation()">
            <title>Method getTransactionIsolation()</title>
            <indexterm significance="normal">
              <primary>getTransactionIsolation</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTransactionIsolation</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getTransactionIsolation</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
The transaction isolation property contains the JDBC transaction
 isolation level used.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.15" xreflabel="Method getType()">
            <title>Method getType()</title>
            <indexterm significance="normal">
              <primary>getType</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getType</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getType</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Return the type of this result set.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.16" xreflabel="Method getTypeMap()">
            <title>Method getTypeMap()</title>
            <indexterm significance="normal">
              <primary>getTypeMap</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTypeMap</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Map ]]><emphasis role="strong">getTypeMap</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the type-map object associated with this rowset.
 By default, the map returned is empty.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.17" xreflabel="Method getUrl()">
            <title>Method getUrl()</title>
            <indexterm significance="normal">
              <primary>getUrl</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUrl</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getUrl</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the url used to create a JDBC connection. The default value
 is null.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.18" xreflabel="Method getUsername()">
            <title>Method getUsername()</title>
            <indexterm significance="normal">
              <primary>getUsername</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUsername</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getUsername</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
The username used to create a database connection. The username
 property is set at runtime before calling execute(). It is
 not usually part of the serialized state of a rowset object.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.19" xreflabel="Method isReadOnly()">
            <title>Method isReadOnly()</title>
            <indexterm significance="normal">
              <primary>isReadOnly</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isReadOnly</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isReadOnly</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
A rowset may be read-only. Attempts to update a
 read-only rowset will result in an SQLException being thrown.
 Rowsets are updateable, by default, if updates are possible.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.20" xreflabel="Method removeRowSetListener(javax.sql.RowSetListener)">
            <title>Method removeRowSetListener(RowSetListener)</title>
            <indexterm significance="normal">
              <primary>removeRowSetListener</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>removeRowSetListener</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">removeRowSetListener</emphasis><![CDATA[(
                        javax.sql.RowSetListener ]]><emphasis>rowsetlistener</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>listener</literal></emphasis> - an event listener</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
RowSet listener deregistration.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.21" xreflabel="Method setArray(int, java.sql.Array)">
            <title>Method setArray(int, Array)</title>
            <indexterm significance="normal">
              <primary>setArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setArray</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - an object representing an SQL array</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set an Array parameter.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.22" xreflabel="Method setAsciiStream(int, java.io.InputStream, int)">
            <title>Method setAsciiStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>setAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setAsciiStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                     int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the java input stream which contains the ASCII parameter value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the number of bytes in the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
When a very large ASCII value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
            <para><emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.23" xreflabel="Method setBigDecimal(int, java.math.BigDecimal)">
            <title>Method setBigDecimal(int, BigDecimal)</title>
            <indexterm significance="normal">
              <primary>setBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setBigDecimal</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.lang.BigDecimal value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.24" xreflabel="Method setBinaryStream(int, java.io.InputStream, int)">
            <title>Method setBinaryStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>setBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setBinaryStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, 
                                      java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the java input stream which contains the binary parameter value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the number of bytes in the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
When a very large binary value is input to a LONGVARBINARY
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
            <para><emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.25" xreflabel="Method setBlob(int, java.sql.Blob)">
            <title>Method setBlob(int, Blob)</title>
            <indexterm significance="normal">
              <primary>setBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setBlob</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - an object representing a BLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a BLOB parameter.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.26" xreflabel="Method setBoolean(int, boolean)">
            <title>Method setBoolean(int, boolean)</title>
            <indexterm significance="normal">
              <primary>setBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setBoolean</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java boolean value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.27" xreflabel="Method setByte(int, byte)">
            <title>Method setByte(int, byte)</title>
            <indexterm significance="normal">
              <primary>setByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setByte</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java byte value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.28" xreflabel="Method setBytes(int, byte[])">
            <title>Method setBytes(int, byte[])</title>
            <indexterm significance="normal">
              <primary>setBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setBytes</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java array of bytes.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.29" xreflabel="Method setCharacterStream(int, java.io.Reader, int)">
            <title>Method setCharacterStream(int, Reader, int)</title>
            <indexterm significance="normal">
              <primary>setCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCharacterStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                         int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the java reader which contains the UNICODE data</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the number of characters in the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
When a very large UNICODE value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.Reader. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
            <para><emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.30" xreflabel="Method setClob(int, java.sql.Clob)">
            <title>Method setClob(int, Clob)</title>
            <indexterm significance="normal">
              <primary>setClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setClob</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - an object representing a CLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a CLOB parameter.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.31" xreflabel="Method setCommand(java.lang.String)">
            <title>Method setCommand(String)</title>
            <indexterm significance="normal">
              <primary>setCommand</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCommand</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCommand</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>cmd</literal></emphasis> - a command string, may be null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the rowset's command property.
 This property is optional. The command property may not be needed
 when a rowset is produced by a data source that doesn't support
 commands, such as a spreadsheet.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.32" xreflabel="Method setConcurrency(int)">
            <title>Method setConcurrency(int)</title>
            <indexterm significance="normal">
              <primary>setConcurrency</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setConcurrency</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setConcurrency</emphasis><![CDATA[(int ]]><emphasis>i</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>concurrency</literal></emphasis> - a value from ResultSet.CONCUR_XXX</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the rowset concurrency.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.33" xreflabel="Method setDataSourceName(java.lang.String)">
            <title>Method setDataSourceName(String)</title>
            <indexterm significance="normal">
              <primary>setDataSourceName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDataSourceName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDataSourceName</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>name</literal></emphasis> - a data source name</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the data source name.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.34" xreflabel="Method setDate(int, java.sql.Date)">
            <title>Method setDate(int, Date)</title>
            <indexterm significance="normal">
              <primary>setDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDate</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.sql.Date value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.35" xreflabel="Method setDate(int, java.sql.Date, java.util.Calendar)">
            <title>Method setDate(int, Date, Calendar)</title>
            <indexterm significance="normal">
              <primary>setDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDate</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[, 
                              java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.sql.Date value. The driver converts this
 to a SQL DATE value when it sends it to the database.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.36" xreflabel="Method setDouble(int, double)">
            <title>Method setDouble(int, double)</title>
            <indexterm significance="normal">
              <primary>setDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDouble</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java double value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.37" xreflabel="Method setEscapeProcessing(boolean)">
            <title>Method setEscapeProcessing(boolean)</title>
            <indexterm significance="normal">
              <primary>setEscapeProcessing</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setEscapeProcessing</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setEscapeProcessing</emphasis><![CDATA[(boolean ]]><emphasis>flag</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>enable</literal></emphasis> - true to enable; false to disable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL to the database.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.38" xreflabel="Method setFetchDirection(int)">
            <title>Method setFetchDirection(int)</title>
            <indexterm significance="normal">
              <primary>setFetchDirection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setFetchDirection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setFetchDirection</emphasis><![CDATA[(int ]]><emphasis>direction</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 the result set type is TYPE_FORWARD_ONLY and direction is not
 FETCH_FORWARD.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Give a hint as to the direction in which the rows in this result set
 will be processed. The initial value is determined by the statement
 that produced the result set. The fetch direction may be changed
 at any time.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.39" xreflabel="Method setFetchSize(int)">
            <title>Method setFetchSize(int)</title>
            <indexterm significance="normal">
              <primary>setFetchSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setFetchSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setFetchSize</emphasis><![CDATA[(int ]]><emphasis>rows</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>rows</literal></emphasis> - the number of rows to fetch</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or the
 condition 0 &lt;= rows &lt;= this.getMaxRows() is not satisfied.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Give the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for this result
 set. If the fetch size specified is zero, then the JDBC driver
 ignores the value, and is free to make its own best guess as to what
 the fetch size should be. The default value is set by the statement
 that creates the result set. The fetch size may be changed at any
 time.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.40" xreflabel="Method setFloat(int, float)">
            <title>Method setFloat(int, float)</title>
            <indexterm significance="normal">
              <primary>setFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setFloat</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java float value. The driver converts this
 to a SQL FLOAT value when it sends it to the database.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.41" xreflabel="Method setInt(int, int)">
            <title>Method setInt(int, int)</title>
            <indexterm significance="normal">
              <primary>setInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setInt</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java int value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.42" xreflabel="Method setLong(int, long)">
            <title>Method setLong(int, long)</title>
            <indexterm significance="normal">
              <primary>setLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setLong</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java long value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.43" xreflabel="Method setMaxFieldSize(int)">
            <title>Method setMaxFieldSize(int)</title>
            <indexterm significance="normal">
              <primary>setMaxFieldSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMaxFieldSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMaxFieldSize</emphasis><![CDATA[(int ]]><emphasis>max</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>max</literal></emphasis> - the new max column size limit; zero means unlimited</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The maxFieldSize limit (in bytes) is set to limit the size of
 data that can be returned for any column value; it only applies
 to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and
 LONGVARCHAR fields. If the limit is exceeded, the excess data
 is silently discarded. For maximum portability use values
 greater than 256.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.44" xreflabel="Method setMaxRows(int)">
            <title>Method setMaxRows(int)</title>
            <indexterm significance="normal">
              <primary>setMaxRows</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMaxRows</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMaxRows</emphasis><![CDATA[(int ]]><emphasis>max</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>max</literal></emphasis> - the new max rows limit; zero means unlimited</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The maxRows limit is set to limit the number of rows that any
 RowSet can contain. If the limit is exceeded, the excess
 rows are silently dropped.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.45" xreflabel="Method setNull(int, int)">
            <title>Method setNull(int, int)</title>
            <indexterm significance="normal">
              <primary>setNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setNull</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, int ]]><emphasis>sqlType</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>sqlType</literal></emphasis> - SQL type code defined by java.sql.Types</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to SQL NULL. 
        </para>
            <para><emphasis>Note:</emphasis> You must specify the parameter's SQL type.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.46" xreflabel="Method setNull(int, int, java.lang.String)">
            <title>Method setNull(int, int, String)</title>
            <indexterm significance="normal">
              <primary>setNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setNull</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, int ]]><emphasis>sqlType</emphasis><![CDATA[, 
                              java.lang.String ]]><emphasis>typeName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>sqlType</literal></emphasis> - a value from java.sql.Types</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>typeName</literal></emphasis> - the fully-qualified name of an SQL user-named type,
 ignored if the parameter is not a user-named type or REF</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets the designated parameter to SQL NULL. This version of setNull should
 be used for user-named types and REF type parameters. Examples
 of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
 named array types. 
        </para>
            <para><emphasis>Note:</emphasis> To be portable, applications must give the
 SQL type code and the fully-qualified SQL type name when specifying
 a NULL user-defined or REF parameter. In the case of a user-named type
 the name is the type name of the parameter itself. For a REF
 parameter the name is the type name of the referenced type. If
 a JDBC driver does not need the type code or type name information,
 it may ignore it.
 Although it is intended for user-named and Ref parameters,
 this method may be used to set a null parameter of any JDBC type.
 If the parameter does not have a user-named or REF type, the given
 typeName is ignored.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.47" xreflabel="Method setObject(int, java.lang.Object)">
            <title>Method setObject(int, Object)</title>
            <indexterm significance="normal">
              <primary>setObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setObject</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - The first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - The object containing the input parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the value of a parameter using an object; use the
 java.lang equivalent objects for integral values. 
        </para>
            <para>
The JDBC specification specifies a standard mapping from
 Java Object types to SQL types. The given argument java object
 will be converted to the corresponding SQL type before being
 sent to the database. 
        </para>
            <para>
Note that this method may be used to pass datatabase
 specific abstract data types, by using a Driver specific Java
 type.
 If the object is of a class implementing SQLData,
 the rowset should call its method writeSQL() to write it
 to the SQL data stream.
 else
 If the object is of a class implementing Ref, Blob, Clob, Struct,
 or Array then pass it to the database as a value of the
 corresponding SQL type.
 Raise an exception if there is an ambiguity, for example, if the
 object is of a class implementing more than one of those interfaces.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.48" xreflabel="Method setObject(int, java.lang.Object, int)">
            <title>Method setObject(int, Object, int)</title>
            <indexterm significance="normal">
              <primary>setObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setObject</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                                int ]]><emphasis>targetSqlType</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
This method is like setObject above, but the scale used is the scale
 of the second parameter. Scalar values have a scale of zero. Literal
 values have the scale present in the literal. While it is supported, it
 is not recommended that this method not be called with floating point
 input values.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.49" xreflabel="Method setObject(int, java.lang.Object, int, int)">
            <title>Method setObject(int, Object, int, int)</title>
            <indexterm significance="normal">
              <primary>setObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setObject</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                                int ]]><emphasis>targetSqlType</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - The first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - The object containing the input parameter value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>targetSqlType</literal></emphasis> - The SQL type (as defined in java.sql.Types) to be
 sent to the database. The scale argument may further qualify this type.</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored,</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.Types</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the value of a parameter using an object; use the
 java.lang equivalent objects for integral values. 
        </para>
            <para>
The given Java object will be converted to the targetSqlType
 before being sent to the database.
 If the object is of a class implementing SQLData,
 the rowset should call its method writeSQL() to write it
 to the SQL data stream.
 else
 If the object is of a class implementing Ref, Blob, Clob, Struct,
 or Array then pass it to the database as a value of the
 corresponding SQL type. 
        </para>
            <para>
Note that this method may be used to pass datatabase-
 specific abstract data types.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.50" xreflabel="Method setPassword(java.lang.String)">
            <title>Method setPassword(String)</title>
            <indexterm significance="normal">
              <primary>setPassword</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setPassword</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setPassword</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>password</literal></emphasis> - the password string</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the password.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.51" xreflabel="Method setQueryTimeout(int)">
            <title>Method setQueryTimeout(int)</title>
            <indexterm significance="normal">
              <primary>setQueryTimeout</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setQueryTimeout</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setQueryTimeout</emphasis><![CDATA[(int ]]><emphasis>seconds</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>seconds</literal></emphasis> - the new query timeout limit in seconds; zero means
 unlimited</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The queryTimeout limit is the number of seconds the driver will
 wait for a Statement to execute. If the limit is exceeded, a
 SQLException is thrown.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.52" xreflabel="Method setReadOnly(boolean)">
            <title>Method setReadOnly(boolean)</title>
            <indexterm significance="normal">
              <primary>setReadOnly</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setReadOnly</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setReadOnly</emphasis><![CDATA[(boolean ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>value</literal></emphasis> - true if read-only, false otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the read-onlyness of the rowset
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.53" xreflabel="Method setRef(int, java.sql.Ref)">
            <title>Method setRef(int, Ref)</title>
            <indexterm significance="normal">
              <primary>setRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setRef</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - an object representing data of an SQL REF Type</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a REF(&lt;structured-type&gt;) parameter.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.54" xreflabel="Method setShort(int, short)">
            <title>Method setShort(int, short)</title>
            <indexterm significance="normal">
              <primary>setShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setShort</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java short value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.55" xreflabel="Method setString(int, java.lang.String)">
            <title>Method setString(int, String)</title>
            <indexterm significance="normal">
              <primary>setString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setString</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a Java String value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.56" xreflabel="Method setTime(int, java.sql.Time)">
            <title>Method setTime(int, Time)</title>
            <indexterm significance="normal">
              <primary>setTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTime</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.sql.Time value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.57" xreflabel="Method setTime(int, java.sql.Time, java.util.Calendar)">
            <title>Method setTime(int, Time, Calendar)</title>
            <indexterm significance="normal">
              <primary>setTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTime</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[, 
                              java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.sql.Time value. The driver converts this
 to a SQL TIME value when it sends it to the database.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.58" xreflabel="Method setTimestamp(int, java.sql.Timestamp)">
            <title>Method setTimestamp(int, Timestamp)</title>
            <indexterm significance="normal">
              <primary>setTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTimestamp</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.sql.Timestamp value.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.59" xreflabel="Method setTimestamp(int, java.sql.Timestamp, java.util.Calendar)">
            <title>Method setTimestamp(int, Timestamp, Calendar)</title>
            <indexterm significance="normal">
              <primary>setTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTimestamp</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[, 
                                   java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the parameter value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set a parameter to a java.sql.Timestamp value. The driver
 converts this to a SQL TIMESTAMP value when it sends it to the
 database.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.60" xreflabel="Method setTransactionIsolation(int)">
            <title>Method setTransactionIsolation(int)</title>
            <indexterm significance="normal">
              <primary>setTransactionIsolation</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTransactionIsolation</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTransactionIsolation</emphasis><![CDATA[(int ]]><emphasis>value</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>level</literal></emphasis> - the transaction isolation level</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the transaction isolation.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.61" xreflabel="Method setType(int)">
            <title>Method setType(int)</title>
            <indexterm significance="normal">
              <primary>setType</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setType</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setType</emphasis><![CDATA[(int ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>value</literal></emphasis> - may be TYPE_FORWARD_ONLY, TYPE_SCROLL_INSENSITIVE, or
 TYPE_SCROLL_SENSITIVE</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the type of this result set.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.62" xreflabel="Method setTypeMap(java.util.Map)">
            <title>Method setTypeMap(Map)</title>
            <indexterm significance="normal">
              <primary>setTypeMap</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTypeMap</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTypeMap</emphasis><![CDATA[(java.util.Map ]]><emphasis>value</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>map</literal></emphasis> - a map object</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Install a type-map object as the default type-map for
 this rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.63" xreflabel="Method setUnicodeStream(int, java.io.InputStream, int)">
            <title>Method setUnicodeStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>setUnicodeStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setUnicodeStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setUnicodeStream</emphasis><![CDATA[(int ]]><emphasis>parameterIndex</emphasis><![CDATA[, 
                                       java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the java input stream which contains the
 UNICODE parameter value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the number of bytes in the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
When a very large UNICODE value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. The JDBC driver will
 do any necessary conversion from UNICODE to the database char format. 
        </para>
            </warning>
            <para><emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.64" xreflabel="Method setUrl(java.lang.String)">
            <title>Method setUrl(String)</title>
            <indexterm significance="normal">
              <primary>setUrl</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setUrl</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setUrl</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>url</literal></emphasis> - a string value, may be null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the url used to create a connection.
 Setting this property is optional. If a url is used, a JDBC driver
 that accepts the url must be loaded by the application before the
 rowset is used to connect to a database. The rowset will use the url
 internally to create a database connection when reading or writing
 data. Either a url or a data source name is used to create a
 connection, whichever was specified most recently.
        </para>
          </section>
          <section xml:id="mt_jd1.1.2.65" xreflabel="Method setUsername(java.lang.String)">
            <title>Method setUsername(String)</title>
            <indexterm significance="normal">
              <primary>setUsername</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setUsername</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setUsername</emphasis><![CDATA[(java.lang.String ]]><emphasis>s</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>name</literal></emphasis> - a user name</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the user name.
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.2" xreflabel="Class OPLCachedRowSet">
        <title>Class OPLCachedRowSet</title>
        <indexterm significance="normal">
          <primary>OPLCachedRowSet</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLCachedRowSet</secondary>
        </indexterm>
        <para>
A OPLCachedRowSet is a disconnected, serializable, scrollable container
 for tabular data. A primary purpose of the OPLCachedRowSet class is to
 provide a representation of a JDBC ResultSet that can be passed
 between different components of a remote application. For example, a
 OPLCachedRowSet can be used to send the result of a query executed by
 an Enterprise JavaBeans component running in a server environment over
 a network to a client running in a web browser. A second use for
 OPLCachedRowSets is to provide scrolling and updating for ResultSets that
 don't provide these capabilities themselves. A OPLCachedRowSet can be
 used to augment the capabilities of a JDBC driver that doesn't have
 full support for scrolling and updating. Finally, a OPLCachedRowSet can
 be used to provide Java applications with access to tabular data in an
 environment such as a thin client or PDA, where it would be
 inappropriate to use a JDBC driver due to resource limitations or
 security considerations. The OPLCachedRowSet class provides a means to
 "get rows in" and "get changed rows out" without the need to implement
 the full JDBC API. 
    </para>
        <para>
A OPLCachedRowSet object can contain data retrieved via a JDBC driver or
 data from some other source, such as a spreadsheet. Both a
 OPLCachedRowSet object and its metadata can be created from scratch. A
 component that acts as a factory for rowsets can use this capability
 to create a rowset containing data from non-JDBC data sources. 
    </para>
        <para>
The term 'disconnected' implies that a OPLCachedRowSet only makes use of
 a JDBC connection briefly while data is being read from the database
 and used to populate it with rows, and again while updated rows are being
 propagated back to the underlying database. During the remainder of
 its lifetime, a OPLCachedRowSet object isn't associated with an
 underlying database connection. A OPLCachedRowSet object can simply be
 thought of as a disconnected set of rows that are being cached outside
 of a data source. Since all data is cached in memory, OPLCachedRowSets are
 not appropriate for extremely large data sets. 
    </para>
        <para>
The contents of a OPLCachedRowSet may be updated and the updates can be
 propagated to an underlying data source. OPLCachedRowSets support an
 optimistic concurrency control mechanism - no locks are maintained in
 the underlying database during disconnected use of the rowset. Both the
 original value and current value of the OPLCachedRowSet are maintained
 for use by the optimistic routines.
    </para>
        <section xml:id="mt_jd1.2.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLCachedRowSet</emphasis><![CDATA[ extends BaseRowSet implements RowSetInternal,Serializable,Cloneable {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">OPLCachedRowSet</emphasis><![CDATA[() throws java.sql.SQLException;
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public void ]]><emphasis role="strong">finalize</emphasis><![CDATA[() throws java.lang.Throwable;
  public void ]]><emphasis role="strong">setCommand</emphasis><![CDATA[(java.lang.String ]]><emphasis>cmd</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setConcurrency</emphasis><![CDATA[(int ]]><emphasis>concurrency</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">acceptChanges</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">acceptChanges</emphasis><![CDATA[(java.sql.Connection ]]><emphasis>_conn</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">execute</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">execute</emphasis><![CDATA[(java.sql.Connection ]]><emphasis>_conn</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">populate</emphasis><![CDATA[(java.sql.ResultSet ]]><emphasis>rs</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setShowDeleted</emphasis><![CDATA[(boolean ]]><emphasis>value</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">getShowDeleted</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getTableName</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTableName</emphasis><![CDATA[(java.lang.String ]]><emphasis>_tableName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public int[] ]]><emphasis role="strong">getKeyCols</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setKeyColumns</emphasis><![CDATA[(int[] ]]><emphasis>keys</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">cancelRowDelete</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">cancelRowInsert</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">cancelRowUpdates</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">columnUpdated</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setOriginal</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setOriginalRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">restoreOriginal</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">size</emphasis><![CDATA[();
  public Collection ]]><emphasis role="strong">toCollection</emphasis><![CDATA[() throws java.sql.SQLException;
  public Collection ]]><emphasis role="strong">toCollection</emphasis><![CDATA[(int ]]><emphasis>col</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">release</emphasis><![CDATA[() throws java.sql.SQLException;
  public RowSet ]]><emphasis role="strong">createCopy</emphasis><![CDATA[() throws java.sql.SQLException;
  public RowSet ]]><emphasis role="strong">createShared</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setMetaData</emphasis><![CDATA[(javax.sql.RowSetMetaData ]]><emphasis>md</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[() throws java.sql.SQLException;
  public ResultSet ]]><emphasis role="strong">getOriginal</emphasis><![CDATA[() throws java.sql.SQLException;
  public ResultSet ]]><emphasis role="strong">getOriginalRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">next</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">previous</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">first</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">last</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">absolute</emphasis><![CDATA[(int ]]><emphasis>row</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">relative</emphasis><![CDATA[(int ]]><emphasis>rows</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">beforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">afterLast</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isBeforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isAfterLast</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isFirst</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isLast</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">rowUpdated</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">rowInserted</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">rowDeleted</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">refreshRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">insertRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">deleteRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">moveToInsertRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">moveToCurrentRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">wasNull</emphasis><![CDATA[() throws java.sql.SQLException;
  public SQLWarning ]]><emphasis role="strong">getWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">clearWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getCursorName</emphasis><![CDATA[() throws java.sql.SQLException;
  public ResultSetMetaData ]]><emphasis role="strong">getMetaData</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">findColumn</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) throws java.sql.SQLException;
  public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                 int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                    int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                               java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                              java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                 java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                    java.io.Reader ]]><emphasis>reader</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                           int ]]><emphasis>scale</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Statement ]]><emphasis role="strong">getStatement</emphasis><![CDATA[() throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.BaseRowSet</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLCachedRowSet</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.2.2">
          <title>Members</title>
          <section xml:id="mt_jd1.2.2.1" xreflabel="Constructor OPLCachedRowSet()">
            <title>Constructor OPLCachedRowSet()</title>
            <indexterm significance="normal">
              <primary>OPLCachedRowSet</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>OPLCachedRowSet</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public ]]><emphasis role="strong">OPLCachedRowSet</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Create a OPLCachedRowSet object. The object has no metadata.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.2" xreflabel="Method absolute(int)">
            <title>Method absolute(int)</title>
            <indexterm significance="normal">
              <primary>absolute</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>absolute</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">absolute</emphasis><![CDATA[(int ]]><emphasis>row</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 row is 0, or rowset type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Move to an absolute row number in the rowset.
 It notifies listeners that the cursor has moved. 
        </para>
            <para>
If row is positive, moves to an absolute row with respect to the
 beginning of the rowset. The first row is row 1, the second
 is row 2, etc. 
        </para>
            <para>
If row is negative, moves to an absolute row position with respect to
 the end of rowset. For example, calling absolute(-1) positions the
 cursor on the last row, absolute(-2) indicates the next-to-last
 row, etc. 
        </para>
            <para>
An attempt to position the cursor beyond the first/last row in
 the rowset, leaves the cursor before/after the first/last
 row, respectively. 
        </para>
            <para>
Note: Calling absolute(1) is the same as calling first().
 Calling absolute(-1) is the same as calling last().
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.3" xreflabel="Method acceptChanges()">
            <title>Method acceptChanges()</title>
            <indexterm significance="normal">
              <primary>acceptChanges</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>acceptChanges</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">acceptChanges</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Propagate all row update, insert, and delete changes to a data source.
 An SQLException is thrown if any of the updates cannot be
 propagated. If acceptChanges() fails then the caller can assume that
 none of the updates are reflected in the data source. The current row
 is set to the first "updated" row that resulted in an exception, in
 the case that an exception is thrown. With one exception, if the row
 that caused the exception is a "deleted" row, then in the usual case,
 when deleted rows are not shown, the current row isn't affected.
 When successful, calling acceptChanges() replaces the original value
 of the rowset with the current value. Note: Both the original and
 current value of the rowset are maintained. The original state is the
 value of the rowset following its creation (i.e. empty), or following
 the last call to acceptChanges(), execute(), populate(), release(), or
 restoreOriginal(). 
 Internally, a RowSetWriter component is envoked to write the data for
 each row.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.4" xreflabel="Method acceptChanges(java.sql.Connection)">
            <title>Method acceptChanges(Connection)</title>
            <indexterm significance="normal">
              <primary>acceptChanges</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>acceptChanges</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">acceptChanges</emphasis><![CDATA[(java.sql.Connection ]]><emphasis>_conn</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>_conn</literal></emphasis> - a database connection</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Like acceptChanges() above, but takes a Connection argument. The
 Connection is used internally when doing the updates. This form
 isn't used unless the underlying data source is a JDBC data source.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.5" xreflabel="Method afterLast()">
            <title>Method afterLast()</title>
            <indexterm significance="normal">
              <primary>afterLast</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>afterLast</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">afterLast</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the end of the rowset, just after the last
 row. Has no effect if the rowset contains no rows.
 It notifies listeners that the cursor has moved.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.6" xreflabel="Method beforeFirst()">
            <title>Method beforeFirst()</title>
            <indexterm significance="normal">
              <primary>beforeFirst</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>beforeFirst</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">beforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the front of the rowset, just before the
 first row. Has no effect if the rowset contains no rows.
 It notifies listeners that the cursor has moved.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.7" xreflabel="Method cancelRowDelete()">
            <title>Method cancelRowDelete()</title>
            <indexterm significance="normal">
              <primary>cancelRowDelete</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>cancelRowDelete</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">cancelRowDelete</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Cancels deletion of the current row and notifies listeners that a row 
 has changed. After calling cancelRowDelete()
 the current row is no longer marked for deletion. An exception is
 thrown if there is no current row. Note: This method can be
 ignored if deleted rows aren't being shown (the normal case).
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.8" xreflabel="Method cancelRowInsert()">
            <title>Method cancelRowInsert()</title>
            <indexterm significance="normal">
              <primary>cancelRowInsert</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>cancelRowInsert</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">cancelRowInsert</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Cancels insertion of the current row and notifies listeners that a row 
 has changed. An exception is thrown if
 the row isn't an inserted row. The current row is immediately removed
 from the rowset. This operation cannot be undone.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.9" xreflabel="Method cancelRowUpdates()">
            <title>Method cancelRowUpdates()</title>
            <indexterm significance="normal">
              <primary>cancelRowUpdates</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>cancelRowUpdates</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">cancelRowUpdates</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The cancelRowUpdates() method may be called after calling an
 updateXXX() method(s) and before calling updateRow() to rollback
 the updates made to a row. If no updates have been made or
 updateRow() has already been called, then this method has no
 effect. It notifies listeners that a row has changed, if it has effect.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.10" xreflabel="Method clearWarnings()">
            <title>Method clearWarnings()</title>
            <indexterm significance="normal">
              <primary>clearWarnings</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>clearWarnings</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">clearWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
After this call getWarnings returns null until a new warning is
 reported for this ResultSet.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.11" xreflabel="Method close()">
            <title>Method close()</title>
            <indexterm significance="normal">
              <primary>close</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>close</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Releases the current contents of this rowset, discarding outstanding updates.
 The rowset contains no rows after the method release is called.
 This method sends a RowSetChangedEvent object to all registered listeners
 prior to returning.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.12" xreflabel="Method columnUpdated(int)">
            <title>Method columnUpdated(int)</title>
            <indexterm significance="normal">
              <primary>columnUpdated</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>columnUpdated</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">columnUpdated</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - true if the column has been updated</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the column from the current row has been updated.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.13" xreflabel="Method createCopy()">
            <title>Method createCopy()</title>
            <indexterm significance="normal">
              <primary>createCopy</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>createCopy</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public RowSet ]]><emphasis role="strong">createCopy</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Creates a RowSet object that is a deep copy of this OPLCachedRowSet object's data.
 Updates made on a copy are not visible to the original rowset;
 a copy of a rowset is completely independent from the original.
 Making a copy saves the cost of creating an identical rowset from
 first principles, which can be quite expensive.
 For example, it doesn't do the query to a remote database server.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.14" xreflabel="Method createShared()">
            <title>Method createShared()</title>
            <indexterm significance="normal">
              <primary>createShared</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>createShared</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public RowSet ]]><emphasis role="strong">createShared</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns a new rowset object backed by the same data. Updates
 made by a shared duplicate are visible to the original rowset and other
 duplicates. A rowset and its duplicates form a set of cursors
 that iterate over a shared set of rows, providing different views
 of the underlying data.
 Duplicates also share property values. So, for example, if a rowset
 is read-only then all of its duplicates will be read-only.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.15" xreflabel="Method deleteRow()">
            <title>Method deleteRow()</title>
            <indexterm significance="normal">
              <primary>deleteRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>deleteRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">deleteRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Delete the current row from this OPLCachedRowSet object and it notifies 
 listeners that a row has changed. Cannot be called when the cursor is 
 on the insert row. The method marks the current row as deleted, 
 but it does not delete the row from the underlying data source. 
 The method acceptChanges must be called to delete the row in 
 the data source.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.16" xreflabel="Method execute()">
            <title>Method execute()</title>
            <indexterm significance="normal">
              <primary>execute</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>execute</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">execute</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Populates this OPLCachedRowSet object with data. This form of the method uses
 the rowset's user, password, and url or data source name properties to
 create a database connection. If properties that are needed have not been set,
 this method will throw an exception. Another form of this method uses an
 existing JDBC Connection object instead of creating a new one;
 therefore, it ignores the properties used for establishing a new connection.
 The query specified by the command property is executed to create
 a ResultSet object from which to retrieve data.
 The current contents of the rowset are discarded, and the rowset's
 metadata is also (re)set. If there are outstanding updates, they are also ignored.
 The method execute closes any database connections that it creates.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.17" xreflabel="Method execute(java.sql.Connection)">
            <title>Method execute(Connection)</title>
            <indexterm significance="normal">
              <primary>execute</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>execute</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">execute</emphasis><![CDATA[(java.sql.Connection ]]><emphasis>_conn</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>_conn</literal></emphasis> - a database connection</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Populates the rowset with data. The first form uses the properties:
 url/data source name, user, and password to create a database
 connection. If these properties haven't been set, an exception is
 thrown. The second form uses an existing JDBC connection object
 instead. The values of the url/data source name, user, and password
 properties are ignored when the second form is used. Execute() closes
 any database connections that it creates.
 The command specified by the command property is executed to retrieve
 the data. The current contents of the rowset are discarded and the
 rowset's metadata is also (re)set. If there are outstanding updates,
 they are also ignored.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.18" xreflabel="Method findColumn(java.lang.String)">
            <title>Method findColumn(String)</title>
            <indexterm significance="normal">
              <primary>findColumn</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>findColumn</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">findColumn</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column index</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Map a Resultset column name to a ResultSet column index.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.19" xreflabel="Method first()">
            <title>Method first()</title>
            <indexterm significance="normal">
              <primary>first</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>first</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">first</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the first row in the rowset.
 It notifies listeners that the cursor has moved.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.20" xreflabel="Method getArray(int)">
            <title>Method getArray(int)</title>
            <indexterm significance="normal">
              <primary>getArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing an SQL array</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get an array column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.21" xreflabel="Method getArray(java.lang.String)">
            <title>Method getArray(String)</title>
            <indexterm significance="normal">
              <primary>getArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing an SQL array</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get an array column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.22" xreflabel="Method getAsciiStream(int)">
            <title>Method getAsciiStream(int)</title>
            <indexterm significance="normal">
              <primary>getAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.23" xreflabel="Method getAsciiStream(java.lang.String)">
            <title>Method getAsciiStream(String)</title>
            <indexterm significance="normal">
              <primary>getAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.24" xreflabel="Method getBigDecimal(int)">
            <title>Method getBigDecimal(int)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value (full precision); if the value is SQL NULL,
 the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.25" xreflabel="Method getBigDecimal(int, int)">
            <title>Method getBigDecimal(int, int)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - the number of digits to the right of the decimal</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
Get the value of a column in the current row as a java.math.BigDecimal object.
        </para>
            </warning>
          </section>
          <section xml:id="mt_jd1.2.2.26" xreflabel="Method getBigDecimal(java.lang.String)">
            <title>Method getBigDecimal(String)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.27" xreflabel="Method getBigDecimal(java.lang.String, int)">
            <title>Method getBigDecimal(String, int)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                          int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - the number of digits to the right of the decimal</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
            </warning>
          </section>
          <section xml:id="mt_jd1.2.2.28" xreflabel="Method getBinaryStream(int)">
            <title>Method getBinaryStream(int)</title>
            <indexterm significance="normal">
              <primary>getBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.29" xreflabel="Method getBinaryStream(java.lang.String)">
            <title>Method getBinaryStream(String)</title>
            <indexterm significance="normal">
              <primary>getBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.30" xreflabel="Method getBlob(int)">
            <title>Method getBlob(int)</title>
            <indexterm significance="normal">
              <primary>getBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a BLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a BLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.31" xreflabel="Method getBlob(java.lang.String)">
            <title>Method getBlob(String)</title>
            <indexterm significance="normal">
              <primary>getBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a BLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a BLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.32" xreflabel="Method getBoolean(int)">
            <title>Method getBoolean(int)</title>
            <indexterm significance="normal">
              <primary>getBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java boolean.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.33" xreflabel="Method getBoolean(java.lang.String)">
            <title>Method getBoolean(String)</title>
            <indexterm significance="normal">
              <primary>getBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java boolean.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.34" xreflabel="Method getByte(int)">
            <title>Method getByte(int)</title>
            <indexterm significance="normal">
              <primary>getByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.35" xreflabel="Method getByte(java.lang.String)">
            <title>Method getByte(String)</title>
            <indexterm significance="normal">
              <primary>getByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.36" xreflabel="Method getBytes(int)">
            <title>Method getBytes(int)</title>
            <indexterm significance="normal">
              <primary>getBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.37" xreflabel="Method getBytes(java.lang.String)">
            <title>Method getBytes(String)</title>
            <indexterm significance="normal">
              <primary>getBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.38" xreflabel="Method getCharacterStream(int)">
            <title>Method getCharacterStream(int)</title>
            <indexterm significance="normal">
              <primary>getCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.39" xreflabel="Method getCharacterStream(java.lang.String)">
            <title>Method getCharacterStream(String)</title>
            <indexterm significance="normal">
              <primary>getCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.40" xreflabel="Method getClob(int)">
            <title>Method getClob(int)</title>
            <indexterm significance="normal">
              <primary>getClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a CLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a CLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.41" xreflabel="Method getClob(java.lang.String)">
            <title>Method getClob(String)</title>
            <indexterm significance="normal">
              <primary>getClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a CLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a CLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.42" xreflabel="Method getConnection()">
            <title>Method getConnection()</title>
            <indexterm significance="normal">
              <primary>getConnection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConnection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the Connection passed to the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.43" xreflabel="Method getCursorName()">
            <title>Method getCursorName()</title>
            <indexterm significance="normal">
              <primary>getCursorName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCursorName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getCursorName</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the name of the SQL cursor used by this ResultSet.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.44" xreflabel="Method getDate(int)">
            <title>Method getDate(int)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.45" xreflabel="Method getDate(int, java.util.Calendar)">
            <title>Method getDate(int, Calendar)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the date</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.46" xreflabel="Method getDate(java.lang.String)">
            <title>Method getDate(String)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.47" xreflabel="Method getDate(java.lang.String, java.util.Calendar)">
            <title>Method getDate(String, Calendar)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                              java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the date</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.48" xreflabel="Method getDouble(int)">
            <title>Method getDouble(int)</title>
            <indexterm significance="normal">
              <primary>getDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java double.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.49" xreflabel="Method getDouble(java.lang.String)">
            <title>Method getDouble(String)</title>
            <indexterm significance="normal">
              <primary>getDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java double.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.50" xreflabel="Method getFloat(int)">
            <title>Method getFloat(int)</title>
            <indexterm significance="normal">
              <primary>getFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java float.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.51" xreflabel="Method getFloat(java.lang.String)">
            <title>Method getFloat(String)</title>
            <indexterm significance="normal">
              <primary>getFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java float.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.52" xreflabel="Method getInt(int)">
            <title>Method getInt(int)</title>
            <indexterm significance="normal">
              <primary>getInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java int.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.53" xreflabel="Method getInt(java.lang.String)">
            <title>Method getInt(String)</title>
            <indexterm significance="normal">
              <primary>getInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java int.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.54" xreflabel="Method getKeyCols()">
            <title>Method getKeyCols()</title>
            <indexterm significance="normal">
              <primary>getKeyCols</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getKeyCols</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int[] ]]><emphasis role="strong">getKeyCols</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the columns that make a key to uniquely identify a row in this
 OPLCachedRowSet object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.55" xreflabel="Method getLong(int)">
            <title>Method getLong(int)</title>
            <indexterm significance="normal">
              <primary>getLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java long.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.56" xreflabel="Method getLong(java.lang.String)">
            <title>Method getLong(String)</title>
            <indexterm significance="normal">
              <primary>getLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java long.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.57" xreflabel="Method getMetaData()">
            <title>Method getMetaData()</title>
            <indexterm significance="normal">
              <primary>getMetaData</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMetaData</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public ResultSetMetaData ]]><emphasis role="strong">getMetaData</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The number, types and properties of a ResultSet's columns
 are provided by the getMetaData method.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.58" xreflabel="Method getObject(int)">
            <title>Method getObject(int)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a java.lang.Object holding the column value.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java object. 
        </para>
            <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
            <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @column is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(column,
 this.getStatement().getConnection().getTypeMap()).
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.59" xreflabel="Method getObject(int, java.util.Map)">
            <title>Method getObject(int, Map)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>map</literal></emphasis> - the mapping from SQL type names to Java classes</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing the SQL value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.60" xreflabel="Method getObject(java.lang.String)">
            <title>Method getObject(String)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a java.lang.Object holding the column value.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java object. 
        </para>
            <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
            <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @columnName is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(columnName,
 this.getStatement().getConnection().getTypeMap()).
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.61" xreflabel="Method getObject(java.lang.String, java.util.Map)">
            <title>Method getObject(String, Map)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>map</literal></emphasis> - the mapping from SQL type names to Java classes</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing the SQL value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.62" xreflabel="Method getOriginal()">
            <title>Method getOriginal()</title>
            <indexterm significance="normal">
              <primary>getOriginal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getOriginal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public ResultSet ]]><emphasis role="strong">getOriginal</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns a result set containing the original value of the rowset.
 The cursor is positioned before the first row in the result set.
 Only rows contained in the result set returned by getOriginal()
 are said to have an original value.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.63" xreflabel="Method getOriginalRow()">
            <title>Method getOriginalRow()</title>
            <indexterm significance="normal">
              <primary>getOriginalRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getOriginalRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public ResultSet ]]><emphasis role="strong">getOriginalRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns a result set containing the original value of the current
 row only. If the current row has no original value an empty result set
 is returned. If there is no current row an exception is thrown.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.64" xreflabel="Method getRef(int)">
            <title>Method getRef(int)</title>
            <indexterm significance="normal">
              <primary>getRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing data of an SQL REF type</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.65" xreflabel="Method getRef(java.lang.String)">
            <title>Method getRef(String)</title>
            <indexterm significance="normal">
              <primary>getRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing data of an SQL REF type</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.66" xreflabel="Method getRow()">
            <title>Method getRow()</title>
            <indexterm significance="normal">
              <primary>getRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine the current row number. The first row is number 1, the
 second number 2, etc.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.67" xreflabel="Method getShort(int)">
            <title>Method getShort(int)</title>
            <indexterm significance="normal">
              <primary>getShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java short.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.68" xreflabel="Method getShort(java.lang.String)">
            <title>Method getShort(String)</title>
            <indexterm significance="normal">
              <primary>getShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java short.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.69" xreflabel="Method getShowDeleted()">
            <title>Method getShowDeleted()</title>
            <indexterm significance="normal">
              <primary>getShowDeleted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getShowDeleted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getShowDeleted</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
This property determines whether or not rows marked for deletion
 appear in the set of current rows. The default value is false.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.70" xreflabel="Method getStatement()">
            <title>Method getStatement()</title>
            <indexterm significance="normal">
              <primary>getStatement</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getStatement</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Statement ]]><emphasis role="strong">getStatement</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Return the Statement that produced the ResultSet.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.71" xreflabel="Method getString(int)">
            <title>Method getString(int)</title>
            <indexterm significance="normal">
              <primary>getString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java String.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.72" xreflabel="Method getString(java.lang.String)">
            <title>Method getString(String)</title>
            <indexterm significance="normal">
              <primary>getString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java String.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.73" xreflabel="Method getTableName()">
            <title>Method getTableName()</title>
            <indexterm significance="normal">
              <primary>getTableName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTableName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getTableName</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns an identifier for the object (table) that was used to create this rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.74" xreflabel="Method getTime(int)">
            <title>Method getTime(int)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.75" xreflabel="Method getTime(int, java.util.Calendar)">
            <title>Method getTime(int, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the time</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.76" xreflabel="Method getTime(java.lang.String)">
            <title>Method getTime(String)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.77" xreflabel="Method getTime(java.lang.String, java.util.Calendar)">
            <title>Method getTime(String, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                              java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the time</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.78" xreflabel="Method getTimestamp(int)">
            <title>Method getTimestamp(int)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.79" xreflabel="Method getTimestamp(int, java.util.Calendar)">
            <title>Method getTimestamp(int, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, 
                                        java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the timestamp</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.80" xreflabel="Method getTimestamp(java.lang.String)">
            <title>Method getTimestamp(String)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.81" xreflabel="Method getTimestamp(java.lang.String, java.util.Calendar)">
            <title>Method getTimestamp(String, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                        java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the timestamp</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.82" xreflabel="Method getUnicodeStream(int)">
            <title>Method getUnicodeStream(int)</title>
            <indexterm significance="normal">
              <primary>getUnicodeStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUnicodeStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
            </warning>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.83" xreflabel="Method getUnicodeStream(java.lang.String)">
            <title>Method getUnicodeStream(String)</title>
            <indexterm significance="normal">
              <primary>getUnicodeStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUnicodeStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
            </warning>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.84" xreflabel="Method getURL(int)">
            <title>Method getURL(int)</title>
            <indexterm significance="normal">
              <primary>getURL</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getURL</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the index of the column 1 is the first, 2 is the second,...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs,
 or if a URL is malformed</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.85" xreflabel="Method getURL(java.lang.String)">
            <title>Method getURL(String)</title>
            <indexterm significance="normal">
              <primary>getURL</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getURL</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs
 or if a URL is malformed</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.86" xreflabel="Method getWarnings()">
            <title>Method getWarnings()</title>
            <indexterm significance="normal">
              <primary>getWarnings</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getWarnings</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public SQLWarning ]]><emphasis role="strong">getWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The first warning reported by calls on this ResultSet is
 returned. Subsequent ResultSet warnings will be chained to this
 SQLWarning. 
        </para>
            <para>
The warning chain is automatically cleared each time a new
 row is read. 
        </para>
            <para><emphasis>Note:</emphasis> This warning chain only covers warnings caused
 by ResultSet methods. Any warning caused by statement methods
 (such as reading OUT parameters) will be chained on the
 Statement object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.87" xreflabel="Method insertRow()">
            <title>Method insertRow()</title>
            <indexterm significance="normal">
              <primary>insertRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>insertRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">insertRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs,
 if this method is called when the cursor is not on the insert row</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Inserts the contents of the insert row into this
 rowset following the current row and it notifies 
 listeners that the row has changed.
 The cursor must be on the insert row when this method is called.
 The method marks the current row as inserted, 
 but it does not insert the row to the underlying data source. 
 The method acceptChanges must be called to insert the row to 
 the data source.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.88" xreflabel="Method isAfterLast()">
            <title>Method isAfterLast()</title>
            <indexterm significance="normal">
              <primary>isAfterLast</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isAfterLast</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isAfterLast</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is after the last row in the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.89" xreflabel="Method isBeforeFirst()">
            <title>Method isBeforeFirst()</title>
            <indexterm significance="normal">
              <primary>isBeforeFirst</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isBeforeFirst</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isBeforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is before the first row in the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.90" xreflabel="Method isFirst()">
            <title>Method isFirst()</title>
            <indexterm significance="normal">
              <primary>isFirst</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isFirst</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isFirst</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is on the first row of the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.91" xreflabel="Method isLast()">
            <title>Method isLast()</title>
            <indexterm significance="normal">
              <primary>isLast</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isLast</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isLast</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is on the last row of the rowset.
 Note: Calling isLast() may be expensive since the rowset
 might need to check ahead one row in order to determine
 whether the current row is the last row in the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.92" xreflabel="Method last()">
            <title>Method last()</title>
            <indexterm significance="normal">
              <primary>last</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>last</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">last</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the last row in the rowset.
 It notifies listeners that the cursor has moved.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.93" xreflabel="Method moveToCurrentRow()">
            <title>Method moveToCurrentRow()</title>
            <indexterm significance="normal">
              <primary>moveToCurrentRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>moveToCurrentRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">moveToCurrentRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs,
 or the rowset is not updatable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Move the cursor to the remembered cursor position, usually the
 current row. Has no effect unless the cursor is on the insert
 row.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.94" xreflabel="Method moveToInsertRow()">
            <title>Method moveToInsertRow()</title>
            <indexterm significance="normal">
              <primary>moveToInsertRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>moveToInsertRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">moveToInsertRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs,
 or the rowset is not updatable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Move to the insert row. The current cursor position is
 remembered while the cursor is positioned on the insert row.
 The insert row is a special row associated with an updatable
 rowset. It is essentially a buffer where a new row may
 be constructed by calling the updateXXX() methods prior to
 inserting the row into the rowset.
 Only the updateXXX(), getXXX(), and insertRow() methods may be
 called when the cursor is on the insert row. All of the columns in
 a rowset must be given a value each time this method is
 called before calling insertRow(). UpdateXXX()must be called before
 getXXX() on a column.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.95" xreflabel="Method next()">
            <title>Method next()</title>
            <indexterm significance="normal">
              <primary>next</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>next</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">next</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A ResultSet is initially positioned before its first row; the
 first call to next makes the first row the current row; the
 second call makes the second row the current row, etc. 
        </para>
            <para>
If an input stream from the previous row is open, it is
 implicitly closed. The ResultSet's warning chain is cleared
 when a new row is read.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.96" xreflabel="Method populate(java.sql.ResultSet)">
            <title>Method populate(ResultSet)</title>
            <indexterm significance="normal">
              <primary>populate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>populate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">populate</emphasis><![CDATA[(java.sql.ResultSet ]]><emphasis>rs</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>rs</literal></emphasis> - the data to be read</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Populate the OPLCachedRowSet object with data from a ResultSet. This
 method is an alternative to execute() for filling the rowset with
 data. Populate() doesn't require that the properties needed by
 execute(), such as the command property, be set. A RowSetChangedEvent
 is sent to all registered listeners prior to returning.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.97" xreflabel="Method previous()">
            <title>Method previous()</title>
            <indexterm significance="normal">
              <primary>previous</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>previous</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">previous</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 rowset type is TYPE_FORWAR_DONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the previous row in the rowset. 
        </para>
            <para>
Note: previous() is not the same as relative(-1) since it
 makes sense to call previous() when there is no current row.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.98" xreflabel="Method refreshRow()">
            <title>Method refreshRow()</title>
            <indexterm significance="normal">
              <primary>refreshRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>refreshRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">refreshRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets the current row with its original value and marks the row 
 as not updated, thus undoing any changes made to the row since 
 the last call to the methods updateRow or deleteRow. 
 This method should be called only when the cursor is on a row in 
 this rowset. Cannot be called when on the insert row.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.99" xreflabel="Method relative(int)">
            <title>Method relative(int)</title>
            <indexterm significance="normal">
              <primary>relative</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>relative</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">relative</emphasis><![CDATA[(int ]]><emphasis>rows</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or there
 is no current row, or rowset type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 rowset positions the cursor before/after the
 the first/last row. Calling relative(0) is valid, but does
 not change the cursor position.
 It notifies listeners that the cursor has moved. 
        </para>
            <para>
Note: Calling relative(1) is different than calling next()
 since is makes sense to call next() when there is no current row,
 for example, when the cursor is positioned before the first row
 or after the last row of the rowset.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.100" xreflabel="Method release()">
            <title>Method release()</title>
            <indexterm significance="normal">
              <primary>release</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>release</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">release</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Releases the current contents of the rowset. Outstanding updates are
 discarded. The rowset contains no rows after release is called.
 A RowSetChangedEvent is sent to all registered listeners prior
 to returning.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.101" xreflabel="Method restoreOriginal()">
            <title>Method restoreOriginal()</title>
            <indexterm significance="normal">
              <primary>restoreOriginal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>restoreOriginal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">restoreOriginal</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Restores the rowset to its original state ( the original value
 of the rowset becomes the current value). All updates, inserts, and
 deletes made to the original state are lost. The cursor is positioned
 before the first row. A RowSetChangedEvent is sent to all registered
 listeners prior to returning.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.102" xreflabel="Method rowDeleted()">
            <title>Method rowDeleted()</title>
            <indexterm significance="normal">
              <primary>rowDeleted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>rowDeleted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">rowDeleted</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.DatabaseMetaData.deletesAreDetected</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if this row has been deleted. A deleted row may leave
 a visible "hole" in a rowset. This method can be used to
 detect holes in a rowset. The value returned depends on whether
 or not the rowset can detect deletions.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.103" xreflabel="Method rowInserted()">
            <title>Method rowInserted()</title>
            <indexterm significance="normal">
              <primary>rowInserted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>rowInserted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">rowInserted</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.DatabaseMetaData.insertsAreDetected</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the current row has been inserted. The value returned
 depends on whether or not the rowset can detect visible inserts.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.104" xreflabel="Method rowUpdated()">
            <title>Method rowUpdated()</title>
            <indexterm significance="normal">
              <primary>rowUpdated</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>rowUpdated</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">rowUpdated</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.DatabaseMetaData.updatesAreDetected</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the current row has been updated. The value returned
 depends on whether or not the rowset can detect updates.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.105" xreflabel="Method setCommand(java.lang.String)">
            <title>Method setCommand(String)</title>
            <indexterm significance="normal">
              <primary>setCommand</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCommand</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCommand</emphasis><![CDATA[(java.lang.String ]]><emphasis>cmd</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>cmd</literal></emphasis> - - a String object containing an SQL query that will be
 set as the command</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>- if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets this OPLCachedRowSet object's command property to the given
 String object and clears the parameters, if any, that were set
 for the previous command.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.106" xreflabel="Method setConcurrency(int)">
            <title>Method setConcurrency(int)</title>
            <indexterm significance="normal">
              <primary>setConcurrency</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setConcurrency</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setConcurrency</emphasis><![CDATA[(int ]]><emphasis>concurrency</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>concurrency</literal></emphasis> - - one of the following constants: ResultSet.CONCUR_READ_ONLY
 or ResultSet.CONCUR_UPDATABLE</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>- if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets the concurrency for this rowset to the specified concurrency.
 The default concurrency is ResultSet.CONCUR_UPDATABLE.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.107" xreflabel="Method setKeyColumns(int[])">
            <title>Method setKeyColumns(int[])</title>
            <indexterm significance="normal">
              <primary>setKeyColumns</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setKeyColumns</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setKeyColumns</emphasis><![CDATA[(int[] ]]><emphasis>keys</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>keys</literal></emphasis> - - an array of int indicating the columns that form a key for
 this OPLCachedRowSet object; every element in the array must be greater
 than 0 and less than or equal to the number of columns in this rowset</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets this OPLCachedRowSet object's keyCols field with the given array of column numbers,
 which forms a key for uniquely identifying a row in this rowset.
 Note: If you don't set the keyCols, the OPLCachedRowSet will set automatically
 based on RowSetMetaData
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.108" xreflabel="Method setMetaData(javax.sql.RowSetMetaData)">
            <title>Method setMetaData(RowSetMetaData)</title>
            <indexterm significance="normal">
              <primary>setMetaData</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMetaData</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMetaData</emphasis><![CDATA[(javax.sql.RowSetMetaData ]]><emphasis>md</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>md</literal></emphasis> - a metadata object</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the rowset's metadata.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.109" xreflabel="Method setOriginal()">
            <title>Method setOriginal()</title>
            <indexterm significance="normal">
              <primary>setOriginal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setOriginal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setOriginal</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Marks all rows in this rowset as being original rows. Any updates made
 to the rows become the original values for the rowset.
 Calls to the method setOriginal cannot be reversed.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.110" xreflabel="Method setOriginalRow()">
            <title>Method setOriginalRow()</title>
            <indexterm significance="normal">
              <primary>setOriginalRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setOriginalRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setOriginalRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Marks the current row in this rowset as being an original row.
 The row is no longer marked as inserted, deleted, or updated,
 and its values become the original values.
 A call to setOriginalRow cannot be reversed.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.111" xreflabel="Method setShowDeleted(boolean)">
            <title>Method setShowDeleted(boolean)</title>
            <indexterm significance="normal">
              <primary>setShowDeleted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setShowDeleted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setShowDeleted</emphasis><![CDATA[(boolean ]]><emphasis>value</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>value</literal></emphasis> - true if deleted rows should be shown, false otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the show deleted property.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.112" xreflabel="Method setTableName(java.lang.String)">
            <title>Method setTableName(String)</title>
            <indexterm significance="normal">
              <primary>setTableName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTableName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTableName</emphasis><![CDATA[(java.lang.String ]]><emphasis>_tableName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>_tabName</literal></emphasis> - - a String object that identifies the table from which
 this OPLCachedRowSet object was derived</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets the identifier for the table from which this rowset was derived
 to the given table name.
 Note: You don't usually need to set a table name, because the OPLCachedRowSet tries
 to determine the table name from your SQL query command.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.113" xreflabel="Method size()">
            <title>Method size()</title>
            <indexterm significance="normal">
              <primary>size</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>size</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">size</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the number of rows in this OPLCachedRowSet object.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.114" xreflabel="Method toCollection()">
            <title>Method toCollection()</title>
            <indexterm significance="normal">
              <primary>toCollection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>toCollection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Collection ]]><emphasis role="strong">toCollection</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Convert the rowset to a collection of tables. Each tables represents
 a row of the original rowset. The tables are keyed by column number.
 A copy of the rowset's contents is made.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.115" xreflabel="Method toCollection(int)">
            <title>Method toCollection(int)</title>
            <indexterm significance="normal">
              <primary>toCollection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>toCollection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Collection ]]><emphasis role="strong">toCollection</emphasis><![CDATA[(int ]]><emphasis>col</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Return a column of the rowset as a collection. Makes a copy of the
 column's data.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.116" xreflabel="Method updateArray(int, java.sql.Array)">
            <title>Method updateArray(int, Array)</title>
            <indexterm significance="normal">
              <primary>updateArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.117" xreflabel="Method updateArray(java.lang.String, java.sql.Array)">
            <title>Method updateArray(String, Array)</title>
            <indexterm significance="normal">
              <primary>updateArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                  java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.118" xreflabel="Method updateAsciiStream(int, java.io.InputStream, int)">
            <title>Method updateAsciiStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                        int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the length of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.119" xreflabel="Method updateAsciiStream(java.lang.String, java.io.InputStream, int)">
            <title>Method updateAsciiStream(String, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                        java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                        int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.120" xreflabel="Method updateBigDecimal(int, java.math.BigDecimal)">
            <title>Method updateBigDecimal(int, BigDecimal)</title>
            <indexterm significance="normal">
              <primary>updateBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.121" xreflabel="Method updateBigDecimal(java.lang.String, java.math.BigDecimal)">
            <title>Method updateBigDecimal(String, BigDecimal)</title>
            <indexterm significance="normal">
              <primary>updateBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                       java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.122" xreflabel="Method updateBinaryStream(int, java.io.InputStream, int)">
            <title>Method updateBinaryStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, 
                                         java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the length of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.123" xreflabel="Method updateBinaryStream(java.lang.String, java.io.InputStream, int)">
            <title>Method updateBinaryStream(String, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                         java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                         int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.124" xreflabel="Method updateBlob(int, java.sql.Blob)">
            <title>Method updateBlob(int, Blob)</title>
            <indexterm significance="normal">
              <primary>updateBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.125" xreflabel="Method updateBlob(java.lang.String, java.sql.Blob)">
            <title>Method updateBlob(String, Blob)</title>
            <indexterm significance="normal">
              <primary>updateBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.126" xreflabel="Method updateBoolean(int, boolean)">
            <title>Method updateBoolean(int, boolean)</title>
            <indexterm significance="normal">
              <primary>updateBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.127" xreflabel="Method updateBoolean(java.lang.String, boolean)">
            <title>Method updateBoolean(String, boolean)</title>
            <indexterm significance="normal">
              <primary>updateBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.128" xreflabel="Method updateByte(int, byte)">
            <title>Method updateByte(int, byte)</title>
            <indexterm significance="normal">
              <primary>updateByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.129" xreflabel="Method updateByte(java.lang.String, byte)">
            <title>Method updateByte(String, byte)</title>
            <indexterm significance="normal">
              <primary>updateByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.130" xreflabel="Method updateBytes(int, byte[])">
            <title>Method updateBytes(int, byte[])</title>
            <indexterm significance="normal">
              <primary>updateBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.131" xreflabel="Method updateBytes(java.lang.String, byte[])">
            <title>Method updateBytes(String, byte[])</title>
            <indexterm significance="normal">
              <primary>updateBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.132" xreflabel="Method updateCharacterStream(int, java.io.Reader, int)">
            <title>Method updateCharacterStream(int, Reader, int)</title>
            <indexterm significance="normal">
              <primary>updateCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                            int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the length of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.133" xreflabel="Method updateCharacterStream(java.lang.String, java.io.Reader, int)">
            <title>Method updateCharacterStream(String, Reader, int)</title>
            <indexterm significance="normal">
              <primary>updateCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                            java.io.Reader ]]><emphasis>reader</emphasis><![CDATA[, 
                                            int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.134" xreflabel="Method updateClob(int, java.sql.Clob)">
            <title>Method updateClob(int, Clob)</title>
            <indexterm significance="normal">
              <primary>updateClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.135" xreflabel="Method updateClob(java.lang.String, java.sql.Clob)">
            <title>Method updateClob(String, Clob)</title>
            <indexterm significance="normal">
              <primary>updateClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.136" xreflabel="Method updateDate(int, java.sql.Date)">
            <title>Method updateDate(int, Date)</title>
            <indexterm significance="normal">
              <primary>updateDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.137" xreflabel="Method updateDate(java.lang.String, java.sql.Date)">
            <title>Method updateDate(String, Date)</title>
            <indexterm significance="normal">
              <primary>updateDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.138" xreflabel="Method updateDouble(int, double)">
            <title>Method updateDouble(int, double)</title>
            <indexterm significance="normal">
              <primary>updateDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.139" xreflabel="Method updateDouble(java.lang.String, double)">
            <title>Method updateDouble(String, double)</title>
            <indexterm significance="normal">
              <primary>updateDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.140" xreflabel="Method updateFloat(int, float)">
            <title>Method updateFloat(int, float)</title>
            <indexterm significance="normal">
              <primary>updateFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.141" xreflabel="Method updateFloat(java.lang.String, float)">
            <title>Method updateFloat(String, float)</title>
            <indexterm significance="normal">
              <primary>updateFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.142" xreflabel="Method updateInt(int, int)">
            <title>Method updateInt(int, int)</title>
            <indexterm significance="normal">
              <primary>updateInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.143" xreflabel="Method updateInt(java.lang.String, int)">
            <title>Method updateInt(String, int)</title>
            <indexterm significance="normal">
              <primary>updateInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.144" xreflabel="Method updateLong(int, long)">
            <title>Method updateLong(int, long)</title>
            <indexterm significance="normal">
              <primary>updateLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.145" xreflabel="Method updateLong(java.lang.String, long)">
            <title>Method updateLong(String, long)</title>
            <indexterm significance="normal">
              <primary>updateLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.146" xreflabel="Method updateNull(int)">
            <title>Method updateNull(int)</title>
            <indexterm significance="normal">
              <primary>updateNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Give a nullable column a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.147" xreflabel="Method updateNull(java.lang.String)">
            <title>Method updateNull(String)</title>
            <indexterm significance="normal">
              <primary>updateNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.148" xreflabel="Method updateObject(int, java.lang.Object)">
            <title>Method updateObject(int, Object)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.149" xreflabel="Method updateObject(int, java.lang.Object, int)">
            <title>Method updateObject(int, Object, int)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                                   int ]]><emphasis>scale</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.150" xreflabel="Method updateObject(java.lang.String, java.lang.Object)">
            <title>Method updateObject(String, Object)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                   java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.151" xreflabel="Method updateObject(java.lang.String, java.lang.Object, int)">
            <title>Method updateObject(String, Object, int)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                   java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.152" xreflabel="Method updateRef(int, java.sql.Ref)">
            <title>Method updateRef(int, Ref)</title>
            <indexterm significance="normal">
              <primary>updateRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.153" xreflabel="Method updateRef(java.lang.String, java.sql.Ref)">
            <title>Method updateRef(String, Ref)</title>
            <indexterm significance="normal">
              <primary>updateRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.154" xreflabel="Method updateRow()">
            <title>Method updateRow()</title>
            <indexterm significance="normal">
              <primary>updateRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 if called when on the insert row</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Marks the current row of this rowset as updated but it does not update 
 the row to the underlying data source. The method acceptChanges must 
 be called to update the row to the data source.
 It notifies listeners that the row has changed also. 
 Cannot be called when on the insert row.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.155" xreflabel="Method updateShort(int, short)">
            <title>Method updateShort(int, short)</title>
            <indexterm significance="normal">
              <primary>updateShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.156" xreflabel="Method updateShort(java.lang.String, short)">
            <title>Method updateShort(String, short)</title>
            <indexterm significance="normal">
              <primary>updateShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.157" xreflabel="Method updateString(int, java.lang.String)">
            <title>Method updateString(int, String)</title>
            <indexterm significance="normal">
              <primary>updateString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.158" xreflabel="Method updateString(java.lang.String, java.lang.String)">
            <title>Method updateString(String, String)</title>
            <indexterm significance="normal">
              <primary>updateString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                   java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.159" xreflabel="Method updateTime(int, java.sql.Time)">
            <title>Method updateTime(int, Time)</title>
            <indexterm significance="normal">
              <primary>updateTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.160" xreflabel="Method updateTime(java.lang.String, java.sql.Time)">
            <title>Method updateTime(String, Time)</title>
            <indexterm significance="normal">
              <primary>updateTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.161" xreflabel="Method updateTimestamp(int, java.sql.Timestamp)">
            <title>Method updateTimestamp(int, Timestamp)</title>
            <indexterm significance="normal">
              <primary>updateTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.162" xreflabel="Method updateTimestamp(java.lang.String, java.sql.Timestamp)">
            <title>Method updateTimestamp(String, Timestamp)</title>
            <indexterm significance="normal">
              <primary>updateTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                      java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.2.2.163" xreflabel="Method wasNull()">
            <title>Method wasNull()</title>
            <indexterm significance="normal">
              <primary>wasNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>wasNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">wasNull</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column may have the value of SQL NULL; wasNull reports whether
 the last column read had this special value.
 Note that you must first call getXXX on a column to try to read
 its value and then call wasNull() to find if the value was
 the SQL NULL.
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.3" xreflabel="Class OPLConnectionPoolDataSource">
        <title>Class OPLConnectionPoolDataSource</title>
        <indexterm significance="normal">
          <primary>OPLConnectionPoolDataSource</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLConnectionPoolDataSource</secondary>
        </indexterm>
        <para>
A ConnectionPoolDataSource object is a factory for PooledConnection objects.
 An object that implements this interface will typically be registered with
 a JNDI service.
    </para>
        <section xml:id="mt_jd1.3.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLConnectionPoolDataSource</emphasis><![CDATA[ extends OPLDataSource implements ConnectionPoolDataSource,Serializable,Referenceable,ConnectionEventListener {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">OPLConnectionPoolDataSource</emphasis><![CDATA[();
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public void ]]><emphasis role="strong">finalize</emphasis><![CDATA[() throws java.lang.Throwable;
  public OPLPoolStatistic ]]><emphasis role="strong">get_statistics</emphasis><![CDATA[();
  public OPLPoolStatistic[] ]]><emphasis role="strong">getAll_statistics</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">connectionClosed</emphasis><![CDATA[(javax.sql.ConnectionEvent ]]><emphasis>event</emphasis><![CDATA[);
  public void ]]><emphasis role="strong">connectionErrorOccurred</emphasis><![CDATA[(javax.sql.ConnectionEvent ]]><emphasis>event</emphasis><![CDATA[);
  public Reference ]]><emphasis role="strong">getReference</emphasis><![CDATA[() throws javax.naming.NamingException;
  public void ]]><emphasis role="strong">fill</emphasis><![CDATA[() throws java.sql.SQLException;
  public PooledConnection ]]><emphasis role="strong">getPooledConnection</emphasis><![CDATA[() throws java.sql.SQLException;
  public PooledConnection ]]><emphasis role="strong">getPooledConnection</emphasis><![CDATA[(java.lang.String ]]><emphasis>_user</emphasis><![CDATA[, 
                                              java.lang.String ]]><emphasis>_password</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getMinPoolSize</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setMinPoolSize</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getMaxPoolSize</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setMaxPoolSize</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getInitialPoolSize</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setInitialPoolSize</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getMaxIdleTime</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setMaxIdleTime</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getPropertyCycle</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setPropertyCycle</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[);
  public int ]]><emphasis role="strong">getMaxStatements</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setMaxStatements</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLDataSource</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLConnectionPoolDataSource</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.3.2">
          <title>Members</title>
          <section xml:id="mt_jd1.3.2.1" xreflabel="Method close()">
            <title>Method close()</title>
            <indexterm significance="normal">
              <primary>close</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>close</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Physically close all the pooled connections in the cache and free all
 the resources
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.2" xreflabel="Method connectionClosed(javax.sql.ConnectionEvent)">
            <title>Method connectionClosed(ConnectionEvent)</title>
            <indexterm significance="normal">
              <primary>connectionClosed</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>connectionClosed</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">connectionClosed</emphasis><![CDATA[(javax.sql.ConnectionEvent ]]><emphasis>event</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>event</literal></emphasis> - an event object describing the source of the event</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Invoked when the application calls close() on its representation of
 the connection.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.3" xreflabel="Method connectionErrorOccurred(javax.sql.ConnectionEvent)">
            <title>Method connectionErrorOccurred(ConnectionEvent)</title>
            <indexterm significance="normal">
              <primary>connectionErrorOccurred</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>connectionErrorOccurred</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">connectionErrorOccurred</emphasis><![CDATA[(javax.sql.ConnectionEvent ]]><emphasis>event</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>event</literal></emphasis> - an event object describing the source of the event</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Invoked when a fatal connection error occurs, just before an SQLException
 is thrown to the application.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.4" xreflabel="Method fill()">
            <title>Method fill()</title>
            <indexterm significance="normal">
              <primary>fill</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>fill</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">fill</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Fills the cache with PooledConnections for later use.
 Ignored if the MinPoolSize is 0.
 It is usually called when the OPLConnectionPoolDataSource is created
 via JNDI calls.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.5" xreflabel="Method get_statistics()">
            <title>Method get_statistics()</title>
            <indexterm significance="normal">
              <primary>get_statistics</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>get_statistics</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public OPLPoolStatistic ]]><emphasis role="strong">get_statistics</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Return the cache statistics for the OPLConnectionPoolDataSource
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.6" xreflabel="Method getAll_statistics()">
            <title>Method getAll_statistics()</title>
            <indexterm significance="normal">
              <primary>getAll_statistics</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getAll_statistics</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public OPLPoolStatistic[] ]]><emphasis role="strong">getAll_statistics</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Return an array of the cache statistics for the all created OPLConnectionPoolDataSources
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.7" xreflabel="Method getInitialPoolSize()">
            <title>Method getInitialPoolSize()</title>
            <indexterm significance="normal">
              <primary>getInitialPoolSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getInitialPoolSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getInitialPoolSize</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the number of physical connections the pool
 will contain when it is created
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.8" xreflabel="Method getMaxIdleTime()">
            <title>Method getMaxIdleTime()</title>
            <indexterm significance="normal">
              <primary>getMaxIdleTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMaxIdleTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMaxIdleTime</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the number of seconds that a physical connection
 will remain unused in the pool before the
 connection is closed. Zero ( 0 ) indicates no limit.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.9" xreflabel="Method getMaxPoolSize()">
            <title>Method getMaxPoolSize()</title>
            <indexterm significance="normal">
              <primary>getMaxPoolSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMaxPoolSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMaxPoolSize</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the maximum number of physical connections
 the pool will be able contain. Zero ( 0 ) indicates no maximum size.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.10" xreflabel="Method getMaxStatements()">
            <title>Method getMaxStatements()</title>
            <indexterm significance="normal">
              <primary>getMaxStatements</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMaxStatements</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMaxStatements</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the total number of statements that the pool will
 keep open. Zero ( 0 ) indicates that caching of
 statements is disabled.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.11" xreflabel="Method getMinPoolSize()">
            <title>Method getMinPoolSize()</title>
            <indexterm significance="normal">
              <primary>getMinPoolSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMinPoolSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMinPoolSize</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the minimum number of physical connections
 the pool will keep available at all times. Zero ( 0 ) indicates that
 connections will be created as needed.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.12" xreflabel="Method getPooledConnection()">
            <title>Method getPooledConnection()</title>
            <indexterm significance="normal">
              <primary>getPooledConnection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPooledConnection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public PooledConnection ]]><emphasis role="strong">getPooledConnection</emphasis><![CDATA[() throws 
            java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Attempt to establish a database connection.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.13" xreflabel="Method getPooledConnection(java.lang.String, java.lang.String)">
            <title>Method getPooledConnection(String, String)</title>
            <indexterm significance="normal">
              <primary>getPooledConnection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPooledConnection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public PooledConnection ]]><emphasis role="strong">getPooledConnection</emphasis><![CDATA[(java.lang.String ]]><emphasis>_user</emphasis><![CDATA[, 
                                                      java.lang.String ]]><emphasis>_password</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>user</literal></emphasis> - the database user on whose behalf the Connection is being made</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>password</literal></emphasis> - the user's password</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a PooledConnection to the database</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Attempt to establish a database connection.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.14" xreflabel="Method getPropertyCycle()">
            <title>Method getPropertyCycle()</title>
            <indexterm significance="normal">
              <primary>getPropertyCycle</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPropertyCycle</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getPropertyCycle</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the interval, in seconds, that the pool will wait
 before enforcing the current policy defined by the
 values of the above connection pool properties
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.15" xreflabel="Method setInitialPoolSize(int)">
            <title>Method setInitialPoolSize(int)</title>
            <indexterm significance="normal">
              <primary>setInitialPoolSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setInitialPoolSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setInitialPoolSize</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - a number of physical connections</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the number of physical connections the pool
 should contain when it is created
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.16" xreflabel="Method setMaxIdleTime(int)">
            <title>Method setMaxIdleTime(int)</title>
            <indexterm significance="normal">
              <primary>setMaxIdleTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMaxIdleTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMaxIdleTime</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - a number of seconds</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the number of seconds that a physical connection
 should remain unused in the pool before the
 connection is closed. Zero ( 0 ) indicates no limit.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.17" xreflabel="Method setMaxPoolSize(int)">
            <title>Method setMaxPoolSize(int)</title>
            <indexterm significance="normal">
              <primary>setMaxPoolSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMaxPoolSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMaxPoolSize</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - a maximum number of physical connections</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the maximum number of physical conections that the pool should contain.
 Zero ( 0 ) indicates no maximum size.
 The default value is 0 .
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.18" xreflabel="Method setMaxStatements(int)">
            <title>Method setMaxStatements(int)</title>
            <indexterm significance="normal">
              <primary>setMaxStatements</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMaxStatements</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMaxStatements</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - a total number of statements</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the total number of statements that the pool should
 keep open. Zero ( 0 ) indicates that caching of
 statements is disabled.
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.19" xreflabel="Method setMinPoolSize(int)">
            <title>Method setMinPoolSize(int)</title>
            <indexterm significance="normal">
              <primary>setMinPoolSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setMinPoolSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setMinPoolSize</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - a minimum number of physical connections</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the number of physical connections the pool should keep available
 at all times. Zero ( 0 ) indicates that connections should be created
 as needed
 The default value is 0 .
        </para>
          </section>
          <section xml:id="mt_jd1.3.2.20" xreflabel="Method setPropertyCycle(int)">
            <title>Method setPropertyCycle(int)</title>
            <indexterm significance="normal">
              <primary>setPropertyCycle</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setPropertyCycle</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setPropertyCycle</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - an interval (in seconds)</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the interval, in seconds, that the pool should wait
 before enforcing the current policy defined by the
 values of the above connection pool properties
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.4" xreflabel="Class OPLDataSource">
        <title>Class OPLDataSource</title>
        <indexterm significance="normal">
          <primary>OPLDataSource</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLDataSource</secondary>
        </indexterm>
        <para>
A DataSource object is a factory for Connection objects.
 An object that implements the DataSource interface will typically
 be registered with a JNDI service provider. A JDBC driver that is
 accessed via the DataSource API does not automatically register
 itself with the DriverManager.
    </para>
        <section xml:id="mt_jd1.4.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLDataSource</emphasis><![CDATA[ implements DataSource,Serializable,Referenceable {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">OPLDataSource</emphasis><![CDATA[();
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public Reference ]]><emphasis role="strong">getReference</emphasis><![CDATA[() throws javax.naming.NamingException;
  public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[() throws java.sql.SQLException;
  public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[(java.lang.String ]]><emphasis>user</emphasis><![CDATA[, 
                                  java.lang.String ]]><emphasis>password</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public PrintWriter ]]><emphasis role="strong">getLogWriter</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setLogWriter</emphasis><![CDATA[(java.io.PrintWriter ]]><emphasis>parm</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getLoginTimeout</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setLoginTimeout</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getDataSourceName</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setDataSourceName</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getDescription</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setDescription</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public int ]]><emphasis role="strong">getPortNumber</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setPortNumber</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getServerName</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setServerName</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getDatabaseName</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setDatabaseName</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getUser</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setUser</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getPassword</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setPassword</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getSVT</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setSVT</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public boolean ]]><emphasis role="strong">getReadOnly</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setReadOnly</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getDbOptions</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setDbOptions</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getFBS</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setFBS</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getCharSet</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setCharSet</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getCursorModel</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setCursorModel</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getConcurrencyType</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setConcurrencyType</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public boolean ]]><emphasis role="strong">getEncrypted</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setEncrypted</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
  public boolean ]]><emphasis role="strong">getDeferLongFetch</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setDeferLongFetch</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getApplication</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setApplication</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
  public boolean ]]><emphasis role="strong">getUnicode</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setUnicode</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
  public String ]]><emphasis role="strong">getURL</emphasis><![CDATA[();
  public void ]]><emphasis role="strong">setURL</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLDataSource</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.4.2">
          <title>Members</title>
          <section xml:id="mt_jd1.4.2.1" xreflabel="Method getApplication()">
            <title>Method getApplication()</title>
            <indexterm significance="normal">
              <primary>getApplication</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getApplication</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getApplication</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the Application name set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.2" xreflabel="Method getCharSet()">
            <title>Method getCharSet()</title>
            <indexterm significance="normal">
              <primary>getCharSet</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCharSet</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getCharSet</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the charset of remote database set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.3" xreflabel="Method getConcurrencyType()">
            <title>Method getConcurrencyType()</title>
            <indexterm significance="normal">
              <primary>getConcurrencyType</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConcurrencyType</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getConcurrencyType</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the default Concurrency Type for scrollable ResultSets
 set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.4" xreflabel="Method getConnection()">
            <title>Method getConnection()</title>
            <indexterm significance="normal">
              <primary>getConnection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConnection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Attempt to establish a database connection.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.5" xreflabel="Method getConnection(java.lang.String, java.lang.String)">
            <title>Method getConnection(String, String)</title>
            <indexterm significance="normal">
              <primary>getConnection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConnection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[(java.lang.String ]]><emphasis>user</emphasis><![CDATA[, 
                                          java.lang.String ]]><emphasis>password</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>user</literal></emphasis> - the database user on whose behalf the Connection is being made</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>password</literal></emphasis> - the user's password</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Connection to the database</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Attempt to establish a database connection.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.6" xreflabel="Method getCursorModel()">
            <title>Method getCursorModel()</title>
            <indexterm significance="normal">
              <primary>getCursorModel</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCursorModel</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getCursorModel</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the default Cursor Model for scrollable ResultSets
 set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.7" xreflabel="Method getDatabaseName()">
            <title>Method getDatabaseName()</title>
            <indexterm significance="normal">
              <primary>getDatabaseName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDatabaseName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getDatabaseName</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the name of the database set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.8" xreflabel="Method getDataSourceName()">
            <title>Method getDataSourceName()</title>
            <indexterm significance="normal">
              <primary>getDataSourceName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDataSourceName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getDataSourceName</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the datasource name for this instance if set.
 The default value is "OPLDataSourceName"
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.9" xreflabel="Method getDbOptions()">
            <title>Method getDbOptions()</title>
            <indexterm significance="normal">
              <primary>getDbOptions</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDbOptions</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getDbOptions</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the Database Options set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.10" xreflabel="Method getDeferLongFetch()">
            <title>Method getDeferLongFetch()</title>
            <indexterm significance="normal">
              <primary>getDeferLongFetch</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDeferLongFetch</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getDeferLongFetch</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get if the DataSource instance uses the deferLongFetch for long data.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.11" xreflabel="Method getDescription()">
            <title>Method getDescription()</title>
            <indexterm significance="normal">
              <primary>getDescription</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDescription</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getDescription</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the description of this data source.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.12" xreflabel="Method getEncrypted()">
            <title>Method getEncrypted()</title>
            <indexterm significance="normal">
              <primary>getEncrypted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getEncrypted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getEncrypted</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get if the outgoing packets are encrypted for this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.13" xreflabel="Method getFBS()">
            <title>Method getFBS()</title>
            <indexterm significance="normal">
              <primary>getFBS</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFBS</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getFBS</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the Fetch Buffer Size set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.14" xreflabel="Method getLoginTimeout()">
            <title>Method getLoginTimeout()</title>
            <indexterm significance="normal">
              <primary>getLoginTimeout</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getLoginTimeout</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getLoginTimeout</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Gets the maximum time in seconds that this data source can wait while
 attempting to connect to a database. A value of zero means that the timeout
 is the default system timeout if there is one; otherwise it means that
 there is no timeout. When a DataSource object is created the login timeout
 is initially zero.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.15" xreflabel="Method getLogWriter()">
            <title>Method getLogWriter()</title>
            <indexterm significance="normal">
              <primary>getLogWriter</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getLogWriter</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public PrintWriter ]]><emphasis role="strong">getLogWriter</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The log writer is a character output stream to which all logging and
 tracing messages for this data source object instance will be printed.
 This includes messages printed by the methods of this object, messages
 printed by methods of other objects manufactured by this object, and so on.
 Messages printed to a data source specific log writer are not printed
 to the log writer associated with the java.sql.Drivermanager class.
 When a DataSource object is created the log writer is initially null,
 in other words, logging is disabled.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.16" xreflabel="Method getPassword()">
            <title>Method getPassword()</title>
            <indexterm significance="normal">
              <primary>getPassword</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPassword</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getPassword</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the password set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.17" xreflabel="Method getPortNumber()">
            <title>Method getPortNumber()</title>
            <indexterm significance="normal">
              <primary>getPortNumber</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPortNumber</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getPortNumber</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the port number on which oplrqb is listening for requests.
 The default value is 5000
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.18" xreflabel="Method getReadOnly()">
            <title>Method getReadOnly()</title>
            <indexterm significance="normal">
              <primary>getReadOnly</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getReadOnly</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getReadOnly</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the ReadOnly attribute set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.19" xreflabel="Method getServerName()">
            <title>Method getServerName()</title>
            <indexterm significance="normal">
              <primary>getServerName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getServerName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getServerName</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the name of the host on which oplrqb is running.
 The default value is "localhost"
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.20" xreflabel="Method getSVT()">
            <title>Method getSVT()</title>
            <indexterm significance="normal">
              <primary>getSVT</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getSVT</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getSVT</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the ServerType set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.21" xreflabel="Method getUnicode()">
            <title>Method getUnicode()</title>
            <indexterm significance="normal">
              <primary>getUnicode</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUnicode</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getUnicode</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get if the DataSource instance uses the Unicode connection with a DBMS agent.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.22" xreflabel="Method getURL()">
            <title>Method getURL()</title>
            <indexterm significance="normal">
              <primary>getURL</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getURL</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getURL</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the URL for this Datasource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.23" xreflabel="Method getUser()">
            <title>Method getUser()</title>
            <indexterm significance="normal">
              <primary>getUser</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUser</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getUser</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Get the user name set on this DataSource instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.24" xreflabel="Method setApplication(java.lang.String)">
            <title>Method setApplication(String)</title>
            <indexterm significance="normal">
              <primary>setApplication</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setApplication</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setApplication</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - Application name to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the Application name with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.25" xreflabel="Method setCharSet(java.lang.String)">
            <title>Method setCharSet(String)</title>
            <indexterm significance="normal">
              <primary>setCharSet</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCharSet</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCharSet</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - CharSet to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the charset of remote database with which connections have to be obtained.
 The default value is get from 
          <literal>System.getProperty("fil...</literal>
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.26" xreflabel="Method setConcurrencyType(java.lang.String)">
            <title>Method setConcurrencyType(String)</title>
            <indexterm significance="normal">
              <primary>setConcurrencyType</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setConcurrencyType</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setConcurrencyType</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - Concurrency Type to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the default Concurrency Type for scrollable ResultSets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.27" xreflabel="Method setCursorModel(java.lang.String)">
            <title>Method setCursorModel(String)</title>
            <indexterm significance="normal">
              <primary>setCursorModel</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCursorModel</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCursorModel</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - CursorModel to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the default Cursor Model for scrollable ResultSets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.28" xreflabel="Method setDatabaseName(java.lang.String)">
            <title>Method setDatabaseName(String)</title>
            <indexterm significance="normal">
              <primary>setDatabaseName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDatabaseName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDatabaseName</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - database name to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the name of a particular database on a server.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.29" xreflabel="Method setDataSourceName(java.lang.String)">
            <title>Method setDataSourceName(String)</title>
            <indexterm significance="normal">
              <primary>setDataSourceName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDataSourceName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDataSourceName</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - DataSource name to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the DataSource name. The default value is "OPLDataSourceName"
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.30" xreflabel="Method setDbOptions(java.lang.String)">
            <title>Method setDbOptions(String)</title>
            <indexterm significance="normal">
              <primary>setDbOptions</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDbOptions</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDbOptions</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - Database Options to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the Database Options with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.31" xreflabel="Method setDeferLongFetch(boolean)">
            <title>Method setDeferLongFetch(boolean)</title>
            <indexterm significance="normal">
              <primary>setDeferLongFetch</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDeferLongFetch</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDeferLongFetch</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - true for a DeferLongFetch connection</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the DeferLongFetch attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.32" xreflabel="Method setDescription(java.lang.String)">
            <title>Method setDescription(String)</title>
            <indexterm significance="normal">
              <primary>setDescription</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setDescription</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setDescription</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - Description to be set.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the description for this data source instance.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.33" xreflabel="Method setEncrypted(boolean)">
            <title>Method setEncrypted(boolean)</title>
            <indexterm significance="normal">
              <primary>setEncrypted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setEncrypted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setEncrypted</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - true if outgoing packets must be encrypted</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the Encrypted flag for outgoing packets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.34" xreflabel="Method setFBS(java.lang.String)">
            <title>Method setFBS(String)</title>
            <indexterm significance="normal">
              <primary>setFBS</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setFBS</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setFBS</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - FetchBufferSize to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets number of JDBC resultset rows that get packed
 into a single network packet
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.35" xreflabel="Method setLoginTimeout(int)">
            <title>Method setLoginTimeout(int)</title>
            <indexterm significance="normal">
              <primary>setLoginTimeout</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setLoginTimeout</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setLoginTimeout</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - the data source login time limit (in seconds)</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Sets the maximum time in seconds that this data source will wait while
 attempting to connect to a database. A value of zero specifies that
 the timeout is the default system timeout if there is one; otherwise
 it specifies that there is no timeout. When a DataSource object
 is created the login timeout is initially zero.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.36" xreflabel="Method setLogWriter(java.io.PrintWriter)">
            <title>Method setLogWriter(PrintWriter)</title>
            <indexterm significance="normal">
              <primary>setLogWriter</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setLogWriter</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setLogWriter</emphasis><![CDATA[(java.io.PrintWriter ]]><emphasis>parm</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - the new log writer; to disable, set to null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The log writer is a character output stream to which all logging and
 tracing messages for this data source object instance will be printed.
 This includes messages printed by the methods of this object, messages
 printed by methods of other objects manufactured by this object, and so on.
 Messages printed to a data source specific log writer are not printed
 to the log writer associated with the java.sql.Drivermanager class.
 When a DataSource object is created the log writer is initially null, in
 other words, logging is disabled.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.37" xreflabel="Method setPassword(java.lang.String)">
            <title>Method setPassword(String)</title>
            <indexterm significance="normal">
              <primary>setPassword</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setPassword</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setPassword</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - password to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the password with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.38" xreflabel="Method setPortNumber(int)">
            <title>Method setPortNumber(int)</title>
            <indexterm significance="normal">
              <primary>setPortNumber</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setPortNumber</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setPortNumber</emphasis><![CDATA[(int ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - port number on which oplrqb is listening</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the port number where the oplrqb is listening for requests.
 The default value is 5000 . Will be overwritten with value from URL,
 if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.39" xreflabel="Method setReadOnly(boolean)">
            <title>Method setReadOnly(boolean)</title>
            <indexterm significance="normal">
              <primary>setReadOnly</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setReadOnly</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setReadOnly</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - true for a readOnly connection</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the ReadOnly attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.40" xreflabel="Method setServerName(java.lang.String)">
            <title>Method setServerName(String)</title>
            <indexterm significance="normal">
              <primary>setServerName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setServerName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setServerName</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - name of the host on which oplrqb is running</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the name of the host where the oplrqb is running.
 The default value is "localhost" . Will be overwritten with value from URL,
 if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.41" xreflabel="Method setSVT(java.lang.String)">
            <title>Method setSVT(String)</title>
            <indexterm significance="normal">
              <primary>setSVT</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setSVT</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setSVT</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - ServerType to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the ServerType with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.42" xreflabel="Method setUnicode(boolean)">
            <title>Method setUnicode(boolean)</title>
            <indexterm significance="normal">
              <primary>setUnicode</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setUnicode</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setUnicode</emphasis><![CDATA[(boolean ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - true for a Unicode connection</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the Unicode attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.43" xreflabel="Method setURL(java.lang.String)">
            <title>Method setURL(String)</title>
            <indexterm significance="normal">
              <primary>setURL</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setURL</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setURL</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - URL to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the URL with which connections have to be obtained.
        </para>
          </section>
          <section xml:id="mt_jd1.4.2.44" xreflabel="Method setUser(java.lang.String)">
            <title>Method setUser(String)</title>
            <indexterm significance="normal">
              <primary>setUser</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setUser</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setUser</emphasis><![CDATA[(java.lang.String ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>parm</literal></emphasis> - username to be set</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the user name with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.5" xreflabel="Class OPLDataSourceFactory">
        <title>Class OPLDataSourceFactory</title>
        <indexterm significance="normal">
          <primary>OPLDataSourceFactory</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLDataSourceFactory</secondary>
        </indexterm>
        <section xml:id="mt_jd1.5.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLDataSourceFactory</emphasis><![CDATA[ implements ObjectFactory {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">OPLDataSourceFactory</emphasis><![CDATA[();
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public Object ]]><emphasis role="strong">getObjectInstance</emphasis><![CDATA[(java.lang.Object ]]><emphasis>obj</emphasis><![CDATA[, javax.naming.Name ]]><emphasis>name</emphasis><![CDATA[, 
                                  javax.naming.Context ]]><emphasis>nameCtx</emphasis><![CDATA[, 
                                  java.util.Hashtable ]]><emphasis>environment</emphasis><![CDATA[) 
      throws java.lang.Exception;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLDataSourceFactory</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      </section>
      <section xml:id="mt_jd1.6" xreflabel="Class OPLJdbcRowSet">
        <title>Class OPLJdbcRowSet</title>
        <indexterm significance="normal">
          <primary>OPLJdbcRowSet</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLJdbcRowSet</secondary>
        </indexterm>
        <para>
A OPLJdbcRowSet is a connected rowset. The purpose of the
 OPLJdbcRowSet class is to act like a JavaBean at design time and provide
 a thin layer that wraps around a JDBC ResultSet at runtime. 
    </para>
        <para>
When execute() is called a OPLJdbcRowSet object opens a JDBC connection
 internally which remains open until close() is called, unless a Connection
 is passed to execute() explicitly, in which case that Connection is used
 instead. ResultSet operations such as cursor movement, updating, etc. are
 simply delegated to an underlying JDBC ResultSet object which is maintained
 internally.
    </para>
        <section xml:id="mt_jd1.6.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLJdbcRowSet</emphasis><![CDATA[ extends BaseRowSet  {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">OPLJdbcRowSet</emphasis><![CDATA[();
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public void ]]><emphasis role="strong">finalize</emphasis><![CDATA[() throws java.lang.Throwable;
  public void ]]><emphasis role="strong">execute</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">execute</emphasis><![CDATA[(java.sql.Connection ]]><emphasis>_conn</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">cancelRowUpdates</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">next</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">previous</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">first</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">last</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">absolute</emphasis><![CDATA[(int ]]><emphasis>row</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">relative</emphasis><![CDATA[(int ]]><emphasis>rows</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">beforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">afterLast</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isBeforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isAfterLast</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isFirst</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isLast</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">rowUpdated</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">rowInserted</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">rowDeleted</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">refreshRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">insertRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">deleteRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">moveToInsertRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">moveToCurrentRow</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">wasNull</emphasis><![CDATA[() throws java.sql.SQLException;
  public SQLWarning ]]><emphasis role="strong">getWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">clearWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getCursorName</emphasis><![CDATA[() throws java.sql.SQLException;
  public ResultSetMetaData ]]><emphasis role="strong">getMetaData</emphasis><![CDATA[() throws java.sql.SQLException;
  public int ]]><emphasis role="strong">findColumn</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) throws java.sql.SQLException;
  public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                 int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                    int ]]><emphasis>length</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                               java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                              java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                 java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                    java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                           int ]]><emphasis>scale</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Statement ]]><emphasis role="strong">getStatement</emphasis><![CDATA[() throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
  public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
      throws java.sql.SQLException;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.BaseRowSet</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLJdbcRowSet</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.6.2">
          <title>Members</title>
          <section xml:id="mt_jd1.6.2.1" xreflabel="Method absolute(int)">
            <title>Method absolute(int)</title>
            <indexterm significance="normal">
              <primary>absolute</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>absolute</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">absolute</emphasis><![CDATA[(int ]]><emphasis>row</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 row is 0, or result set type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Move to an absolute row number in the result set. 
        </para>
            <para>
If row is positive, moves to an absolute row with respect to the
 beginning of the result set. The first row is row 1, the second
 is row 2, etc. 
        </para>
            <para>
If row is negative, moves to an absolute row position with respect to
 the end of result set. For example, calling absolute(-1) positions the
 cursor on the last row, absolute(-2) indicates the next-to-last
 row, etc. 
        </para>
            <para>
An attempt to position the cursor beyond the first/last row in
 the result set, leaves the cursor before/after the first/last
 row, respectively. 
        </para>
            <para>
Note: Calling absolute(1) is the same as calling first().
 Calling absolute(-1) is the same as calling last().
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.2" xreflabel="Method afterLast()">
            <title>Method afterLast()</title>
            <indexterm significance="normal">
              <primary>afterLast</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>afterLast</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">afterLast</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the end of the result set, just after the last
 row. Has no effect if the result set contains no rows.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.3" xreflabel="Method beforeFirst()">
            <title>Method beforeFirst()</title>
            <indexterm significance="normal">
              <primary>beforeFirst</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>beforeFirst</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">beforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the front of the result set, just before the
 first row. Has no effect if the result set contains no rows.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.4" xreflabel="Method cancelRowUpdates()">
            <title>Method cancelRowUpdates()</title>
            <indexterm significance="normal">
              <primary>cancelRowUpdates</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>cancelRowUpdates</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">cancelRowUpdates</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The cancelRowUpdates() method may be called after calling an
 updateXXX() method(s) and before calling updateRow() to rollback
 the updates made to a row. If no updates have been made or
 updateRow() has already been called, then this method has no
 effect.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.5" xreflabel="Method clearWarnings()">
            <title>Method clearWarnings()</title>
            <indexterm significance="normal">
              <primary>clearWarnings</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>clearWarnings</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">clearWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
After this call getWarnings returns null until a new warning is
 reported for this ResultSet.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.6" xreflabel="Method close()">
            <title>Method close()</title>
            <indexterm significance="normal">
              <primary>close</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>close</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
In some cases, it is desirable to immediately release a
 ResultSet's database and JDBC resources instead of waiting for
 this to happen when it is automatically closed; the close
 method provides this immediate release. 
        </para>
            <para><emphasis>Note:</emphasis> A ResultSet is automatically closed by the
 Statement that generated it when that Statement is closed,
 re-executed, or is used to retrieve the next result from a
 sequence of multiple results. A ResultSet is also automatically
 closed when it is garbage collected.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.7" xreflabel="Method deleteRow()">
            <title>Method deleteRow()</title>
            <indexterm significance="normal">
              <primary>deleteRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>deleteRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">deleteRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Delete the current row from the result set and the underlying
 database. Cannot be called when on the insert row.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.8" xreflabel="Method execute()">
            <title>Method execute()</title>
            <indexterm significance="normal">
              <primary>execute</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>execute</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">execute</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Populates the rowset with data.
 Execute() may use the following properties: url, data source name,
 user name, password, transaction isolation, and type map to create a
 connection for reading data.
 Execute may use the following properties to create a statement
 to execute a command: command, read only, maximum field size,
 maximum rows, escape processing, and query timeout.
 If the required properties have not been set, an exception is
 thrown. If successful, the current contents of the rowset are
 discarded and the rowset's metadata is also (re)set. If there are
 outstanding updates, they are ignored.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.9" xreflabel="Method execute(java.sql.Connection)">
            <title>Method execute(Connection)</title>
            <indexterm significance="normal">
              <primary>execute</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>execute</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">execute</emphasis><![CDATA[(java.sql.Connection ]]><emphasis>_conn</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>_conn</literal></emphasis> - a Connection to use</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Populates the rowset with data. Uses an existing JDBC connection object.
 The values of the url/data source name, user, and password
 properties are ignored. The command specified by the command property
 is executed to retrieve
 the data. The current contents of the rowset are discarded and the
 rowset's metadata is also (re)set. If there are outstanding updates,
 they are also ignored.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.10" xreflabel="Method findColumn(java.lang.String)">
            <title>Method findColumn(String)</title>
            <indexterm significance="normal">
              <primary>findColumn</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>findColumn</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">findColumn</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column index</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Map a Resultset column name to a ResultSet column index.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.11" xreflabel="Method first()">
            <title>Method first()</title>
            <indexterm significance="normal">
              <primary>first</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>first</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">first</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the first row in the result set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.12" xreflabel="Method getArray(int)">
            <title>Method getArray(int)</title>
            <indexterm significance="normal">
              <primary>getArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing an SQL array</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get an array column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.13" xreflabel="Method getArray(java.lang.String)">
            <title>Method getArray(String)</title>
            <indexterm significance="normal">
              <primary>getArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Array ]]><emphasis role="strong">getArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing an SQL array</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get an array column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.14" xreflabel="Method getAsciiStream(int)">
            <title>Method getAsciiStream(int)</title>
            <indexterm significance="normal">
              <primary>getAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.15" xreflabel="Method getAsciiStream(java.lang.String)">
            <title>Method getAsciiStream(String)</title>
            <indexterm significance="normal">
              <primary>getAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.16" xreflabel="Method getBigDecimal(int)">
            <title>Method getBigDecimal(int)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value (full precision); if the value is SQL NULL,
 the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.17" xreflabel="Method getBigDecimal(int, int)">
            <title>Method getBigDecimal(int, int)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - the number of digits to the right of the decimal</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
Get the value of a column in the current row as a java.math.BigDecimal object.
        </para>
            </warning>
          </section>
          <section xml:id="mt_jd1.6.2.18" xreflabel="Method getBigDecimal(java.lang.String)">
            <title>Method getBigDecimal(String)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.19" xreflabel="Method getBigDecimal(java.lang.String, int)">
            <title>Method getBigDecimal(String, int)</title>
            <indexterm significance="normal">
              <primary>getBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public BigDecimal ]]><emphasis role="strong">getBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                          int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - the number of digits to the right of the decimal</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
            </warning>
          </section>
          <section xml:id="mt_jd1.6.2.20" xreflabel="Method getBinaryStream(int)">
            <title>Method getBinaryStream(int)</title>
            <indexterm significance="normal">
              <primary>getBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.21" xreflabel="Method getBinaryStream(java.lang.String)">
            <title>Method getBinaryStream(String)</title>
            <indexterm significance="normal">
              <primary>getBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.22" xreflabel="Method getBlob(int)">
            <title>Method getBlob(int)</title>
            <indexterm significance="normal">
              <primary>getBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a BLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a BLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.23" xreflabel="Method getBlob(java.lang.String)">
            <title>Method getBlob(String)</title>
            <indexterm significance="normal">
              <primary>getBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Blob ]]><emphasis role="strong">getBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a BLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a BLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.24" xreflabel="Method getBoolean(int)">
            <title>Method getBoolean(int)</title>
            <indexterm significance="normal">
              <primary>getBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java boolean.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.25" xreflabel="Method getBoolean(java.lang.String)">
            <title>Method getBoolean(String)</title>
            <indexterm significance="normal">
              <primary>getBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">getBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java boolean.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.26" xreflabel="Method getByte(int)">
            <title>Method getByte(int)</title>
            <indexterm significance="normal">
              <primary>getByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.27" xreflabel="Method getByte(java.lang.String)">
            <title>Method getByte(String)</title>
            <indexterm significance="normal">
              <primary>getByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte ]]><emphasis role="strong">getByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.28" xreflabel="Method getBytes(int)">
            <title>Method getBytes(int)</title>
            <indexterm significance="normal">
              <primary>getBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.29" xreflabel="Method getBytes(java.lang.String)">
            <title>Method getBytes(String)</title>
            <indexterm significance="normal">
              <primary>getBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public byte[] ]]><emphasis role="strong">getBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.30" xreflabel="Method getCharacterStream(int)">
            <title>Method getCharacterStream(int)</title>
            <indexterm significance="normal">
              <primary>getCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.31" xreflabel="Method getCharacterStream(java.lang.String)">
            <title>Method getCharacterStream(String)</title>
            <indexterm significance="normal">
              <primary>getCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Reader ]]><emphasis role="strong">getCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.32" xreflabel="Method getClob(int)">
            <title>Method getClob(int)</title>
            <indexterm significance="normal">
              <primary>getClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a CLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a CLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.33" xreflabel="Method getClob(java.lang.String)">
            <title>Method getClob(String)</title>
            <indexterm significance="normal">
              <primary>getClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Clob ]]><emphasis role="strong">getClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing a CLOB</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a CLOB column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.34" xreflabel="Method getCursorName()">
            <title>Method getCursorName()</title>
            <indexterm significance="normal">
              <primary>getCursorName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCursorName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getCursorName</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if an error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the name of the SQL cursor used by this ResultSet.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.35" xreflabel="Method getDate(int)">
            <title>Method getDate(int)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.36" xreflabel="Method getDate(int, java.util.Calendar)">
            <title>Method getDate(int, Calendar)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the date</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.37" xreflabel="Method getDate(java.lang.String)">
            <title>Method getDate(String)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.38" xreflabel="Method getDate(java.lang.String, java.util.Calendar)">
            <title>Method getDate(String, Calendar)</title>
            <indexterm significance="normal">
              <primary>getDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Date ]]><emphasis role="strong">getDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                              java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the date</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.39" xreflabel="Method getDouble(int)">
            <title>Method getDouble(int)</title>
            <indexterm significance="normal">
              <primary>getDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java double.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.40" xreflabel="Method getDouble(java.lang.String)">
            <title>Method getDouble(String)</title>
            <indexterm significance="normal">
              <primary>getDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public double ]]><emphasis role="strong">getDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java double.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.41" xreflabel="Method getFloat(int)">
            <title>Method getFloat(int)</title>
            <indexterm significance="normal">
              <primary>getFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java float.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.42" xreflabel="Method getFloat(java.lang.String)">
            <title>Method getFloat(String)</title>
            <indexterm significance="normal">
              <primary>getFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public float ]]><emphasis role="strong">getFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java float.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.43" xreflabel="Method getInt(int)">
            <title>Method getInt(int)</title>
            <indexterm significance="normal">
              <primary>getInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java int.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.44" xreflabel="Method getInt(java.lang.String)">
            <title>Method getInt(String)</title>
            <indexterm significance="normal">
              <primary>getInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java int.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.45" xreflabel="Method getLong(int)">
            <title>Method getLong(int)</title>
            <indexterm significance="normal">
              <primary>getLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java long.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.46" xreflabel="Method getLong(java.lang.String)">
            <title>Method getLong(String)</title>
            <indexterm significance="normal">
              <primary>getLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java long.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.47" xreflabel="Method getMetaData()">
            <title>Method getMetaData()</title>
            <indexterm significance="normal">
              <primary>getMetaData</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMetaData</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public ResultSetMetaData ]]><emphasis role="strong">getMetaData</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The number, types and properties of a ResultSet's columns
 are provided by the getMetaData method.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.48" xreflabel="Method getObject(int)">
            <title>Method getObject(int)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a java.lang.Object holding the column value.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java object. 
        </para>
            <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
            <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @column is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(column,
 this.getStatement().getConnection().getTypeMap()).
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.49" xreflabel="Method getObject(int, java.util.Map)">
            <title>Method getObject(int, Map)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>map</literal></emphasis> - the mapping from SQL type names to Java classes</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing the SQL value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.50" xreflabel="Method getObject(java.lang.String)">
            <title>Method getObject(String)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a java.lang.Object holding the column value.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java object. 
        </para>
            <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
            <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @columnName is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(columnName,
 this.getStatement().getConnection().getTypeMap()).
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.51" xreflabel="Method getObject(java.lang.String, java.util.Map)">
            <title>Method getObject(String, Map)</title>
            <indexterm significance="normal">
              <primary>getObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Object ]]><emphasis role="strong">getObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[, java.util.Map ]]><emphasis>map</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>map</literal></emphasis> - the mapping from SQL type names to Java classes</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing the SQL value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.52" xreflabel="Method getRef(int)">
            <title>Method getRef(int)</title>
            <indexterm significance="normal">
              <primary>getRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(int ]]><emphasis>colIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing data of an SQL REF type</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.53" xreflabel="Method getRef(java.lang.String)">
            <title>Method getRef(String)</title>
            <indexterm significance="normal">
              <primary>getRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Ref ]]><emphasis role="strong">getRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>colName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>colName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - an object representing data of an SQL REF type</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.54" xreflabel="Method getRow()">
            <title>Method getRow()</title>
            <indexterm significance="normal">
              <primary>getRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine the current row number. The first row is number 1, the
 second number 2, etc.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.55" xreflabel="Method getShort(int)">
            <title>Method getShort(int)</title>
            <indexterm significance="normal">
              <primary>getShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java short.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.56" xreflabel="Method getShort(java.lang.String)">
            <title>Method getShort(String)</title>
            <indexterm significance="normal">
              <primary>getShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public short ]]><emphasis role="strong">getShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java short.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.57" xreflabel="Method getStatement()">
            <title>Method getStatement()</title>
            <indexterm significance="normal">
              <primary>getStatement</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getStatement</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Statement ]]><emphasis role="strong">getStatement</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Return the Statement that produced the ResultSet.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.58" xreflabel="Method getString(int)">
            <title>Method getString(int)</title>
            <indexterm significance="normal">
              <primary>getString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java String.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.59" xreflabel="Method getString(java.lang.String)">
            <title>Method getString(String)</title>
            <indexterm significance="normal">
              <primary>getString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a Java String.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.60" xreflabel="Method getTime(int)">
            <title>Method getTime(int)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.61" xreflabel="Method getTime(int, java.util.Calendar)">
            <title>Method getTime(int, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the time</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.62" xreflabel="Method getTime(java.lang.String)">
            <title>Method getTime(String)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.63" xreflabel="Method getTime(java.lang.String, java.util.Calendar)">
            <title>Method getTime(String, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Time ]]><emphasis role="strong">getTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                              java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the time</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.64" xreflabel="Method getTimestamp(int)">
            <title>Method getTimestamp(int)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.65" xreflabel="Method getTimestamp(int, java.util.Calendar)">
            <title>Method getTimestamp(int, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, 
                                        java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the timestamp</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.66" xreflabel="Method getTimestamp(java.lang.String)">
            <title>Method getTimestamp(String)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.67" xreflabel="Method getTimestamp(java.lang.String, java.util.Calendar)">
            <title>Method getTimestamp(String, Calendar)</title>
            <indexterm significance="normal">
              <primary>getTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Timestamp ]]><emphasis role="strong">getTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                        java.util.Calendar ]]><emphasis>cal</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>cal</literal></emphasis> - the calendar to use in constructing the timestamp</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.68" xreflabel="Method getUnicodeStream(int)">
            <title>Method getUnicodeStream(int)</title>
            <indexterm significance="normal">
              <primary>getUnicodeStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUnicodeStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
            </warning>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.69" xreflabel="Method getUnicodeStream(java.lang.String)">
            <title>Method getUnicodeStream(String)</title>
            <indexterm significance="normal">
              <primary>getUnicodeStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getUnicodeStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public InputStream ]]><emphasis role="strong">getUnicodeStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - is the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <warning>
              <title>Deprecated</title>
              <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
            </warning>
            <para><emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.70" xreflabel="Method getURL(int)">
            <title>Method getURL(int)</title>
            <indexterm significance="normal">
              <primary>getURL</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getURL</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the index of the column 1 is the first, 2 is the second,...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs,
 or if a URL is malformed</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.71" xreflabel="Method getURL(java.lang.String)">
            <title>Method getURL(String)</title>
            <indexterm significance="normal">
              <primary>getURL</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getURL</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public URL ]]><emphasis role="strong">getURL</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the SQL name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs
 or if a URL is malformed</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.72" xreflabel="Method getWarnings()">
            <title>Method getWarnings()</title>
            <indexterm significance="normal">
              <primary>getWarnings</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getWarnings</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public SQLWarning ]]><emphasis role="strong">getWarnings</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
The first warning reported by calls on this ResultSet is
 returned. Subsequent ResultSet warnings will be chained to this
 SQLWarning. 
        </para>
            <para>
The warning chain is automatically cleared each time a new
 row is read. 
        </para>
            <para><emphasis>Note:</emphasis> This warning chain only covers warnings caused
 by ResultSet methods. Any warning caused by statement methods
 (such as reading OUT parameters) will be chained on the
 Statement object.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.73" xreflabel="Method insertRow()">
            <title>Method insertRow()</title>
            <indexterm significance="normal">
              <primary>insertRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>insertRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">insertRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs,
 if this method is called when the cursor is not on the insert row,
 or if not all of non-nullable columns in
 the insert row have been given a value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Inserts the contents of the insert row into this 
          <literal>ResultSet</literal> objaect and into the database.
 The cursor must be on the insert row when this method is called.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.74" xreflabel="Method isAfterLast()">
            <title>Method isAfterLast()</title>
            <indexterm significance="normal">
              <primary>isAfterLast</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isAfterLast</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isAfterLast</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is after the last row in the result
 set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.75" xreflabel="Method isBeforeFirst()">
            <title>Method isBeforeFirst()</title>
            <indexterm significance="normal">
              <primary>isBeforeFirst</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isBeforeFirst</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isBeforeFirst</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is before the first row in the result
 set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.76" xreflabel="Method isFirst()">
            <title>Method isFirst()</title>
            <indexterm significance="normal">
              <primary>isFirst</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isFirst</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isFirst</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is on the first row of the result set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.77" xreflabel="Method isLast()">
            <title>Method isLast()</title>
            <indexterm significance="normal">
              <primary>isLast</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isLast</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isLast</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the cursor is on the last row of the result set.
 Note: Calling isLast() may be expensive since the JDBC driver
 might need to fetch ahead one row in order to determine
 whether the current row is the last row in the result set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.78" xreflabel="Method last()">
            <title>Method last()</title>
            <indexterm significance="normal">
              <primary>last</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>last</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">last</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the last row in the result set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.79" xreflabel="Method moveToCurrentRow()">
            <title>Method moveToCurrentRow()</title>
            <indexterm significance="normal">
              <primary>moveToCurrentRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>moveToCurrentRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">moveToCurrentRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs,
 or the result set is not updatable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Move the cursor to the remembered cursor position, usually the
 current row. Has no effect unless the cursor is on the insert
 row.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.80" xreflabel="Method moveToInsertRow()">
            <title>Method moveToInsertRow()</title>
            <indexterm significance="normal">
              <primary>moveToInsertRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>moveToInsertRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">moveToInsertRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs,
 or the result set is not updatable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Move to the insert row. The current cursor position is
 remembered while the cursor is positioned on the insert row.
 The insert row is a special row associated with an updatable
 result set. It is essentially a buffer where a new row may
 be constructed by calling the updateXXX() methods prior to
 inserting the row into the result set.
 Only the updateXXX(), getXXX(), and insertRow() methods may be
 called when the cursor is on the insert row. All of the columns in
 a result set must be given a value each time this method is
 called before calling insertRow(). UpdateXXX()must be called before
 getXXX() on a column.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.81" xreflabel="Method next()">
            <title>Method next()</title>
            <indexterm significance="normal">
              <primary>next</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>next</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">next</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A ResultSet is initially positioned before its first row; the
 first call to next makes the first row the current row; the
 second call makes the second row the current row, etc. 
        </para>
            <para>
If an input stream from the previous row is open, it is
 implicitly closed. The ResultSet's warning chain is cleared
 when a new row is read.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.82" xreflabel="Method previous()">
            <title>Method previous()</title>
            <indexterm significance="normal">
              <primary>previous</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>previous</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">previous</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 result set type is TYPE_FORWAR_DONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves to the previous row in the result set. 
        </para>
            <para>
Note: previous() is not the same as relative(-1) since it
 makes sense to call previous() when there is no current row.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.83" xreflabel="Method refreshRow()">
            <title>Method refreshRow()</title>
            <indexterm significance="normal">
              <primary>refreshRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>refreshRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">refreshRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Refresh the value of the current row with its current value in
 the database. Cannot be called when on the insert row.
 The refreshRow() method provides a way for an application to
 explicitly tell the JDBC driver to refetch a row(s) from the
 database. An application may want to call refreshRow() when
 caching or prefetching is being done by the JDBC driver to
 fetch the latest value of a row from the database. The JDBC driver
 may actually refresh multiple rows at once if the fetch size is
 greater than one.
 All values are refetched subject to the transaction isolation
 level and cursor sensitivity. If refreshRow() is called after
 calling updateXXX(), but before calling updateRow() then the
 updates made to the row are lost. Calling refreshRow() frequently
 will likely slow performance.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.84" xreflabel="Method relative(int)">
            <title>Method relative(int)</title>
            <indexterm significance="normal">
              <primary>relative</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>relative</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">relative</emphasis><![CDATA[(int ]]><emphasis>rows</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or there
 is no current row, or result set type is TYPE_FORWARD_ONLY.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Moves a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 result set positions the cursor before/after the
 the first/last row. Calling relative(0) is valid, but does
 not change the cursor position. 
        </para>
            <para>
Note: Calling relative(1) is different than calling next()
 since is makes sense to call next() when there is no current row,
 for example, when the cursor is positioned before the first row
 or after the last row of the result set.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.85" xreflabel="Method rowDeleted()">
            <title>Method rowDeleted()</title>
            <indexterm significance="normal">
              <primary>rowDeleted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>rowDeleted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">rowDeleted</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.DatabaseMetaData.deletesAreDetected</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if this row has been deleted. A deleted row may leave
 a visible "hole" in a result set. This method can be used to
 detect holes in a result set. The value returned depends on whether
 or not the result set can detect deletions.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.86" xreflabel="Method rowInserted()">
            <title>Method rowInserted()</title>
            <indexterm significance="normal">
              <primary>rowInserted</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>rowInserted</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">rowInserted</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.DatabaseMetaData.insertsAreDetected</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the current row has been inserted. The value returned
 depends on whether or not the result set can detect visible inserts.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.87" xreflabel="Method rowUpdated()">
            <title>Method rowUpdated()</title>
            <indexterm significance="normal">
              <primary>rowUpdated</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>rowUpdated</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">rowUpdated</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.DatabaseMetaData.updatesAreDetected</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Determine if the current row has been updated. The value returned
 depends on whether or not the result set can detect updates.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.88" xreflabel="Method updateArray(int, java.sql.Array)">
            <title>Method updateArray(int, Array)</title>
            <indexterm significance="normal">
              <primary>updateArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.89" xreflabel="Method updateArray(java.lang.String, java.sql.Array)">
            <title>Method updateArray(String, Array)</title>
            <indexterm significance="normal">
              <primary>updateArray</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateArray</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateArray</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                  java.sql.Array ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.90" xreflabel="Method updateAsciiStream(int, java.io.InputStream, int)">
            <title>Method updateAsciiStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                        int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the length of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.91" xreflabel="Method updateAsciiStream(java.lang.String, java.io.InputStream, int)">
            <title>Method updateAsciiStream(String, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateAsciiStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateAsciiStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateAsciiStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                        java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                        int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.92" xreflabel="Method updateBigDecimal(int, java.math.BigDecimal)">
            <title>Method updateBigDecimal(int, BigDecimal)</title>
            <indexterm significance="normal">
              <primary>updateBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.93" xreflabel="Method updateBigDecimal(java.lang.String, java.math.BigDecimal)">
            <title>Method updateBigDecimal(String, BigDecimal)</title>
            <indexterm significance="normal">
              <primary>updateBigDecimal</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBigDecimal</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBigDecimal</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                       java.math.BigDecimal ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.94" xreflabel="Method updateBinaryStream(int, java.io.InputStream, int)">
            <title>Method updateBinaryStream(int, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, 
                                         java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the length of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.95" xreflabel="Method updateBinaryStream(java.lang.String, java.io.InputStream, int)">
            <title>Method updateBinaryStream(String, InputStream, int)</title>
            <indexterm significance="normal">
              <primary>updateBinaryStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBinaryStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBinaryStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                         java.io.InputStream ]]><emphasis>x</emphasis><![CDATA[, 
                                         int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.96" xreflabel="Method updateBlob(int, java.sql.Blob)">
            <title>Method updateBlob(int, Blob)</title>
            <indexterm significance="normal">
              <primary>updateBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.97" xreflabel="Method updateBlob(java.lang.String, java.sql.Blob)">
            <title>Method updateBlob(String, Blob)</title>
            <indexterm significance="normal">
              <primary>updateBlob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBlob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBlob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Blob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.98" xreflabel="Method updateBoolean(int, boolean)">
            <title>Method updateBoolean(int, boolean)</title>
            <indexterm significance="normal">
              <primary>updateBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.99" xreflabel="Method updateBoolean(java.lang.String, boolean)">
            <title>Method updateBoolean(String, boolean)</title>
            <indexterm significance="normal">
              <primary>updateBoolean</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBoolean</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBoolean</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, boolean ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.100" xreflabel="Method updateByte(int, byte)">
            <title>Method updateByte(int, byte)</title>
            <indexterm significance="normal">
              <primary>updateByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.101" xreflabel="Method updateByte(java.lang.String, byte)">
            <title>Method updateByte(String, byte)</title>
            <indexterm significance="normal">
              <primary>updateByte</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateByte</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateByte</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.102" xreflabel="Method updateBytes(int, byte[])">
            <title>Method updateBytes(int, byte[])</title>
            <indexterm significance="normal">
              <primary>updateBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.103" xreflabel="Method updateBytes(java.lang.String, byte[])">
            <title>Method updateBytes(String, byte[])</title>
            <indexterm significance="normal">
              <primary>updateBytes</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateBytes</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateBytes</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, byte[] ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.104" xreflabel="Method updateCharacterStream(int, java.io.Reader, int)">
            <title>Method updateCharacterStream(int, Reader, int)</title>
            <indexterm significance="normal">
              <primary>updateCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                            int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - the length of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.105" xreflabel="Method updateCharacterStream(java.lang.String, java.io.Reader, int)">
            <title>Method updateCharacterStream(String, Reader, int)</title>
            <indexterm significance="normal">
              <primary>updateCharacterStream</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateCharacterStream</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateCharacterStream</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                            java.io.Reader ]]><emphasis>x</emphasis><![CDATA[, 
                                            int ]]><emphasis>length</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>length</literal></emphasis> - of the stream</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.106" xreflabel="Method updateClob(int, java.sql.Clob)">
            <title>Method updateClob(int, Clob)</title>
            <indexterm significance="normal">
              <primary>updateClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.107" xreflabel="Method updateClob(java.lang.String, java.sql.Clob)">
            <title>Method updateClob(String, Clob)</title>
            <indexterm significance="normal">
              <primary>updateClob</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateClob</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateClob</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Clob ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.108" xreflabel="Method updateDate(int, java.sql.Date)">
            <title>Method updateDate(int, Date)</title>
            <indexterm significance="normal">
              <primary>updateDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.109" xreflabel="Method updateDate(java.lang.String, java.sql.Date)">
            <title>Method updateDate(String, Date)</title>
            <indexterm significance="normal">
              <primary>updateDate</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDate</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDate</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Date ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.110" xreflabel="Method updateDouble(int, double)">
            <title>Method updateDouble(int, double)</title>
            <indexterm significance="normal">
              <primary>updateDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.111" xreflabel="Method updateDouble(java.lang.String, double)">
            <title>Method updateDouble(String, double)</title>
            <indexterm significance="normal">
              <primary>updateDouble</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateDouble</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateDouble</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, double ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.112" xreflabel="Method updateFloat(int, float)">
            <title>Method updateFloat(int, float)</title>
            <indexterm significance="normal">
              <primary>updateFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.113" xreflabel="Method updateFloat(java.lang.String, float)">
            <title>Method updateFloat(String, float)</title>
            <indexterm significance="normal">
              <primary>updateFloat</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateFloat</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateFloat</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, float ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.114" xreflabel="Method updateInt(int, int)">
            <title>Method updateInt(int, int)</title>
            <indexterm significance="normal">
              <primary>updateInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.115" xreflabel="Method updateInt(java.lang.String, int)">
            <title>Method updateInt(String, int)</title>
            <indexterm significance="normal">
              <primary>updateInt</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateInt</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateInt</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, int ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.116" xreflabel="Method updateLong(int, long)">
            <title>Method updateLong(int, long)</title>
            <indexterm significance="normal">
              <primary>updateLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.117" xreflabel="Method updateLong(java.lang.String, long)">
            <title>Method updateLong(String, long)</title>
            <indexterm significance="normal">
              <primary>updateLong</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateLong</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateLong</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, long ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.118" xreflabel="Method updateNull(int)">
            <title>Method updateNull(int)</title>
            <indexterm significance="normal">
              <primary>updateNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Give a nullable column a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.119" xreflabel="Method updateNull(java.lang.String)">
            <title>Method updateNull(String)</title>
            <indexterm significance="normal">
              <primary>updateNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateNull</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.120" xreflabel="Method updateObject(int, java.lang.Object)">
            <title>Method updateObject(int, Object)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.121" xreflabel="Method updateObject(int, java.lang.Object, int)">
            <title>Method updateObject(int, Object, int)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, 
                                   int ]]><emphasis>scale</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.122" xreflabel="Method updateObject(java.lang.String, java.lang.Object)">
            <title>Method updateObject(String, Object)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                   java.lang.Object ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.123" xreflabel="Method updateObject(java.lang.String, java.lang.Object, int)">
            <title>Method updateObject(String, Object, int)</title>
            <indexterm significance="normal">
              <primary>updateObject</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateObject</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateObject</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                   java.lang.Object ]]><emphasis>x</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.124" xreflabel="Method updateRef(int, java.sql.Ref)">
            <title>Method updateRef(int, Ref)</title>
            <indexterm significance="normal">
              <primary>updateRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.125" xreflabel="Method updateRef(java.lang.String, java.sql.Ref)">
            <title>Method updateRef(String, Ref)</title>
            <indexterm significance="normal">
              <primary>updateRef</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateRef</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateRef</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Ref ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.4</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.126" xreflabel="Method updateRow()">
            <title>Method updateRow()</title>
            <indexterm significance="normal">
              <primary>updateRow</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateRow</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateRow</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs, or
 if called when on the insert row</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update the underlying database with the new contents of the
 current row. Cannot be called when on the insert row.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.127" xreflabel="Method updateShort(int, short)">
            <title>Method updateShort(int, short)</title>
            <indexterm significance="normal">
              <primary>updateShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.128" xreflabel="Method updateShort(java.lang.String, short)">
            <title>Method updateShort(String, short)</title>
            <indexterm significance="normal">
              <primary>updateShort</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateShort</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateShort</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, short ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.129" xreflabel="Method updateString(int, java.lang.String)">
            <title>Method updateString(int, String)</title>
            <indexterm significance="normal">
              <primary>updateString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.130" xreflabel="Method updateString(java.lang.String, java.lang.String)">
            <title>Method updateString(String, String)</title>
            <indexterm significance="normal">
              <primary>updateString</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateString</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateString</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                   java.lang.String ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.131" xreflabel="Method updateTime(int, java.sql.Time)">
            <title>Method updateTime(int, Time)</title>
            <indexterm significance="normal">
              <primary>updateTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.132" xreflabel="Method updateTime(java.lang.String, java.sql.Time)">
            <title>Method updateTime(String, Time)</title>
            <indexterm significance="normal">
              <primary>updateTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTime</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, java.sql.Time ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.133" xreflabel="Method updateTimestamp(int, java.sql.Timestamp)">
            <title>Method updateTimestamp(int, Timestamp)</title>
            <indexterm significance="normal">
              <primary>updateTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(int ]]><emphasis>columnIndex</emphasis><![CDATA[, java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.134" xreflabel="Method updateTimestamp(java.lang.String, java.sql.Timestamp)">
            <title>Method updateTimestamp(String, Timestamp)</title>
            <indexterm significance="normal">
              <primary>updateTimestamp</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>updateTimestamp</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">updateTimestamp</emphasis><![CDATA[(java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[, 
                                      java.sql.Timestamp ]]><emphasis>x</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the name of the column</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>x</literal></emphasis> - the new column value</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
          </section>
          <section xml:id="mt_jd1.6.2.135" xreflabel="Method wasNull()">
            <title>Method wasNull()</title>
            <indexterm significance="normal">
              <primary>wasNull</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>wasNull</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">wasNull</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
A column may have the value of SQL NULL; wasNull reports whether
 the last column read had this special value.
 Note that you must first call getXXX on a column to try to read
 its value and then call wasNull() to find if the value was
 the SQL NULL.
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.7" xreflabel="Class OPLPooledConnection">
        <title>Class OPLPooledConnection</title>
        <indexterm significance="normal">
          <primary>OPLPooledConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLPooledConnection</secondary>
        </indexterm>
        <para>
A PooledConnection object is a connection object that provides hooks
 for connection pool management. A PooledConnection object represents
 a physical connection to a data source.
    </para>
        <section xml:id="mt_jd1.7.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLPooledConnection</emphasis><![CDATA[ implements PooledConnection,Cloneable {
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public void ]]><emphasis role="strong">finalize</emphasis><![CDATA[() throws java.lang.Throwable;
  public void ]]><emphasis role="strong">addConnectionEventListener</emphasis><![CDATA[(
                javax.sql.ConnectionEventListener ]]><emphasis>parm</emphasis><![CDATA[);
  public void ]]><emphasis role="strong">removeConnectionEventListener</emphasis><![CDATA[(
                javax.sql.ConnectionEventListener ]]><emphasis>parm</emphasis><![CDATA[);
  public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
  public void ]]><emphasis role="strong">closeAll</emphasis><![CDATA[() throws java.sql.SQLException;
  public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[() throws java.sql.SQLException;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLPooledConnection</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.7.2">
          <title>Members</title>
          <section xml:id="mt_jd1.7.2.1" xreflabel="Method addConnectionEventListener(javax.sql.ConnectionEventListener)">
            <title>Method addConnectionEventListener(ConnectionEventListener)</title>
            <indexterm significance="normal">
              <primary>addConnectionEventListener</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>addConnectionEventListener</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">addConnectionEventListener</emphasis><![CDATA[(
                        javax.sql.ConnectionEventListener ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <para>
Add an event listener.
        </para>
          </section>
          <section xml:id="mt_jd1.7.2.2" xreflabel="Method close()">
            <title>Method close()</title>
            <indexterm significance="normal">
              <primary>close</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>close</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">close</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Close the physical connection.
        </para>
          </section>
          <section xml:id="mt_jd1.7.2.3" xreflabel="Method closeAll()">
            <title>Method closeAll()</title>
            <indexterm significance="normal">
              <primary>closeAll</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>closeAll</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">closeAll</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Close all the Statement objects that have been opened by this
 PooledConnection object.
        </para>
          </section>
          <section xml:id="mt_jd1.7.2.4" xreflabel="Method getConnection()">
            <title>Method getConnection()</title>
            <indexterm significance="normal">
              <primary>getConnection</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConnection</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public Connection ]]><emphasis role="strong">getConnection</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>java.sql.SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Create an object handle for this physical connection.
 The object returned is a temporary handle used by application code
 to refer to a physical connection that is being pooled.
        </para>
          </section>
          <section xml:id="mt_jd1.7.2.5" xreflabel="Method removeConnectionEventListener(javax.sql.ConnectionEventListener)">
            <title>Method removeConnectionEventListener(ConnectionEventListener)</title>
            <indexterm significance="normal">
              <primary>removeConnectionEventListener</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>removeConnectionEventListener</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">removeConnectionEventListener</emphasis><![CDATA[(
                        javax.sql.ConnectionEventListener ]]><emphasis>parm</emphasis><![CDATA[);
          ]]></programlisting>
            </blockquote>
            <para>
Remove an event listener.
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.8" xreflabel="Class OPLPoolStatistic">
        <title>Class OPLPoolStatistic</title>
        <indexterm significance="normal">
          <primary>OPLPoolStatistic</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLPoolStatistic</secondary>
        </indexterm>
        <section xml:id="mt_jd1.8.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLPoolStatistic</emphasis><![CDATA[ implements Cloneable {
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public int ]]><emphasis role="strong">getHits</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getMisses</emphasis><![CDATA[();
  public long ]]><emphasis role="strong">getMaxWaitTime</emphasis><![CDATA[();
  public long ]]><emphasis role="strong">getMinWaitTime</emphasis><![CDATA[();
  public long ]]><emphasis role="strong">getCumWaitTime</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getCacheSize</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getConnsInUse</emphasis><![CDATA[();
  public int ]]><emphasis role="strong">getConnsUnUsed</emphasis><![CDATA[();
  public String ]]><emphasis role="strong">getName</emphasis><![CDATA[();
  public String ]]><emphasis role="strong">toString</emphasis><![CDATA[();
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLPoolStatistic</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.8.2">
          <title>Members</title>
          <section xml:id="mt_jd1.8.2.1" xreflabel="Method getCacheSize()">
            <title>Method getCacheSize()</title>
            <indexterm significance="normal">
              <primary>getCacheSize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCacheSize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getCacheSize</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the connection pool size.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.2" xreflabel="Method getConnsInUse()">
            <title>Method getConnsInUse()</title>
            <indexterm significance="normal">
              <primary>getConnsInUse</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConnsInUse</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getConnsInUse</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the amount of used connections in the connection pool size.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.3" xreflabel="Method getConnsUnUsed()">
            <title>Method getConnsUnUsed()</title>
            <indexterm significance="normal">
              <primary>getConnsUnUsed</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getConnsUnUsed</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getConnsUnUsed</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the amount of unused connections in the connection pool size.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.4" xreflabel="Method getCumWaitTime()">
            <title>Method getCumWaitTime()</title>
            <indexterm significance="normal">
              <primary>getCumWaitTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCumWaitTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getCumWaitTime</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the sum of all waiting time for the connection pool.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.5" xreflabel="Method getHits()">
            <title>Method getHits()</title>
            <indexterm significance="normal">
              <primary>getHits</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getHits</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getHits</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the amount of the connection pool hits.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.6" xreflabel="Method getMaxWaitTime()">
            <title>Method getMaxWaitTime()</title>
            <indexterm significance="normal">
              <primary>getMaxWaitTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMaxWaitTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getMaxWaitTime</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the maximal waiting time for the connection pool.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.7" xreflabel="Method getMinWaitTime()">
            <title>Method getMinWaitTime()</title>
            <indexterm significance="normal">
              <primary>getMinWaitTime</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMinWaitTime</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public long ]]><emphasis role="strong">getMinWaitTime</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the minimal waiting time for the connection pool.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.8" xreflabel="Method getMisses()">
            <title>Method getMisses()</title>
            <indexterm significance="normal">
              <primary>getMisses</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getMisses</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getMisses</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the amount of the connection pool misses.
        </para>
          </section>
          <section xml:id="mt_jd1.8.2.9" xreflabel="Method getName()">
            <title>Method getName()</title>
            <indexterm significance="normal">
              <primary>getName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getName</emphasis><![CDATA[();
          ]]></programlisting>
            </blockquote>
            <para>
Returns the name of ConectionPoolDataSource.
        </para>
          </section>
        </section>
      </section>
      <section xml:id="mt_jd1.9" xreflabel="Class OPLRowSetMetaData">
        <title>Class OPLRowSetMetaData</title>
        <indexterm significance="normal">
          <primary>OPLRowSetMetaData</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Classes</primary>
          <secondary>OPLRowSetMetaData</secondary>
        </indexterm>
        <para>
The RowSetMetaData interface extends ResultSetMetaData with
 methods that allow a metadata object to be initialized.
    </para>
        <section xml:id="mt_jd1.9.1">
          <title>Synopsis</title>
          <programlisting width="80"><![CDATA[
public class ]]><emphasis role="strong">OPLRowSetMetaData</emphasis><![CDATA[ implements RowSetMetaData,Serializable {
  ]]><emphasis>// Public Constructors</emphasis><![CDATA[
  public ]]><emphasis role="strong">OPLRowSetMetaData</emphasis><![CDATA[(java.sql.ResultSetMetaData ]]><emphasis>rsmd</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  ]]><emphasis>// Public Methods</emphasis><![CDATA[
  public void ]]><emphasis role="strong">setAutoIncrement</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setCaseSensitive</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setCatalogName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>catalogName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setColumnCount</emphasis><![CDATA[(int ]]><emphasis>columnCount</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setColumnDisplaySize</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>size</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setColumnLabel</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>label</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setColumnName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setColumnType</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>SQLType</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setColumnTypeName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>typeName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setCurrency</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setNullable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>property</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setPrecision</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>precision</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setScale</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setSchemaName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>schemaName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setSearchable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setSigned</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public void ]]><emphasis role="strong">setTableName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>tableName</emphasis><![CDATA[) 
      throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getColumnCount</emphasis><![CDATA[() throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isAutoIncrement</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isCaseSensitive</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isSearchable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isCurrency</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">isNullable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isSigned</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getColumnDisplaySize</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getColumnLabel</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getColumnName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getSchemaName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getPrecision</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getScale</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getTableName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getCatalogName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public int ]]><emphasis role="strong">getColumnType</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getColumnTypeName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isReadOnly</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isWritable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public boolean ]]><emphasis role="strong">isDefinitelyWritable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
  public String ]]><emphasis role="strong">getColumnClassName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
}
      ]]></programlisting>
          <informaltable frame="none">
            <tgroup align="center" cols="1">
              <thead>
                <row>
                  <entry align="left">
                    <para>Inheritance Path</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <simpara>java.lang.Object</simpara>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>|</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <simpara>openlink.javax.OPLRowSetMetaData</simpara>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
        <section xml:id="mt_jd1.9.2">
          <title>Members</title>
          <section xml:id="mt_jd1.9.2.1" xreflabel="Method getCatalogName(int)">
            <title>Method getCatalogName(int)</title>
            <indexterm significance="normal">
              <primary>getCatalogName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getCatalogName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getCatalogName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - column name or "" if not applicable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Gets the designated column's table's catalog name.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.2" xreflabel="Method getColumnClassName(int)">
            <title>Method getColumnClassName(int)</title>
            <indexterm significance="normal">
              <primary>getColumnClassName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnClassName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getColumnClassName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>Since</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>1.2</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>
                            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="package-summary.html#2.0 API">What Is in the JDBC
 2.0 API</link>
                          </member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the fully-qualified name of the Java class whose instances
 are manufactured if the method 
          <literal>ResultSet.getObject</literal>
 is called to retrieve a value
 from the column. 
          <literal>ResultSet.getObject</literal> may return a subclass of the
 class returned by this method.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.3" xreflabel="Method getColumnCount()">
            <title>Method getColumnCount()</title>
            <indexterm significance="normal">
              <primary>getColumnCount</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnCount</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getColumnCount</emphasis><![CDATA[() throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Returns the number of columns in this RowSet
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.4" xreflabel="Method getColumnDisplaySize(int)">
            <title>Method getColumnDisplaySize(int)</title>
            <indexterm significance="normal">
              <primary>getColumnDisplaySize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnDisplaySize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getColumnDisplaySize</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the normal maximum number of characters allowed as the width
 of the designated column</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates the designated column's normal maximum width in characters.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.5" xreflabel="Method getColumnLabel(int)">
            <title>Method getColumnLabel(int)</title>
            <indexterm significance="normal">
              <primary>getColumnLabel</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnLabel</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getColumnLabel</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the suggested column title</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Gets the designated column's suggested title for use in printouts and
 displays.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.6" xreflabel="Method getColumnName(int)">
            <title>Method getColumnName(int)</title>
            <indexterm significance="normal">
              <primary>getColumnName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getColumnName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - column name</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the designated column's name.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.7" xreflabel="Method getColumnType(int)">
            <title>Method getColumnType(int)</title>
            <indexterm significance="normal">
              <primary>getColumnType</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnType</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getColumnType</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - SQL type from java.sql.Types</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.Types</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Retrieves the designated column's SQL type.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.8" xreflabel="Method getColumnTypeName(int)">
            <title>Method getColumnTypeName(int)</title>
            <indexterm significance="normal">
              <primary>getColumnTypeName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getColumnTypeName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getColumnTypeName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - type name used by the database. If the column type is
 a user-defined type, then a fully-qualified type name is returned.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Retrieves the designated column's database-specific type name.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.9" xreflabel="Method getPrecision(int)">
            <title>Method getPrecision(int)</title>
            <indexterm significance="normal">
              <primary>getPrecision</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getPrecision</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getPrecision</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - precision</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the designated column's number of decimal digits.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.10" xreflabel="Method getScale(int)">
            <title>Method getScale(int)</title>
            <indexterm significance="normal">
              <primary>getScale</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getScale</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">getScale</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - scale</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Gets the designated column's number of digits to right of the decimal point.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.11" xreflabel="Method getSchemaName(int)">
            <title>Method getSchemaName(int)</title>
            <indexterm significance="normal">
              <primary>getSchemaName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getSchemaName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getSchemaName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - schema name or "" if not applicable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Get the designated column's table's schema.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.12" xreflabel="Method getTableName(int)">
            <title>Method getTableName(int)</title>
            <indexterm significance="normal">
              <primary>getTableName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>getTableName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public String ]]><emphasis role="strong">getTableName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - table name or "" if not applicable</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Gets the designated column's table name.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.13" xreflabel="Method isAutoIncrement(int)">
            <title>Method isAutoIncrement(int)</title>
            <indexterm significance="normal">
              <primary>isAutoIncrement</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isAutoIncrement</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isAutoIncrement</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - true if so</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether the column is automatically numbered, thus read-only.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.14" xreflabel="Method isCaseSensitive(int)">
            <title>Method isCaseSensitive(int)</title>
            <indexterm significance="normal">
              <primary>isCaseSensitive</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isCaseSensitive</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isCaseSensitive</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether a column's case matters.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.15" xreflabel="Method isCurrency(int)">
            <title>Method isCurrency(int)</title>
            <indexterm significance="normal">
              <primary>isCurrency</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isCurrency</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isCurrency</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether the designated column is a cash value.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.16" xreflabel="Method isDefinitelyWritable(int)">
            <title>Method isDefinitelyWritable(int)</title>
            <indexterm significance="normal">
              <primary>isDefinitelyWritable</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isDefinitelyWritable</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isDefinitelyWritable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether a write on the designated column will definitely succeed.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.17" xreflabel="Method isNullable(int)">
            <title>Method isNullable(int)</title>
            <indexterm significance="normal">
              <primary>isNullable</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isNullable</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public int ]]><emphasis role="strong">isNullable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - the nullability status of the given column; one of 
<literal>columnNoNulls</literal>, 
<literal>columnNullable</literal> or 
<literal>columnNullableUnknown</literal></para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates the nullability of values in the designated column.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.18" xreflabel="Method isReadOnly(int)">
            <title>Method isReadOnly(int)</title>
            <indexterm significance="normal">
              <primary>isReadOnly</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isReadOnly</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isReadOnly</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether the designated column is definitely not writable.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.19" xreflabel="Method isSearchable(int)">
            <title>Method isSearchable(int)</title>
            <indexterm significance="normal">
              <primary>isSearchable</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isSearchable</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isSearchable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether the designated column can be used in a where clause.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.20" xreflabel="Method isSigned(int)">
            <title>Method isSigned(int)</title>
            <indexterm significance="normal">
              <primary>isSigned</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isSigned</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isSigned</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether values in the designated column are signed numbers.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.21" xreflabel="Method isWritable(int)">
            <title>Method isWritable(int)</title>
            <indexterm significance="normal">
              <primary>isWritable</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>isWritable</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public boolean ]]><emphasis role="strong">isWritable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[) throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database access error occurs</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Indicates whether it is possible for a write on the designated column to succeed.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.22" xreflabel="Method setAutoIncrement(int, boolean)">
            <title>Method setAutoIncrement(int, boolean)</title>
            <indexterm significance="normal">
              <primary>setAutoIncrement</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setAutoIncrement</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setAutoIncrement</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>property</literal></emphasis> - is either true or false (default is false).</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify whether the is column automatically numbered, thus read-only.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.23" xreflabel="Method setCaseSensitive(int, boolean)">
            <title>Method setCaseSensitive(int, boolean)</title>
            <indexterm significance="normal">
              <primary>setCaseSensitive</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCaseSensitive</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCaseSensitive</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>property</literal></emphasis> - is either true or false (default is false).</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify whether the column is case sensitive.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.24" xreflabel="Method setCatalogName(int, java.lang.String)">
            <title>Method setCatalogName(int, String)</title>
            <indexterm significance="normal">
              <primary>setCatalogName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCatalogName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCatalogName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>catalogName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>catalogName</literal></emphasis> - column's catalog name.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's table's catalog name, if any.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.25" xreflabel="Method setColumnCount(int)">
            <title>Method setColumnCount(int)</title>
            <indexterm significance="normal">
              <primary>setColumnCount</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setColumnCount</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setColumnCount</emphasis><![CDATA[(int ]]><emphasis>columnCount</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnCount</literal></emphasis> - number of columns.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Set the number of columns in the RowSet.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.26" xreflabel="Method setColumnDisplaySize(int, int)">
            <title>Method setColumnDisplaySize(int, int)</title>
            <indexterm significance="normal">
              <primary>setColumnDisplaySize</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setColumnDisplaySize</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setColumnDisplaySize</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>size</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>size</literal></emphasis> - size of the column</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's normal max width in chars.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.27" xreflabel="Method setColumnLabel(int, java.lang.String)">
            <title>Method setColumnLabel(int, String)</title>
            <indexterm significance="normal">
              <primary>setColumnLabel</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setColumnLabel</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setColumnLabel</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>label</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>label</literal></emphasis> - the column title</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the suggested column title for use in printouts and
 displays, if any.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.28" xreflabel="Method setColumnName(int, java.lang.String)">
            <title>Method setColumnName(int, String)</title>
            <indexterm significance="normal">
              <primary>setColumnName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setColumnName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setColumnName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>columnName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>columnName</literal></emphasis> - the column name</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column name.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.29" xreflabel="Method setColumnType(int, int)">
            <title>Method setColumnType(int, int)</title>
            <indexterm significance="normal">
              <primary>setColumnType</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setColumnType</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setColumnType</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>SQLType</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>SQLType</literal></emphasis> - column's SQL type.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="c1" colwidth="1*"/>
                <colspec colname="c2" colwidth="4*"/>
                <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
                <thead>
                  <row>
                    <entry spanname="span">
                      <para>Additional Information</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>See Also</para>
                    </entry>
                    <entry>
                      <para>
                        <simplelist type="inline">
                          <member>java.sql.Types</member>
                        </simplelist>
                      </para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's SQL type.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.30" xreflabel="Method setColumnTypeName(int, java.lang.String)">
            <title>Method setColumnTypeName(int, String)</title>
            <indexterm significance="normal">
              <primary>setColumnTypeName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setColumnTypeName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setColumnTypeName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>typeName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>typeName</literal></emphasis> - data source specific type name.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's data source specific type name, if any.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.31" xreflabel="Method setCurrency(int, boolean)">
            <title>Method setCurrency(int, boolean)</title>
            <indexterm significance="normal">
              <primary>setCurrency</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setCurrency</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setCurrency</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>property</literal></emphasis> - is either true or false (default is false).</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify whether the column is a cash value.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.32" xreflabel="Method setNullable(int, int)">
            <title>Method setNullable(int, int)</title>
            <indexterm significance="normal">
              <primary>setNullable</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setNullable</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setNullable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>property</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>property</literal></emphasis> - is either one of columnNoNulls, columnNullable 
 or columnNullableUnknown (default is columnNullableUnknown).</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify whether the column's value can be set to NULL.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.33" xreflabel="Method setPrecision(int, int)">
            <title>Method setPrecision(int, int)</title>
            <indexterm significance="normal">
              <primary>setPrecision</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setPrecision</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setPrecision</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>precision</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>precision</literal></emphasis> - number of decimal digits.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's number of decimal digits.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.34" xreflabel="Method setScale(int, int)">
            <title>Method setScale(int, int)</title>
            <indexterm significance="normal">
              <primary>setScale</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setScale</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setScale</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, int ]]><emphasis>scale</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>scale</literal></emphasis> - number of digits to right of decimal point.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's number of digits to right of the decimal point.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.35" xreflabel="Method setSchemaName(int, java.lang.String)">
            <title>Method setSchemaName(int, String)</title>
            <indexterm significance="normal">
              <primary>setSchemaName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setSchemaName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setSchemaName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>schemaName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>schemaName</literal></emphasis> - the schema name</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's table's schema, if any.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.36" xreflabel="Method setSearchable(int, boolean)">
            <title>Method setSearchable(int, boolean)</title>
            <indexterm significance="normal">
              <primary>setSearchable</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setSearchable</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setSearchable</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>property</literal></emphasis> - is either true or false (default is false).</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify whether the column can be used in a where clause.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.37" xreflabel="Method setSigned(int, boolean)">
            <title>Method setSigned(int, boolean)</title>
            <indexterm significance="normal">
              <primary>setSigned</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setSigned</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setSigned</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, boolean ]]><emphasis>property</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>property</literal></emphasis> - is either true or false (default is false).</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Speicfy whether the column is a signed number.
        </para>
          </section>
          <section xml:id="mt_jd1.9.2.38" xreflabel="Method setTableName(int, java.lang.String)">
            <title>Method setTableName(int, String)</title>
            <indexterm significance="normal">
              <primary>setTableName</primary>
            </indexterm>
            <indexterm significance="normal">
              <primary>Methods</primary>
              <secondary>setTableName</secondary>
            </indexterm>
            <blockquote>
              <programlisting><emphasis>Synopsis: </emphasis><![CDATA[public void ]]><emphasis role="strong">setTableName</emphasis><![CDATA[(int ]]><emphasis>column</emphasis><![CDATA[, java.lang.String ]]><emphasis>tableName</emphasis><![CDATA[) 
              throws java.sql.SQLException;
          ]]></programlisting>
            </blockquote>
            <informaltable frame="none">
              <tgroup cols="1">
                <colspec colname="param" colwidth="*"/>
                <thead>
                  <colspec colname="param" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Parameters</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para><emphasis><literal>column</literal></emphasis> - the first column is 1, the second is 2, ...</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para><emphasis><literal>tableName</literal></emphasis> - column's table name.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colname="throws" colwidth="*"/>
                <colspec colname="throws" colwidth="2*"/>
                <thead>
                  <colspec colname="throws" colwidth="*"/>
                  <row>
                    <entry>
                      <para>Exceptions</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>SQLException</para>
                    </entry>
                    <entry>
                      <para>if a database-access error occurs.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
            <para>
Specify the column's table name, if any.
        </para>
          </section>
        </section>
      </section>
    </section>

    <!-- 
  $Id: features_jdbc.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_features_jdbc">
      <info>
        <title>New Features</title>
        <keywordset>
          <keyword>JDBC New Features</keyword>
          <keyword>Features</keyword>
          <keyword>Database support; Oracle; SQL Server; DB2; Informix; Sybase; Progress</keyword>
        </keywordset>
      </info>
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>Unicode Driver support</title>
            <para>Database agents support the latest releases of all supported database engines this includes:
<orderedlist><listitem><para>Oracle 8i &amp; 9i</para></listitem><listitem><para>Microsoft SQL Server 2000</para></listitem><listitem><para>DB/2 v7</para></listitem><listitem><para>ODBC Agent</para></listitem><listitem><para>JDBC Agent</para></listitem><listitem><para>Informix 9</para></listitem><listitem><para>Sybase Adaptive Server 12.5</para></listitem><listitem><para>Progress 9 (SQL-92)</para></listitem></orderedlist>
</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Supports JDBC 3.0 (JDK 1.4)</title>
            <para>Support of JDBC 3.0 (JDK 1.4) is now available, with new JDBC Client drivers opljdbc3.jar &amp;
megathin3.jar for providing this connectivty. A new Sample program is also available for demonstrating the used of Cached RowSet in JDBC 3.0</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Significant SQL Server and SYBASE Driver Enhancements</title>
            <para>Our Drivers are now built to communicate directly with Microsoft SQL Server and SYBASE ASE using the TDS protocol (the native wire protocol for both database servers). This also implies that no additional software is required post installation in order for our ODBC Drivers to communicate with these Drivers (this applies to the Single Tier format Drivers only). The use of TDS has also enabled us to double the performance of both our Single Tier and Multi-Tier Drivers for these databases.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Array Optimisations on Select Queries</title>
            <para>All drivers now support the SQLSetStmtAttr(SQL_ARRAY_SIZE) call for batch select statements, providing improved performance when re-execute select statements with bound paramters.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Deferred Fetching</title>
            <para>The Release 4 OpenLink driver family brings marked communications 
layer improvements. Central to these are improved implementation of the 
<computeroutput>SQLGetData</computeroutput> and <computeroutput>SQLPutData</computeroutput>
ODBC function calls.</para>
          </formalpara>
          <formalpara>
            <title>Wholesale vs. Piecemeal Data Transfer</title>
            <para>In previous releases of the drivers, parameter data at query execution 
was assembled in the OpenLink driver's client component and transferred to its 
server component in a single network hop. (The client and server components 
apply to both the Single- and Multi-Tier drivers; they refer to different layers within 
the driver entity.) Similarly, when fetching from a "long", or large binary data 
column, data was transferred from the driver's server component to the client 
component in a single network transfer. The only way data could manipulated in a 
piecemeal fashion, was within the ODBC application from the driver's client 
component (client side only).</para>
          </formalpara>
          <para>The Release 4 driver family now allow transferring parameter data 
in parts over the network between the client and server driver components. Once 
transferred, the fragmented column data are re-pieced together in their entirety 
within the client and server portions of the driver.</para>
          <formalpara>
            <title>Deferred Fetching</title>
            <para>When fetching, data from columns with "long" data are only transferred 
between the server and client components if one of the following applies to 
that column:</para>
          </formalpara>
          <simplelist type="vert">
            <member>It has been "bound" by the application via the SQLBindCol API call</member>
            <member>It has been retrieved via the SQLGetData API call</member>
          </simplelist>
          <para>This mechanism is referred to as deferred fetching. In this method, 
as "long" column data is not reassembled within the OpenLink ODBC client itself 
(rather, within the application), driver memory overhead incurred is dramatically 
reduced. Deferred fetching applies to the following "long" database column types:</para>
          <variablelist>
            <varlistentry>
              <term>ODBC agent</term>
              <listitem>
                <para>SQL_LONGVARCHAR</para>
                <para>SQL_LONGVARBINARY</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>DB/2 agent</term>
              <listitem>
                <para>SQL_BLOB</para>
                <para>SQL_CLOB</para>
                <para>SQL_DBCLOB</para>
                <para>If the long data compatibility option has been specified in the DB2 database</para>
                <para>SQL_LONGVARCHAR</para>
                <para>SQL_LONGVARBINARY</para>
                <para>SQL_LONGVARGRAPHIC</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Oracle agent</term>
              <listitem>
                <para>SQLT_BLOB</para>
                <para>SQLT_CLOB</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Sybase agent</term>
              <listitem>
                <para>CS_IMAGE_TYPE</para>
                <para>CS_TEXT_TYPE</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>However, if a table contains a column defined as one of these 
"long" types, but the actual data stored in the column only fills a small 
proportion of the available space, deferred fetching is of no benefit.  In 
these cases, performance may be improved by switching off the deferred 
fetching mechanism using the control in the OpenLink Generic Client data 
source setup dialog.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>
  <chapter xml:id="mt_xamt">
    <info>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>distributed transaction processing</keyword>
        <keyword>(DTP)</keyword>
        <keyword>XA</keyword>
      </keywordset>
      <title>Distributed Transaction Processing (XA)</title>
      <abstract>
        <para>    The X/Open Distributed Transaction Processing (DTP) model
    defines a specification for the management of transactions
    whose operations are distributed among different computers or
    among different databases from different vendors.
</para>
      </abstract>
    </info>
    <section xml:id="mt_xa">
      <title>Distributed Transaction Processing (DTP)</title>
      <section xml:id="mt_xadtpover">
        <title>X/Open DTP Model</title>
        <para>
        DTP can be broken down into 3 core components: </para>
        <itemizedlist mark="bullet" spacing="compact">
          <listitem>
            <para>An Application Program (AP) for defining transaction
      boundires and specifies actions that constitute a
      transaction.</para>
          </listitem>
          <listitem>
            <para>Resource Managers
    (RMs, such as databases or Data Access Drivers ie ODBC, JDBC, ADO.Net for
    accessing them)provide access to shared resources.</para>
          </listitem>
          <listitem>
            <para>A Transaction Manager (TM) that assigns identifiers to a
      transactions, monitors the progress, and takes responsibility
      for transaction completion and fault recovery.</para>
          </listitem>
        </itemizedlist>
        <para>
          <figure>
            <title>DTP-XA.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="DTP-XA.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>The TX standard defines the API used for communication
    between an application program and a transaction manager. The
    XA (eXtended Architecture) standard defines the two-phase
    commit protocol and the API used for communication between a
    transaction manager and a resource manager. A resource manager
    is a system service that manages durable data, e.g. a DBMS or
    file system. A transaction manager manages distributed
    transactions, which may span multiple resource managers. It
    manages two-phase commit, coordinating the decision to commit
    distributed transactions or roll them back, and coordinates
    failure recovery.</para>
        <para>Whenever an application has a single function that needs to
    access or update the data in multiple transactional resources,
    it should use a distributed transaction. You can use a separate
    simple transaction on each of the resources, but this approach
    is error-prone. If the transaction in one resource commits
    successfully but another fails and must roll back, the first
    transaction can no longer be rolled back, so the state of the
    application becomes inconsistent. If one resource commits
    successfully but the system crashes before the other resource
    can commit successfully, the application again is inconsistent.
    An application moving data from one database to another
    requires a distributed transaction. Otherwise, the data may be
    duplicated (if the insert completes and the delete fails) or
    lost (if the delete completes and the insert fails).</para>
        <section xml:id="mt_xadtpdtc">
          <title>
      Distributed Transaction Coordinator (DTC)</title>
          <para>The Microsoft COM and MTS interfaces were unified into a
    single run-time layer and renamed COM+ for Windows 2000. COM+
    includes the transaction support that was created for MTS. Both
    include a system service, DTC, for coordinating distributed
    transactions and the two-phase commit protocol. Every machine
    running COM+ has a DTC system service.</para>
          <para>For distributed transactions, each computer has a local
    transaction manager ie. the DTC on that machine. When a
    transaction does work at multiple computers, the transaction
    managers interact with other transaction managers via either a
    superior or subordinate relationship. These relationships are
    relevant only for a particular transaction. The root
    transaction manager, also referred to as the global commit
    coordinator, is the transaction manager on the system that
    initiates a transaction.</para>
          <para>DTC introduces the notion of a resource dispenser which does
    two things. It manages a pool of connections to a resource
    manager (i.e. a DBMS in the context of Data Access) and it
    automatically enlists the resource manager in a component's
    transaction. The ODBC
    Driver Manager is a typical resource dispenser, as is an ADO
    .NET Data Provider.</para>
        </section>
        <section xml:id="mt_xadtptuxedo">
          <title>Tuxedo</title>
          <para>BEA Tuxedo provides the framework, or middleware, for
    building scalable multi-tier client/server applications in
    heterogeneous (dissimilar), distributed environments that
    extend from the Web to the Enterprise. Using BEA Tuxedo, users
    can develop, manage, and deploy distributed applications
    independently of the underlying hardware, operating system,
    network, and database environment.</para>
          <para>In contrast to classic 2-tier client/server configuration of
    SQL servers, the Tuxedo brings 3-tier paradigm (clients,
    services, resource managers).</para>
          <para>At the foundation of BEA Tuxedo ATMI is a proven, reliable
    transaction processor, also known as a transaction processing
    (TP) monitor. A transaction processor is an example of a 3-tier
    client/server architecture, where the transaction processor
    supports the application logic (represented by "services"
    between the GUI front-end and the back-end resource managers.
    Examples of resource managers are SQL databases, message
    queues, legacy applications, and other back-end services.</para>
          <para>Tuxedo's Application-to-Transaction Monitor Interface
    consists of the Tuxedo transaction processor and
    infrastructure, and the ATMI API. The ATMI API is used to
    create a Tuxedo client and server.</para>
          <para>A Tuxedo ATMI client collects a user request and forwards it
    to a server offering the requested service. The client "joins"
    a distributed Tuxedo application by calling the ATMI client
    initialization routine. The client can then exchange
    information with the server, sending and receiving data in
    typed buffers, and define transaction boundaries The client
    "leaves" the application by issuing an ATMI termination
    function.</para>
          <para>A Tuxedo server process oversees a set of services, calling
    them automatically for clients that request them. ATMI clients
    do not call servers by name; they call services. The server is
    not written as a complete program (i.e. with a standard main).
    Instead, the server's services are coded as a set of functions
    that are compiled with Tuxedo binaries to produce a server
    executable.</para>
        </section>
        <section xml:id="mt_xadtpjta">
          <title> Java Transaction API (JTA)</title>
          <para>The JTA, or Java Transaction API, is a Java Enterprise API for
        managing distributed transactions. It defines a Java binding for the
        standard XA API for distributed transactions (XA is a standard defined
        by the Open Group). Using the JTA, one can write a program that
        communicates with a distributed transaction service and uses that
        service to coordinate a distributed transaction that accesses and
        update data on two or more networked computer resources, or databases
        in the case of JDBC.</para>
          <para>The XA specification defines an interface between the
        transaction manager (TM) and resource manager (RM) in a distributed
        transaction system. This is a generic interface and it does not
        directly address the use of distributed transactions from Java. The
        Java mapping of the XA interface is defined in Sun Microsystems Java
        Transaction API (JTA) and JDBC 2.0/3.0 specifications.</para>
        </section>
      </section>
      <section xml:id="mt_xadtpormxaii">
        <title>OpenLink Resource Manager XA
        Interface Implementation</title>
        <para>The OpenLink DataAccess drivers (ODBC, JDBC, ADO.Net) form part of
      the Resource Manager in the overal DTP model, implementing the XA
      (eXtended Architecture) interface for the comminication between itself
      as the upper layer of Resource Manager proess and the Transaction
      Manager (DTC, Tuxedo, JTS), and also providing the binding to the
      Database Vendors XA API implementation, which forms the lower layer of
      the Resoure Manager:</para>
        <para>
          <figure>
            <title>UDA-XA.gif</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="UDA-XA.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>Distributed transactions are supported in the OpenLink Multi-Tier
    and Single-Tier ODBC,
    JDBC and ADO.Net drivers/providers for Oracle, SQLServer,
    Sybase, Informix and Ingres II.</para>
        <section xml:id="mt_xadtpodbc">
          <title>  ODBC </title>
          <para>The OpenLink
    Multi-Tier and Single-Tier ODBC drivers support
    distributed transactions using the Microsoft Distributed
    Transaction Co-ordinator (on Windows only) or Tuxedo as the
    Transaction Manager of the distributed transaction process.</para>
          <section>
            <title>
      Distributed
    Transaction Co-ordinator (DTC)</title>
            <para>An OpenLink XA compliant ODBC driver acts as a proxy for an XA
    capable database (RM) and as such can be thought of as a resource manager.
    The OpenLink XA compliant ODBC drivers implement and export the function
    GetXASwitch() which provide the entry points for the DBMS specific XA
    functions which the DTC can use to communicate directly with the DBMS
    should an for of distributed transaction recovery need to the
    performed.</para>
            <section>
              <title>Transaction Enlistment</title>
              <para>
    After initiating a transaction, an application enlists the
    resource managers it wants to participate in the transaction.
    Enlistment is done through the ODBC 3.0 connection
    attribute function call: </para>
              <para>SQLSetConnectAttr(SQL_ATTR_ENLIST_IN_DTC)</para>
            </section>
          </section>
          <section>
            <title>Tuxedo</title>
            <para>An OpenLink XA
    compliant ODBC driver
    acts as a proxy for an XA capable database (RM) and as such can
    be thought of as a resource manager. The driver exports a
    function opl_xa_switch:</para>
            <programlisting><![CDATA[xa_switch_t * opl_xa_switch (void)]]></programlisting>
            <para>which TP monitors can use to retrieve the xa_switch_t
    structure containing pointers to the XA functions.</para>
            <section>
              <title>
      Defining the OpenLink Resource
    Manager in Tuxedo</title>
              <para>When integrating a new resource manager into Tuxedo, the
    file %TUXDIR%/udataobj/RM must be updated to include
    information about the resource manager. To integrate the OpenLink Lite Driver
    for Oracle into Tuxedo on Windows, define an<emphasis>rm_alias</emphasis>
    entry in the RM file by adding a line similar to:</para>
              <para>OPL_ORA_XA;(*opl_xa_switch());"c:\program
    files\openlink\lite32\ntl5o9zz.lib</para>
              <para>where, in this example, OPL_ORA_XA is the<emphasis>rm_alias.</emphasis>.
    ntl5o9zz.lib is an import library for the ODBC driver associated
    with the DSN identified by the xa_info string; in this example
    the OpenLink
    Windows Lite Driver for Oracle (ntl5o9zz.dll).</para>
              <para>To create an<emphasis>rm_alias</emphasis>entry in the RM file for the OpenLink Generic
    Client add a line similar to:</para>
              <para>OPL_XA;(*opl_xa_switch());"c:\program
    files\openlink\olod5032u.lib</para>
              <para>On Unix the<emphasis>rm_alias</emphasis>is created in a similar way. A
    line adding an alias for the OpenLink Generic
    Client is added to $TUXDIR/udataobj/RM as follows:</para>
              <para>OPL_XA:(*opl_xa_switch()):/home/openlink/lib/oplodbcu.so</para>
              <para>Where /home/openlink is the openlink installation
    directory.</para>
            </section>
            <section xml:id="mt_xainfoconnstrfmt">
              <title>
      xa_info, OPENINFO and CLOSEINFO String Formats</title>
              <para>The XA functions xa_open and xa_close open or close a
    connection to a resource manager for the calling thread. Both
    functions accept an<emphasis>xa_info</emphasis>argument.<emphasis>xa_info</emphasis>is
    a string containing instance-specific information for the
    resource manager. For OpenLink
      ODBC drivers, the
  <emphasis>xa_info</emphasis>string takes the form of an ODBC Data Source Name. The
    DSN must be defined in your ODBC.INI file or registry hive
    using the ODBC
    Administrator.</para>
              <para>In a Tuxedo environment, the xa_info strings required by
    xa_open and xa_close for a particular RM instance are
    identified by the OPENINFO and CLOSEINFO entries in the
    UBBCONFIG configuration file. (An example UBBCONFIG file is
    given below.) OPENINFO and CLOSEINFO entries must be defined
    for each server group. These entries must be quoted strings of
    the form "<emphasis>rm_alias</emphasis>:<emphasis>DSN</emphasis>". (OPENINFO and CLOSEINFO
    should not contain the usual<emphasis>xa_info</emphasis>string required by
    the target database. This string is stored as part of the DSN
    definition when the ODBC data source is
    configured. The OpenLink
      ODBC driver retrieves the
    stored<emphasis>xa_info</emphasis>string using the DSN it receives through
    xa_open or xa_close.)</para>
            </section>
            <section>
              <title>
      Using ODBC in an XA Global
    Transaction</title>
              <para>In order for a service to use ODBC functions in the
    context of a global transaction, the ODBC functions must use
    the XA connection created when the service connects to the
    resource manager with which it is linked. (In the sample
    application, each service connects to a database using
    tpopen(), when the service is first initialized through
    tpsvrinit()). OpenLink XA-enabled ODBC drivers provide two
    functions, SQLGetXaEnv() and SQLGetXaConnect(), which make an XA connection available for use with ODBC. If the XA connection
    is enlisted in a global transaction, e.g. the client has called
    tpbegin() before calling the service, then any 'work' done by
    ODBC functions in the
    service will be controlled by that global transaction.</para>
              <para>SQLGetXaEnv() returns the ODBC environment handle associated with
    the XA connection. SQLGetXaConnect() returns the ODBC connection handle
    associated with the XA connection. The prototypes for these functions
    are:</para>
              <programlisting><![CDATA[SQLRETURN SQLGetXaEnv(SQLHENV *phenv); 
    SQLRETURN SQLGetXaConnect(SQLHDBC *phdbc);]]></programlisting>
              <para>When using OpenLink ODBC drivers in a global transaction context,
    you should not create an environment handle using SQLAllocHandle(), or use
    SQLSetEnvAttr(). (The SQLHENV associated with the XA connection is created
    with SQL_ATTR_ODBC_VERSION set to SQL_OV_ODBC3.) If you create an ODBC
    connection using this SQLHENV, it will not be enlisted in the global
    transaction.</para>
            </section>
          </section>
        </section>
        <section xml:id="mt_xadtpjdbc">
          <title> JDBC</title>
          <para>The OpenLink
    Multi-Tier JDBC drivers support distributed transactions using
    the Java Transaction API (JTA) as the Transaction Manager of
    the distributed transaction process.</para>
          <section>
            <title>
      Java Transaction API
    (JTA)</title>
            <para>The OpenLink
      UDA Generic JDBC clients
    (opljdbc3.jar &amp; opljdbc2.jar) support the industry standard
    XA specification for distributed transaction processing. The XA
    specification defines an interface between the transaction
    manager (TM) and resource manager (RM) in a distributed
    transaction system. This is a generic interface and it does not
    directly address the use of distributed transactions from Java.
    The Java mapping of the XA interface is defined in Sun
    Microsystems Java Transaction API (JTA) and JDBC 2.0/3.0
    specifications. The OpenLink
      UDA Generic JDBC client
    drivers support the JTA architecture by providing the
    implementation of JTA resource manager interfaces.</para>
            <para>The OpenLink
      UDA JDBC 3.0 driver
    provides the openlink.javax.OPLXid,
    openlink.javax.OPLXADataSource, and
    openlink.javax.OPLXAConnection classes which implement the
    interfaces javax.transaction.xa.Xid,
    javax.transaction.xa.XADataSource, javax.sql.XAConnection, and
    javax.sql.XAResource respectively. The use if these interfaces
    is usually transparent for applications and the application
    developer shouldn't bother with them. They are used only by the
    JTS transaction manager which normally runs as a part of the
    J2EE server.</para>
            <section>
              <title>
      JDBC 3.0 (JDK 1.4 &amp;
    1.5)</title>
              <para>JTA support is built into the JRE for JDK 1.4 and 1.5, thus
    the UDA Generic JDBC
    client (opljdbc3.jar) simply needs to be added to the CLASSPATH
    and the XA classes will be available for use.</para>
            </section>
            <section>
              <title>
      JDBC 2.0 (JDK 1.2 &amp;
    1.3)</title>
              <para>JTA support was added by Sun Microsystems as an extension to
            the JDK 1.2 and 1.3 JRE's resulting in the following jar files
            having to be added to you CLASSPATH in additon to the UDA Generic
            JDBC client (opljdbc2.jar) :</para>
              <programlisting><![CDATA[
jdbc2_0-stdext.jar
jta-spec1_0_1.jar
jndi.jar
]]></programlisting>
            </section>
            <section>
              <title>JDBC XA Documentaton</title>
              <para><!-- <link linkend="mt_XAref">-->
Reference documentation<!-- </link> -->
 for
            the OpenLink JDBC XA implementation in the UDA JDBC Client.</para>
            </section>
          </section>
        </section>
      </section>
      <section xml:id="mt_xadtpdbconfig">
        <title>
        Configuring Databases for XA support
     </title>
        <section xml:id="mt_xadtpdbconforacle">
          <title>Oracle</title>
          <para>XA support has been tested against Oracle version 9i and
    10g</para>
          <section>
            <title>Granting SELECT Privilege on V$XATRANS$ &amp;
          DBA_PENDING_TRANSACTIONS Views</title>
            <para>In the event that the TM needs to perform recovery, xa_recover
          will fail if you do not grant the SELECT privilege to the V$XATRANS$
          view for all Oracle accounts that XA applications will use. If the
          view does not already exist in your Oracle installation then it can
          be manually loaded using the following SQL script which should be
          included in your Oracle installation:</para>
            <programlisting><![CDATA[$ORACLE_HOME/rdbms/admin/xaview.sql]]></programlisting>
            <para>The example below shows an extract from an Oracle XA Library
          trace file (for details of how to enable Oracle XA Library tracing
          in an OpenLink driver see here). Oracle returns error
          <emphasis>ORA-00942 : table or view does not exist</emphasis>
          because user scott does not have the necessary SELECT privilege on
          the V$XATRANS$ view.</para>
            <programlisting><![CDATA[
ORACLE XA: Version 10.1.0.0.0. RM name = 'Oracle_XA'.
113956.2352:536.536.1:
xaoopen: xa_info=ORACLE_XA+Threads=true+SesTm=60+Acc=P/scott/tiger+DB=DB01BA5BF8+SQLNET=ORCL+DbgFl=0x1+LogDir=c:/,rmid=1,flags=0x0
113956.2352:536.536.1:
xaolgn_help: version#: 168821248 banner: Personal Oracle Database 10g Release 10.1.0.2.0 - Production
With the Partitioning, OLAP and Data Mining options
113956.2352:536.536.1:
xaoopen: return 0
113959.2352:536.536.1:
xaorecover: xids=0xf8f8f8, count=10, rmid=1, flags=0x1000000
113959.2352:536.536.1:
ORA-00942: table or view does not exist
113959.2352:536.536.1:
xaorecover: xaofetch rtn -3.
113959.2352:536.536.1:
xaoclose: xa_info=DSN=au49-ora10-carlv;UID=scott;PWD=tiger;+DB=DB01BA5BF8, rmid=1769209857, flags=0x0
113959.2352:536.536.1:
xaoclose: rtn 0
]]></programlisting>
            <para>The syntax for adding the grant privilege to the 'scott' user would thus
be:</para>
            <programlisting><![CDATA[grant select on V$XATRANS$ to scott;]]></programlisting>
            <para>In addtion, the "ORA-00942: table or view does not exist"
          error also occurs if select privileges are not granted on the
          DBA_PENDING_TRANSACTIONS view as detailed in this <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://metalink.oracle.com/metalink/plsql/ml2_documents.showNOT?p_id=150021.1&amp;p_showHeader=1&amp;p_showHelp=1">
          Oracle MetaLink Article</link>, requiring the following command to
          be executed as a DBA user: </para>
            <programlisting><![CDATA[ 
GRANT SELECT ON DBA_PENDING_TRANSACTIONS TO PUBLIC
          ]]></programlisting>
            <para>
              <emphasis>Note that the V$XATRANS$ did not exist nor did the
          DBA_PENDING_TRANSACTIONS view have appropriate select privileges in
          Unix Oracle installations, although they are included in Windows
          installations by default.</emphasis>
            </para>
          </section>
        </section>
        <section xml:id="mt_xadtpinformix">
          <title>Informix</title>
          <para>XA support has been tested against versions 9.x and 10.x</para>
          <section>
            <title>Enable Database Logging</title>
            <para>For XA to be supported with an Informix database, the
    database must be capable of supporting transactions, which for
    Informix means the database must have logging enabled.</para>
          </section>
          <section>
            <title>Useful Links</title>
            <itemizedlist mark="bullet" spacing="compact">
              <listitem>
                <para>Old IBM document (1996), but may contain some useful
      information: 

                <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.umiacs.umd.edu/~jhu/DOCS/TX4.2/html/erzhae/erzhae18.htm">http://www.umiacs.umd.edu/~jhu/DOCS/TX4.2/html/erzhae/erzhae18.htm</link>     </para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
        <section xml:id="mt_xadtpsybase">
          <title>Sybase</title>
          <para>XA support has been tested against Sybase version 12.5.1 and
    above.</para>
          <para>The following instructions need to performed to set up a
    working XA environment on your database server:</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>Ensure your Syabse Server is licensed for Distributed
      Transaction Management. This can be checked by executing the
      following query against you Sybase Server:</para>
            </listitem>
          </itemizedlist>
          <para/>
          <programlisting><![CDATA[
select license_enabled('ASE_DTM') 
]]></programlisting>
          <para>The query will return "1", if you have the ASE_DTM license installed.</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>Run "sp_configure 'enable DTM',1" , via isql to enable
      transactions.</para>
            </listitem>
            <listitem>
              <para>Run "sp_configure 'enable xact coordination',1" , via
      isql</para>
            </listitem>
            <listitem>
              <para>Run "grant role dtm_tm_role to USER_NAME" .</para>
            </listitem>
            <listitem>
              <para>To prevent deadlocks when running transactions, enable
      row level lock by default, by running "sp_configure 'lock
      scheme',0,datarows" via isql.</para>
            </listitem>
          </itemizedlist>
          <para>    . Note, you must restart Adaptive Server for this changes to
    take effect. 
</para>
          <section>
            <title>Setting the Timeout for Detached Transactions</title>
            <para>On the Sybase server, you can set the dtm detach timeout
    period, which sets the amount of time (in minutes) that a
    distributed transaction branch can remain in the detached state
    (without an associated execution thread). After this period,
    the DBMS automatically rolls back the transaction. The dtm
    detach timeout period applies to all transactions on the
    database server. It cannot be set for each transaction. For
    example, to automatically rollback transactions after being
    detached for 10 minutes, use the following command:</para>
            <para>"sp_configure 'dtm detach timeout period', 10"</para>
            <para>You should set the dtm detach timeout period higher than the
    transaction timeout to prevent the database server from rolling
    back the transaction before the transaction times out.</para>
          </section>
        </section>
        <section xml:id="mt_xadtpsqlserver">
          <title>
      SQLServer</title>
          <para>XA support was tested against the following Microsoft
    SQLServer versions:</para>
          <para>MSSQL 6.5 RTM (WinNt4 Sp3)</para>
          <para>MSSQL 7.0EE SP4 (Win2k AdvSrv Sp3)</para>
          <para>MSSQL 2000 SP3a (Win2k Sp3)</para>
          <para>Before using the Microsoft SQLServer XA features you must
    install and register the Microsoft SQLServer extented stored
    procedures, for this :</para>
          <para>1) copy xp_oplxa.dll ( xp_oplxa65.dll for MSSQL 6.5) to the
    MSSQLServer_Root/binn directory</para>
          <para>2) execute the command :</para>
          <para>isql.exe -Usa -Psa_pwd -ig:xp_oplxa.sql</para>
          <para>or</para>
          <para>isql.exe -Usa -Psa_pwd -ig:xp_oplxa65.sql (for MSSQL
    6.5)</para>
          <para>
        </para>
        </section>
        <section xml:id="mt_xadtpingresii">
          <title>Ingres II</title>
          <para>XA is supported with IngresII version 2.0 and higher and Ingres II
    DBMS does not require any additional configuration for XA support to be
    enabled.</para>
          <para>The Ingres II XA support was tested against the following
    versions:</para>
          <para>IngresII v2.0</para>
          <para>IngresII v2.6</para>
          <para>IngresII v3.0 (Open release)</para>
        </section>
      </section>
      <section xml:id="mt_xadtpconnstrfmt">
        <title>OpenLink XA Connection String Formats</title>
        <para>To connect to a database's XA interface or some other XA compliant
    RM, a TM must connect using xa_open(). The xa_open() call accepts as one
    of its arguments an xa_info string. When acting as an RM proxy, OpenLink
    drivers automatically construct the database dependent xa_info string from
    other connection information received through the driver's data access
    API. The constructed string is sufficient to open an XA connection, but
    may omit optional settings. These optional settings are database
    dependent, details of which are given below. They can be entered in the
    'XA Info' text box in the driver's setup dialog.</para>
        <section xml:id="mt_xadtpconnstrodbc">
          <title>  ODBC </title>
          <section>
            <title>Oracle</title>
            <para>For full details of the Oracle syntax for the xa_info string, refer
    to the "Oracle Application Developer's Guide - Fundamentals : Chapter 20
    Working With Transaction Monitors With Oracle XA : Developing and
    Installing Applications That Use the XA Libraries : Defining the xa_open
    String".</para>
            <para>The OpenLink
    driver builds an xa_info string of the form:
  </para>
            <programlisting><![CDATA[
Oracle_XA+Threads=true+SesTm=60+SqlNet=serviceName+DB=dbName+Acc=P/username/password
]]></programlisting>
            <para>Fields in the xa_info string automatically inserted by the OpenLink
    driver should not be present in the 'XA Info' string. You should not
    include clauses such as "DB=dbname" or "Acc=P/username/password" .</para>
            <para><emphasis>serviceName</emphasis>takes the value of the 'Connection
    String' textbox in the Single-Tier ODBC driver setup dialog or the 'NET x
    Service Name' textbox in the Multi-Tier ODBC driver setup dialog. If a
    value isn't specified in the respective setup dialog,
   <emphasis>serviceName</emphasis>defaults to the value of the ORACLE_SID
    environment variable.</para>
            <para>In addition to the tracing facilities provided by the OpenLink
    driver, Oracle's own XA interface also supports tracing. Ordinarily a
    trace file is only created at this level when an error occurs, but it is
    possible to trace all calls to the Oracle XA interface by setting the
    DbgFl entry appropriately in the xa_info string. To enable tracing by the
    Oracle XA Library, use an XaInfo string similar to: DbgFl=0x1+LogDir=c:/
    For full details of the Oracle XA Library trace facilities see the "Oracle
    Application Developer's Guide - Fundamentals : Chapter 20 Working With
    Transaction Monitors With Oracle XA : Troubleshooting XA
    Applications".</para>
          </section>
          <section>
            <title>Informix</title>
            <para>The OpenLink driver builds an xa_info string of the form:</para>
            <programlisting><![CDATA[
    DB=dbname@dbserver;USER=username;PASSWD=password;CON=sessionid;
   ]]></programlisting>
            <para>No optional xa_info elements are supported.</para>
          </section>
          <section>
            <title>Sybase</title>
            <para>No optional xa_info elements are supported.</para>
          </section>
          <section>
            <title>
      SQL Server</title>
            <para>No optional xa_info elements are supported.</para>
          </section>
          <section>
            <title>Ingres</title>
            <para>No optional xa_info elements are supported.</para>
          </section>
        </section>
      </section>
      <section xml:id="mt_xadtpodbctrace">
        <title> Tracing XA calls in OpenLink ODBC Drivers</title>
        <para>When logging is enabled in an XA-enabled OpenLink
      ODBC driver, an XA log
    file is opened in addition to the usual ODBC log file. For
    instance, when using a Windows Lite driver, if you specify a
    log file name of c:\ntl6o10zu.log in the Lite setup dialog, an
    XA log file named c:\ntl6o10zu.log-xa will also be created.
    Because all DSNs which use the same OpenLink driver share
    the same log file name, if two applications use the same driver
    simultaneously, the log output from one application will be
    lost. The last application to connect takes ownership of the
    log file. This problem can be overcome by including
    meta-characters in the log file name. This is an OpenLink v6 feature
    which allows applications to have their own log file. The
    meta-characters substitute additional information into the log
    file name. They can also be used when configuring logging for a
    OpenLink
      ODBC Lite driver or an OpenLink
      ODBC generic multi-tier
    client, on both Windows or Unix.)</para>
        <para>Supported meta-characters are:</para>
        <itemizedlist mark="bullet" spacing="compact">
          <listitem>
            <para>$$ - inserts $ (Windows &amp; Unix)</para>
          </listitem>
          <listitem>
            <para>$P - current process id (Windows &amp; Unix)</para>
          </listitem>
          <listitem>
            <para>$U - inserts user name (Windows &amp; Unix)</para>
          </listitem>
          <listitem>
            <para>$H - inserts C:\ (Windows) or user's home directory
      (Unix)</para>
          </listitem>
          <listitem>
            <para>$T - timestamp (yyyymmdd-hhmmss) (Windows &amp;
      Unix)</para>
          </listitem>
        </itemizedlist>
        <para>For instance, when tracing XA, it is useful to include $P,
    e.g. c:\ntl6i10zu_$P.log, so that each process using the driver
    gets its own XA log file. This is important when using the MS
    DTC as the transaction monitor, as the DTC loads the ODBC driver at the same
    time as the application when connecting to an RM through ODBC.</para>
      </section>
      <section xml:id="mt_xadtptransenablewin">
        <title>
        Enabling XA Transactions on Windows XP SP2 and Windows Server 2003
     </title>
        <para>In Windows 2000, the MSDTC runs as LocalSystem, a special account
      that is granted all possible privileges to the local computer on which
      it resides. However, if someone compromises the DTC or any other service
      running under LocalSystem, that person then has full Administrator
      access to the computer. To avoid this potential security problem,
      starting with Windows XP SP2 and Windows Server 2003, Microsoft changed
      the account under which MSDTC service runs to be "NT
      AUTHORITY\NetworkService". A service running as NetworkService has the
      same network access as a service running as System (i.e. the operating
      system), but has significantly reduced local access. (NetworkService
      services access local resources as members of the local Users group.)
      Microsoft also introduced other MSDTC security enhancements. As a
      result, to enable XA transactions for these environment, some additional
      steps are needed after installing OpenLink XA/MSDTC enabled
      drivers.</para>
        <para>(If you are using the distributed transactions support in
    COM+/Enterprise Services components with OpenLink drivers, you
    must enable XA transactions.)</para>
        <para>
          <emphasis>1) Enable XA transactions</emphasis>
        </para>
        <para>To turn on support for XA transactions, follow these
    steps:</para>
        <orderedlist spacing="compact">
          <listitem>
            <para>Open Component Services.</para>
          </listitem>
          <listitem>
            <para>Expand the tree view to locate the computer where you
      want to turn on support for XA transactions (for example, My
      Computer).</para>
          </listitem>
          <listitem>
            <para>Right-click the computer name, and then click
      Properties.</para>
          </listitem>
          <listitem>
            <para>Click the MSDTC tab, and then click Security
      Configuration.</para>
          </listitem>
          <listitem>
            <para>Under Security Settings, click to select the check box
      for XA Transactions to turn on this support.</para>
          </listitem>
        </orderedlist>
        <para>
          <emphasis>2) Identify in the registry the XA DLLs you plan to
    use</emphasis>
        </para>
        <para>Windows Server 2003 and XP SP2 provide a registry entry for
    specifying the XA DLLs that the MSDTC can use. For each XA
    enabled OpenLink
      ODBC driver you plan to
    use, you must create a registry named-value under the registry
    key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\XADLL. In your
    registry named-value, Name is the file name of the XA DLL (in
    the format dllname.dll), Type is String (REG_SZ), and the value
    is the full path name (including the file name) of the DLL
    file.</para>
        <para>e.g.
  </para>
        <programlisting><![CDATA[
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\XADLL]
Key name: ntl6o10zu.dll
Data: C:\program files\openlink\bin\ntl6o10zu.dll
]]></programlisting>
        <para>
          <emphasis>3) Allow the NetworkService account access to the folder containing the XA
    DLL</emphasis>
        </para>
        <para>Since NetworkService a very restricted account, you need to
      provide this account with access to the folder where the XA DLL is
      located; for instance by modifying the access control list (ACL) for the
      folder. The ACL for an object is generally found on the Security tab of
      the object's property sheet.</para>
        <para>
          <emphasis>4) Ensure the system PATH includes the folders of any
      DLLs loaded by the XA DLL</emphasis>
        </para>
        <para>The MSDTC must be able to locate any DLLs on which the XA DLL
      depends. The folders containing these DLLs must be included in the
      global PATH environment variable. (The required DLLs and their paths can
      be identified easily with<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.dependencywalker.com">DependencyWalker</link>after
      enabling the 'Full Paths' option on the 'View' menu.) Correct the path
      using Control panel, System Properties, Environment Variables, System
      Variables, Path. A reboot may be necessary for the change to take
      effect.</para>
        <para>In Windows versions supporting the XADLL registry entry, it is not
      necessary to include the location of the XA DLL itself in the system
      PATH, as the registry entry includes the DLL's full path. In all earlier
      versions of Windows, the system PATH must include the XA DLL's
      location.</para>
        <section xml:id="mt_xadtprelatedlinks">
          <title>Useful Links</title>
          <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://blogs.msdn.com/florinlazar/category/2125.aspx">Florin Lazar's
    Weblog - MSDTC Posts</link>
          </para>
          <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.microsoft.com/resources/documentation/Windows/XP/all/reskit/en-us/Default.asp">Microsoft
    Windows XP Professional Resource Kit Documentation</link>(See Part III
    Security, Chapter 16 Authorization and Access Control)</para>
        </section>
      </section>
      <section xml:id="mt_xaenabletuxedounix">
        <title>Using OpenLink Drivers with Tuxedo on Unix</title>
        <para>See also "Using the OpenLink Oracle Lite Driver with Tuxedo on Windows" for
additional information on configuring Tuxedo.
</para>
        <section>
          <title>Defining an OpenLink Resource Manager in Tuxedo</title>
          <para>When integrating an OpenLink Unix driver into Tuxedo, the file
%TUXDIR%/udataobj/RM must be updated to include information about the driver.
Add a line similar to one of the examples below:</para>
          <section>
            <title>OpenLink ODBC Generic Client for Unix (Multithreaded):</title>
            <programlisting><![CDATA[OPL_XA:(*opl_xa_switch()):/home/openlink/lib/oplodbcu.so ;; Unicode Driver
OPL_XA:(*opl_xa_switch()):/home/openlink/lib/oplodbc.so ;; Ansi Driver
]]></programlisting>
          </section>
          <section>
            <title>OpenLink Unix ODBC Lite Driver for SQLServer or Sybase (Multithreaded):</title>
            <programlisting><![CDATA[OPL_XA:(*opl_xa_switch()):/home/openlink/lib/sql_mt_lu.so ;; Unicode Driver
OPL_XA:(*opl_xa_switch()):/home/openlink/lib/sql_mt_lt.so ;; Ansi Driver
]]></programlisting>
          </section>
          <section>
            <title>OpenLink Unix ODBC Lite Driver for Informix 9 (Multithreaded):</title>
            <programlisting><![CDATA[OPL_XA:(*opl_xa_switch()):/home/openlink/lib/inf9_mt_lu.so -lthxa -lthsql -lthasf -lthgen -lthos -lifgls -lifglx ;; Unicode Driver
OPL_XA:(*opl_xa_switch()):/home/openlink/lib/inf9_mt_lt.so -lthxa -lthsql -lthasf -lthgen -lthos -lifgls -lifglx ;; Ansi Driver
]]></programlisting>
          </section>
          <section>
            <title>OpenLink Unix ODBC Lite Driver for Oracle 10g (Multithreaded):</title>
            <programlisting><![CDATA[OPL_XA:(*opl_xa_switch()):/home/openlink/lib/ora100_mt_lu.so -lclntsh -lnnz10 ;; Unicode Driver
OPL_XA:(*opl_xa_switch()):/home/openlink/lib/ora100_mt_lt.so -lclntsh -lnnz10 ;; Ansi Driver
]]></programlisting>
          </section>
          <section>
            <title>OpenLink Unix ODBC Lite Driver for Ingres II (Multithreaded):</title>
            <programlisting><![CDATA[OPL_XA:(*opl_xa_switch()):/home/openlink/lib/ingii_mt_lt.so ;; Ansi Driver
]]></programlisting>
            <para>Note that due a limitation in the current Ingres II OpenAPI? XA
implementation our Ingres II Lite driver cannot be used with Tuxedo as
detailed in the OpenLink Ingres II XA Implementation Wiki document, in which
case the MT Ingres II agent is the only available solution currently</para>
            <para>where /home/openlink is the openlink installation directory and OPL_XA is the
rm_alias. Any additional database libraries on which the driver depends (as
shown by ldd) must be included after the driver shared library name. The
example above for the Oracle Lite driver is for a driver linked against the
Oracle 10g Instant Client.
</para>
          </section>
        </section>
      </section>
    </section>
  </chapter>
  <chapter xml:id="mt_udauserrac">
    <info>
      <title>Real Application Cluster (RAC) / TAF Support</title>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>Oracle</keyword>
        <keyword>RAC, TAF</keyword>
        <keyword>cluster support</keyword>
        <keyword>failover</keyword>
      </keywordset>
      <abstract>
        <para>Transparent Application Failover (TAF) is a protocol within Oracle
  whereby, if a connection to a database node fails, it can be re-established
  against an alternative node.</para>
        <para>
          <figure>
            <title>ora_rac.png</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ora_rac.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>Once a broken connection has failed-over, an application can
    continue without any special action on its part. However, TAF does not
    restore all facets of a connection. For instance, TAF does not:
        <itemizedlist mark="bullet" spacing="compact"><listitem><para>restore active transactions - any active transactions are
      rolled back at the time of failure because TAF cannot preserve active
      transactions after failover: the application instead receives an error
      message until a ROLLBACK is submitted;</para></listitem><listitem><para>restore session properties set using 'ALTER SESSION';</para></listitem><listitem><para>maintain the state of server-side program variables, such as
        PL/SQL package states.</para></listitem></itemizedlist>
        </para>
        <para>If any of these situations apply to a failed connection, an
  application may need to take action following failover to return the
  connection fully to the desired state. In order to do this, the application
  may request to be notified when failover has occurred. The OpenLink Lite
  Driver for Oracle 10g and the OpenLink Generic Multi-Tier Client provide
  this facility through TAF event notifications.</para>
        <para>The Oracle 10g Lite Driver and Multi-Tier Agent also allow
  configuration of the failover retry interval and the maximum number of
  failover retries, in the event that failover is not successful on the first
  attempt.</para>
      </abstract>
    </info>
    <section xml:id="mt_udauserrachowtouse">
      <title>What you have to do to use it</title>
      <section>
        <title>Configuration</title>
        <section xml:id="mt_udauserracmt">
          <title>Multi-Tier</title>
          <para>To use OpenLink's TAF event notification features or configure
        the failover retry parameters, you must enable OpenLink's TAF support.
        For the Oracle 10g Multi-Tier Agent, you must set the environment
        variable OPL_TAF_ENABLE to 'Y' or 'y'. With the agent, this is done by
        creating an entry in the appropriate 'Environment' section of the
        OpenLink Request Broker's rulebook, or by navigating through the
        web-based Administrative Assistant (normally running on
        &lt;http://servername:8000/&gt;) to configure an agent by form or
        wizard.</para>
        </section>
        <section>
          <title> TAF Retry Configuration</title>
          <para>When OpenLink's TAF support is enabled, in the event that a
      failover attempt fails, the Lite driver or Multi-Tier agent will
      instruct Oracle to retry. By default, the maximum number of failover
      attempts is 10 and the interval between retry attempts is 10 seconds.
      The default values can be overridden.</para>
          <para>If using the Oracle 10g Lite Driver for Windows, enter the new
      values in the 'Max. Retries' and 'Retry Interval' text fields. For the
      Oracle 10g Lite Driver for Unix or the Multi-Tier Oracle 10g agent,
      override the defaults by setting the environment variables
      OPL_TAF_MAX_RETRIES and OPL_TAF_RETRY_INTERVAL. The retry settings
      operate independently of TAF event call-backs. When OpenLink's TAF
      support is enabled, they are effective irrespective of whether an
      application registers an event call-back.</para>
        </section>
      </section>
      <section>
        <title>Programmatic Considerations</title>
        <para> OpenLink ODBC drivers notify ODBC applications that failover has
  occurred using two mechanisms: event call-backs and SQLSTATEs.</para>
        <section>
          <title>TAF Event Notification: Call-backs</title>
          <para>An application can register a failover call-back routine by setting
  the proprietary connection attribute SQL_ATTR_EVENT_CALL-BACK (1280) on an
  open connection. The routine's address is supplied as the value of
  SQLSetConnectAttr ?'s <emphasis>ValuePtr</emphasis> argument. The same
  call-back routine can be registered for more than one connection. The
  call-back routine's signature must take the form:</para>
          <programlisting><![CDATA[
  void (*call-back) (oplevent_t oplEvent, SQLHANDLE handle, SQLUSMALLINT
  eventInfo) ]]></programlisting>
          <para>where:</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para><emphasis>oplEvent:</emphasis>
                 is an integer indicating the type of event
  which took place.</para>
            </listitem>
            <listitem>
              <para><emphasis>context:</emphasis>
                 is an application-supplied ODBC
    handle identifying the context the event is taking place in.</para>
            </listitem>
            <listitem>
              <para><emphasis>eventInfo:</emphasis>
                 is an unsigned integer code
    providing more information about the event. The values returned depend on
    the type of event. 0 signifies 'no further information
    available'</para>
            </listitem>
          </itemizedlist>
          <para><emphasis>oplEvent</emphasis> is of type oplevent_t, an enumerated
  type enumerating the types of events reported to event call-backs.
  oplevent_t is defined as follows:</para>
          <programlisting><![CDATA[ typedef enum {
  OPL_EV_NONE = 0, OPL_EV_FAILOVER_SUCCESS = 16, OPL_EV_FAILOVER_ABORT = 17 }
  oplevent_t; ]]></programlisting>
          <para>At the moment, only failover events are supported through the
  OPL_EV_FAILOVER_xxx event class. Other types of event may be supported in
  the future using this call-back mechanism. OPL_EV_FAILOVER_SUCCESS indicates
  that failover was successful, OPL_EV_FAILOVER_ABORT that failover was
  aborted.</para>
          <para><emphasis>context</emphasis> is the ODBC handle (HDBC) of the
  connection for which the application wishes to receive event notifications.
  This handle should be supplied to the ODBC driver when the call-back is
  registered, using another Oracle-specific connection attribute,
  SQL_ATTR_EVENT_CONTEXT (1281). If this attribute is not set, the call-back
  receives SQL_NULL_HANDLE for the <emphasis>handle</emphasis> argument. (If
  other event types are supported in the future, this attribute may accept
  other types of ODBC handle, e.g. handles of type SQL_HANDLE_STMT, depending
  on the scope of the event.)</para>
          <para><emphasis>eventInfo</emphasis> is reserved for future use. All
  failover events currently return 0.</para>
        </section>
        <section>
          <title> TAF Event Notification: SQLSTATEs</title>
          <para>As well as an ODBC application being informed of failover through
      a call-back routine, it also receives notification through SQLSTATEs.
      After failover completes, the first ODBC call to return, on the affected
      connection, can return one of two proprietary SQLSTATES, IM500 or
      IM501:</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>IM500 denotes
      successful failover completion. If the ODBC call generated no other
      errors, the call returns SQL_SUCCESS_WITH_INFO with SQLSTATE IM500 and
      is accompanied by the informational message "Failover completed". As
      usual, the SQLSTATE and diagnostic message can be retrieved using
      SQLGetDiagRec ?();</para>
            </listitem>
          </itemizedlist>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>IM501 ("Failover
  aborted") indicates failover was unsuccessful. A function returning this
  SQLSTATE returns with return code SQL_ERROR.</para>
            </listitem>
          </itemizedlist>
          <para>If the ODBC call returning the failover SQLSTATE fails for some
      reason, a diagnostic record holding the failover SQLSTATE and message is
      appended to any diagnostic records already generated by the failing
      call. In this case, even if failover was successful, a SQLSTATE IM500
      may be accompanied by a function return code of SQL_ERROR. For instance,
      if a transaction was open at the time failover took place, SQLExecute
      may return SQL_ERROR with two diagnostic records, for example:</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>DiagRec ? #1
      Native error: 25402 SQLSTATE: HY000 Message: [OpenLink][ODBC][Oracle
      Server]ORA-25402: transaction must roll back</para>
            </listitem>
            <listitem>
              <para>DiagRec ? #2 Native error: 0 SQLSTATE: IM500 Message:
        [OpenLink][ODBC][Oracle Server]Failover completed.</para>
            </listitem>
          </itemizedlist>
          <para><emphasis>Note</emphasis>: Failover notification using TAF-specific
  SQLSTATEs cannot be used independently of failover call-backs. The use of
  these SQLSTATEs is only triggered when an application registers a failover
  call-back.</para>
        </section>
      </section>
    </section>
    <section xml:id="mt_udauserracrelatedlinks">
      <title>Related Links</title>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem>
          <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/">Oracle</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technology/products/ias/hi_av/904ha.pdf">TAF in
    Oracle 10g</link>
          </para>
        </listitem>
        <listitem>
          <para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technology/tech/oci/htdocs/oci_faq.html">OCI
    FAQs</link>

             (including TAF)</para>
        </listitem>
        <listitem>
          <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technology/oramag/oracle/02-may/o32clusters.html">Oracle
    9i RAC/TAF</link>
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <!--
  $Id: iodbc.xml,v 1.2 2004/09/20 16:25:53 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_iodbc">
    <title>OpenLink ODBC Driver Manager (iODBC SDK)</title>
    <info>
      <abstract>
        <para>This document provides information on linking your ODBC Applications with iODBC.
iODBC is an alternative ODBC Driver Manager solution for developing ODBC components
and applications for non-Windows systems (e.g. Mac OS Classic, Mac OS X, Linux....).
iODBC is a free project licensed exclusively under the LGPL and BSD licenses,
developed and maintained by OpenLink Software. iODBC permits non-Windows systems
to communicate with databases via ODBC.
</para>
        <para>The ODBC API consists of a set of functions to enable any C/C++ applications
linked against it to access and manage data. The ODBC specification is currently
maintained by Microsoft Corporation.</para>
        <para>iODBC is compliant with the actual Microsoft ODBC version 3.51.</para>
        <para>iODBC SDKs are different for each platform. iODBC SDKs are available free
of charge from the iODBC web site, released under the GNU Library General
Public License (LGPL). The SDKs are made up of include files (.h), libraries
for the corresponding platform, and a sample application for testing and
demonstration (odbctest). The sample application is an Interactive Dynamic SQL
Interpreter. Its sources are included for your use as you see fit.
</para>
        <para>There are no drivers included with the iODBC SDK, but you can find many
on the OpenLink web site and from other third party middleware vendors.
</para>
        <para>You can find below a set of URLs for the right iODBC SDK regarding the
platform (which is the operating system and the CPU) you are
targeting at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.iodbc.org/opliodbc.htm">iodbc.org</link>.</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>ODBC Driver Manager</keyword>
        <keyword>SDK</keyword>
        <keyword>iODBC</keyword>
        <keyword>iODBC Driver Manager</keyword>
        <keyword>Unix</keyword>
        <keyword>Mac</keyword>
        <keyword>OS X</keyword>
      </keywordset>
    </info>
    <section xml:id="mt_iodbcsdklinux">
      <title>iODBC SDK on Unix</title>
      <info>
        <keywordset>
          <keyword>iODBC Unix</keyword>
          <keyword>Unix</keyword>
        </keywordset>
      </info>
      <para>Unlike Windows, Unix has historically never come with a system-wide ODBC installation,
  therefore there is greater scope for setting everything up the way you wish. </para>
      <para>Also on Unix, there are two main-stream implementations of ODBC: UnixODBC
  and iODBC. The former comes with a QT-based implementation of a GUI, while
  iODBC provides a GTK+-based administrator. </para>
      <para>The iODBC package is available in several formats - source tarball, source
  RPM, and a choice of binary components. Installing the binary packages is a
  simple exercise - for example, </para>
      <programlisting><![CDATA[
sudo rpm -Uhv libiodbc-3.0.6-2.i386-glibc21.rpm
]]></programlisting>
      <para>will install the iODBC runtime library. </para>
      <para>There follows an alternative, walking through an unpacking, configure and
  build of the complete sources from tarball: </para>
      <programlisting><![CDATA[
zsh, purple  6:10PM C/ % tar xvpfz libiodbc-3.0.6.tar.gz
libiodbc-3.0.6/
libiodbc-3.0.6/admin/
libiodbc-3.0.6/admin/Makefile.am
libiodbc-3.0.6/admin/Makefile.in
[snip]
zsh, purple  6:10PM C/ % cd libiodbc-3.0.6
zsh, purple  6:10PM libiodbc-3.0.6/ % ls
AUTHORS       LICENSE	    NEWS	   bin/		 etc/	     mac/
COPYING       LICENSE.BSD   README	   configure*	 include/    samples/
]]></programlisting>
      <para>Configuration, starting with a check of interesting options specific to iODBC: </para>
      <programlisting><![CDATA[
zsh, purple  6:10PM libiodbc-3.0.6/ % ./configure --help
Defaults for the options are specified in brackets.
Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
[snip]
--enable-fast-install=PKGS  optimize for fast installation default=yes
--disable-libtool-lock  avoid locking (might break parallel builds)
--enable-gui            build GUI applications (default),
--disable-gui           build GUI applications
--disable-gtktest       Do not try to compile and run a test GTK program
--enable-odbc3          build ODBC 3.x compatible driver manager (default)
--disable-odbc3         build ODBC 2.x compatible driver manager
[snip]
zsh, purple 6:10PM libiodbc-3.0.6/ % ./configure --prefix=/usr/local/stow/iodbc --with-gtk --enable-gui &amp;&amp; nice make
checking for a BSD-compatible install... /bin/install -c
checking whether build environment is sane... yes
checking for gawk... gawk
]]></programlisting>
      <para>Installation, starting with becoming root by sudo, then stow-ing the package
  correctly into /usr/local: </para>
      <programlisting><![CDATA[
zsh, purple  6:15PM libiodbc-3.0.6/ % sudo -s
Password:
zsh, purple  6:17PM libiodbc-3.0.6/ # make install
Making install in admin
make[1]: Entering directory `/home/tim/C/libiodbc-3.0.6/admin'
[snip]
make[2]: Nothing to be done for `install-exec-am'.
make[2]: Nothing to be done for `install-data-am'.
make[2]: Leaving directory `/home/tim/C/libiodbc-3.0.6'
make[1]: Leaving directory `/home/tim/C/libiodbc-3.0.6'
zsh, purple  6:18PM libiodbc-3.0.6/ # cd /usr/local/stow/
zsh, purple  6:18PM stow/ # chmod -R og=rX iodbc/
zsh, purple  6:18PM stow/ # stow iodbc/
zsh, purple  6:18PM stow/ # ^D
zsh, purple  6:18PM libiodbc-3.0.6/ % ls /usr/local/stow/iodbc/bin/
iodbc-config*  iodbcadm-gtk*  odbctest*
]]></programlisting>
    </section>
    <section xml:id="mt_iodbcsdkconfdsn">
      <title>Configuring Data Sources</title>
      <info>
        <keywordset>
          <keyword>Data Source</keyword>
          <keyword>Datasource</keyword>
        </keywordset>
      </info>
      <para>The graphical (GTK+-based) configuration screen makes setting up your data-sources
  (DSNs) quite intuitive, especially if you're used to the setup screens on Windows: </para>
      <figure xml:id="mt_iodbcgtk001" floatstyle="normal">
        <title>iODBC GTK Administrator</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="iodbcgtk001.jpg"/>
          </imageobject>
        </mediaobject>
      </figure>
      <figure xml:id="mt_iodbcgtk002" floatstyle="normal">
        <title>iODBC GTK Administrator</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="iodbcgtk002.jpg"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>An example of adding a new datasource follows: </para>
      <section xml:id="mt_iodbcsdkunixfiles">
        <title>The Configuration Files</title>
        <para>The iODBC library searches for its DSN through a set few files: </para>
        <simplelist type="vert">
          <member>$ODBCINI - the environment variable, if set</member>
          <member>~/.odbc.ini - in your home-directory, if it exists</member>
          <member>/etc/odbc.ini - a system-wide default</member>
        </simplelist>
        <para>The format of this file is very simple; there are 3 sections,
  one for ODBC itself (setting up tracing), one for a list of DSNs,
  and one for the definitions of those DSNs, thus: </para>
        <programlisting><![CDATA[
[ODBC]
Debug         = 1
Trace         = 0
DebugFile     = /home/tim/temp/odbc-debugfile.log
TraceFile     = /home/tim/temp/odbc-tracefile.log
TraceAutoStop = 1
]]></programlisting>
        <programlisting><![CDATA[
[ODBC Data Sources]
Virtuoso30 = OpenLink Virtuoso 3.0
]]></programlisting>
        <programlisting><![CDATA[
[Virtuoso30]
Description = Virtuoso 3.0
Driver      = /opt/opl/virtuoso-o12/lib/virtodbc.so
Address     = localhost:1111
UserName    = dba
User        = dba
]]></programlisting>
        <para>Each DSN configured has an entry in the `ODBC Data Sources' section, and a
  complete definition in a paragraph section of its own. </para>
        <para>There is also an ODBCINSTINI file; this contains descriptions of the ODBC
  drivers available. </para>
        <programlisting><![CDATA[
[ODBC Drivers]
OpenLink Generic = installed
[OpenLink Generic]
Driver = /opt/openlink/odbcsdk/lib/oplodbc.so
]]></programlisting>
      </section>
      <section xml:id="mt_iodbcsdktestunix">
        <title>Making a Test Connection</title>
        <para>To test that a DSN connects correctly, you can use the supplied `odbctest'
  utility. </para>
        <programlisting><![CDATA[
zsh, purple  3:58PM bin/ % ls
iodbc-config*  iodbcadm-gtk*  odbctest*
zsh, purple  3:58PM bin/ % echo $ODBCINI
/home/tim/.odbc.ini
zsh, purple  3:58PM bin/ % ./odbctest
iODBC Demonstration program
This program shows an interactive SQL processor
Enter ODBC connect string (? shows list):
Progress9.x(solaris)           | OpenLink Generic ODBC Driver
Progress9.x(solaris)           | OpenLink Generic ODBC Driver
pgsqlPurple                    | PostgreSQL native driver
pgsqlPurpleOpl                 | PostgreSQL using OpenLink driver
pgsqlPurpleVirtDemo            | Virtuoso database driver
SQLServer                      | OpenLink Generic ODBC Driver
Enter ODBC connect string (? shows list): DSN=pgsqlPurpleOpl
Driver: 04.50.0801 OpenLink Generic ODBC Driver (oplodbc.so)
SQL&gt;select count(*) from timtest;
count
-----------
100
 result set 1 returned 1 rows.
]]></programlisting>
        <para>Any of the DSN attributes can be overridden in the connect-string, which takes
  the form </para>
        <programlisting><![CDATA[
DSN=dsn_name[;attr=value]*
]]></programlisting>
        <para>The attributes themselves depend on the database driver behind the DSN; normally
  they control the username (where the attribute could be called`userid' or `uid')
  and password (if specified) used to connect to the database, some form of server
  hostname specification (`host=' or `server='), and a means to identify a database
  instance on that server (`database='). A driver may also have custom attributes,
  such as FetchBufferSize, Port, etc. </para>
      </section>
      <section xml:id="mt_compsampodbc">
        <title>Compiling Sample Program</title>
        <para>To compile the sample "odbctest" application, follow these steps:</para>
        <orderedlist>
          <listitem>
            <para>Navigate to the directory:</para>
            <programlisting><![CDATA[odbcsdk/examples]]></programlisting>
          </listitem>
          <listitem>
            <para>Type the following commands to use the default Makefile and odbctest.c code:</para>
            <programlisting><![CDATA[
make clean
make
]]></programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_devodbc">
        <title>Developing ODBC Applications</title>
        <para>The ODBC SDK only implements an interface for the 'C' programming language. </para>
        <para>To write an ODBC application,you must perform the following tasks:</para>
        <orderedlist>
          <listitem>
            <para>Include the files "sql.h" and "sqlext.h" in your 'C' program(s).</para>
          </listitem>
          <listitem>
            <para>Link the application with the following driver libraries:</para>
            <programlisting><![CDATA[lib/libiodbc.a
lib/libiodbc.so
]]></programlisting>
          </listitem>
          <listitem>
            <para>At runtime, the ODBC drivers required for the connection are as follows (must be included in your shared library path):</para>
            <programlisting><![CDATA[libiodbc.so.2.1.2
libiodbc.so.2
]]></programlisting>
          </listitem>
          <listitem>
            <para>Compile the program in the same directory as the "Makefile" file using the syntax:</para>
            <programlisting><![CDATA[make]]></programlisting>
          </listitem>
        </orderedlist>
        <para>Note: Some UNIX systems also need -lsocket, -lnsl_s or both.</para>
      </section>
      <section xml:id="mt_furtherread">
        <title>Further Reading:</title>
        <para>"Data Management: SQL Call Level Interface (CLI)"</para>
        <para>from X/Open in conjunction with SQL Access Group</para>
        <para>ISBN: 1-872630-63-4</para>
        <para>X/Open Document Number: S203</para>
        <para>Microsoft ODBC API documentation: http://www.microsoft.com/data/odbc/default.htm</para>
      </section>
    </section>

    <!-- 
  $Id: iodbcapps.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_iodbcappsmacos">
      <title>Linking iODBC and ODBC Applications on Mac OS</title>
      <info>
        <keywordset>
          <keyword>Mac</keyword>
          <keyword>Linking iODBC Mac</keyword>
          <keyword>Mac ODBC Applications</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_iodbcmacclassic">
        <title>Mac OS Classic</title>
        <para>The package provided for this platform is a compressed Macintosh format (.sit.hqx).
After uncompressing it on your hard drive, you will find below the tree of the 
iODBC SDK as installed on Mac OS Classic :</para>
        <figure xml:id="mt_iodbcmac001" floatstyle="normal">
          <title>iODBC SDK Tree for Mac OS Classic</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="iodbcfilelist001.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>iODBC is cut down in three parts, and each one has its proper set of include files and libraries.</para>
        <simplelist type="vert">
          <member>The iODBC Driver Manager is the core of the ODBC driver manager. Its main task is to load run the right function with the right ODBC driver. </member>
          <member>The iODBC Configuration Manager is the ODBC configuration manager. Its main task is to access and manage the DSN configuration files. </member>
          <member>The iODBC GUI Manager is the GUI manager. Its main task is to give to the user the ability to access all the ODBC functionality through a GUI.</member>
        </simplelist>
        <para>Under the include directory, you will find all the iODBC header files that 
can be used in your source.  The following are the main header files:  
<computeroutput>isql.h, isqlext.h, isqltypes.h, iodbcadm.h, iodbcinst.h</computeroutput></para>
        <para>These are generally only a proxy for the other header files provided 
in the same directory:  <computeroutput>sql.h, sqlext.h, sqltypes.h, odbcinst.h</computeroutput></para>
        <para>To access all these include files, simply add to your compiler an include 
path that points to <computeroutput>iODBC/include</computeroutput>. This is 
compiler dependent, so you may have to look into your compiler's documentation.  
For Code Warrior, you can do this via the Project Preferences panel.</para>
        <para>Under the lib directory, you will find all the iODBC libraries needed to 
link against your application.  All the parts explained before, are shipped through 
three different forms: CFM shared library, static object file, and static object file 
with debugging information.</para>
        <figure xml:id="mt_iodbcmac002" floatstyle="normal">
          <title>iODBC SDK libraries on Mac</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="iodbcfilelist002.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You will have to link your application with only one set of libraries.  
If you choose the CFM shared library set, ensure that at runtime these files 
are in the System-Extensions folder of your Mac Classic system.</para>
        <para>To access the right set of library files, add a library path that points 
to <computeroutput>iODBC/lib</computeroutput>.  This is compiler dependent, 
consult your compiler documentation.  For Code Warrior, you can do this through 
the Project Preferences panel.</para>
      </section>
      <section xml:id="mt_iodbcmacosx">
        <title>Mac OS X</title>
        <para>The package provided for this platform is a Macintosh Installer package 
(.mpkg) inside a disk-image (.dmg) file.  After mounting the disk-image by double 
clicking on it, you will have to launch the Macintosh Installer package (.mpkg). 
You will be guided through the installation via the Macintosh Installer application.</para>
        <tip>
          <title>See Also:</title>
          <para>iODBC follows the Programmer and System guidelines defined by 
Apple, this document can be found at: 
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://developer.apple.com/techpubs/macosx/SystemOverview/SystemOverview/SystemOverview.pdf">developer.apple.com</link></para>
        </tip>
        <para>You will find the iODBC SDK installation in the following directory tree 
structure as installed on Mac OS X:</para>
        <figure xml:id="mt_iodbcmac003" floatstyle="normal">
          <title>iODBC SDK tree on Mac OS X</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="iodbcfilelist003.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>In Mac OS X, "frameworks" are the central components of all SDKs. They 
provide everything needed by developers from include files to shared libraries 
with which you need to link your application.  All frameworks support is well 
managed with Project Builder, shipped by Apple. Simply drag and drop via the 
provided GUI the corresponding framework you want use. If you want to use a 
framework through the command line compiler, see below.</para>
        <para>The framework is basically a directory, structured as below:</para>
        <figure xml:id="mt_iodbcmac004" floatstyle="normal">
          <title>iODBC SDK Frameworks on Mac OS X</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="iodbcfilelist004.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>When you need to include one of the framework header files, you have 
to prepend your header file name with the framework name as below :</para>
        <programlisting><![CDATA[
#include <samples/my_sample_header.h>
]]></programlisting>
        <para>iODBC is broken down into three frameworks, each having its own proper 
set of includes files and libraries.</para>
        <simplelist type="vert">
          <member>The iODBC.framework is the core of the ODBC driver manager. Its main task is to load run the right function with the right ODBC driver. </member>
          <member>The iODBCinst.framework is the ODBC configuration manager. Its main task is to access and manage the DSN files.</member>
          <member>The iODBCadm.framework is the GUI manager. Its main task is to give to the user the ability to access all the ODBC functionality through a GUI.</member>
        </simplelist>
        <para>First of all, you have to be sure that the compiler and linker you are 
using can manage frameworks correctly.</para>
        <note>
          <title>Note:</title>
          <para>The iODBC SDK is shipped with the <computeroutput>odbctest</computeroutput> 
  sample application including sources and project file, which is intended as an example 
  of an application utilizing iODBC.</para>
        </note>
        <para>Under Project Builder, you have to put all the frameworks that your 
application will use into your project. Implicitly, all these frameworks will be 
used. Also, you have to be sure that the machine where the application will 
be running includes all the frameworks with which you are linking. In certain 
cases, iODBC can be shipped with your application and all the frameworks.</para>
        <para>This is the most straightforward way, but you can also directly use 
the compiler and command line linker shipped with Project Builder. In such case, 
you will have to add certain options to let the compiler and linker know that you want to 
use a specific framework.  However, the sources do not require any changes.  During 
the compilation phase, you will have to use the "<computeroutput>F</computeroutput>" 
option to add a path to let the compiler search for frameworks under the designated 
path. The correct syntax is "<computeroutput>Fdir</computeroutput>", where 
<computeroutput>dir</computeroutput> is the path you want to add. You have 
to put one path, and there is no limit on the number of <computeroutput>F</computeroutput> 
options to pass on the command line.  For iODBC, you have to add only the 
following two directories:</para>
        <programlisting><![CDATA[
/Library/Frameworks
/System/Library/Frameworks
]]></programlisting>
        <para>A complete cc compilation command line may look like:</para>
        <programlisting><![CDATA[
cc c "F/Library/Frameworks" "F/System/Library/Frameworks" mysources.c
]]></programlisting>
        <para>During the linkage phase, you will have to use the same option as above, 
as well as specifying at the end of the command line all the frameworks with which 
you are linking, preceded by the option <computeroutput>framework</computeroutput>.</para>
        <para>A complete <computeroutput>cc</computeroutput> linkage command line may look like:</para>
        <programlisting><![CDATA[
cc o "myapplication" "F/Library/Frameworks" "F/System/Library/Frameworks"  \
      framework "iODBC" framework "iODBCinst" framework "iODBCadm"
]]></programlisting>
      </section>
      <section xml:id="mt_iodbcsdkrefs">
        <title>References</title>
        <para>
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.iodbc.org/">iODBC web site</link>
        </para>
        <para>
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.openlinksw.com/">OpenLink Software web site</link>
        </para>
        <para>
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.microsoft.com/data/odbc/">ODBC web site</link>
        </para>
        <para>
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://developer.apple.com/">Apple's Developer web site</link>
        </para>
      </section>
      <section xml:id="mt_iodbcportappmac">
        <title>Porting Mac OS Classic ODBC applications to Mac OS X</title>
        <para>Carbon is a framework included with Apple's Mac OS X operating system 
that is derived from the original Macintosh Toolbox programming interface.  
Carbon on Mac OS X is an entirely new implementation, with a superset of 
the original Toolbox functionality, and many changes and additions to run 
under the Mac OS X operating system.</para>
        <para>A subset of Carbon is also available on previous versions of the Mac 
OS, all the way back to Mac OS 8.1 or Mac OS 8.6 depending on the functionality 
required. This enables developers to create applications from one set of source 
code that will run on both the original Macintosh operating system as well as 
Mac OS X.  Carbon applications can even take advantage of special Mac 
OS X features when running on Mac OS X, and continue to run as they have 
otherwise on earlier versions of the Mac OS.</para>
        <para>Cocoa is a rich set of object-oriented frameworks that allow for the 
most rapid development of applications on Mac OS X. Using Cocoa, developers can 
create full-featured applications in a fraction of the time they would need for 
procedural languages. Applications from UNIX and other OS platforms can also 
be brought to Mac OS X quickly by using Cocoa to build state-of-the-art Aqua 
user interfaces while retaining most existing core code. </para>
        <para>The Cocoa application environment is designed specifically for Mac 
OS X-only native applications. It is comprised of a set of object-oriented 
frameworks that support rapid development and high productivity. The 
Cocoa frameworks include a full featured set of classes designed to 
create robust and powerful Mac OS X applications. The object-oriented design 
simplifies application development and debugging.  </para>
        <figure xml:id="mt_iodbcmac004_01" floatstyle="normal">
          <title>iODBC SDK on Mac</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="mac10/macodbc1.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <tip>
          <title>See Also:</title>
          <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://developer.apple.com/cocoa/">Cocoa</link>
          </para>
          <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://developer.apple.com/cabon/">Carbon</link>
          </para>
        </tip>
        <section xml:id="mt_iodbcportmaccarbon">
          <title>Migration of iODBC applications to Carbon</title>
          <para>The iODBC CFM Bridge is the library that Carbon applications must 
be linked against.  This bridge is responsible for redirecting the ODBC API calls 
to the right iODBC version applicable to platform that the application is running 
on, beit Mac OS Classic or Mac OS X.</para>
          <para>The iODBC CFM Bridge must be used exclusively.  If you link against the 
iODBC CFM Bridge, ensure that no others iODBC libraries are linked in your project.  
The iODBC CFM Bridge linked applications require a valid iODBC installation on 
the target platform in order run successfully. </para>
          <para>Any CFM libraries used must be included in your System-Extensions 
folder of your Mac Classic system in order to successfully support carbon 
applications at runtime.</para>
        </section>
        <section xml:id="mt_iodbcportmaccocoa">
          <title>Migration of iODBC applications to Cocoa</title>
          <para>Under Project Builder, you have to put all the frameworks that your 
application will use in your project. Implicitly, all these frameworks will be 
used.  Also, you have to be sure that the machine where you will run the 
application include all the frameworks you link with. In such cases, iODBC 
can be shipped with your application including all the frameworks.</para>
          <para>This is the most straight forward way, but you can also directly use 
the compiler and linker command line shipped with Project Builder. In a such 
case, you will have to add some options to inform the compiler and linker 
that you want to use a specific framework.  The sources sources do not have to change.</para>
          <para>During the compilation phase, use the <computeroutput>-Fdir</computeroutput> 
option on the compiler command line to add a search path to the framework path, 
where dir is the path you want to add.  You may only specify one path 
per <computeroutput>-F</computeroutput> option, but you not limited to the 
number of <computeroutput>-F</computeroutput> options used.   iODBC 
compilations only require <computeroutput>-F/Library/Frameworks</computeroutput> 
and <computeroutput>-F/System/Library/Frameworks</computeroutput> options.  
Hence, complete <computeroutput>cc</computeroutput>= compilation command line 
may look like:</para>
          <programlisting><![CDATA[
cc -c "-F/Library/Frameworks" "-F/System/Library/Frameworks" ... mysources.c
]]></programlisting>
          <para>During the linkage phase, you will have to use the same option as above, 
and to specify at the end of the command line all the framework you want to 
link with, preceded with the option -framework . A complete cc linkage 
command line may look like:</para>
          <programlisting><![CDATA[
cc -o "myapplication" "-F/Library/Frameworks" "-F/System/Library/Frameworks" ... \
  -framework "iODBC" -framework "iODBCinst" -framework "iODBCadm" 
]]></programlisting>
        </section>
      </section>
    </section>
  </chapter>

  <!-- 
  $Id: sampleapps.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_sampleapps">
    <title>Sample Applications</title>
    <info>
      <abstract>
        <para>
Information on installing and using the supplied samples.
</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Sample</keyword>
        <keyword>Sample Application</keyword>
        <keyword>JDBC</keyword>
        <keyword>ODBCTEST</keyword>
        <keyword>Bench</keyword>
        <keyword>JBench</keyword>
      </keywordset>
    </info>
    <para>A number of sample applications are bundled with
your Universal Data Access Driver Suite installation for the
following purposes:</para>
    <itemizedlist mark="dash">
      <listitem>
        <para>To simplifying the process of getting the
product up and running</para>
      </listitem>
      <listitem>
        <para>To accelerate the support case creation and
resolution process</para>
      </listitem>
      <listitem>
        <para>To demonstrate the Data Access Driver Suite's
unique product features highlighting the benefits it brings to your
organization</para>
      </listitem>
      <listitem>
        <para>To demonstrate application programming
techniques that can used to aid and assist your ODBC and JDBC
programmers</para>
      </listitem>
    </itemizedlist>
    <para>The Universal Data Access Driver Suite services
are consumed primarily via ODBC and JDBC applications (OLE-DB
applications connect via ODBC Data Providers for OLE-DB), thus
separate ODBC &amp; JDBC sample applications (including source
code) have been packaged and integrated into the installer. The
current list of sample applications include:</para>
    <itemizedlist mark="dash">
      <listitem>
        <formalpara>
          <title>C++ Demo</title>
          <para>an ODBC based Interactive SQL processor written in C++.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>ODBC Bench Test</title>
          <para>a 32 Bit C++ program
based on the industry standard TPC-A benchmark (we will be
extending this program to include the TPC-C and TPC-D benchmarks
also). This program helps you compare the performance of Virtuoso
against other backend database engines as well as compare the
performance of various ODBC Drivers connecting to any ODBC
compliant backend database.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>ODBCTEST</title>
          <para>ODBC based Interactive SQL
processor written in 'C' for Linux &amp; UNIX</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>JDBCDemo</title>
          <para>a JDBC sample application that demonstrates an SQL query.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Rowset Demo</title>
          <para>a JDBC application that demonstrates OpenLink's JDBC Driver with the OpenLink
Scrollable Cursor RowSet Extension to the JDBC specification.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>ScrollDemo2</title>
          <para>a JDBC 2.0 sample
application that demonstrates OpenLink's support of Scrollable
Cursors and its ability to perform scrollable cursor operations
across heterogeneous databases.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>JBench</title>
          <para>a Java and JDBC based
adaptations of the industry standard TPC-A benchmarks.
This program helps you compare the performance of OpenLink's Virtuoso against
other backend database engines, it also helps you to compare the
performance of various JDBC Drivers connecting to any JDBC
compliant backend database.</para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <section xml:id="mt_bindir">
      <info>
        <title>Binary &amp; Source File Locations</title>
        <keywordset>
          <keyword>Source files</keyword>
          <keyword>Demo sources</keyword>
          <keyword>Demo Binaries</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_obindir">
        <title>ODBC Demonstration Applications</title>
        <para>The binary executables of these sample
applications reside under the following directory
structure:</para>
        <screen><![CDATA[<OPENLINK_INSTALLATION_DIRECTORY>\samples\odbc]]></screen>
        <para>The source code of some of these sample
applications, when available, reside under the following directory
structure, for example:</para>
        <screen><![CDATA[<OPENLINK_INSTALLATION_DIRECTORY>\samples\odbc\cppdemo]]></screen>
      </section>
      <section xml:id="mt_jbindir">
        <title>JDBC Demonstration Applications</title>
        <para>The binary executables (Java class files), and
sources for these sample applications reside under the following
directory structure:</para>
        <screen><![CDATA[<OPENLINK_INSTALLATION_DIRECTORY>\samples\jdbc\<JDK_Version>\<Demo_name>]]></screen>
      </section>
    </section>
    <section xml:id="mt_odbcsam">
      <info>
        <title>Windows 95/98/NT/2000 Based ODBC Sample Applications</title>
        <keywordset>
          <keyword>Sample Application Windows</keyword>
          <keyword>Windows; 95; 98; NT; 2000; XP</keyword>
          <keyword>Sample Application</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_cppdemo">
        <title>C++ Demo</title>
        <orderedlist>
          <listitem>
            <para>Go to the OpenLink Data Access Drivers "Start
Menu" item, then click on the "C++ Demo 32 Bit" menu item.</para>
            <figure xml:id="mt_image40" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image40.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Follow the Environment-&gt;Open Connection menu
path. Selecting the "Open Connection" menu item results in the ODBC
Driver Manager presenting you with a list of ODBC DSNs on your
machine as depicted by the screen capture below:</para>
            <figure xml:id="mt_image41" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image41.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Select the ODBC DSN that you wish to connect to,
(in this case "Informix 7 on Local" has been chosen. This will
connect you to the Informix 7 database.)</para>
          </listitem>
          <listitem>
            <para>You are then presented with a Login Dialog by
the OpenLink Driver for ODBC, enter a valid user name and password
into the appropriate fields.</para>
            <figure xml:id="mt_image42" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image42.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>At this point you will be connected to the
chosen datasource, you can now use the SQL--&gt;Execute SQL
menu path to open up the Interactive SQL input dialog. Enter a valid SQL
statement (see example in screen shot) and then click on the "OK"
button.</para>
            <figure xml:id="mt_image43" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image43.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You will be presented with the results of your
query.</para>
            <figure xml:id="mt_image44" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image44.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You exit this demo by following the
Environment--&gt;Close Connection menu path.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="mt_odbcbench">
        <title>ODBC Bench Test 32</title>
        <orderedlist>
          <listitem>
            <para>Go to the OpenLink Data Access Drivers "Start
Menu" item, then click on the "ODBC Bench Test 32 Bit" menu item.
You will be presented with the "Bench Test" interface.</para>
            <figure xml:id="mt_image45" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image45.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Follow the File-&gt;Connect menu path which
initializes the ODBC Driver Manager, which in turn presents you
with a list of ODBC DSNs installed on your machine. Select the DSN
that you want to benchmark, remember that by benchmarking a DSN you
are benchmarking the ODBC Driver that serves the DSN in question
and the backend database engine that serves the ODBC Driver. Choose
the name of the datasource you want to benchmark.</para>
            <figure xml:id="mt_image41_01" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image41.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You will then be presented with a Login Dialog
by the OpenLink Generic Driver for ODBC, enter a valid user name
and password into the appropriate fields.</para>
            <figure xml:id="mt_image42_01" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image42.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Now follow the Bench--&gt;Load Tables menu path
and you will be presented with a dialog that enables you to
configure key elements of your benchmark. Click the "Execute"
button to commence the process of setting up your database for the
benchmark tests. Please make sure you select the appropriate schema
for the DBMS that you are connecting to so that the benchmark
tables are created properly.</para>
            <figure xml:id="mt_image46" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image46.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>As the process of loading data occurs, all the
way up to completion, the benchmark program will provide status
information into the benchmark output pane as shown below:</para>
            <figure xml:id="mt_image47" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image47.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Now that all the benchmark data has been loaded
into your database, follow the Bench--&gt;Run Benchmark menu path
and then configure your actual benchmark session parameters:</para>
            <para>These benchmark parameters fall into 3 categories, Timing Options,
SQL Options, and Execution Options.</para>
            <figure xml:id="mt_image48" floatstyle="normal">
              <title/>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="image48.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <section>
          <title/>
          <section xml:id="mt_timeopt">
            <title>Timing Options:</title>
            <para>These setting allow you to configure the duration related aspects
of this benchmark program</para>
            <formalpara>
              <title>Minutes</title>
              <para>this is the duration of each benchmark run</para>
            </formalpara>
            <formalpara>
              <title>Runs</title>
              <para>this controls how many iterations of the benchmarks
you actually run (the default is one benchmark iteration
with a duration of 5 minutes)</para>
            </formalpara>
          </section>
          <section xml:id="mt_sqlopt">
            <title>SQL Options:</title>
            <para>These settings allow you to configure how your benchmark's SQL
instructions are actually handled.</para>
            <formalpara>
              <title>ExecDirect with SQL Text</title>
              <para>this means that no form of
repetitive SQL execution optimization is being applied (SQL
statements are prepared and executed repetitively)</para>
            </formalpara>
            <formalpara>
              <title>Prepare/Execute Bound Params</title>
              <para>this means that the Parameter
Binding SQL execution optimization is being applied (SQL is
prepared once but executed many times without the overhead of
re-preparing statements prior to execution)</para>
            </formalpara>
            <formalpara>
              <title>Use Stored Procedures</title>
              <para>this means that the Stored Procedure
SQL optimization is being applied (benchmark instructions are
stored within database being benchmarked)</para>
            </formalpara>
          </section>
          <section xml:id="mt_exeopt">
            <title>Execution Options:</title>
            <para>These settings allow you to configure the tone of your benchmark,
for instance it could have Transaction scoping and a mix of record
retrieval queries, or it could simply be input and update intensive
with a minimal amount of record retrieval queries (the case when
the 100 row query checkbox is unchecked a typical OLTP
scenario)</para>
            <formalpara>
              <title>Asynchronous</title>
              <para>execute the benchmark instructions asynchronously</para>
            </formalpara>
            <formalpara>
              <title>Use Transactions</title>
              <para>make the benchmark use transaction control (instructions are scoped to transaction blocks)</para>
            </formalpara>
            <formalpara>
              <title>Do 100 row Query</title>
              <para>perform a simulation of a 100 record retrieval as part of the benchmark activity.</para>
            </formalpara>
          </section>
        </section>
        <section>
          <title/>
          <orderedlist>
            <listitem>
              <para>Click on the "Run All" button if you would like
all the different benchmark type combinations to be
performed.</para>
            </listitem>
            <listitem>
              <para>When benchmark run complete benchmark data is
written to the benchmark program's output pane.</para>
              <figure xml:id="mt_image49" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image49.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <para>The key pieces of benchmark data that you need to look out for are:</para>
              <formalpara>
                <title>Total Transactions</title>
                <para>total number of transactions completed
during the benchmark run</para>
              </formalpara>
              <formalpara>
                <title>Transactions Per Second</title>
                <para>number of transaction completed per second for the benchmark run</para>
              </formalpara>
              <para>Information from this benchmark is automatically written to an
Excel format CSV (the file c:\odbcbnch.csv) which makes it easy for
you to graph and pivot data collated from several benchmark runs. A
later version of this demo will actually write the benchmark data
into an ODBC DSN that you provide thereby offering even more
flexibility and accessibility to benchmark data.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_odbcsaml">
        <info>
          <title>Linux &amp; UNIX Based ODBC Sample Applications</title>
          <keywordset>
            <keyword>Linux; Unix</keyword>
            <keyword>Sample Application Unix; Sample Application Linux</keyword>
          </keywordset>
        </info>
        <section xml:id="mt_odbctestl">
          <title>ODBCTEST</title>
          <para>This is a simple 'C' based and ODBC compliant
Interactive SQL processor.</para>
          <orderedlist>
            <listitem>
              <para>Run the script openlink.sh to set up your
environment:</para>
              <programlisting><![CDATA[openlink.sh]]></programlisting>
            </listitem>
            <listitem>
              <para>Start ODBCTEST by executing the following command:</para>
              <programlisting><![CDATA[odbctest]]></programlisting>
              <para>Or pass a DSN connect string, for example:</para>
              <programlisting><![CDATA[odbctest DSN=marketing;UID=name;PWD=pwd;]]></programlisting>
            </listitem>
            <listitem>
              <para>At the SQL command prompt enter "?" for a list
of ODBC DSNs on your machine or enter a valid ODBC Connect String
e.g.</para>
              <para>If you have a DSN named "Marketing" you would enter:
DSN=Marketing</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_odbcbesaml">
          <title>ODBC Benchmark Application</title>
          <para>The TPC-A, TPC-C, and TPC-D benchmarks are
currently under development, please monitor our Web site
(http://www.openlinksw.com) for updates on these applications.
</para>
        </section>
      </section>
      <section xml:id="mt_macosxsamples">
        <info>
          <title>Mac OS X</title>
          <keywordset>
            <keyword>Mac; Mac OS X</keyword>
            <keyword>Mac Sample Application</keyword>
            <keyword>OS X Sample Application</keyword>
          </keywordset>
        </info>
        <section xml:id="mt_odbctestmac">
          <title>ODBCTEST:</title>
          <para>This is a simple 'C' based and ODBC compliant Interactive SQL
processor.</para>
          <orderedlist>
            <listitem>
              <para>Open a Terminal session, and start ODBCTEST by executing the following command:</para>
              <programlisting><![CDATA[/Library/iodbc/bin/odbctest]]></programlisting>
            </listitem>
            <listitem>
              <para>At the SQL command prompt enter "?" for a list of ODBC
    DSNs on your machine or enter a valid ODBC Connect String.
    If you have a DSN named "Marketing" you would enter:</para>
              <programlisting><![CDATA[DSN=Marketing;UID=username;PWD=password]]></programlisting>
              <para>Note: If there is no password, you must include a semicolon at the end:</para>
              <programlisting><![CDATA[DSN=Marketing;UID=sa;PWD=;]]></programlisting>
            </listitem>
            <listitem>
              <para>Any valid SQL or ODBC command may be executed through this interface. The following example
    shows a connection to Microsoft SQLServer 2000, making a simple query
    against the sample Northwind database:</para>
              <programlisting><![CDATA[
[localhost:~] openlink% /Library/iodbc/bin/odbctest
iODBC Demonstration program
This program shows an interactive SQL processor
Enter ODBC connect string (? shows list, or DSN=...): DSN=user_tthib_sql2k
SQL>select au_lname, au_fname, state from authors where au_id < '333-33-3333'
au_lname                                |au_fname            |state
----------------------------------------+--------------------+-----
White                                   |Johnson             |CA
Green                                   |Marjorie            |CA
Carson                                  |Cheryl              |CA
O'Leary                                 |Michael             |CA
Straight                                |Dean                |CA
 5 row(s) fetched.
SQL>quit
Again (y/n) ? n
Have a nice day.
[localhost:~] openlink%
]]></programlisting>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="mt_jdbcsaa">
        <info>
          <title>JDBC Sample Applications &amp;Applets</title>
          <keywordset>
            <keyword>JDBC Sample Application</keyword>
            <keyword>JDBC Sample Applets</keyword>
            <keyword>JDBC; Sample; Application; Applet</keyword>
          </keywordset>
        </info>
        <section xml:id="mt_JDBCDemo">
          <title>JDBCDemo Java Application</title>
          <orderedlist>
            <listitem>
              <para>Go to the OpenLink Data Access Drivers "Start Menu" program group and then follow the JDBC
Samples menu path to the appropriate JDK, and then JDBCDemo. This will execute a DOS batch program that
initialises the Java demo application.</para>
              <figure xml:id="mt_jdemo1" floatstyle="normal">
                <title>JDBC Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="jdemo1.gif" width="395px" depth="328px"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Set the JDBC Driver Name and URL settings for the connection to your
database. The "Driver Name" field identifies the jdbc Driver.
The "Connection URL" field requires a valid JDBC URL.</para>
              <figure xml:id="mt_jdemo2" floatstyle="normal">
                <title>JDBC Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="jdemo2.gif" width="400px" depth="203px"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Enter a valid SQL statement and then click the "Query" button, the example
below uses a SQL statement requesting all records from the "Customers" table.</para>
              <figure xml:id="mt_jdemo3" floatstyle="normal">
                <title>JDBC Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="jdemo3.gif" width="395px" depth="339px"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_rowsetdemo">
          <title>Rowset Java Application</title>
          <orderedlist>
            <listitem>
              <para>Go to the OpenLink Data Access Drivers "Start Menu" program group and then follow the JDBC
Samples menu path to the appropriate JDK, and then Rowset Demo. This will execute a DOS batch program that
initialises the Java demo application.</para>
              <figure xml:id="mt_rowset1" floatstyle="normal">
                <title>Rowset Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="rowset1.gif" width="536px" depth="256px"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Set the JDBC URL settings for the connection to your database.
The "Connection URL" field requires a valid JDBC URL.</para>
              <figure xml:id="mt_rowset2" floatstyle="normal">
                <title>Rowset Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="rowset2.gif" width="432px" depth="185px"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Enter a valid SQL statement and then click the "Query" button.
The first rowset of the resultset will be shown.</para>
              <figure xml:id="mt_rowset3" floatstyle="normal">
                <title>Rowset Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="rowset3.gif" width="646px" depth="453px"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>
Click on the "Next" button to retrieve the next rowset, "Prior" to go back a rowset,
"First" to move directly to the first rowset, and "Last" to move to the last rowset.</para>
              <para>
"Delete", "Refresh", "Lock", "Unlock", "Add" and Update" work on the principle of a current row in
the rowset. To indicate the current row to the applet, you must click on any column of a particular
row and then press a key. The status panel will then display "Current Row = 2" or similar,
indicating that the current row is set.</para>
              <para>Clicking "Delete" will attempt to delete the row from the database. Clicking on "Refresh"
will now retrieve the latest values from the database to refresh that row. However this may not be
successful dependent on the restrictions place on the resultset by the underlying database.</para>
              <para>
"Lock" and "Unlock" will attempt to perform those operations on the current row, which again, may or
may not be successful, dependent on the restrictions of the underlying database.</para>
              <para>
"Add" will attempt to add the contents of the current row as a new row to the relevant tables forming
the resultset. "Update" will attempt to update the modified contents of the current row to the database.
Again the success of these two operations depend on the restrictions placed on the underlying database.</para>
              <para>
"Get Bookmark" will attempt to retrieve a bookmark for the current rowset position, which
"Set Bookmark" will attempt to return to.</para>
              <para>
To move to a particular position in the resultset, enter that position into the edit box next
to the "Goto" button and click the "Goto" button.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_ScrollDemo2">
          <title>ScrollDemo2 Java Application</title>
          <orderedlist>
            <listitem>
              <para>Go to the OpenLink Data Access Drivers "Start
Menu" program group and then follow the JDBC
Samples--&gt;ScrollDemo2 (JDK1.2) menu path, this will execute a
DOS batch program that initializes the Java demo application.
</para>
              <figure xml:id="mt_image50" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image50.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Set the JDBC Driver Name and URL settings for
your connection to a database of your choice. The "Driver Name"
field identifies the OpenLink Driver. If it is left blank, then it
defaults to "openlink.jdbc2.Driver", which is the OpenLink Driver
for JDBC 2.0.  The "Connection URL" field requires a valid
OpenLink JDBC URL.</para>
              <figure xml:id="mt_image51" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image51.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Enter a valid SQL statement and then click the
"Query" button.</para>
              <figure xml:id="mt_image52" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image52.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You can now use the navigational buttons to
Scroll backwards and forwards, each of these navigational buttons
highlights OpenLink's full implementation of the JDBC 2.0
Scrollable Cursors specifications.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_scd2aplt">
          <title>ScrollDemo2 Java Applet</title>
          <orderedlist>
            <listitem>
              <para>Start the OpenLink Admin Assistant and then
follow the Sample Applications--&gt;JDBC Applet Demos menu
path.</para>
              <figure xml:id="mt_image53" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image53.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click on the "ScrollDemo2" hyperlink which
initializes the ScrollDemo2 applet, if you do not have a Java 1.2
or Java 2.0 compliant browser you will not be able to run this
Applet demo. The other way to experience this demo is to run the
Application version which uses your operating systems Java Virtual
Machine (JVM) instead of a JVM inherently linked to a Web
Browser.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="mt_JBenchApplication">
          <title>JBench Application</title>
          <orderedlist>
            <listitem>
              <para>Go to the OpenLink Data Access Drivers "Start
Menu" program group and then follow the JDBC Samples--&gt;Jbench
(for JDK1.1 1.2 or 1.3) menu path, depending on the JVM you
have installed. This will execute a DOS batch program that
initializes the JBench application.</para>
              <figure xml:id="mt_image54" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image54.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>The follow the File--&gt;Connect menu path to
make your initial connection. You will need to identify your JDBC
Driver (by providing appropriate Driver Name values in the JDBC
Driver field) and then provide a valid JDBC URL for your specific
JDBC Driver.</para>
              <figure xml:id="mt_image55" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image55.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Select the open JDBC connection that you wish to test.</para>
            </listitem>
            <listitem>
              <para>Follow the TPC-A--&gt;Load Tables menu path to
prepare your database for the TPC-A benchmark, select a database
schema type that matches the database engine that you are
benchmarking. If your database isn't listed ANSI should suffice (as
long as this is an ANSI SQL compliant database).</para>
              <figure xml:id="mt_image56" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image56.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Follow the TPC-A--&gt;Load Procedures menu path
to Load the TPC-A stored procedures.</para>
            </listitem>
            <listitem>
              <para>Now that all the benchmark data and stored
procedures have been loaded into your database, follow the
TPC-A--&gt;Run Benchmark menu path and then configure your actual
benchmark session parameters:</para>
              <para>The benchmark parameters fall into 4 categories, Bench execution
mode, Run Options, SQL Options, and Execution Options.</para>
              <figure xml:id="mt_image57" floatstyle="normal">
                <title/>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="image57.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </orderedlist>
          <section xml:id="mt_benexemode">
            <title>Bench execution mode:</title>
            <para>These setting allow you to configure the threads used for the
benchmark.</para>
            <para>
Decide on a single or multiple threads test.</para>
            <formalpara>
              <title>No. Threads</title>
              <para>this is the number of concurrent threads to be used during the benchmark.</para>
            </formalpara>
          </section>
          <section xml:id="mt_benrunopt">
            <title>Run Options:</title>
            <para>These setting allow you to configure the duration related aspects
of this benchmark program.</para>
            <formalpara>
              <title>No. runs</title>
              <para>this controls how many iterations of the benchmarks you actually run (the default is 100 benchmark
iterations).</para>
            </formalpara>
            <formalpara>
              <title>Duration (mins.)</title>
              <para>this is the duration in minutes of each benchmark run.</para>
            </formalpara>
          </section>
          <section xml:id="mt_bensqlopt">
            <title>SQL Options:</title>
            <para>These setting allow you to configure how your benchmark's SQL
instructions are actually handled.</para>
            <formalpara>
              <title>ExecDirect with SQL Text</title>
              <para>this means that no form of
repetitive SQL execution optimization is being applied (SQL
statements are prepared and executed repetitively)</para>
            </formalpara>
            <formalpara>
              <title>Prepare/Execute Bound Params</title>
              <para>this means that the Parameter
Binding SQL execution optimization is being applied (SQL is
prepared once but executed many times without the overhead of
re-preparing statements prior to execution)</para>
            </formalpara>
            <formalpara>
              <title>Use Stored Procedures</title>
              <para>this means that the Stored Procedure
SQL optimization is being applied (benchmark instructions are
stored within database being benchmarked)</para>
            </formalpara>
            <formalpara>
              <title>Execution Options:</title>
              <para>These setting allow you to configure the tone of your benchmark,
for instance it could have Transaction scoping and a mix of record
retrieval queries, or it could simply be input and update intensive
with a minimal amount of record retrieval queries (the case when
the 100 row query checkbox is unchecked a typical OLTP
scenario)</para>
            </formalpara>
            <formalpara>
              <title>Use Transactions</title>
              <para>make the benchmark use transaction
control (instructions are scoped to transaction blocks)</para>
            </formalpara>
            <formalpara>
              <title>Do 100 row Query</title>
              <para>perform a simulation of a 100 record
retrieval as part of the benchmark activity.</para>
            </formalpara>
          </section>
          <section>
            <title/>
            <orderedlist>
              <listitem>
                <para>Press Run or Run All to start your TPC-A benchmark.
The Run All will sequence through all SQL and Execution combinations,
so it will take much longer.</para>
              </listitem>
              <listitem>
                <para>Follow the TPC-A--&gt;Cleanup menu path to clean
up your database so that you can then run other benchmarks.</para>
              </listitem>
            </orderedlist>
          </section>
        </section>
      </section>
    </section>
  </chapter>

  <!-- 
  $Id: bugsfixed.xml,v 1.1.1.1 2004/09/09 10:45:20 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
  <chapter xml:id="mt_bugsfixed">
    <title>Bugs Fixed</title>
    <info>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Bugs Fixed</keyword>
        <keyword>Bug</keyword>
      </keywordset>
      <abstract>
        <para>
          An overview of issues fixed with the Multi-Tier drivers.
        </para>
      </abstract>

    </info>
    <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
      <title>Bugs Fixed</title>
      <tgroup align="char" charoff="50" char="." cols="2">
        <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
        <thead>
          <row>
            <entry>Bug</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>506</entry>
            <entry>Oracle 8.0 on AIX fails InterDev and VB6 tests</entry>
          </row>
          <row>
            <entry>734</entry>
            <entry>Mac OS X iODBC installer overwrites existing symbolic links.</entry>
          </row>
          <row>
            <entry>950</entry>
            <entry>Windows Installer error `Severe -- VJ CLASSPATH too long to update`</entry>
          </row>
          <row>
            <entry>1047</entry>
            <entry>Version String for testcono should read `ODBC` not `UDBC`</entry>
          </row>
          <row>
            <entry>1227</entry>
            <entry>Modify Tracing tab description on Classic, to match Mac OS X</entry>
          </row>
          <row>
            <entry>1486</entry>
            <entry>sql2k_mv needs support for `translate character data` setting</entry>
          </row>
          <row>
            <entry>1833</entry>
            <entry>ODBCTest documentation is incomplete</entry>
          </row>
          <row>
            <entry>1841</entry>
            <entry>user-authentication fails, though UID/PWD are known correct</entry>
          </row>
          <row>
            <entry>1968</entry>
            <entry>oplrvc scripts are not documented</entry>
          </row>
          <row>
            <entry>1989</entry>
            <entry>Installer needs to shut down Broker and www_sv</entry>
          </row>
          <row>
            <entry>2074</entry>
            <entry>Progress 9.1C SQL Lite [Release 4.2] does not connect!</entry>
          </row>
          <row>
            <entry>2199</entry>
            <entry>DB2 Lite screen shots don't match actual interface &amp; help text is recursive</entry>
          </row>
          <row>
            <entry>2220</entry>
            <entry>Current 4.2 SQL 92 Lite installer contains non-working Driver DLL</entry>
          </row>
          <row>
            <entry>2229</entry>
            <entry>privileges must be set to permit ADMIN group write access...</entry>
          </row>
          <row>
            <entry>2330</entry>
            <entry>iODBC HTTP Admin needs correct version graphic on About tab</entry>
          </row>
          <row>
            <entry>2444</entry>
            <entry>`rejected shutdown request from tthibodeau@tthibodeau` in a Broker-host CMD session</entry>
          </row>
          <row>
            <entry>2455</entry>
            <entry>Admin Assistant wizard and Mozilla browser</entry>
          </row>
          <row>
            <entry>2685</entry>
            <entry>prs91_sv.exe as of 4.2.2002-03-27 installer fails on some Windows boxes</entry>
          </row>
          <row>
            <entry>2762</entry>
            <entry>LingerTimeOut option needs to be documented</entry>
          </row>
          <row>
            <entry>2831</entry>
            <entry>data type `bit` returns `0.0` for every record, regardless of actual content (all Unix; Windows SQL Lite unavailable)</entry>
          </row>
          <row>
            <entry>2863</entry>
            <entry>MS Access "#deleted" errors when primary key is SQL_BIGINT</entry>
          </row>
          <row>
            <entry>2880</entry>
            <entry>Unix Lite needs updated filenames</entry>
          </row>
          <row>
            <entry>2903</entry>
            <entry>Postgres agent updated fail using the OLEDB rowset viewer program</entry>
          </row>
          <row>
            <entry>2971</entry>
            <entry>Rel 4.2 installer fails to populate CLASSPATH, no informative error when no license</entry>
          </row>
          <row>
            <entry>3097</entry>
            <entry>SQLDataSources() does not follow API spec</entry>
          </row>
          <row>
            <entry>3168</entry>
            <entry>MT 4.2 sql2k agent doesn't bring back BIGINT data (sql6 agent can)</entry>
          </row>
          <row>
            <entry>3251</entry>
            <entry>Win32 Broker not responding after 60 sql2k_mv connections</entry>
          </row>
          <row>
            <entry>3254</entry>
            <entry>[SQL Server]Syntax error converting DATETIME from character string in Sco ODBC SDK</entry>
          </row>
          <row>
            <entry>3265</entry>
            <entry>remove notation of `beta release` from iODBC description</entry>
          </row>
          <row>
            <entry>3266</entry>
            <entry>Installer must not reboot Macintosh without user confirmation</entry>
          </row>
          <row>
            <entry>3272</entry>
            <entry>iODBC 3.5.3 SQLDriverConnect() fails with System DSNs, unless Driver is also specified</entry>
          </row>
          <row>
            <entry>3325</entry>
            <entry>client connections to Oracle 9.2 on Mac OS X require new libclntsh.dylib.9.0</entry>
          </row>
          <row>
            <entry>3328</entry>
            <entry>Retrieval of Progress Decimals results in DB Server Crash and Driver General Error</entry>
          </row>
          <row>
            <entry>3330</entry>
            <entry>SQLSetConnectAttr or SQLSetConnectOption fails to set transaction isolation level</entry>
          </row>
          <row>
            <entry>3366</entry>
            <entry>TDS Lite drivers are not "describing" columns as NULLABLE</entry>
          </row>
          <row>
            <entry>3423</entry>
            <entry>TDS Lite Driver does not recognize 'option + f' special character on Mac Classic</entry>
          </row>
          <row>
            <entry>3464</entry>
            <entry>4.2 Lite driver doesn't bring back BYTE 800 Ingres data (Multi-tier does)</entry>
          </row>
          <row>
            <entry>3483</entry>
            <entry>PostgreSQL Lite license for Linux does not work</entry>
          </row>
          <row>
            <entry>3487</entry>
            <entry>MIN_FIELD_LEN not available in Progress Lite</entry>
          </row>
          <row>
            <entry>3516</entry>
            <entry>SQLGetConnectAttr (SQL_ATTR_CURRENT_CATALOG = 109) fails with `Option type out of range`</entry>
          </row>
          <row>
            <entry>3533</entry>
            <entry>DATETIME and TIMESTAMP columns do not work as expected in TDS Driver</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </chapter>
  <chapter xml:id="mt_appendix">
    <title>Technical Appendix</title>
    <info>
      <abstract>
        <para>
Reference tables for the expert user.
</para>
      </abstract>
      <keywordset>
        <keyword>ODBC</keyword>
        <keyword>ODBC Driver</keyword>
        <keyword>ODBC Drivers</keyword>
        <keyword>Rulebook</keyword>
        <keyword>Session Rules</keyword>
        <keyword>Error Code</keyword>
        <keyword>Log Level</keyword>
        <keyword>Jetfix</keyword>
        <keyword>Connection Options</keyword>
      </keywordset>
    </info>

    <!--&sqlcmds;-->

    <!-- 
  $Id: rulebook.xml,v 1.2 2004/11/11 18:01:36 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_rulebook">
      <info>
        <title>Rulebook Settings</title>
        <keywordset>
          <keyword>Rulebook</keyword>
          <keyword>Rule Book</keyword>
          <keyword>Rulebook settings</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_requestbroker">
        <title>[Request Broker]</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>BinaryDirectory</entry>
                <entry/>
                <entry>Absolute path to the bin directory which has the Broker program.
 Example: /home/openlink/openlink/bin</entry>
              </row>
              <row>
                <entry>CommandLine</entry>
                <entry/>
                <entry>The command line parameters to use as a default. These parameters
 are also passed on to each program referenced in [Persistent Services]</entry>
              </row>
              <row>
                <entry>Protocols</entry>
                <entry>tcp</entry>
                <entry>Name of protocol to use tcp/spx/DECnet</entry>
              </row>
              <row>
                <entry>MaxAgents</entry>
                <entry>0</entry>
                <entry>if &gt;0, maximum number of processes spawned by broker</entry>
              </row>
              <row>
                <entry>MaxConnections</entry>
                <entry>0</entry>
                <entry>if &gt;0, maximum number of connections from clients</entry>
              </row>
              <row>
                <entry>HostNameResolver</entry>
                <entry>Yes</entry>
                <entry>Resolve IP addresses to hostnames Yes/No.
 Use Yes to give a more readable name in the logs. Set to No to avoid possible delays
 when frequently looking up unknown (new) IP numbers through a distant uncached
 DNS table. This parameter will have a direct
 affect on the type of match that is to be used for the StartupBy,
 ShutdownBy and ShutdownFrom parameters under the
 <link linkend="mt_security">Security section</link>.</entry>
              </row>
              <row>
                <entry>LingerTimeout</entry>
                <entry>0</entry>
                <entry>if &gt;0, time in seconds that a disconnected agent will linger
 ready for re-use before giving up, and terminating.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_protocoltcp">
        <title>[Protocol TCP]</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>PingWatchdog</entry>
                <entry>No</entry>
                <entry>Send check-alive packets Yes/No</entry>
              </row>
              <row>
                <entry>PingInterval</entry>
                <entry>600</entry>
                <entry>Number of seconds between each Ping</entry>
              </row>
              <row>
                <entry>IPAddress</entry>
                <entry>127.0.0.1</entry>
                <entry>Overrules found interface address</entry>
              </row>
              <row>
                <entry>PortLow</entry>
                <entry>5000</entry>
                <entry>Optional lower limit of port number to be used in allocation by the
 Broker for communication with an Agent.</entry>
              </row>
              <row>
                <entry>PortHigh</entry>
                <entry>60000</entry>
                <entry>Optional upper limit of port range usage by Broker.</entry>
              </row>
              <row>
                <entry>Listen</entry>
                <entry>5000</entry>
                <entry>Port that the client should contact the broker on.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_protocolspx">
        <title>[Protocol SPX]</title>
        <para>This section is only relevant, and required when using the SPX protocol.</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>SAPBroadcast</entry>
                <entry>Yes</entry>
                <entry>Broadcast SAP registration packets</entry>
              </row>
              <row>
                <entry>SAPInterval</entry>
                <entry>100</entry>
                <entry>Number of seconds between each SAP broadcast</entry>
              </row>
              <row>
                <entry>SAPServiceType</entry>
                <entry>0x321F</entry>
                <entry>Type of the SAP service</entry>
              </row>
              <row>
                <entry>SAPServiceName</entry>
                <entry>OPENLINK</entry>
                <entry>name of the SAP service</entry>
              </row>
              <row>
                <entry>HostFile</entry>
                <entry>HOSTS.IPX</entry>
                <entry>For IPX/SPX name to address translation</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_protocoldecnet">
        <title>[Protocol DECnet]</title>
        <para>This section is only relevant, and required when using the DECnet protocol.</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>ObjectName</entry>
                <entry>OPLRQB</entry>
                <entry>Name of the DECnet server object</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_communications">
        <title>[Communications]</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>SendSize</entry>
                <entry>16000</entry>
                <entry>Send buffer size</entry>
              </row>
              <row>
                <entry>ReceiveSize</entry>
                <entry>4096</entry>
                <entry>Receive buffer size</entry>
              </row>
              <row>
                <entry>DataEncryption</entry>
                <entry>No</entry>
                <entry>Crypting of outgoing packets</entry>
              </row>
              <row>
                <entry>BrokerTimeout</entry>
                <entry>30</entry>
                <entry>Timeout for utilities to contact the broker</entry>
              </row>
              <row>
                <entry>ReceiveTimeout</entry>
                <entry>120</entry>
                <entry>Maximum time allowed for OpenLink Service Agents (JDBC_SV, ODBC_MV,
 PROXY_SV) to instigate a session with database agents (ora7_sv, inf7_mv
 etc.)</entry>
              </row>
              <row>
                <entry>RetryTimeout</entry>
                <entry>5</entry>
                <entry>Initial retry interval in seconds. Doubles on failure to a maximum of 30 seconds</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_zeroconfig">
        <title>[ZeroConf]</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>&lt;ServiceName&gt;</entry>
                <entry>&lt;Connection String Attributes&gt;</entry>
                <entry>User defined ZeroConfig entry</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <tip>
          <title>See Also:</title>
          <para>The <link linkend="mt_zeroconfini">Zero Configuration Chapter</link></para>
        </tip>
      </section>
      <section xml:id="mt_security">
        <title>[Security]</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>StartupBy</entry>
                <entry>.*</entry>
                <entry>Users who can startup oplrqb</entry>
              </row>
              <row>
                <entry>ShutdownBy</entry>
                <entry>.*</entry>
                <entry>Users who can shutdown oplrqb</entry>
              </row>
              <row>
                <entry>ShutdownFrom</entry>
                <entry>localhost.*,127\.0\.0\.1</entry>
                <entry>Hostnames that can shutdown</entry>
              </row>
              <row>
                <entry>ValidUidRange</entry>
                <entry>0, 50000</entry>
                <entry>Valid range for OpSysLogin</entry>
              </row>
              <row>
                <entry>TraceRulebook</entry>
                <entry/>
                <entry>Write merged rulebook (debug) Example: /tmp/debug.book</entry>
              </row>
              <row>
                <entry>IncludeRulebook</entry>
                <entry/>
                <entry>Name of file in current directory holding additional rulebook
 sections. (Example: generic.book). There may be more than one occurance of IncludeRulebook so
 multiple books can be included. The sections specified in the
 included files cannot overrule the sections contained in the main broker
 rulebook. Only unique sections are included.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The StartupBy, ShutdownBy and ShutdownFrom parameters use full
Regular Expressions. Separate multiple expressions with a comma.</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Regular Expression Examples</title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Expression</entry>
                <entry>Interpretation</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>.*</entry>
                <entry>Any character, any number of times</entry>
                <entry>Any user or location.</entry>
              </row>
              <row>
                <entry>localhost.*</entry>
                <entry>localhost followed by zero or more
 characters</entry>
                <entry>Will match: localhost, localhost2, localhost.company.com</entry>
              </row>
              <row>
                <entry>127\.0\.0\.1</entry>
                <entry>exact IP 127.0.0.1</entry>
                <entry>Current machine when HostNameResolver=No</entry>
              </row>
              <row>
                <entry>.*\.company\.com</entry>
                <entry>Any text before .company.com</entry>
                <entry>Used to match any sub domain of company.com. For example:
 sales.company.com, john.company.com</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_genericagent">
        <title>[generic_agentname]</title>
        <para>Each Database Agent will have a section that is typically called
"generic_" followed by a database label. For example:
[generic_virt], [generic_odbc], [generic_db2].</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="3">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Default</entry>
                <entry>Comment</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Program</entry>
                <entry/>
                <entry>name of the executable to run</entry>
              </row>
              <row>
                <entry>Environment</entry>
                <entry/>
                <entry>specify Environment section to use</entry>
              </row>
              <row>
                <entry>CommandLine</entry>
                <entry/>
                <entry>commandline options (optional)</entry>
              </row>
              <row>
                <entry>ServerOptions</entry>
                <entry/>
                <entry>force dbms client specific options (optional)</entry>
              </row>
              <row>
                <entry>Directory</entry>
                <entry/>
                <entry>where to chdir before starting the server</entry>
              </row>
              <row>
                <entry>Database</entry>
                <entry/>
                <entry>force name of the database (optional)</entry>
              </row>
              <row>
                <entry>ConnectOptions</entry>
                <entry/>
                <entry>force dbms specific connect options (optional)</entry>
              </row>
              <row>
                <entry>UserID</entry>
                <entry/>
                <entry>force userid (optional)</entry>
              </row>
              <row>
                <entry>Password</entry>
                <entry/>
                <entry>force password (optional)</entry>
              </row>
              <row>
                <entry>ReadOnly</entry>
                <entry>No</entry>
                <entry>force read-only mode (optional)</entry>
              </row>
              <row>
                <entry>OpsysLogin</entry>
                <entry>No</entry>
                <entry>when set to Yes,
 the Request Broker will do an operating system login before spawning.
 This implies ReUse = ifsame user. (optional)</entry>
              </row>
              <row>
                <entry>NeedsCLI</entry>
                <entry/>
                <entry>(VMS only) Use CLI to spawn the agent</entry>
              </row>
              <row>
                <entry>ReUse</entry>
                <entry>never</entry>
                <entry>Defines how an agent will be re-used.
 See below for details of the <link linkend="mt_reuse">ReUse Parameter</link>.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
For the CommandLine parameter, you can specify a selection of the
following options:
</para>
        <variablelist>
          <varlistentry>
            <term>+noautocommit
</term>
            <listitem>
              <para>This means that all connections routed (by the mapping
rules) through this agent section will have autocommit behaviour
turned off. This is useful if your client-side application relies on
manual commits of its transactions; you can define a mapping rule
to match that application and add +noautocommit while other
applications use a different agent section.
</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>+maxrows
</term>
            <listitem>
              <para>This defines the maximum number of rows to fetch from
any query.
</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>+initsql
</term>
            <listitem>
              <para>Specifies a file with a set of SQL statements to
execute immediately each connection is established. For example, this
might be useful to set transaction isolation levels, if your
application assumes them to be set a specific way already.
</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>+jetfix
</term>
            <listitem>
              <para>This enables various workarounds for operation with the
Microsoft Jet Engine, e.g. through Access or MS Query. Particularly,
the mapping of datatypes may be changed for greater accuracy using
these applications.
</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>+norowsetlimit
</term>
            <listitem>
              <para>This disables any rowset-size limit; it is useful in
cursor operations on large tables.
</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <section xml:id="mt_reuse">
          <title>Agent ReUse parameter</title>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>  </title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="center" colnum="1" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>ReUse Value</entry>
                  <entry>When is agent re-used</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>never</entry>
                  <entry>never reuse this instance (default)</entry>
                </row>
                <row>
                  <entry>always</entry>
                  <entry>always try to reuse this instance</entry>
                </row>
                <row>
                  <entry>upto &lt;n&gt;</entry>
                  <entry>allow at most n connection to the same instance</entry>
                </row>
                <row>
                  <entry>ifreadonly</entry>
                  <entry>allow only the read-only requests</entry>
                </row>
                <row>
                  <entry>ifsame database</entry>
                  <entry>allow requests that alias to the same db.</entry>
                </row>
                <row>
                  <entry>ifsame process</entry>
                  <entry>same calling process id (pid)</entry>
                </row>
                <row>
                  <entry>ifsame options</entry>
                  <entry>same connect options specified</entry>
                </row>
                <row>
                  <entry>ifsame application</entry>
                  <entry>if originated from same appl. alias</entry>
                </row>
                <row>
                  <entry>ifsame user</entry>
                  <entry>if request for same username</entry>
                </row>
                <row>
                  <entry>ifsame machine</entry>
                  <entry>group connections from same machine</entry>
                </row>
                <row>
                  <entry>ifsame opsys</entry>
                  <entry>group connections with compatible operating sys.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
      <section xml:id="mt_domainaliases">
        <title>[Domain Aliases]</title>
        <para>This section is used to change a domain name specified in the connect
string of a DNS with an internal alias. This alias is used in the first colon
delimited field of a mapping rule.</para>
        <para>This example will map two different Progess domains to one agent.
An alternative is shown for mapping three different Oracle types to the
one Oracle agent.</para>
        <screen><![CDATA[
[Domain Aliases]
^Progress 90A$|^Progress 90B$ = pro90b
Oracle 9i                     = ora90
^Oracle 9.0$                  = ora90
^Oracle 9.0.x$                = ora90
]]></screen>
      </section>
      <section xml:id="mt_databasealiases">
        <title>[Database Aliases]</title>
        <para>This section will replace a database name specified in the connect string
of a DNS with an internal alias. This alias is used in the second colon delimited
field of a mapping rule.</para>
        <para>This example looks for a substring 'demo' and will replace with an
alias of 'demo'. Thus anydemo, demo, demo123 are all matched, and converted
to demo.</para>
        <screen><![CDATA[
[Database Aliases]
demo = demo
]]></screen>
      </section>
      <section xml:id="mt_useraliases">
        <title>[User Aliases]</title>
        <para>This section will replace a user name specified in the connect string
of a DNS with an internal alias. This alias is used in the third colon delimited
field of a mapping rule.</para>
        <para>The example below shows how certain users or an empty user are
handled. In this case they are rejected.</para>
        <screen><![CDATA[
[User Aliases]
scott|system = insecure
^$           = blank
[Mapping Rules]
*:*:blank:*:*:*:rw     = reject You should specify a username
*:*:insecure:*:*:*:rw  = reject The user is not allowed
]]></screen>
      </section>
      <section xml:id="mt_opsysaliases">
        <title>[Opsys Aliases]</title>
        <para>This section will replace an operating system indentifier with an
internal alias. This alias is used in the fourth colon delimited
field of a mapping rule.</para>
        <para>This example will map anything containing the substring 'java'
to an alias of 'java'. Two variations of windows are given an alias of 'msdos'.
Everything else will be matched to .* so it is mapped to the alias 'other'.
</para>
        <screen><![CDATA[
[Opsys Aliases]
java        = java
win32|msdos = msdos
.*          = other
]]></screen>
      </section>
      <section xml:id="mt_rbmachinealiases">
        <title>[Machine Aliases]</title>
        <para>This section will replace a machine name with an internal alias. This
alias is used in the fifth colon delimited field of a mapping rule.</para>
        <para>This example will map two different machine names to one of 'adminpc'.
Also anything containing the word 'sales' such as mysales, sales, sales2 is
then mapped to 'sales' alias.</para>
        <screen><![CDATA[
[Machine Aliases]
fredspc|johnspc    = adminpc
sales              = sales
]]></screen>
      </section>
      <section xml:id="mt_applicationaliases">
        <title>[Application Aliases]</title>
        <para>This section will replace the application name with an internal alias.
This alias is used in the sixth colon delimited field of a mapping rule.</para>
        <para>This example would match MSACCESS (a program requiring the Jet option),
and map it to an alias of jet. The second alias mapping would match various
Office applications and convert them to a single alias.</para>
        <screen><![CDATA[
[Application Aliases]
MSACCESS           = jet
MSQRY.*|EXCEL|WORD = msoffice
]]></screen>
      </section>
      <section xml:id="mt_mappingrules">
        <title>[Mapping Rules]</title>
        <para>This section is used to determine which agent shall handle the
incoming request. The mapping rules are checked once all the alias mappings
have been performed. Each mapping rule is tried from top to bottom until a
match with the current parameters has been found. There is no regular
expression or glob handling in the mapping rules. The 7 colon delimited
mapping parameters must each match up exactly. There is a special mapping
rule of '*' that denotes a dont care parameter. Do not confuse this
special '*' with the regular expression '*', or glob '*'.It is not possible to
use the '*' with any other text such as 'demo*'.</para>
        <para>On the right side of the '=' is either an accept, or reject statement.
The accept statment has the word 'accept' followed by the
section name that identifies the agent. A reject statement has the word
'reject' followed by a text string that is the error message reported to
the client.</para>
        <para>This is an example mapping section.</para>
        <screen><![CDATA[
[Mapping Rules]
;*:*:blank:*:*:*:rw     = reject You should specify a username and password
*:*:Admin:msdos:*:jet:* = reject Admin user account is not registered
sql2000:*:*:*:*:*:*     = accept generic_sql2000
ora81:*:*:*:*:jet:*     = reject The Oracle 8 Database Agent is not configured for jet
*:*:*:java:*:*:*        = accept jodbc_client
]]></screen>
        <para>Here is a snippet of the debug output showing how a request
is shown to be matched.</para>
        <screen><![CDATA[
request: domain=Oracle 8.1 database=db serveropts=
connectopts= user=scott opsys=win32 readonly=0
application=ODBCAD32 processid=520
solve mapping: ora8sv:db:scott:win32:MASTERSRVR:ODBCAD32:rw
using mapping: ora8sv:*:*:*:*:*:*
]]></screen>
      </section>
    </section>

    <!-- 
  $Id: errorcodes.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_errorcodes">
      <info>
        <title>Error Codes</title>
        <keywordset>
          <keyword>Broker Error Codes</keyword>
          <keyword>Error Code</keyword>
        </keywordset>
      </info>
      <para>When a Broker or agent is terminated, the exit code can be seen in
the log file (for example oplrqb.log) or in the foreground window.</para>
      <para>The exits codes are shown below:</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Log Levels</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="center" colnum="1" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Exit Code</entry>
              <entry>Category</entry>
              <entry>Comment</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>0</entry>
              <entry>NORMAL</entry>
              <entry>Normal exit with success</entry>
            </row>
            <row>
              <entry>1</entry>
              <entry>WARNING</entry>
              <entry>some kind of failure at startup/shutdown, typically shown with a reason for this error</entry>
            </row>
            <row>
              <entry>&gt;1</entry>
              <entry>UNKNOWN</entry>
              <entry>When the exit code is not in the range of 0-15 then it is typically an
 uninitialised exit value taken from the stack. This can occur when an
 error in some database code is returned to the OpenLink code (Broker).</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The agent or broker may be terminated with a signal:</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Reported Signals</title>
        <tgroup align="char" charoff="50" char="." cols="4">
          <colspec align="center" colnum="1" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Signal</entry>
              <entry>Name</entry>
              <entry>Category</entry>
              <entry>Comment</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>2</entry>
              <entry>SIGINT</entry>
              <entry>NORMAL</entry>
              <entry>user pressed CTRL-C on oplrqb -fd</entry>
            </row>
            <row>
              <entry>3</entry>
              <entry>SIGQUIT</entry>
              <entry>NORMAL</entry>
              <entry>user pressed CTRL-\ on oplrqb -fd</entry>
            </row>
            <row>
              <entry>4</entry>
              <entry>SIGILL</entry>
              <entry>FAULT</entry>
              <entry>illegal instruction resulting in a program crash</entry>
            </row>
            <row>
              <entry>7</entry>
              <entry>SIGBUS</entry>
              <entry>FAULT</entry>
              <entry>misaligned mem read/write resulting in a program crash</entry>
            </row>
            <row>
              <entry>8</entry>
              <entry>SIGFPE</entry>
              <entry>FAULT</entry>
              <entry>divide by 0 or other arithmetical error</entry>
            </row>
            <row>
              <entry>9</entry>
              <entry>SIGKILL</entry>
              <entry>NORMAL</entry>
              <entry>sent by the broker to kill an agent which has ignored multiple SIGTERMs</entry>
            </row>
            <row>
              <entry>11</entry>
              <entry>SIGSEGV</entry>
              <entry>FAULT</entry>
              <entry>buffer/stack overrun resulting in a program crash</entry>
            </row>
            <row>
              <entry>13</entry>
              <entry>SIGPIPE</entry>
              <entry>NORMAL</entry>
              <entry>other side of a pipe was killed while this side tried to write data to it</entry>
            </row>
            <row>
              <entry>15</entry>
              <entry>SIGTERM</entry>
              <entry>NORMAL</entry>
              <entry>sent by the broker to an agent to ask it to terminate</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
On the Windows platform, severe errors are reported in the following way:
</para>
      <screen><![CDATA[pid ... died with status code 0x....]]></screen>
      <para>
The hex number may be looked up in the winnt.h file. All errors reported in
this way are considered severe, and should be reported to OpenLink Support.
</para>
    </section>

    <!-- 
  $Id: loglevels.xml,v 1.1.1.1 2004/09/09 10:45:24 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_loglevels">
      <info>
        <title>Broker Log Levels</title>
        <keywordset>
          <keyword>Request Broker Log</keyword>
          <keyword>Broker Log</keyword>
          <keyword>Log level</keyword>
        </keywordset>
      </info>
      <para>The Request Broker reports various information and messages to the
foreground window, or the log file if selected. The amount of detail that
is shown is controlled by the loglevel parameter.</para>
      <para>Define the required loglevel on the command line call. For example to get
loglevel 7, use:</para>
      <programlisting><![CDATA[oplrqb +loglevel 7]]></programlisting>
      <para>or</para>
      <programlisting><![CDATA[oplrqb -l 7]]></programlisting>
      <para>Alternatively set the loglevel default in the oplrqb.ini file.</para>
      <screen><![CDATA[
[Request Broker]
CommandLine = +loglevel 7
]]></screen>
      <para>When a loglevel is specified, the messages from priority 0 up to that
level are shown. Thus using +loglevel 5 will produce
messages from levels 0, 1, 2, 3, 4 and 5. Specifying +loglevel 9 is the
same as +loglevel 7 as levels 8 and 9 are not defined.</para>
      <para>Typical loglevels are 7 for troubleshooting, 3,4 or 5 for normal use,
and 0 or 1 for a limited report. The if a loglevel is not specified, then a
default of 5 is used.</para>
      <para>The level of detailed for each log level is as follows:</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Log Levels</title>
        <tgroup align="char" charoff="50" char="." cols="3">
          <colspec align="center" colnum="1" colwidth="20pc"/>
          <thead>
            <row>
              <entry>Level</entry>
              <entry>Category</entry>
              <entry>Comment</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>0</entry>
              <entry>EMERG</entry>
              <entry>System is unusable</entry>
            </row>
            <row>
              <entry>1</entry>
              <entry>ALERT</entry>
              <entry>Action must be taken immediately</entry>
            </row>
            <row>
              <entry>2</entry>
              <entry>CRIT</entry>
              <entry>Critical conditions</entry>
            </row>
            <row>
              <entry>3</entry>
              <entry>ERR</entry>
              <entry>Error conditions</entry>
            </row>
            <row>
              <entry>4</entry>
              <entry>WARNING</entry>
              <entry>Warning conditions</entry>
            </row>
            <row>
              <entry>5</entry>
              <entry>NOTICE</entry>
              <entry>Normal but signification condition</entry>
            </row>
            <row>
              <entry>6</entry>
              <entry>INFO</entry>
              <entry>Informational</entry>
            </row>
            <row>
              <entry>7</entry>
              <entry>DEBUG</entry>
              <entry>Debug-level messages</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <!-- 
  $Id: jetfix.xml,v 1.1.1.1 2004/09/09 10:45:24 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_jetfix">
      <info>
        <title>ODBC to Jet Data Type Mapping</title>
        <keywordset>
          <keyword>Jet Engine</keyword>
          <keyword>Jetfix</keyword>
          <keyword>Data type mapping</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_jetoverview">
        <title>Overview</title>
        <para>When linking to a remote table, Microsoft Jet calls the ODBC SQLColumns 
function to gather information on the fields in the table. The information 
returned by SQLColumns determines how the data type of each field will be mapped 
to a Microsoft Jet data type.</para>
        <para>Jet uses the <emphasis>fSqlType</emphasis>, <emphasis>lPrecision</emphasis>,
and <emphasis>wScale</emphasis> values to 
determine an appropriate local data type, on a field-by-field basis, and uses 
that data type to represent the remote data in a linked table. Each time 
Microsoft Jet executes an action or parameter query against the remote data 
source, the information stored in the linked table is used to ensure that ODBC 
calls are made with a valid ODBC data type.</para>
        <para>The Jet Engine's mapping of the ODBC SQL_DECIMAL and SQL_NUMERIC types is 
detailed below. The mapping of these column types is problematic when the 
precision of a column is greater than 15. Under these circumstances Jet maps the 
column to the Jet Text type. This is done so as not to lose precision, since the 
maximum precision of the Jet numeric types is 15. An unfortunate consequence of 
mapping to the Text type is that the data is no longer recognised as being 
numeric.</para>
        <para>To overcome this limitation, the Jetfix switch (+jetfix) changes the ODBC type returned 
by SQLColumns for native database column types which would normally be reported 
as SQL_DECIMAL or SQL_NUMERIC. These might, for example, be MONEY, DECIMAL or 
NUMERIC columns in the remote table. With Jetfix enabled, these columns are 
typically reported as SQL_DOUBLE; which Jet always maps to Number (Double). As a 
result, Jet recognises the data as numeric, albeit with a possible loss of 
precision, depending on the actual data values.</para>
      </section>
      <section xml:id="mt_jetmap">
        <title>ODBC to Jet Data Type Mapping</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>ODBC to Jet Data Type Mapping performed by Jet Engine</title>
          <tgroup align="char" charoff="50" char="." cols="5">
            <colspec colname="otype"/>
            <colspec colname="precision"/>
            <colspec colname="scale"/>
            <colspec colname="jettype"/>
            <colspec colname="notes"/>
            <spanspec spanname="otypespan" namest="otype" nameend="scale" align="center"/>
            <thead>
              <row>
                <entry spanname="otypespan">ODBC Data Type</entry>
                <entry morerows="1" valign="bottom">Jet Data Type</entry>
                <entry morerows="1" valign="bottom">Notes</entry>
              </row>
              <row>
                <entry>Type</entry>
                <entry>Precision p</entry>
                <entry>Scale s</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry morerows="6">
                  <para>SQL_DECIMAL</para>
                  <para>SQL_NUMERIC</para>
                </entry>
                <entry>p &lt;= 4</entry>
                <entry>s = 0</entry>
                <entry>Number (Integer)</entry>
                <entry/>
              </row>
              <row>
                <entry>p &lt;= 9</entry>
                <entry>s = 0</entry>
                <entry>Number (Long Integer)</entry>
                <entry/>
              </row>
              <row>
                <entry>p &lt;= 15</entry>
                <entry>0 &lt;= s &lt;=4</entry>
                <entry>Number (Double)</entry>
                <entry/>
              </row>
              <row>
                <entry>p &lt;= 15?</entry>
                <entry>s &gt; 4</entry>
                <entry>Number (Double)</entry>
                <entry>"ODBC to Jet Data Type Mapping" document unclear here.</entry>
              </row>
              <row>
                <entry>p = 19</entry>
                <entry>s = 4</entry>
                <entry>Currency</entry>
                <entry>MS SQL Server only</entry>
              </row>
              <row>
                <entry>p = 10</entry>
                <entry>s = 4</entry>
                <entry>Currency</entry>
                <entry>MS SQL Server only</entry>
              </row>
              <row>
                <entry>p &gt; 15</entry>
                <entry>s irrelevant</entry>
                <entry>Text</entry>
                <entry>Not documented. Based on testing.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The Jet Data Type is a property setting available
in the table Design view.</para>
      </section>
      <section xml:id="mt_jetranges">
        <title>Jet Data Type Ranges</title>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>Jet Data Type Ranges</title>
          <tgroup align="char" charoff="50" char="." cols="2">
            <colspec colwidth="20pc"/>
            <thead>
              <row>
                <entry>Jet Data Type</entry>
                <entry>Range</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Integer</entry>
                <entry> 32,768  32,767</entry>
              </row>
              <row>
                <entry>Long Integer</entry>
                <entry> 2,147,483,648  2,147,483,647</entry>
              </row>
              <row>
                <entry>Double</entry>
                <entry>-1.8E+308  -1.8E-308, 1.8E-308  1.8E+308</entry>
              </row>
              <row>
                <entry>Currency</entry>
                <entry> 922,337,203,685,477.5808  922,337,203,685,477.5807</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_jetref">
        <title>References</title>
        <para>See the following articles from Microsoft:</para>
        <itemizedlist>
          <listitem>
            <para>Knowledge base article KB214854,
"Improved ODBC DataType Mappings with Jet 4.0" on the

            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://support.microsoft.com/">Microsoft Support Website</link>
.</para>
          </listitem>
          <listitem>
            <para>See Chapter 9 "Developing Client/Server Application" of
Microsoft Jet Database Engine Programmer's Guide, Second Edition. 
Redmond, WA: Microsoft Press, 1997.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="mt_jetinf">
        <title>Informix Jet Support</title>
        <section xml:id="mt_jetinftest">
          <title>Informix Jetfix Testing</title>
          <para>To verify the effect of the +jetfix switch, two tables were created and then
linked to from Access, once with +jetfix enabled, and once with +jetfix disabled.
The first table contained five MONEY columns of various precisions and scales.
The second table was identical except that it used DECIMAL instead of MONEY
columns. The resulting Jet data type mappings as shown in the 'Table Design'
view are detailed below:</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Informix ODBC to Jet Data Type Mapping</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec colname="tabledef" colwidth="47pc"/>
              <colspec colname="jetoff"/>
              <colspec colname="jeton"/>
              <spanspec spanname="jetoffon" namest="jetoff" nameend="jeton" align="center"/>
              <thead>
                <row>
                  <entry morerows="1" valign="bottom">
                    <para>Informix table definition:</para>
                    <para>create table CBTEST (&lt;column defs&gt;)</para>
                  </entry>
                  <entry spanname="jetonoff">Jet Type Mappings</entry>
                </row>
                <row>
                  <entry>Jetfix off</entry>
                  <entry>Jetfix on</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>col1 {MONEY| DECIMAL} (14, 4)</entry>
                  <entry>Number (Double)</entry>
                  <entry>Number (Double)</entry>
                </row>
                <row>
                  <entry>col2 {MONEY| DECIMAL} (14, 5)</entry>
                  <entry>Number (Double)</entry>
                  <entry>Number (Double)</entry>
                </row>
                <row>
                  <entry>col3 {MONEY| DECIMAL} (16, 0)</entry>
                  <entry>Text</entry>
                  <entry>Number (Double)</entry>
                </row>
                <row>
                  <entry>col4 {MONEY| DECIMAL} (16, 4)</entry>
                  <entry>Text</entry>
                  <entry>Number (Double)</entry>
                </row>
                <row>
                  <entry>col5 {MONEY| DECIMAL} (16, 5)</entry>
                  <entry>Text</entry>
                  <entry>Number (Double)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="mt_jetinfnum">
          <title>OpenLink Informix Agent  Numeric Data type Mappings</title>
          <para>The following table details how the Informix agent fetches numeric data
from Informix. The SQL type reported for a SELECT column varies depending on
the native Informix type of the column, and its precision and scale. The
OpenLink C type used to fetch the data is also shown, together with the effect
of the JetFix command line switch.</para>
          <para>Changes to the type mappings required to implement the +jetfix option
are shown in <computeroutput>italics</computeroutput>.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Informix Agent  Numeric Data type Mappings</title>
            <tgroup align="char" charoff="50" char="." cols="6">
              <thead>
                <row>
                  <entry>Informix Type</entry>
                  <entry>Scale (s)</entry>
                  <entry>
                    <para>Decimal Precision (p)</para>
                    <para>Range (r)</para>
                  </entry>
                  <entry>JetFix</entry>
                  <entry>SQL Type</entry>
                  <entry>
                    <para>OpenLink Fetch Type</para>
                    <para>CTYPE_xxx</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>FLOAT [(n)] {1}</para>
                    <para>Synonyms:</para>
                    <para>DOUBLE PRECISION</para>
                  </entry>
                  <entry>NA</entry>
                  <entry>
                    <para>p &lt;= 16</para>
                    <para>r = 1.7E308 (15 digits precision)</para>
                  </entry>
                  <entry>NA</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64</entry>
                </row>
                <row>
                  <entry morerows="1">
                    <para>DECIMAL</para>
                    <para>DECIMAL (p)</para>
                    <para>DECIMAL (p,s)</para>
                    <para>Synonyms:</para>
                    <para>NUMERIC</para>
                  </entry>
                  <entry morerows="1">
                    <para>NA</para>
                    <para>NA</para>
                  </entry>
                  <entry morerows="1">
                    <para>p = 16</para>
                    <para>p &lt;= 32</para>
                    <para>p &lt;= 32</para>
                    <para>r = 1E+124  1E-130 ..</para>
                  </entry>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR</entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>ON</computeroutput>
                  </entry>
                  <entry>
                    <computeroutput>SQL_DOUBLE</computeroutput>
                  </entry>
                  <entry><computeroutput>FLT64</computeroutput> {2}</entry>
                </row>
                <row>
                  <entry>
                    <para>INTEGER</para>
                    <para>Synonymns:</para>
                    <para>INT</para>
                  </entry>
                  <entry>s = 0</entry>
                  <entry>
                    <para>p &lt;= 9</para>
                    <para>r = -2,147,483,648 to +2,147,483,647</para>
                  </entry>
                  <entry>NA</entry>
                  <entry>SQL_INTEGER</entry>
                  <entry>SGN32</entry>
                </row>
                <row>
                  <entry morerows="1">
                    <para>MONEY</para>
                    <para>MONEY(p)</para>
                    <para>MONEY (p,s)</para>
                  </entry>
                  <entry morerows="1">
                    <para>s = 2</para>
                    <para>s = 2</para>
                  </entry>
                  <entry morerows="1">
                    <para>p = 16</para>
                    <para>p &lt;= 32</para>
                    <para>p &lt;=32</para>
                    <para>r = 1E(p-s) - 1E(-s)</para>
                  </entry>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR</entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>ON</computeroutput>
                  </entry>
                  <entry>
                    <computeroutput>SQL_DOUBLE</computeroutput>
                  </entry>
                  <entry><computeroutput>FLT64</computeroutput> {2}</entry>
                </row>
                <row>
                  <entry>
                    <para>SMALLFLOAT</para>
                    <para>Synonyms:</para>
                    <para>REAL</para>
                  </entry>
                  <entry>NA</entry>
                  <entry>r =3.4E38</entry>
                  <entry>NA</entry>
                  <entry>SQL_REAL</entry>
                  <entry>FLT32</entry>
                </row>
                <row>
                  <entry>SMALLINT</entry>
                  <entry>s = 0</entry>
                  <entry>
                    <para>p = 5</para>
                    <para>r = -32,768 to +32,767</para>
                  </entry>
                  <entry>NA</entry>
                  <entry>SQL_SMALLINT</entry>
                  <entry>SGN16</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <itemizedlist>
            <listitem>
              <para>{1} Informix SQL ignores the specified float precision.</para>
            </listitem>
            <listitem>
              <para>{2} Possible loss of precision.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="mt_jetinfctype">
          <title>Precision of OpenLink C Types</title>
          <para>The choice of OpenLink C type used to fetch a numeric value is determined
by the maximum precision supported by the type. If a numeric type exists which
can represent the data to be fetched, without loss of precision, then this is
used as the preferred fetch type. If a numeric type capable of supporting the
required precision does not exist, then the data is fetched in character form,
unless the JetFix switch is on. In this case, the data is fetched using the
CTYPE_FLT64 fetch type. This type has sufficient range to store the maximum
numeric values supported by Informix, but its use may result in a loss of
precision, if the precision of the data to be fetched exceeds 15 decimal
digits.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Precision of OpenLink C Types</title>
            <tgroup align="char" charoff="50" char="." cols="4">
              <thead>
                <row>
                  <entry>OpenLink C Type CTYPE_xxx</entry>
                  <entry>Equivalent built in C type (32bit processor)</entry>
                  <entry>Range</entry>
                  <entry>Can hold all numbers of precision &lt;= p decimal digits</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>SGN8</entry>
                  <entry>signed char</entry>
                  <entry>-128127</entry>
                  <entry>p = 2</entry>
                </row>
                <row>
                  <entry>SGN16</entry>
                  <entry>short</entry>
                  <entry>-3276832767</entry>
                  <entry>p = 4</entry>
                </row>
                <row>
                  <entry>FLT32</entry>
                  <entry>float</entry>
                  <entry>3.4E38 (6 digits precision)</entry>
                  <entry>p = 6</entry>
                </row>
                <row>
                  <entry>SGN32</entry>
                  <entry>long</entry>
                  <entry>-2,147,483,6482,147,483,647</entry>
                  <entry>p = 9</entry>
                </row>
                <row>
                  <entry>FLT64</entry>
                  <entry>double</entry>
                  <entry>1.7 E308 (15 digits precision)</entry>
                  <entry>p = 15</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
      <section xml:id="mt_jetora">
        <title>Oracle Jet Support</title>
        <section xml:id="mt_jetoramap">
          <title>OpenLink Oracle Agent  Numeric Data type Mappings</title>
          <para>The following table details how the Oracle agent fetches numeric data
from Oracle. The SQL type reported for a SELECT column varies depending on the
native Oracle type of the column, and its precision and scale. The OpenLink C
type used to fetch the data is also shown, together with the effect of the
JetFix command line switch.</para>
          <para>Changes to the type mappings are shown in the table as <computeroutput>italics</computeroutput>.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Informix ODBC to Jet Data Type Mapping</title>
            <tgroup align="char" charoff="50" char="." cols="6">
              <thead>
                <row>
                  <entry>Oracle Type</entry>
                  <entry>Scale (s)</entry>
                  <entry>Decimal Precision (p)</entry>
                  <entry>JetFix</entry>
                  <entry>SQL Type</entry>
                  <entry>OpenLink Fetch Type CTYPE_xxx</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry morerows="2">FLOAT (b)</entry>
                  <entry morerows="2">NA</entry>
                  <entry>
                    <para>p &lt;= 15</para>
                    <para>(b &lt;= 50) {1}</para>
                  </entry>
                  <entry>NA</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64</entry>
                </row>
                <row>
                  <entry morerows="1">
                    <para>15 &lt; p &lt; 38</para>
                    <para>(50 &lt; b &lt; 126)</para>
                  </entry>
                  <entry>ON</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64 {2}</entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR16</entry>
                </row>
                <row>
                  <entry morerows="1">FLOAT {3} , NUMBER {4}</entry>
                  <entry morerows="1">NA</entry>
                  <entry morerows="1">p = 38</entry>
                  <entry>ON</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64 {2}</entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR16</entry>
                </row>
                <row>
                  <entry morerows="3">NUMBER (p,s)</entry>
                  <entry morerows="3">s &lt;&gt; 0</entry>
                  <entry morerows="1">p &lt;= 15</entry>
                  <entry>ON</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64</entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR16</entry>
                </row>
                <row>
                  <entry morerows="1">p &gt; 15</entry>
                  <entry>ON</entry>
                  <entry>
                    <para>SQL_DECIMAL</para>
                    <para>
                      <computeroutput>SQL_DOUBLE</computeroutput>
                    </para>
                  </entry>
                  <entry>
                    <para>VCHR16</para>
                    <para><computeroutput>FLT64</computeroutput> {2}?</para>
                  </entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR16</entry>
                </row>
                <row>
                  <entry morerows="1">Calculated field</entry>
                  <entry morerows="1">s = 0</entry>
                  <entry morerows="1">p = 0 {5}</entry>
                  <entry>ON</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64</entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR16</entry>
                </row>
                <row>
                  <entry morerows="6">NUMBER (p)</entry>
                  <entry morerows="6">s = 0</entry>
                  <entry>0 &lt; p &lt;= 2</entry>
                  <entry>NA</entry>
                  <entry>SQL_TINYINT</entry>
                  <entry>SGN8</entry>
                </row>
                <row>
                  <entry>2 &lt; p &lt;= 4</entry>
                  <entry>NA</entry>
                  <entry>SQL_SMALLINT</entry>
                  <entry>SGN16</entry>
                </row>
                <row>
                  <entry>4 &lt; p &lt;= 9</entry>
                  <entry>NA</entry>
                  <entry>SQL_INTEGER</entry>
                  <entry>SGN32</entry>
                </row>
                <row>
                  <entry morerows="1">9 &lt; p &lt;= 15</entry>
                  <entry>ON</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>
                    <para>VCHR16</para>
                    <para>
                      <computeroutput>FLT64</computeroutput>
                    </para>
                  </entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>
                    <para>SQL_DOUBLE</para>
                    <para>
                      <computeroutput>SQL_DECIMAL</computeroutput>
                    </para>
                  </entry>
                  <entry>VCHR16</entry>
                </row>
                <row>
                  <entry morerows="1">15 &lt; p &lt;= 38 {6}</entry>
                  <entry>ON</entry>
                  <entry>SQL_DOUBLE</entry>
                  <entry>FLT64 {2}</entry>
                </row>
                <row>
                  <entry>OFF</entry>
                  <entry>SQL_DECIMAL</entry>
                  <entry>VCHR16</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>{Notes}:</para>
          <itemizedlist>
            <listitem>
              <para>FLOAT(b) specifies a floating point number with binary precision b.
The precision can range from 1 to 126. To convert from binary to decimal
precision, multiply b by 0.30103.</para>
            </listitem>
            <listitem>
              <para>Possible loss of precision</para>
            </listitem>
            <listitem>
              <para>FLOAT specifies a floating point number with decimal precision 38,
or a binary precision of 126.</para>
            </listitem>
            <listitem>
              <para>NUMBER specifies a floating point number with decimal precision = 38.</para>
            </listitem>
            <listitem>
              <para>Oracle appears to return s=0, p=0 for a calculated field</para>
            </listitem>
            <listitem>
              <para>Oracle permits a maximum precision of 38.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="mt_jetoractype">
          <title>Precision of OpenLink C Types</title>
          <para>The choice of OpenLink C type used to fetch a numeric value is determined
by the maximum precision supported by the type. If a numeric type exists which
can represent the data to be fetched, without loss of precision, then this is
used as the preferred fetch type. If a numeric type capable of supporting the
required precision does not exist, then the data is fetched in character form,
unless the JetFix switch is on. In this case, the data is fetched using the
CTYPE_FLT64 fetch type. This type has sufficient range to store the maximum
numeric values supported by Oracle, but its use may result in a loss of
precision, if the precision of the data to be fetched exceeds 15 decimal
digits.</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Precision of OpenLink Oracle C Types</title>
            <tgroup align="char" charoff="50" char="." cols="4">
              <thead>
                <row>
                  <entry>OpenLink C Type CTYPE_xxx</entry>
                  <entry>Equivalent built in C type (32 bit processor)</entry>
                  <entry>Range</entry>
                  <entry>Can hold all numbers of precision &lt;= p decimal digits</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>SGN8</entry>
                  <entry>signed char</entry>
                  <entry>-128127</entry>
                  <entry>p = 2</entry>
                </row>
                <row>
                  <entry>SGN16</entry>
                  <entry>short</entry>
                  <entry>-3276832767</entry>
                  <entry>p = 4</entry>
                </row>
                <row>
                  <entry>SGN32</entry>
                  <entry>long</entry>
                  <entry>-2,147,483,6482,147,483,647</entry>
                  <entry>p = 9</entry>
                </row>
                <row>
                  <entry>FLT64</entry>
                  <entry>double</entry>
                  <entry>1.7 E308 (15 digits precision)</entry>
                  <entry>p = 15</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
      </section>
    </section>

    <!-- 
  $Id: connectopts.xml,v 1.1.1.1 2004/09/09 10:45:20 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
    <section xml:id="mt_sql2kconnectopts">
      <info>
        <title>SQL Server 2000  Connection Options</title>
        <keywordset>
          <keyword>ODBC Driver SQL Server</keyword>
          <keyword>Features</keyword>
          <keyword>Database support; Oracle; SQL Server; DB2; Informix; Sybase; Progress</keyword>
        </keywordset>
      </info>
      <section xml:id="mt_sql2kopts">
        <title>Connection Option Parameters</title>
        <para>When configuring an OpenLink SQL Server 2000 multi-tier Agent
 (sql2k_[sm]v[.exe] only and not sql_[sm]v[.exe]), the
following keywords and values may be entered in the
<emphasis>Connection Options</emphasis> section of the entry for the agent in
the Request Broker configuration file (oplrqb.ini).
All are optional.</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>  </title>
          <tgroup align="char" charoff="50" char="." cols="4">
            <colspec align="center" colnum="1" colwidth="20pc"/>
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Keyword</entry>
                <entry>Value(s)</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>-A</entry>
                <entry>ADDRESS</entry>
                <entry>Network address of the server which is running an instance of SQL Server.</entry>
                <entry>Address is usually the network name of the server, but can be other
  names such as a pipe, or a TCP/IP port and socket address.</entry>
              </row>
              <row>
                <entry>-B</entry>
                <entry>FALLBACK</entry>
                <entry>
                  <para>Yes (default)</para>
                  <para>No</para>
                  <para>Applies to SQL Server 6.5 only.</para>
                </entry>
                <entry>When yes, instructs the driver to attempt connection to a fallback
  server if connection to a primary server fails. When no, no attempt at a
  fallback connection is made. This option applies only to standby servers. It
  does not apply to a virtual server in a cluster / failover configuration.</entry>
              </row>
              <row>
                <entry>-C</entry>
                <entry>AUTOTRANSLATE</entry>
                <entry>
                  <para>Yes (default)</para>
                  <para>No</para>
                </entry>
                <entry>When yes, ANSI character strings sent between the client and server
  are translated by converting through Unicode to minimize problems in
  matching extended characters between the code pages on the client and
  the server.</entry>
              </row>
              <row>
                <entry>-D</entry>
                <entry>DATABASE</entry>
                <entry>Database Name</entry>
                <entry>The name of the database which will be the default database for
  the connection. Note however, that for OpenLink Agents and Single-tier
  Drivers, this value is normally entered into a separate control on the
  Configuration module. If this control contains a name, entering this option
  as a connection option also could lead to the attempt to establish a
  connection being rejected.</entry>
              </row>
              <row>
                <entry>-E</entry>
                <entry>QUERYLOGFILE</entry>
                <entry>Full path, name and extension of the log file.</entry>
                <entry>This option applies only when Option O (QUERYLOG_ON) is set to
  <emphasis>yes</emphasis>. This is the file to which data for long-running
  queries is saved.</entry>
              </row>
              <row>
                <entry>-F</entry>
                <entry>ATTACHDBFILENAME</entry>
                <entry>Name of the primary file of an attachable database. Include the full
  path and escape any \ characters if using a C character string variable.
  Example: c:\\MyFolder\\MyDB.mdf</entry>
                <entry>
                  <para>This database is attached and becomes the default database for
  the connection. You must also specify the database name in the parameter,
  DATABASE. However, see above for the Database option, -D.</para>
                  <para>If the database was previously attached, SQL Server will not reattach
  it; it will use the attached database as the default for the connection.</para>
                </entry>
              </row>
              <row>
                <entry>-G</entry>
                <entry>QUERYLOGTIME</entry>
                <entry>Numeric character string</entry>
                <entry>Applies only when Option O (QUERYLOG_ON) is set to
  <emphasis>yes</emphasis>. This specifies the threshold (in milliseconds)
  for logging long-running queries. Any query that does not get a response
  within this time is written to the long-running query log file (which is
  defined by the Option, -E, QUERYLOGFILE).</entry>
              </row>
              <row>
                <entry>-H</entry>
                <entry>SERVER</entry>
                <entry>Server Name</entry>
                <entry>Name of a server which is running an instance of SQL Server on the
  network. By default, this is <emphasis>local</emphasis>.</entry>
              </row>
              <row>
                <entry>-L</entry>
                <entry>LANGUAGE</entry>
                <entry>SQL Server language name.</entry>
                <entry>SQL Server language name. SQL Server can store messages for multiple
  languages in sysmessages. If connecting to a SQL Server with multiple
  languages, Language specifies which set of messages are used for the
  connection.</entry>
              </row>
              <row>
                <entry>-N</entry>
                <entry>NETWORK</entry>
                <entry>Name of a network library dynamic-link library. E.g. dbnmpntw</entry>
                <entry>The name need not include the path and must not include the .dll
  file name extension.</entry>
              </row>
              <row>
                <entry>-O</entry>
                <entry>QUERYLOG_ON</entry>
                <entry>
                  <para>Yes</para>
                  <para>No (default)</para>
                </entry>
                <entry>Enables or disables logging long-running query data on the
  connection.</entry>
              </row>
              <row>
                <entry>-Q</entry>
                <entry>QUOTEDID</entry>
                <entry>
                  <para>Yes (default)</para>
                  <para>No</para>
                </entry>
                <entry>When yes, ,the SQL-92 rules regarding the use of quotation marks in
  SQL statements are applied. When no, the legacy Transact-SQL rules apply.</entry>
              </row>
              <row>
                <entry>-R</entry>
                <entry>REGIONAL</entry>
                <entry>
                  <para>Yes</para>
                  <para>No (default)</para>
                </entry>
                <entry>When yes, client settings are used when converting currency, date,
  and time data to character data. When no, ODBC standard strings are used to
  represent currency, date, and time data that is converted to string data.</entry>
              </row>
              <row>
                <entry>-S</entry>
                <entry>STATSLOG_ON</entry>
                <entry>
                  <para>Yes</para>
                  <para>No (default)</para>
                </entry>
                <entry>When set to <emphasis>yes</emphasis>, SQL Server ODBC driver
  performance data is captured.</entry>
              </row>
              <row>
                <entry>-T</entry>
                <entry>TRUSTEDCONNECTION</entry>
                <entry>
                  <para>Yes</para>
                  <para>No (default)</para>
                </entry>
                <entry>
                  <para>When yes, Windows Authentication Mode is used for login
  validation. I.e. no User ID or Password need be supplied.</para>
                  <para>When no, a User ID and password must be supplied.</para>
                </entry>
              </row>
              <row>
                <entry>-U</entry>
                <entry>USEPROCFORPREPARE</entry>
                <entry>
                  <para>0 (default)</para>
                  <para>1</para>
                  <para>2</para>
                  <para>Applies to SQL Server 6.5 only.</para>
                </entry>
                <entry>
                  <para>When 0, the SQL Server ODBC driver does not create temporary stored
   procedures for SQLPrepare.
   </para>
                  <para>When 1, instructs the SQL Server ODBC driver to create temporary
   stored procedures when statements are prepared with SQLPrepare. The
   temporary stored procedures are not dropped until the connection is broken. 
   </para>
                  <para>When 2, the SQL Server ODBC driver creates temporary stored
   procedures for SQLPrepare, but only one procedure is created per statement
   handle and the procedure is dropped when the statement handle becomes
   invalid or a new SQL statement is prepared.
   </para>
                </entry>
              </row>
              <row>
                <entry>-W</entry>
                <entry>ANSINPW</entry>
                <entry>
                  <para>Yes (default)</para>
                  <para>No</para>
                </entry>
                <entry>When yes, the driver uses ANSI-defined behaviors for handling NULL
  comparisons, character data padding, warnings, and NULL concatenation.
  When no, ANSI defined behaviors are not exposed.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section xml:id="mt_sql2kentry">
        <title>Entry Format</title>
        <section xml:id="mt_sql2kodbcad">
          <title>ODBC Administrator</title>
          <para>Options should be entered into the ConnectOptions control in the
format:</para>
          <screen><![CDATA[-<OptionLetter1> value1 -<OptionLetter2> value2 etc
e.g.
-C no L English]]></screen>
          <para>See the table above for a list of available option letters.</para>
        </section>
        <section xml:id="mt_sql2koplrqb">
          <title>Oplrqb.ini Settings</title>
          <para>Connection Options are entered following the
<emphasis>ConnectOptions</emphasis> keyword. Options may be entered in
the same format as in the ODBC Configuration dialog, using key letters
as above for example:</para>
          <screen><![CDATA[ConnectOptions = {-c no l English}]]></screen>
          <para>Surrounding braces ({ and }) may be used but are not necessary.</para>
          <para>Alternately, the full keywords may be used. In this case, they
should be entered in the format:</para>
          <screen><![CDATA[ConnectOptions = {Option1=value1;Option2=value2;etc}]]></screen>
          <para>Semicolons should be used to separate items in the list. Surrounding
braces ({ and }) may be used but are not necessary. If surrounding
braces are used, any text outside the braces will be discarded. A trailing
semicolon is not necessary and ought not to be used, but should not cause
fatal errors if it is used.</para>
        </section>
        <section xml:id="mt_sql2kgeneral">
          <title>General</title>
          <para>Items may be entered into the list in any order. They are not
case-sensitive, so upper case or lower case or a mixture of both can be used
(though this may depend on the SQL Server itself).</para>
          <para>If no option key letters or keys are used, the Agent will assume that
the complete ConnectOptions entry is the name of the server running the SQL
Server database i.e. it will assume it to be a value for the keyword
<emphasis>SERVER</emphasis>. See the notes for this keyword in the table above.</para>
        </section>
      </section>
      <section xml:id="mt_sql2kkeywords">
        <title>Disallowed Keywords</title>
        <para>The following Keywords should not be added to the ConnectOptions entry,
as they are set by the Agent Configuration Setup dialog, or are applied
automatically by the Request Broker:</para>
        <simplelist type="vert">
          <member>APP</member>
          <member>DATABASE (see below)</member>
          <member>DRIVER</member>
          <member>DSN</member>
          <member>FILEDSN</member>
          <member>PWD</member>
          <member>UID (see below)</member>
        </simplelist>
        <para>If  any of the above Keywords are used, the agent will probably fail to
log on to the Database server, as duplicate Connect Options may have been
supplied.</para>
        <para>Note: It is possible to add <emphasis>DATABASE=</emphasis> and
<emphasis>UID=</emphasis> entries, provided that the Database:Name and
Database:Username edit controls in the Agent Configuration dialog are left
blank. Note the comments for the keyword, <emphasis>TrustedConnection</emphasis>
above, which affects the handling of the UID keyword.</para>
        <para>The OpenLink SQL2000 agent does not perform any consistency or validity
checking on the ConnectOptions entry, and passes the Connection options as
entered to the SQL Server. If invalid keywords or values, or unreadable
entries are supplied, the SQL Server may reject the login.</para>
        <para>The exception is the case where the ConnectOptions entry contains no
recognizable entries, in which case it is assumed to be the value for the
keyword, <emphasis>SERVER</emphasis>. A completely corrupted ConnectOptions
entry will therefore probably try to connect to an invalid server.</para>
      </section>
    </section>
  </chapter>
</book>
