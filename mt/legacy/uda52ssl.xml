<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- 
  $Id: uda52ssl.xml,v 1.3 2005/02/28 14:07:54 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
<chapter id="uda52ssl" >
  <chapterinfo>
    <keywordset>
      <keyword>ODBC</keyword>
      <keyword>ODBC Driver</keyword>
      <keyword>ODBC Drivers</keyword>
      <keyword>SSL</keyword>
      <keyword>secure ODBC connection</keyword>
      <keyword>encrypted ODBC</keyword>
    </keywordset>
  </chapterinfo>
  <title>Securing a Multi-Tier connection using SSL</title>
  <abstract>
    <para>This document provides information on configuring OpenLink
Multi-Tier for use with SSL, both on the client and server sides. SSL,
implemented with <ulink url="http://www.openssl.org">OpenSSL</ulink>,
facilitates strong cryptographic encryption the whole network
communication layer.</para>
  </abstract>
  <sect1 id="ssloverview">
    <title>Overview</title>
    <para>As of version 5.2, OpenLink UDA now comes with optional support
for using <ulink url="http://www.openssl.org">OpenSSL</ulink> to
encrypt the data layer between generic client and request broker /
agent.</para>
    <para>Features of the SSL implementation:</para>
    <simplelist>
      <member>
secures connections to both the broker and all database agents
</member>
      <member>
encryption is optional, although it can be made mandatory
</member>
      <member>
the same connection endpoint endpoint (port) handles both encrypted and
non-encrypted clients
</member>
      <member>
fully backward-compatible
</member>
      <member>
per-agent certificates
</member>
      <member>
all changes are in the OpenLink communications layer: there is no need
to change any of the database agents to cater for SSL.
</member>
    </simplelist>
  </sect1>
  <sect1 id="sslimplementation">
    <title>Implementing SSL Encryption</title>
    <sect2 id="sslserverside">
      <title>Server-side Configuration for SSL</title>
      <para>In order to make use of this functionality, you need to create a
certificate on the server running the request broker. On Unix
platforms we have provided a bin/mkcert.sh script as part of the
installation. On other platforms you may have to run openssl by hand
or use another system to generate the PEM file (such as generating it
on a unix server and copying the files across). </para>
      <para>A sample run of the mkcert.sh script, showing the various
questions it asks to identify your organization, follows: </para>
      <programlisting>
<![CDATA[
bash$ cd /usr/openlink/bin/
bash$ ./mkcert.sh mykey
Checking OpenSSL: OpenSSL 0.9.7d 17 Mar 2004
Generating a 512 bit RSA private key
.++++++++++++
.......++++++++++++
writing new private key to 'mykey.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Host name (externally visible) [host.example.com]:purple
Organization (eg. company) [OpenLink Software]:
Organizational Unit [Research & Development]:Product Development
State or Province Name (full name) []:Surrey
Locality Name (eg. city) []:Croydon
Country Name (2 letter code) [US]:UK
1024 semi-random bytes loaded
Generating DH parameters, 512 bit long safe prime, generator 2
This is going to take a long time
..+........................+...........................+.......+...........
[]
.+.....++*++*++*++*++*++*
subject= /CN=purple/O=OpenLink Software/OU=Product Development/ST=Surrey/L=Croydon/C=UK
notBefore=Nov 12 10:43:14 2004 GMT
notAfter=Nov 10 10:43:14 2014 GMT
MD5 Fingerprint=E0:DB:53:E7:E7:68:21:53:1C:2B:1E:8E:D9:BF:25:F0
Created private key parameters in mykey.key
Created public key parameters in mykey.cer
bash$
]]>
</programlisting>
      <para>Having created the key-pair, you now need to tell the request
broker to use them. This requires the following lines to be present in
the rulebook (oplrqb.ini):
</para>
      <programlisting>
[Request Broker]
....
SSLKeyFile = mykey.pem
SSLRequired = No            
</programlisting>
      <para>The SSLKeyFile is the filename of the key you just created; to
deny connections without SSL, set SSLRequired=Yes instead.
</para>
      <para>You can also put these options in the individual database agent
sections, such that one key is used for e.g. Ingres, and another for
SQL Server, or one for your sales database and another for people
coming in from VPN IP#s (by editing the mapping rules to match on a
per-IP# basis). For example: 
</para>
      <programlisting>
<![CDATA[
[generic_sqlserver]
.....
SSLKeyFile = mykey-sqlserver.pem
SSLRequired = Yes                  ; All SQLServer connections
MUST use SSL]]>
</programlisting>
      <para>As an alternative to editing oplrqb.ini by hand, you can use the
web-based Administrator GUI, either the form or wizards, to set the
SSL Key File and SSL Required fields, thus: </para>
      <figure id="mtsslserverbrokerform" float="1">
        <title>
    Server-side SSL Configuration of Request Broker via Web Assistant
  </title>
        <graphic fileref="ssl-server-form.gif" format="gif"></graphic>
      </figure>
      <figure id="mtsslagentform" float="1">
        <title>Server-side SSL Configuration at the database agent level via
  Web Assistant Form</title>
        <graphic fileref="sslagent-www-form.gif" format="gif"></graphic>
      </figure>
    </sect2>
    <sect2 id="sslclientside">
      <title>Client-side Configuration for SSL</title>
      <sect3 id="sslclientwindows">
        <title>SSL Configuration for Windows Clients</title>
        <para>On the client, when you configure a new DSN there is now a
checkbox for &quot;secure connection&quot; adjacent to the username
and password. Checking this will invoke use of SSL on the server for
connections going through this DSN. This applies also to the web-based
DSN configuration utility.
</para>
        <figure id="mtsslwwwform" float="1">
          <title>Client-side SSL DSN Configuration via
  Web Assistant Form</title>
          <graphic fileref="mtssl-www-form.gif" format="gif"></graphic>
        </figure>
        <figure id="mtsslwwwwizard" float="1">
          <title>Client-side SSL DSN Configuration via
  Web Assistant Form</title>
          <graphic fileref="mtssl-www.gif" format="gif"></graphic>
        </figure>
        <figure id="mtsslagentform" float="1">
          <title>Client-side SSL DSN Configuration through native Windows 
  ODBC Administrator interface</title>
          <graphic fileref="mtssl.gif" format="gif"></graphic>
        </figure>
      </sect3>
      <sect3 id="sslclientjdbc">
        <title>SSL with JDBC Clients</title>
        <para>The Java JDBC classes make use of J2SSE from Sun: as such, SSL is
not supported with users of JDK1.1; it requires <ulink
              url="http://java.sun.com/products/jsse/index.jsp">a separate download
from Sun</ulink> for JDK1.2 and 1.3; and these classes come as
standard with JDK 1.4 and 1.5.</para>
        <para>An SSL connection can be made by specifying the /UseSSL
attribute in your JDBC connectstring, thus:</para>
        <programlisting>
jdbc:openlink://localhost:5001/SVT=SQLServer/Database=pubs/UseSSL/UID=sa/PWD=
java -classpath .;.\opljdbc3.jar -Djavax.net.ssl.trustStore=&lt;KeystoreFile&gt; sample
</programlisting>
        <para>where 'sample' is the name the JDBC Program. Note the use of the
keystore file which is a unique feature of the JSSE implmentation,
being the location where the certificate information is stored.</para>
        <para>Should the JSSE classes not be located the JDBC client will return an
error of the form:</para>
        <programlisting>
"You need to add JSSE to your CLASSPATH in order to make a SSL connection
java.sql.SQLException: [OpenLink][OPLJDBC2]Connection failed:
java.io.IOException: java.lang.NoClassDefFoundError:javax/net/ssl/SSLSocket"
</programlisting>
      </sect3>
    </sect2>
    <sect2 id="sslpossibleerrors">
      <title>Error Messages</title>
      <para>The introduction of SSL brings two new possible error messages
 to be seen at connect-time:</para>
      <simplelist>
        <member>IM600 (ER_SSL_NOT_IN_CLIENT) "SSL initialization failure":
this indicates that the client either has no SSL support built in, or
that the underlying SSL library failed to initialize properly.
</member>
        <member>
IM601 (ER_SSL_NOT_IN_SERVER) "The server does not support SSL": this
indicates that the server has no SSL support built in, or that the SSL
library failed to initialize properly. It could also mean that the
required certificate could not be loaded on the server.  
</member>
      </simplelist>
    </sect2>
  </sect1>
</chapter>
