<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- 
  $Id: udbcsdk.xml,v 1.1.1.1 2004/09/09 10:45:25 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
<chapter id="udbcsdk" >
  <title>UDBC Client Components SDK</title>
  <abstract>
    <para>UDBC is OpenLink's acronym for Universal DataBase Connectivity.  In 
    short, UDBC is the merge between the X/Open - SAG interface and the Microsoft 
    ODBC interface for client database applications.  UDBC was developed to 
    enable software engineers to rapidly develop database independent 
    applications without being concerned about issues like portability, network 
    programming and database specific interfacing problems.</para>
    <para>With UDBC it is possible to write database applications that are 
    written according to the X/Open standard, but this SDK also provides access 
    methods for the Microsoft ODBC programming interface.</para>
    <para>Unlike the Open Database Connectivity (ODBC) specification 
    UDBC does not include a separate Driver Manager Component, instead it provides 
    you with direct connectivity to backend databases. In some quarters UDBC is 
    actually seen as a Generic Native API to backend databases that adhere to the 
    X/open SQL CLI specification. </para>
    <para>ODBC and UDBC share identical APIs, thus applications that are written 
    to either specification are guaranteed a high degree of compatibility.</para>
    <para>UDBC is typically best suited for platforms that have no suitable 
    ODBC Driver Manager, hence typically implemented for Unix based platforms.  
    OpenLink may have ported iODBC to such platforms, which may provide an 
    alternative.  See: The <link linkend="iodbc">iODBC Driver Manager SDK</link> 
    Chapter.</para>
  </abstract>
<chapterinfo>
  <keywordset>
    <keyword>ODBC</keyword>
    <keyword>ODBC Driver</keyword>
    <keyword>ODBC Drivers</keyword>
    <keyword>UDBC</keyword>
    <keyword>UDBC SDK</keyword>
    <keyword>Development Kit</keyword>
  </keywordset>
</chapterinfo>
<sect1 id="udbcsdkinst"><title>Installation</title>
<sect1info>
  <keywordset>
    <keyword>ODBC Driver Unix</keyword>
    <keyword>UDBC Driver Unix</keyword>
  </keywordset>
</sect1info>
<para>The UDBC Client Components for UNIX comprise the following:</para>
  <simplelist>
    <member><emphasis>Generic UDBC Driver</emphasis> - A shared library 
    (libudbc.so) that provides database connectivity and data access services 
    to UDBC based applications - written using the UDBC SDK)</member>
    <member><emphasis>Sample UDBC Application</emphasis> - A simple program 
    that can be used to verify your UDBC installation and working environment.</member>
  </simplelist>
  <para>The term "Generic UDBC Driver" is applicable because the OpenLink 
  Multi-tier configuration uses one client driver library for all types of 
  database connectivity.  The server components provide the database independent 
  implementations that interface this one client component.</para>
  <para>The OpenLink UDBC Client Components for UNIX are contained within a 
  compressed TAR archive file in the format "XXuczzzz.taz", where  the "XX" 
  represents a two-letter platform-specific code.  In addition, the UDBC Data 
  Source Administrator and JDBC Samples are contained in a separate
  compressed TAR archive. These files are automatically presented to you by the 
  OpenLink Software Download wizard when you enter UNIX as your client 
  operating system.</para>
  <para>The steps that follow describe the installation process:</para>
  <orderedlist>
    <listitem>Move the "install.sh" and all downloaded *.taz" files to an 
    installation directory of your choice.</listitem>
    <listitem><para>Type in one of the following commands to extract the contents 
    of the compressed TAR archive files:</para>
<programlisting>
sh install.sh
</programlisting>
    <para>or</para>
<programlisting>
install.sh
</programlisting>
    <para>or</para>
<programlisting>
./install.sh
</programlisting>
    </listitem>
    <listitem><para>Setup your operating environment by executing the command:</para>
<programlisting>
. openlink.sh
</programlisting>
    <para>you can also place the entry in your ".profile" file.</para>
    </listitem>
    <listitem><para>Proceed to the configuration stage of this process.</para></listitem>
  </orderedlist>
</sect1>
<sect1 id="udbcsdkconf"><title>Configuration</title>
<sect1info>
  <keywordset>
    <keyword>ODBC Driver Configuration Unix</keyword>
    <keyword>UDBC Driver Configuration</keyword>
    <keyword>UDBC; Unix; Linux</keyword>
  </keywordset>
</sect1info>
  <para>UDBC, like ODBC, is based on the notion of logical references to
  database backends through the use of Data Source Names.  Under UDBC, these 
  are described as Universal Data Source Names (UDSNs) due to the cross data 
  access standard nature of these Data Source Names (they are usable by 
  OpenLink Drivers for ODBC and JDBC).</para>
  <para>The OpenLink Universal Data Access Driver Suite includes an HTTP 
  based utility called the OpenLink Admin Assistant that enables you create,
  configure, and manage UDSNs via a Web Browser.  Since this is HTTP based, you 
  can even do this remotely, security measures exist avoid unwanted 
  tampering.  The Admin Assistant provides a wizards and HTML forms based 
  user interfaces.</para>
  <para>You identify your UDSN file to UDBC Drivers via the Environment
  Variable "UDBCINI".  Your OpenLink UDBC SDK installation process will place
  a sample of this file in the 'doc' installation subdirectory.  The OpenLink 
  shell script ("openlink.sh") will look for the runtime copy of this file in 
  the 'bin' directory of your installation, and export it to the $UDBCINI 
  environment variable.  Manually, the $UDBCINI environment variable is set
  using the command:</para>
<programlisting>
UDBCINI=/usr/openlink/bin/udbc.ini ; export UDBCINI
</programlisting>
  <para>The above presumes that your OpenLink installation's base directory 
  is: /usr/openlink.  Use an appropriate directory in its place.</para>
  <para>In the sections that follow, a step-by guide with illustrative screen 
  shots demonstrate the use of the Admin Assistant for setting up UDSNs.</para>
  <para>In the examples below lets presume that we are trying to create a UNIX 
  based UDSN that will connect us to a Microsoft SQL Database on a Windows 
  95/98/NT/2000 Server.  The critical database connection and network information 
  for this setup (aka connection attributes) are as follows:</para>
  <simplelist>
    <member>Network alias of Windows 95/98/NT/2000 machine 
      running your OpenLink Server components: ntappserver</member>
    <member>Network Alias of Server machine running Microsoft SQL Server (also 
      the machine on to which you have installed the OpenLink Server Components 
      for Windows NT): pluto</member>
    <member>Microsoft SQL Server Database Name: pubs</member>
  </simplelist>
<sect2 id="WizardBasedUDSNs"><title>Wizard Based Configuration</title>
<orderedlist>
  <listitem><para>Start up the OpenLink Request Broker in order to make the web-based
  Admin Assistant available for use:</para>
<programlisting>bash$ oplrqb</programlisting>
  </listitem>
  <listitem><para>Open up your Internet Browser and then enter the following 
  URL: http://localhost:8000/ (note the OpenLink Web Assistant listens at port 
  8000 by default, this value is set at installation time).  Click on the 
  <emphasis>Client Components Administration</emphasis> hyperlink to expand 
  this menu option further, then <emphasis>Data Source Name Configuration</emphasis> 
  then click on the <emphasis>Edit Data Sources by Wizard</emphasis>.  Now Click 
  the <emphasis>Edit UDBC Data Sources</emphasis> hyperlink.</para>
  <figure id="image29" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image16.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>You will be presented with the actual UDBC Data Source 
  configuration wizard.  Click the <emphasis>Add</emphasis> button.</para>
  <figure id="image30" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image30.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Enter values into the <emphasis>Name</emphasis> and 
  <emphasis>Description</emphasis> fields as follows:</para>
  <formalpara><title>Name</title>
    <para>enter values that uniquely identify the DSN being created, our 
    example uses the name "SQL Server on NT" to indicate that this DSN will be 
    connecting you to a SQL Server database on an NT server.</para></formalpara>
  <formalpara><title>Description</title>
    <para>enter values that provide additional information that helps in 
    describing the purpose of the DSN that you are creating.</para></formalpara>
  <para>Once completed click on the <emphasis>Next</emphasis> button.</para>
  <figure id="image31" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image31.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Enter values into the <emphasis>Domain</emphasis>, 
  <emphasis>Hostname</emphasis>, and <emphasis>Port</emphasis> fields as follows:</para>
  <formalpara><title>Domain Type</title>
    <para>enter a value that identifies the type of OpenLink Agent that will 
    serve your ODBC client.</para></formalpara>
  <formalpara><title>Hostname</title>
    <para>enter a value that identifies the server machine running your OpenLink 
    Server Components.</para></formalpara>
  <formalpara><title>Port</title>
    <para>Enter the TCP port number of the Broker to contact.  This corresponds 
    to the Listen parameter on the target Broker.</para></formalpara>
  <figure id="image32" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image32.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Enter values into the <emphasis>Database Name</emphasis>, 
  <emphasis>Database Server</emphasis>, and <emphasis>User ID</emphasis> fields 
  as follows:</para>
  <formalpara><title>Database Name</title>
    <para>enter the name of an actual SQL Server database, in this case our 
    example uses the database "pubs"</para></formalpara>
  <formalpara><title>Database Server</title>
    <para>enter database server connection values for the database that your 
    are connecting to, in this case enter valid SQL Server database server 
    connection values (where "-s pluto" represent an actual SQL Server instance 
    currently available on your network).</para></formalpara>
  <formalpara><title>User ID</title>
    <para>enter a valid username for the database that you are connecting to, 
    you can leave this blank and be prompted for values at actual database 
    connect time.</para></formalpara>
  <para>Click on the <emphasis>Next</emphasis> button.</para>
  <figure id="image33" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image33.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Enter values into the <emphasis>Read-only</emphasis>, 
  <emphasis>Defer fetch</emphasis> and <emphasis>Row buffer size</emphasis> 
  fields as follows:</para>
  <formalpara><title>Read-only connection</title>
    <para>check this box if you require a read only session.</para></formalpara>
  <formalpara><title>Defer fetching of long data</title>
    <para>Check this box to defer the fetching of long data.  See the Release 
    Notes section for more details.</para></formalpara>
  <formalpara><title>Row Buffer Size</title>
    <para>enter a value that represents the number of records that you would 
    like your ODBC driver to retrieve during each network hop.  A network hop 
    represents the number of times your OpenLink ODBC send a message across the 
    network to retrieve records from your remote database server.  The feature 
    can be used to improve ODBC record retrieval performance.</para></formalpara>
  <para>Once completed click on the <emphasis>Next</emphasis> button.</para>
  <figure id="image34" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image34.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>You have now completed entering all the values that make up 
  your new UDBC DSN, these values are collectively known as your UDBC DSN 
  Attributes.  Click on the <emphasis>Save</emphasis> button in order to store 
  these values permanently on your hard disk.</para>
  <figure id="image35" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image35.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Click on the <emphasis>Test this DSN</emphasis> button, this 
  enables you to test and verify usability of the new UDBC DSN that you have 
  created.</para>
  <figure id="image36" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image36.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Click the <emphasis>Test</emphasis> button to actually commence 
  the UDBC DSN Test process, you will be presented with dialogs that indicate 
  success or failure at the end of this process.</para>
  <figure id="image37" float="1"><title>Wizard Based UDSN Configuration</title>
    <graphic fileref="image37.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Click on the <emphasis>exit</emphasis> button to exit the 
  UDBC DSN configuration wizard</para>
  </listitem>
</orderedlist>
</sect2>
<sect2 id="udbcformsdsnadmin"><title>Forms Based Configuration</title>
  <para>The OpenLink Admin assistant also allows the more experienced OpenLink 
  UDBC user to manage UDBC DSNs via a forms based interface.  Like the wizard 
  based approach this is done entirely from within your browser.  In the 
  sections that follow, a step by guide and illustrative screen shots are used 
  to demonstrate the process of creating the same UDBC DSN created in the prior 
  section using the Wizard approach.</para>
<orderedlist>
  <listitem><para>Enter the following URL into your Web Browser (if the Admin 
  Assistant is not already initialized):  http://localhost:8000/ You will be 
  presented with a screen similar to the one below.  Notice that the 
  <emphasis>Data Source Names(s) Settings</emphasis> and <emphasis>Edit Data 
  Sources By Form</emphasis> hyperlinks have been expanded.</para>
  <para>On the right side of the Admin Assistant pane is your start page for 
  configuring UDBC DSNs using the Forms approach.  This page presents a list 
  of currently configured UDBC DSNs on the machine "localhost" (your UNIX client 
  for this exercise).  Click on the <emphasis>Add</emphasis> hyperlink to 
  commence the process of creating a new UDBC DSN.</para>
  <figure id="image38" float="1"><title>Forms Based UDSN Configuration</title>
    <graphic fileref="image38.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Enter values into the fields presented on the UDBC DSN form 
  as follows:</para>
  <formalpara><title>Name</title>
    <para>enter values that uniquely identify the DSN being created, our example 
    uses the name "SQL Server on NT" to indicate that this DSN will be 
    connecting you to a SQL Server database on an NT server.</para></formalpara>
  <formalpara><title>Description</title>
    <para>enter values that provide additional information that helps in 
    describing the purpose of the DSN that you are creating.</para></formalpara>
  <formalpara><title>UserName</title>
    <para>enter a valid username for the database that you are connecting to, 
    you can leave this blank and be prompted for values at actual database 
    connect time.</para></formalpara>
  <formalpara><title>Password</title>
    <para>enter a default password to use, in most cases leave this blank and 
    be prompted for values at actual database connect time.</para></formalpara>
  <formalpara><title>Database Name</title>
    <para>enter the name of an actual SQL Server database.</para></formalpara>
  <formalpara><title>Read-only connection</title>
    <para>check this box if you require a read only session.</para></formalpara>
  <formalpara><title>No Login Dialog Box</title>
    <para>check this box if you do not want to be prompted by your UDBC Driver 
    for username and password dialog box at connect time.</para></formalpara>
  <formalpara><title>Defer fetching of long data</title>
    <para>Check this box to defer the fetching of long data.  See the Release 
    Notes section for more details.</para></formalpara>
  <formalpara><title>Database Server</title>
    <para>enter database server connection values for the database that your 
    are connecting to, in this case enter valid SQL Server database server 
    connection values (where "-s pluto" represent an actual SQL Server instance 
    currently available on your network).</para></formalpara>
  <formalpara><title>Type</title>
    <para>enter a value that identifies the type of OpenLink Agent that will 
    serve your UDBC client.</para></formalpara>
  <formalpara><title>Hostname</title>
    <para>enter a value that identifies the server machine running your 
    OpenLink Server Components.</para></formalpara>
  <formalpara><title>Port</title>
    <para>Enter the TCP port number of the Broker to contact.  This corresponds 
    to the Listen parameter on the target Broker.</para></formalpara>
  <formalpara><title>Row Buffer Size</title>
    <para>enter a value that represents the number of records that you would 
    like your UDBC driver to retrieve during each network hop.  A network hop 
    represents the number of times your OpenLink UDBC driver sends a message 
    across the network to retrieve records from your remote database server.  
    The feature can be used to improve UDBC record retrieval performance.</para></formalpara>
  <para>The screen shot below is a snapshot of the UDBC DSN, click on the 
  right-hand scroll bar to see all the fields described above.</para>
  <figure id="image39" float="1"><title>Forms Based UDSN Configuration</title>
    <graphic fileref="image39.gif" format="gif" /></figure>
  </listitem>
  <listitem><para>Click on the <emphasis>Add</emphasis> button at the foot of 
  the page to complete the creation of your new UDBC DSN</para>
  </listitem>
</orderedlist>
</sect2>
<sect2 id="udbcinifile"><title>The UDBCINI File</title>
  <para>The UDBC INI file is a simple Windows INI style file.  It is plain text 
  and contains sections, in square brackets, with entries as key = value pairs.  
  This file can be edited directly, but the HTTP based Admin Assistant 
  provides a graphical interface.</para>
  <para>The example below depicts the structure of a UDSN named "dsn_oracle7", 
  used to facilitate connections with an Oracle Database residing on a machine 
  named "mercury".</para>
<screen>
[dsn_oracle7]
Database      = ORCL
UserName      = scott
Password      = tiger
Host        = mercury
ServerType    = Oracle 7
FetchBufferSize   = 60
Description   = Oracle Database Connections
</screen>
<para>Your general OpenLink UDBC settings are configured within the "[UDBC]" 
section of your chosen UDSN file, an extract from this file is depicted below:</para>
<screen>
[UDBC]
;DebugFile      = /tmp/udbc.out ; Write client debugging output
[Communications]
ReceiveTimeout    = 120 ; max. time to complete a request
BrokerTimeout     = 30 ; max. time to wait for oplrqb
RetryTimeout    = 5 ; Retry time for oplrqb locating
SendSize      = 4096 ; RPC send buffer size
ReceiveSize     = 16000 ; RPC receive buffer size
ShowErrors    = Y ; Pass RPC errors to applications
DataEncryption  = N ; Encrypt outgoing data
</screen>
<para>It is highly recommended that you use the UDSN templates provided by your 
OpenLink UDBC SDK installation for your initial connection, as the OpenLink 
installer sets up the appropriate UDBC environment for you at installation 
time.</para>
<para>The table below describes each OpenLink UDBC attribute required for 
making a connection from your UDBC based application to your backend database 
engine.</para>
<table><title>The [UDBC] section for global UDBC settings</title>
 <tgroup>
  <thead>
   <row>
     <entry>[UDBC] Section Keys</entry>
     <entry>Default Value</entry>
     <entry>Corresponding Connect String option</entry>
     <entry>Description</entry></row>
  </thead>
  <tbody>
<row><entry><para>DebugFile</para></entry><entry><para>no debugging</para></entry><entry></entry>
<entry><para>When this variable contains a valid filename, the client
applications will write debugging information to that file. Do not use this
in the systemwide ini file (/etc/udbc.ini) This file will contain detailed
UDBC call tracing.</para></entry>
    </row>
</tbody></tgroup>
</table>
<table><title>The [Communications] section</title>
 <tgroup>
  <thead>
   <row>
     <entry>[Communications] Section Keys</entry>
     <entry>Default Value</entry>
     <entry>Corresponding Connect String option</entry>
     <entry>Description</entry></row>
  </thead>
  <tbody>
<row><entry><para>BrokerTimeout</para></entry><entry><para>30</para></entry><entry></entry>
<entry><para>The time (in secs) that the client application will wait for the
request broker (oplrqb) to accept or reject a database connection.</para></entry>
</row>
<row><entry><para>ReceiveTimeout</para></entry><entry><para>60</para></entry><entry></entry>
<entry><para>The time (in secs) that the client application will wait for a
database agent to finish a request.</para></entry>
</row>
<row><entry><para>PortMapTimeout</para></entry><entry><para>30</para></entry><entry></entry>
<entry><para>When using the ONC portmap or rpcbind name services, this is the
time (in secs) that the client application will wait for a reply from the
portmapper.</para></entry>
</row>
<row><entry><para>SendSize</para></entry><entry><para>4096</para></entry><entry></entry>
<entry><para>RPC send buffer size. A value of 0 will cause the application to
use the default value.</para></entry>
</row>
<row><entry><para>ReceiveSize</para></entry><entry><para>16000</para></entry><entry></entry>
<entry><para>RPC receive buffer size. A value of 0 will cause the application
to use the default value.</para></entry>
</row>
<row><entry><para>RetryTimeout</para></entry><entry><para>5</para></entry><entry></entry>
<entry><para>The amount of wait time (in secs) before the OpenLink ODBC client
attempts to re-execute a failed call. After each attempt this value is
doubled.</para>
<para>The life time of this value never exceeds the BrokerTimeout
during intial connection establishment, and never exceeds the ReceiveTimeout
when sessions have been established.</para></entry>
</row>
<row><entry><para>ShowErrors</para></entry><entry><para>Y</para></entry><entry></entry>
<entry><para>Pass RPC errors to applications.</para></entry>
</row>
<row><entry><para>DataEncryption</para></entry><entry><para>N</para></entry><entry></entry>
<entry><para>Encrypt outgoing data.</para></entry>
</row>
</tbody></tgroup>
</table>
<table><title>Sample data source section entry</title>
 <tgroup>
  <thead>
   <row>
     <entry>[DSN_name] DSN Section Keys</entry>
     <entry>Default Value</entry>
     <entry>Corresponding Connect String option</entry>
     <entry>Description</entry></row>
  </thead>
  <tbody>
<row><entry><para>Host</para></entry><entry></entry><entry><para>HOST=name</para></entry>
<entry><para>Name of host to contact (hostname or network address)</para></entry>
</row>
<row><entry><para>ServerType</para></entry><entry></entry><entry><para>SVT=type</para></entry>
<entry><para>Specify agent domain This is used by the broker to determine
which agent section to connect the client request to using mapping
rules.</para></entry>
</row>
<row><entry><para>ServerOptions</para></entry><entry></entry><entry></entry>
<entry><para>Server startup options specific to agent/database.</para></entry>
</row>
<row><entry><para>Database</para></entry><entry></entry><entry><para>DATABASE=db</para></entry>
<entry><para>Database to use. Agent/database specific.</para></entry>
</row>
<row><entry><para>Options</para></entry><entry></entry><entry><para>OPTIONS=opts</para></entry>
<entry><para>Database connect options. Agent/database specific.</para></entry>
</row>
<row><entry><para>UserName</para></entry><entry></entry><entry><para>UID=username</para></entry>
<entry><para>Username to connect as.</para></entry>
</row>
<row><entry></entry><entry></entry><entry><para>PWD=password</para></entry>
<entry><para>Password for user.</para></entry>
</row>
<row><entry><para>ReadOnly</para></entry><entry></entry>
<entry><para>READONLY=&lt;y|n&gt;</para></entry>
<entry><para>Specify Y(es) for read-only (ro) or N(o) for read-write (rw)
connections. Read only connections are sometimes faster, but can never modify
any database.</para></entry>
</row>
<row><entry><para>FetchBufferSize</para></entry><entry><para>5</para></entry>
<entry><para>FBS=&lt;value&gt;</para></entry>
<entry><para>Number of rows (records) to be fetched per call from database agent.
Values range from 1 to 99</para></entry>
</row>
<row><entry><para>Port</para></entry><entry><para>5000</para></entry>
<entry><para>PORT=&lt;value&gt;</para></entry>
<entry><para>TCP port number of the target server.</para></entry>
</row>
</tbody></tgroup>
</table>
</sect2>
</sect1>
<sect1 id="dev"><title>Developing UDBC Applications</title>
<sect1info>
  <keywordset>
    <keyword>UDBC Driver Applications</keyword>
    <keyword>UDBC</keyword>
    <keyword>UDBC Samples</keyword>
  </keywordset>
</sect1info>
  <para>This UDBC SDK only implements an interface for the 'C' programming 
  language.  To write a UDBC application, you must perform the following tasks:</para>
  <simplelist>
    <member>include the file "libudbc.h" in your 'C' program(s)</member>
    <member>link the application with the "libudbc.a" and the "librpc.a" libraries.</member>
  </simplelist>
  <para>Some UNIX systems also need -lsocket, -lnsl_s or both.</para>
  <para>A sample application is provided, to get users going with UDBC/ODBC, 
  called UDBCTEST/ODBCTEST.</para>
<sect2 id="udbcsdksrv"><title>UDBC Client to Server Mechanics</title>
  <para>When connecting to a database, the application sends the UDBC Driver a 
  connect string that contains the necessary parameters to complete the 
  database connection.</para>
  <para>When the connect string is empty, or a null pointer, the [Default] 
  section from the "udbc.ini" file in use, is used for the remaining connect 
  parameters.</para>
  <para>When the connect string contains a "DSN=&lt;name&gt;" setting, then the 
  section [name] (case insensitive) will be picked from the "udbc.ini" file in 
  use.</para>
  <para>Settings provided in the connect string take precedence over the values 
  in the udbc.ini file, however, the "Session Rules" book has the final say.  
  The session rules book is the file oplrqb.ini that governs the operation of 
  the Request Broker server component.</para>
<example id="ex_udbcconn"><title>Example UDBC Connect Strings:</title>
<screen>"" (empty)</screen>
  <para>Use the values from the [Default] section.  There must be at least 
  a Host= definition in that section. </para>
<screen>"DSN=dsn_oracle7"</screen>
  <para>Use the values from the [dsn_oracle7] section. </para>
<screen>"DSN=dsn_oracle7;UID=scott;PWD=tiger" </screen>
  <para>Use the values from the [dsn_oracle7] section, and overrides the 
  value for UserName.  Also use the password "tiger" to gain access to the 
  database. </para>
<screen>"HOST=mercury;SVT=Oracle 7;DATABASE=ORCL;UID=scott/tiger" </screen>
  <para>Connect to an Oracle 7 database on the machine "mercury".</para>
<screen>"READONLY=Y" </screen>
  <para>Make a read-only connection to the [Default] database.</para>
</example>
</sect2>
<sect2 id="udbctest"><title>The Sample UDBC Application "UDBCTEST"</title>
  <para>Your OpenLink UDBC SDK installation contains a sample interactive dynamic 
  SQL application called "udbctest".  This application is situated within your 
  OpenLink installation's "udbcsdk/examples" sub-directory.</para>
  <para>You can run the application by typing the following command from the 
  command-line prompt:</para>
<programlisting>
./udbctest
</programlisting>
  <para>The application will prompt you for a connect string.  You can type 
  "?" for a list of available UDSNs.  The example above would use the 
  following:</para>
<screen>Enter UDBC connect string: DSN=generic_oracle7</screen>
  <para>If you connect to the database successfully you will get a SQL prompt:</para>
<screen>SQL&gt;</screen>
  <para>Type a valid SQL statement and then press &lt;return&gt; to send your 
  request to your UDSN</para>
<programlisting>SQL&gt; select * from &lt;table name&gt;</programlisting>
  <para>or Use an OpenLink quick table list command:</para>
<screen>SQL&gt; tables</screen>
  <para>If the query returns data and was successful, the data will be scrolled 
  down the screen.  Otherwise you will receive an error message.  Type in the 
  command, "exit", to quit the application.</para>
  <para>The sample "udbctest" application is accompanied with a Makefile so 
  that it can be (re)compiled as follows:</para>
  <orderedlist>
    <listitem><para>Navigate to the directory:</para>
<programlisting>udbcsdk/examples</programlisting>
    </listitem>
    <listitem><para>Type the following commands to use the default Makefile 
    and udbctest.c code:</para>
<programlisting>
make clean
make
</programlisting>
    </listitem>
  </orderedlist>
  <para>This sample application is a good starting point for new ODBC developers, 
  or for simple experiments.  The framework for a basic application and build 
  environment has been supplied, you are encouraged to try it.</para>
</sect2>
  <sect2 id="furread"><title>Further Reading:</title>
    <para>"Data Management: SQL Call Level Interface (CLI)" from X/Open in 
    conjunction with SQL Access Group, ISBN: 1-872630-63-4; X/Open Document 
    Number: S203</para>
    <para>Microsoft ODBC API documentation: search 
    http://www.microsoft.com/data/odbc/default.htm</para>
  </sect2>
</sect1>
</chapter>
