<?xml version="1.0" encoding="ISO-8859-1" ?>
<!--
  $Id: iodbc.xml,v 1.2 2004/09/20 16:25:53 cvs Exp $
  (C)Copyright 1996-2018 OpenLink Software
-->
<chapter id="iodbc" >
  <title>OpenLink ODBC Driver Manager (iODBC SDK)</title>
<abstract>
<para>This document provides information on linking your ODBC Applications with iODBC.
iODBC is an alternative ODBC Driver Manager solution for developing ODBC components
and applications for non-Windows systems (e.g. Mac OS Classic, Mac OS X, Linux....).
iODBC is a free project licensed exclusively under the LGPL and BSD licenses,
developed and maintained by OpenLink Software. iODBC permits non-Windows systems
to communicate with databases via ODBC.
</para>
<para>The ODBC API consists of a set of functions to enable any C/C++ applications
linked against it to access and manage data. The ODBC specification is currently
maintained by Microsoft Corporation.</para>
<para>iODBC is compliant with the actual Microsoft ODBC version 3.51.</para>
<para>iODBC SDKs are different for each platform. iODBC SDKs are available free
of charge from the iODBC web site, released under the GNU Library General
Public License (LGPL). The SDKs are made up of include files (.h), libraries
for the corresponding platform, and a sample application for testing and
demonstration (odbctest). The sample application is an Interactive Dynamic SQL
Interpreter. Its sources are included for your use as you see fit.
</para>
<para>There are no drivers included with the iODBC SDK, but you can find many
on the OpenLink web site and from other third party middleware vendors.
</para>
<para>You can find below a set of URLs for the right iODBC SDK regarding the
platform (which is the operating system and the CPU) you are
targeting at <ulink url="http://www.iodbc.org/opliodbc.htm">iodbc.org</ulink>.</para>
</abstract>
<chapterinfo>
  <keywordset>
    <keyword>ODBC</keyword>
    <keyword>ODBC Driver</keyword>
    <keyword>ODBC Drivers</keyword>
    <keyword>ODBC Driver Manager</keyword>
    <keyword>SDK</keyword>
    <keyword>iODBC</keyword>
    <keyword>iODBC Driver Manager</keyword>
    <keyword>Unix</keyword>
    <keyword>Mac</keyword>
    <keyword>OS X</keyword>
  </keywordset>
</chapterinfo>
<sect1 id="iodbcsdklinux"><title>iODBC SDK on Unix</title>
<sect1info>
  <keywordset>
    <keyword>iODBC Unix</keyword>
    <keyword>Unix</keyword>
  </keywordset>
</sect1info>
<para>Unlike Windows, Unix has historically never come with a system-wide ODBC installation,
  therefore there is greater scope for setting everything up the way you wish. </para>
<para>Also on Unix, there are two main-stream implementations of ODBC: UnixODBC
  and iODBC. The former comes with a QT-based implementation of a GUI, while
  iODBC provides a GTK+-based administrator. </para>
<para>The iODBC package is available in several formats - source tarball, source
  RPM, and a choice of binary components. Installing the binary packages is a
  simple exercise - for example, </para>
<programlisting><![CDATA[
sudo rpm -Uhv libiodbc-3.0.6-2.i386-glibc21.rpm
]]></programlisting>
<para>will install the iODBC runtime library. </para>
<para>There follows an alternative, walking through an unpacking, configure and
  build of the complete sources from tarball: </para>
<programlisting><![CDATA[
zsh, purple  6:10PM C/ % tar xvpfz libiodbc-3.0.6.tar.gz
libiodbc-3.0.6/
libiodbc-3.0.6/admin/
libiodbc-3.0.6/admin/Makefile.am
libiodbc-3.0.6/admin/Makefile.in
[snip]
zsh, purple  6:10PM C/ % cd libiodbc-3.0.6
zsh, purple  6:10PM libiodbc-3.0.6/ % ls
AUTHORS       LICENSE	    NEWS	   bin/		 etc/	     mac/
COPYING       LICENSE.BSD   README	   configure*	 include/    samples/
]]></programlisting>
<para>Configuration, starting with a check of interesting options specific to iODBC: </para>
<programlisting><![CDATA[
zsh, purple  6:10PM libiodbc-3.0.6/ % ./configure --help
Defaults for the options are specified in brackets.
Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
[snip]
--enable-fast-install=PKGS  optimize for fast installation default=yes
--disable-libtool-lock  avoid locking (might break parallel builds)
--enable-gui            build GUI applications (default),
--disable-gui           build GUI applications
--disable-gtktest       Do not try to compile and run a test GTK program
--enable-odbc3          build ODBC 3.x compatible driver manager (default)
--disable-odbc3         build ODBC 2.x compatible driver manager
[snip]
zsh, purple 6:10PM libiodbc-3.0.6/ % ./configure --prefix=/usr/local/stow/iodbc --with-gtk --enable-gui &amp;&amp; nice make
checking for a BSD-compatible install... /bin/install -c
checking whether build environment is sane... yes
checking for gawk... gawk
]]></programlisting>
<para>Installation, starting with becoming root by sudo, then stow-ing the package
  correctly into /usr/local: </para>
<programlisting><![CDATA[
zsh, purple  6:15PM libiodbc-3.0.6/ % sudo -s
Password:
zsh, purple  6:17PM libiodbc-3.0.6/ # make install
Making install in admin
make[1]: Entering directory `/home/tim/C/libiodbc-3.0.6/admin'
[snip]
make[2]: Nothing to be done for `install-exec-am'.
make[2]: Nothing to be done for `install-data-am'.
make[2]: Leaving directory `/home/tim/C/libiodbc-3.0.6'
make[1]: Leaving directory `/home/tim/C/libiodbc-3.0.6'
zsh, purple  6:18PM libiodbc-3.0.6/ # cd /usr/local/stow/
zsh, purple  6:18PM stow/ # chmod -R og=rX iodbc/
zsh, purple  6:18PM stow/ # stow iodbc/
zsh, purple  6:18PM stow/ # ^D
zsh, purple  6:18PM libiodbc-3.0.6/ % ls /usr/local/stow/iodbc/bin/
iodbc-config*  iodbcadm-gtk*  odbctest*
]]></programlisting>
</sect1>
<sect1 id="iodbcsdkconfdsn"><title>Configuring Data Sources</title>
<sect1info>
  <keywordset>
    <keyword>Data Source</keyword>
    <keyword>Datasource</keyword>
  </keywordset>
</sect1info>
<para>The graphical (GTK+-based) configuration screen makes setting up your data-sources
  (DSNs) quite intuitive, especially if you're used to the setup screens on Windows: </para>
 <figure id="iodbcgtk001" float="1"><title>iODBC GTK Administrator</title>
  <graphic fileref="iodbcgtk001.jpg" format="jpeg"></graphic></figure>
 <figure id="iodbcgtk002" float="1"><title>iODBC GTK Administrator</title>
  <graphic fileref="iodbcgtk002.jpg" format="jpeg"></graphic></figure>
<para>An example of adding a new datasource follows: </para>
<sect2 id="iodbcsdkunixfiles"><title>The Configuration Files</title>
<para>The iODBC library searches for its DSN through a set few files: </para>
<simplelist>
  <member>$ODBCINI - the environment variable, if set</member>
  <member>~/.odbc.ini - in your home-directory, if it exists</member>
  <member>/etc/odbc.ini - a system-wide default</member>
</simplelist>
<para>The format of this file is very simple; there are 3 sections,
  one for ODBC itself (setting up tracing), one for a list of DSNs,
  and one for the definitions of those DSNs, thus: </para>
<programlisting><![CDATA[
[ODBC]
Debug         = 1
Trace         = 0
DebugFile     = /home/tim/temp/odbc-debugfile.log
TraceFile     = /home/tim/temp/odbc-tracefile.log
TraceAutoStop = 1
]]></programlisting>
<programlisting><![CDATA[
[ODBC Data Sources]
Virtuoso30 = OpenLink Virtuoso 3.0
]]></programlisting>
<programlisting><![CDATA[
[Virtuoso30]
Description = Virtuoso 3.0
Driver      = /opt/opl/virtuoso-o12/lib/virtodbc.so
Address     = localhost:1111
UserName    = dba
User        = dba
]]></programlisting>
<para>Each DSN configured has an entry in the `ODBC Data Sources' section, and a
  complete definition in a paragraph section of its own. </para>
<para>There is also an ODBCINSTINI file; this contains descriptions of the ODBC
  drivers available. </para>
<programlisting><![CDATA[
[ODBC Drivers]
OpenLink Generic = installed
[OpenLink Generic]
Driver = /opt/openlink/odbcsdk/lib/oplodbc.so
]]></programlisting>
</sect2>
<sect2 id="iodbcsdktestunix"><title>Making a Test Connection</title>
<para>To test that a DSN connects correctly, you can use the supplied `odbctest'
  utility. </para>
<programlisting><![CDATA[
zsh, purple  3:58PM bin/ % ls
iodbc-config*  iodbcadm-gtk*  odbctest*
zsh, purple  3:58PM bin/ % echo $ODBCINI
/home/tim/.odbc.ini
zsh, purple  3:58PM bin/ % ./odbctest
iODBC Demonstration program
This program shows an interactive SQL processor
Enter ODBC connect string (? shows list):
Progress9.x(solaris)           | OpenLink Generic ODBC Driver
Progress9.x(solaris)           | OpenLink Generic ODBC Driver
pgsqlPurple                    | PostgreSQL native driver
pgsqlPurpleOpl                 | PostgreSQL using OpenLink driver
pgsqlPurpleVirtDemo            | Virtuoso database driver
SQLServer                      | OpenLink Generic ODBC Driver
Enter ODBC connect string (? shows list): DSN=pgsqlPurpleOpl
Driver: 04.50.0801 OpenLink Generic ODBC Driver (oplodbc.so)
SQL&gt;select count(*) from timtest;
count
-----------
100
 result set 1 returned 1 rows.
]]></programlisting>
<para>Any of the DSN attributes can be overridden in the connect-string, which takes
  the form </para>
<programlisting><![CDATA[
DSN=dsn_name[;attr=value]*
]]></programlisting>
<para>The attributes themselves depend on the database driver behind the DSN; normally
  they control the username (where the attribute could be called`userid' or `uid')
  and password (if specified) used to connect to the database, some form of server
  hostname specification (`host=' or `server='), and a means to identify a database
  instance on that server (`database='). A driver may also have custom attributes,
  such as FetchBufferSize, Port, etc. </para>
</sect2>
        <sect2 id="compsampodbc">
            <title>Compiling Sample Program</title>
            <para>To compile the sample "odbctest" application, follow these steps:</para>
            <orderedlist>
                <listitem>
                    <para>Navigate to the directory:</para>
                    <programlisting>odbcsdk/examples</programlisting>
                </listitem>
                <listitem>
                    <para>Type the following commands to use the default Makefile and odbctest.c code:</para>
                    <programlisting>
make clean
make
</programlisting>
                </listitem>
            </orderedlist>
        </sect2>
        <sect2 id="devodbc">
            <title>Developing ODBC Applications</title>
            <para>The ODBC SDK only implements an interface for the 'C' programming language. </para>
            <para>To write an ODBC application,you must perform the following tasks:</para>
            <orderedlist>
                <listitem>
                    <para>Include the files "sql.h" and "sqlext.h" in your 'C' program(s).</para>
                </listitem>
                <listitem>
                    <para>Link the application with the following driver libraries:</para>
                    <programlisting>lib/libiodbc.a
lib/libiodbc.so
</programlisting>
                </listitem>
                <listitem>
                    <para>At runtime, the ODBC drivers required for the connection are as follows (must be included in your shared library path):</para>
                    <programlisting>libiodbc.so.2.1.2
libiodbc.so.2
</programlisting>
                </listitem>
                <listitem>
                    <para>Compile the program in the same directory as the "Makefile" file using the syntax:</para>
                    <programlisting>make</programlisting>
                </listitem>
            </orderedlist>
            <para>Note: Some UNIX systems also need -lsocket, -lnsl_s or both.</para>
        </sect2>
<sect2 id="furtherread"><title>Further Reading:</title>
<para>"Data Management: SQL Call Level Interface (CLI)"</para>
<para>from X/Open in conjunction with SQL Access Group</para>
<para>ISBN: 1-872630-63-4</para>
<para>X/Open Document Number: S203</para>
<para>Microsoft ODBC API documentation: http://www.microsoft.com/data/odbc/default.htm</para>
</sect2>
</sect1>
&iodbcapps;
</chapter>
