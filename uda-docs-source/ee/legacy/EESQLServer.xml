<chapter id="EESQLServer" >
  <title>OpenLink ODBC Driver for SQL Server (Express Editon) </title>
  <sect1 id="eesqlmac">
    <title>OpenLink ODBC Driver for SQL Server (Express Editon) for Mac OS X</title>
    <sect2 id="eesqlmacinst">
      <title> Installation Guide</title><para>The OpenLink ODBC Driver for SQL Server
        (Express Edition is a distributed as a Disk Image (DMG) file. Simply
        double click on the disk image 'mul6esql.dmg' to extract the installer
        mpkg file:</para>
      <figure>
        <graphic fileref="SQLserverDMG.png"/>
      </figure> <para>Double-click on the mpkg file to run the installer and
        following the on screen instriuction as indicated below to complete the
        installation:</para>
      <figure>
        <graphic fileref="SQLpackage.png"/>
      </figure><para> Installer Welcome Dialog for the OpenLink ODBC Driver for SQL
        Server (Express Edition):</para>
      <figure>
        <graphic fileref="SQLinstall1.png"/>
      </figure> <para>Please review the readme file for installation requirements
        and known issues:</para>
      <figure>
        <graphic fileref="SQLinstall3.png"/>
      </figure> <para>Please read the software license agreement before continuing
        your installation:</para>
      <figure>
        <graphic fileref="SQLinstall4.png"/>
      </figure>
      <figure>
        <graphic fileref="SQLinstall6.png"/>
      </figure> <para>Select destination volume for driver installation:</para>
      <figure>
        <graphic fileref="SQLinstall7.png"/>
      </figure> <para>Choose to perform a custom or default installation of the
        driver:</para>
      <figure>
        <graphic fileref="SQLinstall8.png"/>
      </figure> <para>If you chose the custom option select which of the components
        below are to be installed:</para>
      <figure>
        <graphic fileref="SQLinstall10.png"/>
      </figure> <para>The Software must be installed as a user with Administrative
        privileges on the machine:</para>
      <figure>
        <graphic fileref="SQLinstall12.png"/>
      </figure><para> After the driver has been installed you will be prompted for
        a license file. If a license file already exists on the machine then
        select the 'use exisiting file' option. A trial (try) or full (buy)
        license can be obtain by selecting the 'try and buy' option which loads
        our online try-and-buy web page:</para>
      <figure>
        <graphic fileref="SQLinstall14.png"/>
      </figure> <para>To obtain the trial license you must be a registered user on
        the OpenLink Web site and login with the username (e-mail address) and
        password for that user. Click on the 'Shop' link to visit our online
        shop cart to purchases a full license if required:</para>
      <figure>
        <graphic fileref="SQLinstall15.png"/>
      </figure> <para>Click on the 'download license' button to obtain the license
        file immediately and save to your desktop. Alternatively an auto e-mail
        will be sent to the registered users e-mail address with a link to
        their OpenLink Data Space (ODS) where all trial and full license files
        will be stored in the Briefcase for download at a later date.</para>
      <figure>
        <graphic fileref="SQLinstall16.png"/>
      </figure><para> Select the license file to be used for the installation:</para>
      <figure>
        <graphic fileref="SQLinstall18.png"/>
      </figure> <para>Installation is complete:</para>
      <figure>
        <graphic fileref="SQLinstall19.png"/>
      </figure>
    </sect2>
    <sect2 id="eesqlmacconf">
      <title> Configuration
      </title><para>To configure an ODBC DSN, run the OpenLink iODBC
        Administrator located in the /Applications/iODBC folder:</para>
      <figure>
        <graphic fileref="ODBCadmin.png"/>
      </figure> <para>Click on the add button to Choose the ODBC Driver the DSN
        should be created for:</para>
      <figure>
        <graphic fileref="SQLconfig1.png"/>
      </figure><para> Choose the OpenLink SQL Server Driver (Express Edition) v6.0
        from the list of available drivers:</para>
      <figure>
        <graphic fileref="SQLconfig2.png"/>
      </figure> <para>In the Data Source tab, select a suitable DSN name and
        optional description for the Data Source to be created:</para>
      <figure>
        <graphic fileref="SQLconfig3.png"/>
      </figure> <para>The Connection Tab request the minimum paramters required to
        make a connection to the target database:</para>
      <figure>
        <graphic fileref="SQLconfig4.png"/>
      </figure> <para>Host: This is the fully qualified hostname, or IP address, of
        the machine hosting the DBMS you wish to access, e.g.,
        dbms-server.example.com, or 192.168.155.123. Any hostname which will be
        resolved by your local DNS is acceptable. </para><para>Port: This is
        the port on which SQL Server is listening </para><para>Database: This is the SQL Server database
        that you want to connect to</para><para> User Name: This is a valid user for the
        SQL Server Database </para><para>The advanced button displays additional optional
        parameters that can be configured</para>
      <figure>
        <graphic fileref="SQLconfig5.png"/>
      </figure>
      <table>
        <title>
        </title>
        <tgroup>
          <thead/>
          <tbody>
            <row>
              <entry>
                <emphasis>Tds
                </emphasis>
              </entry>
              <entry>The version of TDS to be used.(default - '8.0')
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Cache metadata
                </emphasis>
              </entry>
              <entry>When used with prepareSQL=3, setting this property to
                true will cause the driver to cache column metadata for
                SELECT statements. Use with care.(default - false)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Charset
                </emphasis>
              </entry>
              <entry>Very important setting; this determines the byte value to
                character mapping for CHAR/VARCHAR/TEXT values. Applies for
                characters from the extended set (codes 128-255). For
                NCHAR/NVARCHAR/NTEXT values doesn't have any effect since
                these are stored using Unicode. (Default - the character set
                the server was installed with.)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Language
                </emphasis>
              </entry>
              <entry>Applies for characters from the extended set (codes
                128-255). For NCHAR/NVARCHAR/NTEXT values doesn't have any
                effect since these are stored using Unicode.(default - the
                character set the server was installed with)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Domain
                </emphasis>
              </entry>
              <entry>Specifies the Windows domain in which to authenticate. If
                present and the username and password are provided, it uses
                Windows (NTLM) authentication instead of the usual SQL Server
                authentication (i.e. the user and password provided are the
                domain user and password). This allows non-Windows clients to
                log in to servers which are only configured to accept Windoes
                authentication.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Instance
                </emphasis>
              </entry>
              <entry>Named instance to connect to. SQL Server can run
                multiple so-called 'named instances' (i.e. different server
                instances, running on different TCP ports) on the same
                machine. When using Microsoft tools, selecting one of these
                instances is made by using '[host_name]\[instance_name]'
                instead of the usual '[host_name]'. You will have to split
                the two and use the instance name as a property.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>AppName
                </emphasis>
              </entry>
              <entry>Application name. Of no practical use, it is displayed
                by Enterprise Manager or Profiler associated with the
                connection.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>ProgName
                </emphasis>
              </entry>
              <entry>Client library name. Of no practical use, it is
                displayed by Enterprise Manager or Profiler associated with
                the connection.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Wsid
                </emphasis>
              </entry>
              <entry>Workstation ID. Of no practical use, it is displayed by
                Enterprise Manager or Profiler associated with the
                connection.(default - the client host name)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>MacAddress
                </emphasis>
              </entry>
              <entry>Network interface card MAC address.(default -
                '000000000000')
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>SendStringParametersAsUnicode
                </emphasis>
              </entry>
              <entry>Determines whether string parameters are sent to the SQL
                Server database in Unicode or in the default character
                encoding of the database.(default - true)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>LastUpdateCount
                </emphasis>
              </entry>
              <entry>If true only the last update count will be returned by
                executeUpdate(). This is useful in case you are updating or
                inserting into tables that have triggers (such as replicated
                tables); there's no way to make the difference between an
                update count returned by a trigger and the actual update
                count but the actual update count is always the last as the
                triggers execute first. If false all update counts are
                returned; use getMoreResults() to loop through them. (default
                - true)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>PrepareSQL
                </emphasis>
              </entry>
              <entry>This parameter specifies the mechanism used for Prepared
                Statements.(default - 3 for SQL Server)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>PacketSize
                </emphasis>
              </entry>
              <entry>The network packet size (a multiple of 512).(default -
                4096 for TDS 7.0/8.0; 512 for TDS 4.2/5.0)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>TcpNoDelay
                </emphasis>
              </entry>
              <entry>true to enable TCP_NODELAY on the socket; false to
                disable it.(default - true)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>LobBuffer
                </emphasis>
              </entry>
              <entry>The amount of LOB data to buffer in memory before
                caching to disk. The value is in bytes for Blob data and
                chars for Clob data.(default - 32768)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>MaxStatements
                </emphasis>
              </entry>
              <entry>The number of statement prepares each connection should
                cache. A value of 0 will disable statement caching.(default -
                500)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>LoginTimeout
                </emphasis>
              </entry>
              <entry>The amount of time to wait (in seconds) for a successful
                connection before timing out. If namedPipe is true and
                loginTimeout is non-zero, the value of loginTimeout is used
                for the retry timeout when 'All pipe instances are busy'
                error messages are received while attempting to connect to
                the server. If namedPipe is true and loginTimeout is zero
                (the default), a value of 20 seconds is used for the named
                pipe retry timeout. (default - 0)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>SocketTimeout
                </emphasis>
              </entry>
              <entry>The amount of time to wait (in seconds) for network
                activity before timing out.Use with care! If a non zero value
                is supplied this must be greater than the maximum time that
                the server will take to answer any query. Once the timeout
                value is exceeded the network connection will be closed. This
                parameter may be useful for detecting dead network
                connections in a pooled environment.(default - 0)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>NamedPipe
                </emphasis>
              </entry>
              <entry>When set to true, named pipe communication is used to
                connect to the database instead of TCP/IP sockets. When the
                os.name system property starts with 'windows'
                (case-insensitive), named pipes (both local and remote) are
                accessed through the Windows filesystem by opening a
                RandomAccessFile to the path. When the SQL Server and the
                client are on the same machine, a named pipe will usually
                have better performance than TCP/IP sockets since the network
                layer is eliminated.
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>Ssl
                </emphasis>
              </entry>
              <entry>Specifies if and how to use SSL for secure
                communication.(default - off)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>BatchSize
                </emphasis>
              </entry>
              <entry>Controls how many statements are sent to the server in a
                batch. The actual batch is broken up into pieces this large
                that are sent separately.(default - 0[unlimited] for SQL
                Server)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>UseCursors
                </emphasis>
              </entry>
              <entry>Instructs the driver to use server side cursors instead
                of direct selects (AKA firehose cursors) for forward-only
                read-only result sets (with other types of result sets
                server- or client-side cursors are always used).(default -
                false)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>BufferMaxMemory
                </emphasis>
              </entry>
              <entry>Controls the global buffer memory limit for all
                connections (in kilobytes). When the amount of buffered
                server response packets reaches this limit additional packets
                are buffered to disk; there is however one exception: each
                Statement gets to buffer at least '[bufferMinPackets]' to
                memory before this limit is enforced. This means that this
                limit can and will usually be exceeded.(default - 1024)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>BufferMinPackets
                </emphasis>
              </entry>
              <entry>Controls the minimum number of packets per statement to
                buffer to memory. Each Statement will buffer at least this
                many packets before being forced to use a temporary file if
                the [bufferMaxMemory] is reached, to ensure good performance
                even when one Statement caches a very large amount of
                data.(default - 8)
              </entry>
            </row>
            <row>
              <entry>
                <emphasis>UseLOBs
                </emphasis>
              </entry>
              <entry>Controls whether large types (IMAGE and TEXT/NTEXT)
                should be mapped by default (when using getObject()) to LOBs
                . The default type constant returned is also controlled by
                this property: BLOB for IMAGE and CLOB for TEXT/NTEXT when
                true, LONGVARBINARY for IMAGE and LONGVARCHAR for TEXT/NTEXT
                when false.(default - true)
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table><para>As indicated above the paramters of the options and preferences
        tabs are not required for a basic connection:</para>
      <figure>
        <graphic fileref="SQLconfig6.png"/>
      </figure>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem>
          <emphasis>Row Buffer Size
          </emphasis> - This attribute specifies the number of records to be
          transported over the network in a single network hop. Values can
          range from 1 to 99.
        </listitem>
        <listitem>
          <emphasis>Hide Login Dialog
          </emphasis> - Suppress the ODBC "Username" and "Password" login
          dialog box when interacting with your ODBC DSN from within an
          ODBC-compliant application.
        </listitem>
        <listitem>
          <emphasis>Read Only connection
          </emphasis> - Specify whether the connection is to be read-only.
          Make sure the checkbox is unchecked to request a read/write
          connection.
        </listitem>
        <listitem>
          <emphasis>Drop Catalog from Meta calls
          </emphasis> - Enable this option to have the catalog name not
          appear for tables, views and procedures when requesting database
          metadata.
        </listitem>
        <listitem>
          <emphasis>Drop Schema from Meta calls
          </emphasis> - Enable this option to have the schema-name not appear
          for tables, views and procedures when requesting database
          metadata.
        </listitem>
        <listitem>
          <emphasis>SQLStatistics disabled
          </emphasis> - Check this box to have SQLStatistics() return an
          empty resultset. Use this if the underlying database does not
          support retrieving statistics about a table (e.g. what indexes
          there are on it).
        </listitem>
        <listitem>
          <emphasis>No support of quoted identifier
          </emphasis> - If it is set, the call SQLGetInfo
          for 'SQL_IDENTIFIER_QUOTE_CHAR' will return the space (" "). It can
          be used if DBMS doesn't support quoted SQL such as select * from
          "account"
        </listitem>
        <listitem>
          <emphasis>No support of search string escape
          </emphasis> - If it is set, the call SQLGetInfo for
          'SQL_LIKE_ESCAPE_CLAUSE' will return the space (" "). It can be
          used if DBMS doesn't support SQL escape patterns.
        </listitem>
        <listitem>
          <emphasis>Patch of NULL size of SQL_CHAR
          </emphasis> - If set this option overrides the size of SQL_CHAR
          column type returned by the database with the value set in the text
          box (in bytes). With the default value of 0 the driver uses the
          size returned by the database.
        </listitem>
        <listitem>
          <emphasis>SQL_DBMS Name
          </emphasis> - Manually override the SQLGetInfo (SQL_DBMS_NAME)
          response returned by the driver. This is known to be required for products
          like Microsoft InfoPath for which the return the value should be "SQL
          Server".
        </listitem>
      </itemizedlist>
      <figure>
        <graphic fileref="SQLconfig7.png"/>
      </figure>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem>
          <emphasis>Initialization SQL
          </emphasis> - Lets you specify a file containing SQL statements
          that will be run against the database upon connection,
          automatically.
        </listitem>
        <listitem>
          <emphasis>Cursor Sensitivity
          </emphasis> - Enables or disables the row version cache used with
          dynamic cursors. When dynamic cursor sensitivity is set high, the
          Cursor Library calculates checksums for each row in the current
          rowset and compares these with the checksums (if any) already
          stored in the row version cache for the same rows when fetched
          previously. If the checksums differ for a row, the row has been
          updated since it was last fetched and the row status flag is set to
          SQL_ROW_UPDATED. The row version cache is then updated with the
          latest checksums for the rowset. From the user's point of view, the
          only visible difference between the two sensitivity settings is
          that a row status flag can never be set to SQL_ROW_UPDATED when the
          cursor sensitivity is low. (The row status is instead displayed as
          SQL_ROW_SUCCESS.) In all other respects, performance aside, the two
          settings are the same - deleted rows don't appear in the rowset,
          updates to the row since the row was last fetched are reflected in
          the row data, and inserted rows appear in the rowset if their keys
          fall within the span of the rowset. If your application does not
          need to detect the row status SQL_ROW_UPDATED, you should leave the
          'High Cursor Sensitivity' checkbox unchecked, as performance is
          improved. The calculation and comparison of checksums for each row
          fetched carries an overhead. If this option is enabled, the table
          oplrvc must have been created beforehand using the appropriate
          script for the target database.
        </listitem>
        <listitem>
          <emphasis>MaxRows Override
          </emphasis> - Allows you to define a limit on the maximum number of
          rows to returned from a query. The default value of 0 means no
          limit.
        </listitem>
        <listitem>
          <emphasis>Disable AutoCommit
          </emphasis> - Change the default commit behaviour of the OpenLink
          Lite Driver. The default mode is AutoCommit mode (box unchecked).
        </listitem>
        <listitem>
          <emphasis>Disable Rowset Size Limit
          </emphasis> - Disable the limitation enforced by the cursor
          library. The limitation is enforced by default to prevent the
          Driver claiming all available memory in the event that a resultset
          is generated from an erroneous query is very large. The limit is
          normally never reached.
        </listitem>
        <listitem>
          <emphasis>Defer fetching of long data
          </emphasis> - Defer fetching of LONG (BINARY, BLOB etc.) data
          unless explicitly requested in query. This provides significant
          performance increase when fields in query does not include LONG
          data fields.
        </listitem>
        <listitem>
          <emphasis>Multiple Active Statements Emulation
          </emphasis> - Enables use of Multiple Active statements in an ODBC
          application even if the underlying database does not allow this, as
          it is emulated in the driver.
        </listitem>
      </itemizedlist><para>Click on the 'Test Data Source' button to make a
        connection to the database to verify connectivity:</para>
      <figure>
        <graphic fileref="SQLconfig8.png"/>
      </figure><para> Enter a vaild username and pasword for the database:</para>
      <figure>
        <graphic fileref="SQLconfig9.png"/>
      </figure> <para>A successful connection to the database has been made:</para>
      <figure>
        <graphic fileref="SQLsuccess.png"/>
      </figure> 
    </sect2>
  </sect1>
  <sect1 id="eesqlwin">
    <title> OpenLink ODBC Driver for SQL Server (Express Editon) for
      Windows</title>
    <sect2 id="eesqlwininst"> <title>Installation</title>
      <para>The OpenLink ODBCDriver for Microsoft SQLServer (Express Edition) is distributed as a Windows MSI installer. Simply double click on the installer 'ntl6esql.msi' to commence the installation. </para>
      <para>Installer Welcome Dialog for the OpenLink ODBCDriver for Microsoft SQLServer(Express Edition): </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen1i.png"/>
        </figure>
      </para>
      <para>Please read the software license agreement and accept before continuing your installation: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen3i.png"/>
        </figure>
      </para>
      <para>Before installation, you will be prompted for a license file. If a license file already exists on the machine, then select the 'use exisiting file' option. A trial (try) or full (buy) license can be obtained by selecting the 'try and buy' option which loads OpenLink's online try and buy web page: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen4i.png"/>
        </figure>
      </para>
      <para>If you are using Nortons Anti-Virus Software, you may encouter this warning message. Choose the Allow the Entire Script once option: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen5i.png"/>
        </figure>
      </para>
      <para>To obtain the trial license, you must be a registered user on the OpenLinkWeb site and login with your username (e-mail address) and password for that user. Click on the 'Shop' link to visit Openlink's online shop cart to purchase a full license, if required: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen6i.png"/>
        </figure>
      </para>
      <para>Click on the 'download license' button to immediatly obtain the license file and save it to your desktop. Alternatively, an auto-generated e-mail will be sent to your registered user's e-mail address with a link to your OpenLinkData Space ( ODS), which contains all trial and full licenses in a Briefcase for download at a later date. </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen7i.png"/>
        </figure>
      </para>
      <para>You will want to save the file to disk: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen8i.png"/>
        </figure>
      </para>
      <para>Select the license file to be used for the installation: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen9i.png"/>
        </figure>
      </para>
      <para>Make sure that the path to where the license file is located is correct before selecting Next: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen10i.png"/>
        </figure>
      </para>
      <para>Choose to perform a custom, typical, or complete installation of the driver: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen11i.png"/>
        </figure>
      </para>
      <para>With a custom installation, you can decide the directory where the installation will reside: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLSErverCustom1.png"/>
        </figure>
      </para>
      <para>Select the features to be installed: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLSErverCustom2.png"/>
        </figure>
      </para>
      <para>Click the install button to begin installation of the components: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLSErverCustom3.png"/>
        </figure>
      </para>
      <para>Installation in progress: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen13i.png"/>
        </figure>
      </para>
      <para>The software installation is complete and ready for use: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen14i.png"/>
        </figure>
      </para>
    </sect2>
    <sect2 id="eesqlwinconf"> <title>Configuration</title>
      <para>To configure an ODBCDSN, run the ODBCAdministrator located in the Administrative Tools section of the Control Panel: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen1c.png"/>
        </figure>
      </para>
      <para>From either the User or System DSN tab, click on the Add button: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen2c.png"/>
        </figure>
      </para>
      <para>Select the OpenLinkSQLServer ODBCDriver [Express Edition][6.0] from the list presented: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen3c.png"/>
        </figure>
      </para>
      <para>In the Data Source tab, select a suitable DSN name and optional description for the Data Source to be created: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen4c.png"/>
        </figure>
      </para>
      <para>The Connection tab requests the minimum parameters required to make a connection to the target database: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen5c.png"/>
        </figure>
      </para>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Server Type</emphasis> : This parameter should be
          set to MSSQL, which can be selected from the drop down list
          box.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Host</emphasis> : This is the fully qualified
          hostname, or IP address, of the machine hosting the DBMS you
          wish to access, e.g., dbms-server.example.com, or
          192.168.155.123. Any hostname which will be resolved by your
          local DNS
          is acceptable.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Port</emphasis> : This is the port that SQL Server is
          listening on</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Database</emphasis> : This is the SQL Server
          database to which you want to connect</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Login ID</emphasis> : This is a valid user on for
          the SQL
          Server Database</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Password</emphasis> : This is a valid password on
          for the SQL Server Database</listitem>
      </itemizedlist>
      <para>Click next to verify that all settings are correct or uncheck the check box to delay testing to a later stage. </para>
      <para>The advanced button displays additional, optional parameters that can be configured: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLSErverAdvanced.png"/>
        </figure>
      </para>
      <table>
        <title/>
        <tgroup>
          <thead/>
          <tbody>
            <row>
            </row>
            <row>
              <entry>
                <emphasis>Tds</emphasis>
              </entry>
              <entry>The version of TDS to be
                used.(default - '8.0')</entry>
            </row>
            <row>
              <entry>
                <emphasis>Cachemetadata</emphasis>
              </entry>
              <entry>When used with prepareSQL=3, setting
                this property to true will cause the driver to cache column
                meta data for SELECT statements. Use with care.(default -
                false)</entry>
            </row>
            <row>
              <entry>
                <emphasis>Charset</emphasis>
              </entry>
              <entry>Very important setting, determines
                the byte value to character mapping for CHAR/VARCHAR/TEXT
                values. Applies for characters from the extended set (codes
                128-255). For NCHAR/NVARCHAR/NTEXT values, does not have
                any effect, since these are stored using Unicode. (default
                - the character set the server was installed with)</entry>
            </row>
            <row>
              <entry>
                <emphasis>Language</emphasis>
              </entry>
              <entry>Applies for characters from the
                extended set (codes 128-255). For NCHAR/NVARCHAR/NTEXT
                values, does not have any effect since these are stored
                using Unicode. (default - the character set the server was
                installed with)</entry>
            </row>
            <row>
              <entry>
                <emphasis>Domain</emphasis>
              </entry>
              <entry>Specifies the Windows domain to
                authenticate in. If present and the user name and password
                are provided, it uses Windows (NTLM) authentication instead
                of the usual SQL Server authentication (i.e., the user
                and password provided are the domain user and password).
                This allows non-Windows clients to log in to servers, which
                are only configured to accept Windows authentication.</entry>
            </row>
            <row>
              <entry>
                <emphasis>Instance</emphasis>
              </entry>
              <entry>Named instance to connect to.
                SQL
                Server can run multiple so-called 'named instances' (i.e.,
                different server instances, running on different TCP ports)
                on the same machine. When using Microsoft tools, selecting
                one of these instances is made by using
                '[host_name]\[instance_name]' instead of the usual
                '[host_name]'. You will have to split the two and use the
                instance name as a property.</entry>
            </row>
            <row>
              <entry>
                <emphasis>AppName</emphasis>
              </entry>
              <entry>Application name. No practical use;
                it's displayed by Enterprise Manager or Profiler associated
                with the connection.</entry>
            </row>
            <row>
              <entry>
                <emphasis>ProgName</emphasis>
              </entry>
              <entry>Client library name. No practical
                use; it's displayed by Enterprise Manager or Profiler
                associated with the connection.</entry>
            </row>
            <row>
              <entry>
                <emphasis>Wsid</emphasis>
              </entry>
              <entry>Workstation ID. No practical use;
                it's displayed by Enterprise Manager or Profiler associated
                with the connection. (default - the client host name)</entry>
            </row>
            <row>
              <entry>
                <emphasis>MacAddress</emphasis>
              </entry>
              <entry>Network interface card MAC address.
                (default - '000000000000')</entry>
            </row>
            <row>
              <entry>
                <emphasis>SendStringParametersAsUnicode</emphasis>
              </entry>
              <entry>Determines whether string parameters
                are sent to the SQL Server database in Unicode or in the
                default character encoding of the database. (default -
                true)</entry>
            </row>
            <row>
              <entry>
                <emphasis>LastUpdateCount</emphasis>
              </entry>
              <entry>If true, only the last update count
                will be returned by executeUpdate(). This is useful in case
                you are updating or inserting into tables that have
                triggers (such as replicated tables); there's no way to
                make the difference between an update count returned by a
                trigger and the actual update count, but the actual update
                count is always the last, as the triggers execute first. If
                false, all update counts are returned; use getMoreResults()
                to loop through them. (default - true)</entry>
            </row>
            <row>
              <entry>
                <emphasis>PrepareSQL</emphasis>
              </entry>
              <entry>This parameter specifies the
                mechanism used for Prepared Statements. (default - 3 for
                SQL
                Server)</entry>
            </row>
            <row>
              <entry>
                <emphasis>PacketSize</emphasis>
              </entry>
              <entry>The network packet size (a multiple
                of 512). (default - 4096 for TDS 7.0/8.0; 512 for TDS
                4.2/5.0)</entry>
            </row>
            <row>
              <entry>
                <emphasis>TcpNoDelay</emphasis>
              </entry>
              <entry>True to enable TCP_NODELAY on the
                socket; false to disable it. (default - true)</entry>
            </row>
            <row>
              <entry>
                <emphasis>LobBuffer</emphasis>
              </entry>
              <entry>The amount of LOB data to buffer in
                memory before caching to disk. The value is in bytes for
                Blob data and chars for Clob data. (default - 32768)</entry>
            </row>
            <row>
              <entry>
                <emphasis>MaxStatements</emphasis>
              </entry>
              <entry>The number of statement prepares each
                connection should cache. A value of 0 will disable
                statement caching.(default - 500)</entry>
            </row>
            <row>
              <entry>
                <emphasis>LoginTimeout</emphasis>
              </entry>
              <entry>The amount of time to wait (in
                seconds) for a successful connection before timing out. If
                namedPipe is true and loginTimeout is non-zero, the value
                of loginTimeout is used for the retry timeout when 'All
                pipe instances are busy' error messages are received while
                attempting to connect to the server. If namedPipe is true
                and loginTimeout is zero (the default), a value of 20
                seconds is used for the named pipe retry timeout. (default
                - 0)</entry>
            </row>
            <row>
              <entry>
                <emphasis>SocketTimeout</emphasis>
              </entry>
              <entry>The amount of time to wait (in
                seconds) for network activity before timing out. Use with
                care! If a non zero value is supplied, this must be greater
                than the maximum time that the server will take to answer
                any query. Once the timeout value is exceeded, the network
                connection will be closed. This parameter may be useful for
                detecting dead network connections in a pooled environment.
                (default - 0)</entry>
            </row>
            <row>
              <entry>
                <emphasis>NamedPipe</emphasis>
              </entry>
              <entry>When set to true, named pipe
                communication is used to connect to the database instead of
                TCP/IP sockets. When the os.name system property starts
                with 'windows' (case-insensitive), named pipes (both local
                and remote) are accessed through the Windows filesystem by
                opening a RandomAccessFile to the
                path. When the SQL Server and the client are on the same
                machine, a named pipe will usually have better performance
                than TCP/IP sockets since the network layer is
                eliminated.</entry>
            </row>
            <row>
              <entry>
                <emphasis>Ssl</emphasis>
              </entry>
              <entry>Specifies if and how to use SSL for
                secure communication. (default - off)</entry>
            </row>
            <row>
              <entry>
                <emphasis>BatchSize</emphasis>
              </entry>
              <entry>Controls how many statements are sent
                to the server in a batch. The actual batch is broken up
                into pieces this large that are sent separately.(default -
                0[unlimited] for SQL Server)</entry>
            </row>
            <row>
              <entry>
                <emphasis>UseCursors</emphasis>
              </entry>
              <entry>Instructs the driver to use server
                side cursors instead of direct selects (AKA firehose
                cursors) for forward-only read-only result sets (with other
                types of result sets server- or client-side cursors are
                always used). (default - false)</entry>
            </row>
            <row>
              <entry>
                <emphasis>BufferMaxMemory</emphasis>
              </entry>
              <entry>Controls the global buffer memory
                limit for all connections (in kilobytes). When the amount
                of buffered server response packets reaches this limit,
                additional packets are buffered to disk; there is however
                one exception: each Statement gets to buffer at least
                '[bufferMinPackets]' to memory before this limit is
                enforced. This means that this limit can and will usually
                be exceeded. (default - 1024)</entry>
            </row>
            <row>
              <entry>
                <emphasis>BufferMinPackets</emphasis>
              </entry>
              <entry>Controls the minimum number of
                packets per statement to buffer to memory. Each Statement
                will buffer at least this many packets before being forced
                to use a temporary file if the [bufferMaxMemory] is
                reached, to ensure good performance even when one Statement
                caches a very large amount of data. (default - 8)</entry>
            </row>
            <row>
              <entry>
                <emphasis>UseLOBs</emphasis>
              </entry>
              <entry>Controls whether large types (IMAGE
                and TEXT/NTEXT) should be mapped by default (when using
                getObject()) to LOBs . The default type constant returned
                is also controlled by this property: BLOB for IMAGE and
                CLOB for TEXT/NTEXT when true, LONGVARBINARY for IMAGE and
                LONGVARCHAR for TEXT/NTEXT when false. (default -
                true)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>As indicated above, the parameters on the options and preferences tabs are not required for a basic connection. </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen6c.png"/>
        </figure>
      </para>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Drop Catalog name from DatabaseMetaData
            calls</emphasis> - Enable this option to have the catalog name
          not appear for tables, views, and procedures when requesting
          database meta-data.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Drop Schema name from DatabaseMetaData
            calls</emphasis> - Enable this option to have the schema-name
          not appear for tables, views, and procedures when requesting
          database meta-data.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Return an empty ResultSet for
            SQLStatistics</emphasis> - Check this box to have
          SQLStatistics() return an empty resultset. Use this if the
          underlying database does not support retrieving statistics
          about a table (e.g., what indexes there are on it).</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Disable support of quoted identifier</emphasis> -
          If it is set, the call SQLGetInfo for
          'SQL_IDENTIFIER_QUOTE_CHAR' will return the space (" "). It
          can be used if DBMS does not support quoted SQL, e.g., select
          * from "account."</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Disable support of search pattern escape</emphasis>
          - If it is set, the call SQLGetInfo for
          'SQL_LIKE_ESCAPE_CLAUSE' will return the space (" "). It can
          be used if DBMS does not support SQL escape patterns</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Patch of NULL size of SQL_CHAR</emphasis> - If set,
          this option overrides the size of SQL_CHAR column type
          returned by the database with the value set in the text box
          (in bytes). With the default value of 0, the driver uses the
          size returned by the database.</listitem>
      </itemizedlist>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen7c.png"/>
        </figure>
      </para>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Read Only connection</emphasis> - Specify whether
          the connection is to be "Read-only". Make sure the checkbox
          is unchecked to request a "Read/Write" connection.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Disable interactive login</emphasis> - Suppress the
          ODBC
          "Username" and "Password" login dialog box when interacting
          with your ODBC DSN from within an ODBC compliant
          application.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Row Buffer Size</emphasis> - This attribute
          specifies the number of records to be transported over the
          network in a single network hop. Values can range from 1 to
          99.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Max Rows Override</emphasis> - Allows you to define
          a limit on the maximum number of rows to be returned from a
          query. The default value of 0 means no limit.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Initial SQL</emphasis> - Lets you specify a file
          containing SQL statements that will be automatically run
          against the database upon connection.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Dynamic Cursor Sensitivity</emphasis> - Enables or
          disables the row version cache used with dynamic cursors.
          When dynamic cursor sensitivity is set high, the Cursor
          Library calculates checksums for each row in the current
          rowset and compares these with the checksums (if any) already
          stored in the row version cache for the same rows when
          fetched previously. If the checksums differ for a row, the
          row has been updated since it was last fetched, and the row
          status flag is set to SQL_ROW_UPDATED. The row version cache
          is then updated with the latest checksums for the rowset.
          From the user's point of view, the only visible difference
          between the two sensitivity settings is that a row status
          flag can never be set to SQL_ROW_UPDATED, when the cursor
          sensitivity is low. (The row status is instead displayed as
          SQL_ROW_SUCCESS.) In all other respects, performance aside,
          the two settings are the same - deleted rows do not appear in
          the rowset, updates to the row since the row was last fetched
          are reflected in the row data, and inserted rows appear in
          the rowset, if their keys fall within the span of the rowset.
          If your application does not need to detect the row status
          SQL_ROW_UPDATED, you should leave the 'High Cursor
          Sensitivity' checkbox unchecked, as performance is improved.
          The calculation and comparison of checksums for each row
          fetched carries an overhead. If this option is enabled, the
          table oplrvc must have been created beforehand using the
          appropriate OpenLink script for the target database.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Enable logging to the log file:</emphasis> -
          Specifies the full path to a text file. If the associated
          checkbox is checked, and a file is passed, the driver will
          log auto-generate a clientside ODBC trace.</listitem>
      </itemizedlist>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen8c.png"/>
        </figure>
      </para>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Disable AutoCommit</emphasis> -
          Change the default commit behaviour of the OpenLink Lite
          Driver. The default mode is AutoCommit mode (box
          unchecked).</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Disable Rowset Size Limit</emphasis> - Disable the
          limitation enforced by the cursor library. The limitation is
          enforced by default to prevent the driver claiming all
          available memory in the event that a resultset is generated
          from an erroneous query is very large. The limit is normally
          never reached.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>Multiple Active Statements Emulation</emphasis> -
          Enables use of Multiple Active statements in an ODBC application
          even if the underlying database does not allow this, as it is
          emulated in the driver.</listitem>
      </itemizedlist>
      <itemizedlist mark="bullet" spacing="compact">
        <listitem><emphasis>SQL_DBMS Name</emphasis> - Manually override the
          SQLGetInfo(SQL_DBMS_NAME)
          response returned by the driver. This is required for
          products like Microsoft InfoPath for which
          the return the value must be "SQL Server".</listitem>
      </itemizedlist>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen9c.png"/>
        </figure>
      </para>
      <para>Click on the <emphasis>Test Data Source</emphasis>button to verify that a successful connection can be made to the database. </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen10c.png"/>
        </figure>
      </para>
      <para>When you click finish, you will go back to the ODBCData Source Administrator, and you should see the new DSN in the list of available DSN's: </para>
      <para>
        <figure>
          <graphic fileref="EEWinSQLServerScreen11c.png"/>
        </figure>
      </para>
    </sect2>
  </sect1>
</chapter>
