<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- 
  $Id: features_odbc.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2024 OpenLink Software
-->
<sect1 id="features">
<sect1info>
  <keywordset>
    <keyword>ODBC New Features</keyword>
    <keyword>Features</keyword>
    <keyword>Database support; Oracle; SQL Server; DB2; Informix; Sybase; Progress</keyword>
  </keywordset>
</sect1info>
<title>New Features</title>
<itemizedlist>
<listitem>
<formalpara>
<title>Unicode Driver support</title>
<para>Database agents support the latest releases of all supported database engines this includes:
<orderedlist>
  <listitem>Oracle 8i &amp; 9i</listitem>
  <listitem>Microsoft SQL Server 2000</listitem>
  <listitem>DB/2 v7</listitem>
  <listitem>ODBC Agent</listitem>  
  <listitem>JDBC Agent</listitem>  
  <listitem>Informix 9</listitem>
  <listitem>Sybase Adaptive Server 12.5</listitem>
  <listitem>Progress 9 (SQL-92)</listitem>
</orderedlist>
</para>
<para>Note that there are two Multi-tier generic ODBC clients:</para>
<orderedlist>
  <listitem>With Unicode support olod5032u.dll (OpenLink Generic ODBC Driver (Unicode))</listitem>
  <listitem>Without Unicode support olod5032.dll (OpenLink Generic ODBC Driver)</listitem>
</orderedlist>
<para>Both of these ODBC clients can be used with a Unicode enabled agent.</para>
</formalpara>
</listitem>
<listitem>
<formalpara>
<title>Zero Configuration</title>
<para>The OpenLink Request Broker can now be configured to Broadcast ZeroConfig services of available Database agents on the network, which then can be discovered by the the OpenLink Multi-Tier ODBC client. Enabling ODBC Datasources to be configured and/or connections made with no knowledge of network topology.</para>
</formalpara>
</listitem>
<listitem>
<formalpara>
<title>Significant SQL Server and SYBASE Driver Enhancements</title>
<para>Our Drivers are now built to communicate directly with Microsoft SQL Server and SYBASE ASE using the TDS protocol (the native wire protocol for both database servers). This also implies that no additional software is required post installation in order for our ODBC Drivers to communicate with these Drivers (this applies to the Single Tier format Drivers only). The use of TDS has also enabled us to double the performance of both our Single Tier and Multi-Tier Drivers for these databases.</para>
</formalpara>
</listitem>
<listitem>
<formalpara>
<title>Array Optimisations on Select Queries</title>
<para>All drivers now support the SQLSetStmtAttr(SQL_ARRAY_SIZE) call for batch select statements, providing improved performance when re-execute select statements with bound paramters.</para>
</formalpara>
</listitem>
<listitem><formalpara><title>Deferred Fetching</title>
<para>The Release 4 OpenLink driver family brings marked communications 
layer improvements. Central to these are improved implementation of the 
<computeroutput>SQLGetData</computeroutput> and <computeroutput>SQLPutData</computeroutput>
ODBC function calls.</para></formalpara>
<formalpara><title>Wholesale vs. Piecemeal Data Transfer</title>
<para>In previous releases of the drivers, parameter data at query execution 
was assembled in the OpenLink driver's client component and transferred to its 
server component in a single network hop. (The client and server components 
apply to both the Single- and Multi-Tier drivers; they refer to different layers within 
the driver entity.) Similarly, when fetching from a "long", or large binary data 
column, data was transferred from the driver's server component to the client 
component in a single network transfer. The only way data could manipulated in a 
piecemeal fashion, was within the ODBC application from the driver's client 
component (client side only).</para>
</formalpara>
<para>The Release 4 driver family now allow transferring parameter data 
in parts over the network between the client and server driver components. Once 
transferred, the fragmented column data are re-pieced together in their entirety 
within the client and server portions of the driver.</para>
<formalpara><title>Deferred Fetching</title>
<para>When fetching, data from columns with "long" data are only transferred 
between the server and client components if one of the following applies to 
that column:</para></formalpara>
  <simplelist>
   <member>It has been "bound" by the application via the SQLBindCol API call</member>
   <member>It has been retrieved via the SQLGetData API call</member>
  </simplelist>
<para>This mechanism is referred to as deferred fetching. In this method, 
as "long" column data is not reassembled within the OpenLink ODBC client itself 
(rather, within the application), driver memory overhead incurred is dramatically 
reduced. Deferred fetching applies to the following "long" database column types:</para>
<variablelist>
 <varlistentry>
  <term>ODBC agent</term>
  <listitem><para>SQL_LONGVARCHAR</para>
    <para>SQL_LONGVARBINARY</para></listitem>
  </varlistentry>
 <varlistentry>
  <term>DB/2 agent</term>
  <listitem><para>SQL_BLOB</para>
    <para>SQL_CLOB</para>
	<para>SQL_DBCLOB</para></listitem>
  <listitem>
    <para>If the long data compatibility option has been specified in the DB2 database</para>
    <para>SQL_LONGVARCHAR</para>
    <para>SQL_LONGVARBINARY</para>
    <para>SQL_LONGVARGRAPHIC</para>
	</listitem>
  </varlistentry>
 <varlistentry>
  <term>Oracle agent</term>
  <listitem><para>SQLT_BLOB</para>
    <para>SQLT_CLOB</para></listitem>
  </varlistentry>
 <varlistentry>
  <term>Sybase agent</term>
  <listitem><para>CS_IMAGE_TYPE</para>
    <para>CS_TEXT_TYPE</para></listitem>
  </varlistentry>
</variablelist>
<para>However, if a table contains a column defined as one of these 
"long" types, but the actual data stored in the column only fills a small 
proportion of the available space, deferred fetching is of no benefit.  In 
these cases, performance may be improved by switching off the deferred 
fetching mechanism using the control in the OpenLink Generic Client data 
source setup dialog.</para></listitem></itemizedlist>
</sect1>
