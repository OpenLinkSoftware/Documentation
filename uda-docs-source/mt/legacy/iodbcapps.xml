<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- 
  $Id: iodbcapps.xml,v 1.1.1.1 2004/09/09 10:45:21 cvs Exp $
  (C)Copyright 1996-2024 OpenLink Software
-->
<sect1 id="iodbcappsmacos"><title>Linking iODBC and ODBC Applications on Mac OS</title>
<sect1info>
  <keywordset>
    <keyword>Mac</keyword>
    <keyword>Linking iODBC Mac</keyword>
    <keyword>Mac ODBC Applications</keyword>
  </keywordset>
</sect1info>
<sect2 id="iodbcmacclassic"><title>Mac OS Classic</title>
<para>The package provided for this platform is a compressed Macintosh format (.sit.hqx).
After uncompressing it on your hard drive, you will find below the tree of the 
iODBC SDK as installed on Mac OS Classic :</para>
 <figure id="iodbcmac001" float="1"><title>iODBC SDK Tree for Mac OS Classic</title>
  <graphic fileref="iodbcfilelist001.jpg" format="jpeg"></graphic></figure> 
<para>iODBC is cut down in three parts, and each one has its proper set of include files and libraries.</para>
<simplelist>
  <member>The iODBC Driver Manager is the core of the ODBC driver manager. Its main task is to load run the right function with the right ODBC driver. </member>
  <member>The iODBC Configuration Manager is the ODBC configuration manager. Its main task is to access and manage the DSN configuration files. </member>
  <member>The iODBC GUI Manager is the GUI manager. Its main task is to give to the user the ability to access all the ODBC functionality through a GUI.</member>
</simplelist>
<para>Under the include directory, you will find all the iODBC header files that 
can be used in your source.  The following are the main header files:  
<computeroutput>isql.h, isqlext.h, isqltypes.h, iodbcadm.h, iodbcinst.h</computeroutput></para>
<para>These are generally only a proxy for the other header files provided 
in the same directory:  <computeroutput>sql.h, sqlext.h, sqltypes.h, odbcinst.h</computeroutput></para>
<para>To access all these include files, simply add to your compiler an include 
path that points to <computeroutput>iODBC/include</computeroutput>. This is 
compiler dependent, so you may have to look into your compiler's documentation.  
For Code Warrior, you can do this via the Project Preferences panel.</para>
<para>Under the lib directory, you will find all the iODBC libraries needed to 
link against your application.  All the parts explained before, are shipped through 
three different forms: CFM shared library, static object file, and static object file 
with debugging information.</para>
 <figure id="iodbcmac002" float="1"><title>iODBC SDK libraries on Mac</title>
  <graphic fileref="iodbcfilelist002.jpg" format="jpeg"></graphic></figure>
<para>You will have to link your application with only one set of libraries.  
If you choose the CFM shared library set, ensure that at runtime these files 
are in the System-Extensions folder of your Mac Classic system.</para>
<para>To access the right set of library files, add a library path that points 
to <computeroutput>iODBC/lib</computeroutput>.  This is compiler dependent, 
consult your compiler documentation.  For Code Warrior, you can do this through 
the Project Preferences panel.</para>
</sect2> 
<sect2 id="iodbcmacosx"><title>Mac OS X</title>
<para>The package provided for this platform is a Macintosh Installer package 
(.mpkg) inside a disk-image (.dmg) file.  After mounting the disk-image by double 
clicking on it, you will have to launch the Macintosh Installer package (.mpkg). 
You will be guided through the installation via the Macintosh Installer application.</para>
<tip><title>See Also:</title>
  <para>iODBC follows the Programmer and System guidelines defined by 
Apple, this document can be found at: 
<ulink url="http://developer.apple.com/techpubs/macosx/SystemOverview/SystemOverview/SystemOverview.pdf">developer.apple.com</ulink></para></tip>
<para>You will find the iODBC SDK installation in the following directory tree 
structure as installed on Mac OS X:</para>
 <figure id="iodbcmac003" float="1"><title>iODBC SDK tree on Mac OS X</title>
  <graphic fileref="iodbcfilelist003.jpg" format="jpeg"></graphic></figure>
<para>In Mac OS X, "frameworks" are the central components of all SDKs. They 
provide everything needed by developers from include files to shared libraries 
with which you need to link your application.  All frameworks support is well 
managed with Project Builder, shipped by Apple. Simply drag and drop via the 
provided GUI the corresponding framework you want use. If you want to use a 
framework through the command line compiler, see below.</para>
<para>The framework is basically a directory, structured as below:</para>
 <figure id="iodbcmac004" float="1"><title>iODBC SDK Frameworks on Mac OS X</title>
  <graphic fileref="iodbcfilelist004.jpg" format="jpeg"></graphic></figure>
<para>When you need to include one of the framework header files, you have 
to prepend your header file name with the framework name as below :</para>
<programlisting><![CDATA[
#include <samples/my_sample_header.h>
]]></programlisting>
<para>iODBC is broken down into three frameworks, each having its own proper 
set of includes files and libraries.</para>
<simplelist>
  <member>The iODBC.framework is the core of the ODBC driver manager. Its main task is to load run the right function with the right ODBC driver. </member>
  <member>The iODBCinst.framework is the ODBC configuration manager. Its main task is to access and manage the DSN files.</member>
  <member>The iODBCadm.framework is the GUI manager. Its main task is to give to the user the ability to access all the ODBC functionality through a GUI.</member>
</simplelist>
<para>First of all, you have to be sure that the compiler and linker you are 
using can manage frameworks correctly.</para>
<note><title>Note:</title>
  <para>The iODBC SDK is shipped with the <computeroutput>odbctest</computeroutput> 
  sample application including sources and project file, which is intended as an example 
  of an application utilizing iODBC.</para></note>
<para>Under Project Builder, you have to put all the frameworks that your 
application will use into your project. Implicitly, all these frameworks will be 
used. Also, you have to be sure that the machine where the application will 
be running includes all the frameworks with which you are linking. In certain 
cases, iODBC can be shipped with your application and all the frameworks.</para>
<para>This is the most straightforward way, but you can also directly use 
the compiler and command line linker shipped with Project Builder. In such case, 
you will have to add certain options to let the compiler and linker know that you want to 
use a specific framework.  However, the sources do not require any changes.  During 
the compilation phase, you will have to use the "<computeroutput>–F</computeroutput>" 
option to add a path to let the compiler search for frameworks under the designated 
path. The correct syntax is "<computeroutput>–Fdir</computeroutput>", where 
<computeroutput>dir</computeroutput> is the path you want to add. You have 
to put one path, and there is no limit on the number of <computeroutput>–F</computeroutput> 
options to pass on the command line.  For iODBC, you have to add only the 
following two directories:</para>
<programlisting><![CDATA[
/Library/Frameworks
/System/Library/Frameworks
]]></programlisting>
<para>A complete cc compilation command line may look like:</para>
<programlisting><![CDATA[
cc –c "–F/Library/Frameworks" "–F/System/Library/Frameworks" mysources.c
]]></programlisting>
<para>During the linkage phase, you will have to use the same option as above, 
as well as specifying at the end of the command line all the frameworks with which 
you are linking, preceded by the option <computeroutput>–framework</computeroutput>.</para>
<para>A complete <computeroutput>cc</computeroutput> linkage command line may look like:</para>
<programlisting><![CDATA[
cc –o "myapplication" "–F/Library/Frameworks" "–F/System/Library/Frameworks"  \
      –framework "iODBC" –framework "iODBCinst" –framework "iODBCadm"
]]></programlisting>
</sect2>
<sect2 id="iodbcsdkrefs"><title>References</title>
<para><ulink url="http://www.iodbc.org/">iODBC web site</ulink></para>
<para><ulink url="http://www.openlinksw.com/">OpenLink Software web site</ulink></para>
<para><ulink url="http://www.microsoft.com/data/odbc/">ODBC web site</ulink></para>
<para><ulink url="http://developer.apple.com/">Apple's Developer web site</ulink></para>
</sect2>
<sect2 id="iodbcportappmac"><title>Porting Mac OS Classic ODBC applications to Mac OS X</title>
<para>Carbon is a framework included with Apple's Mac OS X operating system 
that is derived from the original Macintosh Toolbox programming interface.  
Carbon on Mac OS X is an entirely new implementation, with a superset of 
the original Toolbox functionality, and many changes and additions to run 
under the Mac OS X operating system.</para>
<para>A subset of Carbon is also available on previous versions of the Mac 
OS, all the way back to Mac OS 8.1 or Mac OS 8.6 depending on the functionality 
required. This enables developers to create applications from one set of source 
code that will run on both the original Macintosh operating system as well as 
Mac OS X.  Carbon applications can even take advantage of special Mac 
OS X features when running on Mac OS X, and continue to run as they have 
otherwise on earlier versions of the Mac OS.</para>
<para>Cocoa is a rich set of object-oriented frameworks that allow for the 
most rapid development of applications on Mac OS X. Using Cocoa, developers can 
create full-featured applications in a fraction of the time they would need for 
procedural languages. Applications from UNIX and other OS platforms can also 
be brought to Mac OS X quickly by using Cocoa to build state-of-the-art Aqua 
user interfaces while retaining most existing core code. </para>
<para>The Cocoa application environment is designed specifically for Mac 
OS X-only native applications. It is comprised of a set of object-oriented 
frameworks that support rapid development and high productivity. The 
Cocoa frameworks include a full featured set of classes designed to 
create robust and powerful Mac OS X applications. The object-oriented design 
simplifies application development and debugging.  </para>
 <figure id="iodbcmac004" float="1"><title>iODBC SDK on Mac</title>
  <graphic fileref="mac10/macodbc1.jpg" format="jpeg"></graphic></figure>
<tip><title>See Also:</title>
  <para><ulink url="http://developer.apple.com/cocoa/">Cocoa</ulink></para>
  <para><ulink url="http://developer.apple.com/cabon/">Carbon</ulink></para></tip>
<sect3 id="iodbcportmaccarbon"><title>Migration of iODBC applications to Carbon</title>
<para>The iODBC CFM Bridge is the library that Carbon applications must 
be linked against.  This bridge is responsible for redirecting the ODBC API calls 
to the right iODBC version applicable to platform that the application is running 
on, beit Mac OS Classic or Mac OS X.</para>
<para>The iODBC CFM Bridge must be used exclusively.  If you link against the 
iODBC CFM Bridge, ensure that no others iODBC libraries are linked in your project.  
The iODBC CFM Bridge linked applications require a valid iODBC installation on 
the target platform in order run successfully. </para>
<para>Any CFM libraries used must be included in your System-Extensions 
folder of your Mac Classic system in order to successfully support carbon 
applications at runtime.</para>
</sect3>
<sect3 id="iodbcportmaccocoa"><title>Migration of iODBC applications to Cocoa</title>
<para>Under Project Builder, you have to put all the frameworks that your 
application will use in your project. Implicitly, all these frameworks will be 
used.  Also, you have to be sure that the machine where you will run the 
application include all the frameworks you link with. In such cases, iODBC 
can be shipped with your application including all the frameworks.</para>
<para>This is the most straight forward way, but you can also directly use 
the compiler and linker command line shipped with Project Builder. In a such 
case, you will have to add some options to inform the compiler and linker 
that you want to use a specific framework.  The sources sources do not have to change.</para>
<para>During the compilation phase, use the <computeroutput>-Fdir</computeroutput> 
option on the compiler command line to add a search path to the framework path, 
where dir is the path you want to add.  You may only specify one path 
per <computeroutput>-F</computeroutput> option, but you not limited to the 
number of <computeroutput>-F</computeroutput> options used.   iODBC 
compilations only require <computeroutput>-F/Library/Frameworks</computeroutput> 
and <computeroutput>-F/System/Library/Frameworks</computeroutput> options.  
Hence, complete <computeroutput>cc</computeroutput>= compilation command line 
may look like:</para>
<programlisting><![CDATA[
cc -c "-F/Library/Frameworks" "-F/System/Library/Frameworks" ... mysources.c
]]></programlisting>
<para>During the linkage phase, you will have to use the same option as above, 
and to specify at the end of the command line all the framework you want to 
link with, preceded with the option -framework . A complete cc linkage 
command line may look like:</para>
<programlisting><![CDATA[
cc -o "myapplication" "-F/Library/Frameworks" "-F/System/Library/Frameworks" ... \
  -framework "iODBC" -framework "iODBCinst" -framework "iODBCadm" 
]]></programlisting>
</sect3>
</sect2>
</sect1>
