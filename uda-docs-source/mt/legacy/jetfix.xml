<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- 
  $Id: jetfix.xml,v 1.1.1.1 2004/09/09 10:45:24 cvs Exp $
  (C)Copyright 1996-2024 OpenLink Software
-->
<sect1 id="jetfix">
<sect1info>
  <keywordset>
    <keyword>Jet Engine</keyword>
    <keyword>Jetfix</keyword>
    <keyword>Data type mapping</keyword>
  </keywordset>
</sect1info>
<title>ODBC to Jet Data Type Mapping</title>
<sect2 id="jetoverview">
<title>Overview</title>
<para>When linking to a remote table, Microsoft Jet calls the ODBC SQLColumns 
function to gather information on the fields in the table. The information 
returned by SQLColumns determines how the data type of each field will be mapped 
to a Microsoft Jet data type.</para>
<para>Jet uses the <emphasis>fSqlType</emphasis>, <emphasis>lPrecision</emphasis>,
and <emphasis>wScale</emphasis> values to 
determine an appropriate local data type, on a field-by-field basis, and uses 
that data type to represent the remote data in a linked table. Each time 
Microsoft Jet executes an action or parameter query against the remote data 
source, the information stored in the linked table is used to ensure that ODBC 
calls are made with a valid ODBC data type.</para>
<para>The Jet Engine's mapping of the ODBC SQL_DECIMAL and SQL_NUMERIC types is 
detailed below. The mapping of these column types is problematic when the 
precision of a column is greater than 15. Under these circumstances Jet maps the 
column to the Jet Text type. This is done so as not to lose precision, since the 
maximum precision of the Jet numeric types is 15. An unfortunate consequence of 
mapping to the Text type is that the data is no longer recognised as being 
numeric.</para>
<para>To overcome this limitation, the Jetfix switch (+jetfix) changes the ODBC type returned 
by SQLColumns for native database column types which would normally be reported 
as SQL_DECIMAL or SQL_NUMERIC. These might, for example, be MONEY, DECIMAL or 
NUMERIC columns in the remote table. With Jetfix enabled, these columns are 
typically reported as SQL_DOUBLE; which Jet always maps to Number (Double). As a 
result, Jet recognises the data as numeric, albeit with a possible loss of 
precision, depending on the actual data values.</para>
</sect2>
<sect2 id="jetmap">
<title>ODBC to Jet Data Type Mapping</title>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>ODBC to Jet Data Type Mapping performed by Jet Engine</title>
<tgroup align="char" charoff="50" char="." cols="5">
<colspec colname="otype"/>
<colspec colname="precision"/>
<colspec colname="scale"/>
<colspec colname="jettype"/>
<colspec colname="notes"/>
<spanspec spanname="otypespan" namest="otype" nameend="scale" align="center"/>
<thead>
  <row>
    <entry spanname="otypespan" morecols="2">ODBC Data Type</entry>
    <entry morerows="1" valign="bottom">Jet Data Type&dagger;</entry>
    <entry morerows="1" valign="bottom">Notes</entry>
  </row>
  <row>
    <entry>Type</entry>
    <entry>Precision p</entry>
    <entry>Scale s</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry morerows="6"><para>SQL_DECIMAL</para><para>SQL_NUMERIC</para></entry>
    <entry>p &lt;= 4</entry>
    <entry>s = 0</entry>
    <entry>Number (Integer)</entry>
    <entry>&nbsp;</entry>
  </row>
  <row>
    <entry>p &lt;= 9</entry>
    <entry>s = 0</entry>
    <entry>Number (Long Integer)</entry>
    <entry>&nbsp;</entry>
  </row>
  <row>
    <entry>p &lt;= 15</entry>
    <entry>0 &lt;= s &lt;=4</entry>
    <entry>Number (Double)</entry>
    <entry>&nbsp;</entry>
  </row>
  <row>
    <entry>p &lt;= 15?</entry>
    <entry>s &gt; 4</entry>
    <entry>Number (Double)</entry>
    <entry>"ODBC to Jet Data Type Mapping" document unclear here.</entry>
  </row>
  <row>
    <entry>p = 19</entry>
    <entry>s = 4</entry>
    <entry>Currency</entry>
    <entry>MS SQL Server only</entry></row>
  <row>
    <entry>p = 10</entry>
    <entry>s = 4</entry>
    <entry>Currency</entry>
    <entry>MS SQL Server only</entry></row>
  <row>
    <entry>p &gt; 15</entry>
    <entry>s irrelevant</entry>
    <entry>Text</entry>
    <entry>Not documented. Based on testing.</entry>
  </row>
</tbody>
</tgroup>
</table>
<para>&dagger;The Jet Data Type is a property setting available
in the table Design view.</para>
</sect2>
<sect2 id="jetranges">
<title>Jet Data Type Ranges</title>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>Jet Data Type Ranges</title>
<tgroup align="char" charoff="50" char="." cols="2">
<colspec colwidth="20pc"/>
<thead>
  <row>
    <entry>Jet Data Type</entry>
    <entry>Range</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>Integer</entry>
    <entry>– 32,768 … 32,767</entry>
  </row>
  <row>
    <entry>Long Integer</entry>
    <entry>– 2,147,483,648 … 2,147,483,647</entry>
  </row>
  <row>
    <entry>Double</entry>
    <entry>-1.8E+308 … -1.8E-308, 1.8E-308 … 1.8E+308</entry>
  </row>
  <row>
    <entry>Currency</entry>
    <entry>– 922,337,203,685,477.5808 … 922,337,203,685,477.5807</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect2>
<sect2 id="jetref">
<title>References</title>
<para>See the following articles from Microsoft:</para>
<itemizedlist>
<listitem>Knowledge base article KB214854,
"Improved ODBC DataType Mappings with Jet 4.0" on the
<ulink url="http://support.microsoft.com/">Microsoft Support Website</ulink>.</listitem>
<listitem>See Chapter 9 "Developing Client/Server Application" of
Microsoft Jet Database Engine Programmer's Guide, Second Edition. 
Redmond, WA: Microsoft Press, 1997.</listitem>
</itemizedlist>
</sect2>
<sect2 id="jetinf">
<title>Informix Jet Support</title>
<sect3 id="jetinftest">
<title>Informix Jetfix Testing</title>
<para>To verify the effect of the +jetfix switch, two tables were created and then
linked to from Access, once with +jetfix enabled, and once with +jetfix disabled.
The first table contained five MONEY columns of various precisions and scales.
The second table was identical except that it used DECIMAL instead of MONEY
columns. The resulting Jet data type mappings as shown in the 'Table Design'
view are detailed below:</para>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>Informix ODBC to Jet Data Type Mapping</title>
<tgroup align="char" charoff="50" char="." cols="3">
<colspec colname="tabledef" colwidth="47pc"/>
<colspec colname="jetoff"/>
<colspec colname="jeton"/>
<spanspec spanname="jetoffon" namest="jetoff" nameend="jeton" align="center"/>
<thead>
  <row>
    <entry morerows="1" valign="bottom"><para>Informix table definition:</para>
      <para>create table CBTEST (&lt;column defs&gt;)</para></entry>
    <entry spanname="jetonoff" morecols="1">Jet Type Mappings</entry>
  </row>
  <row>
    <entry>Jetfix off</entry>
    <entry>Jetfix on</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>col1 {MONEY| DECIMAL} (14, 4)</entry>
    <entry>Number (Double)</entry>
    <entry>Number (Double)</entry>
  </row>
  <row>
    <entry>col2 {MONEY| DECIMAL} (14, 5)</entry>
    <entry>Number (Double)</entry>
    <entry>Number (Double)</entry>
  </row>
  <row>
    <entry>col3 {MONEY| DECIMAL} (16, 0)</entry>
    <entry>Text</entry>
    <entry>Number (Double)</entry>
  </row>
  <row>
    <entry>col4 {MONEY| DECIMAL} (16, 4)</entry>
    <entry>Text</entry>
    <entry>Number (Double)</entry>
  </row>
  <row>
    <entry>col5 {MONEY| DECIMAL} (16, 5)</entry>
    <entry>Text</entry>
    <entry>Number (Double)</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect3>
<sect3 id="jetinfnum">
<title>OpenLink Informix Agent – Numeric Data type Mappings</title>
<para>The following table details how the Informix agent fetches numeric data
from Informix. The SQL type reported for a SELECT column varies depending on
the native Informix type of the column, and its precision and scale. The
OpenLink C type used to fetch the data is also shown, together with the effect
of the JetFix command line switch.</para>
<para>Changes to the type mappings required to implement the +jetfix option
are shown in <italic>italics</italic>.</para>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>Informix Agent – Numeric Data type Mappings</title>
<tgroup align="char" charoff="50" char="." cols="6">
<thead>
  <row>
    <entry>Informix Type</entry>
    <entry>Scale (s)</entry>
    <entry><para>Decimal Precision (p)</para>
      <para>Range (r)</para></entry>
    <entry>JetFix</entry>
    <entry>SQL Type</entry>
    <entry><para>OpenLink Fetch Type</para>
	<para>CTYPE_xxx</para></entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><para>FLOAT [(n)] {1}</para>
	<para>Synonyms:</para>
	<para>DOUBLE PRECISION</para></entry>
    <entry>NA</entry>
    <entry><para>p &lt;= 16</para>
	<para>r = &plusmn;1.7E&plusmn;308 (15 digits precision)</para></entry>
    <entry>NA</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64</entry>
  </row>
  <row>
    <entry morerows="1"><para>DECIMAL</para>
	<para>DECIMAL (p)</para>
	<para>DECIMAL (p,s)</para>
	<para>Synonyms:</para>
	<para>NUMERIC</para></entry>
    <entry morerows="1"><para>NA</para>
	<para>NA</para></entry>
    <entry morerows="1"><para>p = 16</para>
	<para>p &lt;= 32</para>
	<para>p &lt;= 32</para>
	<para>r = 1E+124 … 1E-130 ..</para></entry>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR</entry>
  </row>
  <row>
    <entry><italic>ON</italic></entry>
    <entry><italic>SQL_DOUBLE</italic></entry>
    <entry><italic>FLT64</italic> {2}</entry>
  </row>
  <row>
    <entry><para>INTEGER</para>
	<para>Synonymns:</para>
	<para>INT</para></entry>
    <entry>s = 0</entry>
    <entry><para>p &lt;= 9</para>
	<para>r = -2,147,483,648 to +2,147,483,647</para></entry>
    <entry>NA</entry>
    <entry>SQL_INTEGER</entry>
    <entry>SGN32</entry>
  </row>
  <row>
    <entry morerows="1"><para>MONEY</para>
	<para>MONEY(p)</para>
	<para>MONEY (p,s)</para></entry>
    <entry morerows="1"><para>s = 2</para>
	<para>s = 2</para></entry>
    <entry morerows="1"><para>p = 16</para>
	<para>p &lt;= 32</para>
	<para>p &lt;=32</para>
	<para>r = &plusmn;1E(p-s) - 1E(-s)</para></entry>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR</entry>
  </row>
  <row>
    <entry><italic>ON</italic></entry>
    <entry><italic>SQL_DOUBLE</italic></entry>
    <entry><italic>FLT64</italic> {2}</entry>
  </row>
  <row>
    <entry><para>SMALLFLOAT</para>
	<para>Synonyms:</para>
	<para>REAL</para></entry>
    <entry>NA</entry>
    <entry>r =&plusmn;3.4E38</entry>
    <entry>NA</entry>
    <entry>SQL_REAL</entry>
    <entry>FLT32</entry>
  </row>
  <row>
    <entry>SMALLINT</entry>
    <entry>s = 0</entry>
    <entry><para>p = 5</para>
	<para>r = -32,768 to +32,767</para></entry>
    <entry>NA</entry>
    <entry>SQL_SMALLINT</entry>
    <entry>SGN16</entry>
  </row>
</tbody>
</tgroup>
</table>
<itemizedlist>
 <listitem>{1} Informix SQL ignores the specified float precision.</listitem>
 <listitem>{2} Possible loss of precision.</listitem>
</itemizedlist>
</sect3>
<sect3 id="jetinfctype">
<title>Precision of OpenLink C Types</title>
<para>The choice of OpenLink C type used to fetch a numeric value is determined
by the maximum precision supported by the type. If a numeric type exists which
can represent the data to be fetched, without loss of precision, then this is
used as the preferred fetch type. If a numeric type capable of supporting the
required precision does not exist, then the data is fetched in character form,
unless the JetFix switch is on. In this case, the data is fetched using the
CTYPE_FLT64 fetch type. This type has sufficient range to store the maximum
numeric values supported by Informix, but its use may result in a loss of
precision, if the precision of the data to be fetched exceeds 15 decimal
digits.</para>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>Precision of OpenLink C Types</title>
<tgroup align="char" charoff="50" char="." cols="4">
<thead>
  <row>
    <entry>OpenLink C Type CTYPE_xxx</entry>
    <entry>Equivalent built in C type (32bit processor)</entry>
    <entry>Range</entry>
    <entry>Can hold all numbers of precision &lt;= p decimal digits</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>SGN8</entry>
    <entry>signed char</entry>
    <entry>-128…127</entry>
    <entry>p = 2</entry>
  </row>
  <row>
    <entry>SGN16</entry>
    <entry>short</entry>
    <entry>-32768…32767</entry>
    <entry>p = 4</entry>
  </row>
  <row>
    <entry>FLT32</entry>
    <entry>float</entry>
    <entry>&plusmn;3.4E38 (6 digits precision)</entry>
    <entry>p = 6</entry>
  </row>
  <row>
    <entry>SGN32</entry>
    <entry>long</entry>
    <entry>-2,147,483,648…2,147,483,647</entry>
    <entry>p = 9</entry>
  </row>
  <row>
    <entry>FLT64</entry>
    <entry>double</entry>
    <entry>&plusmn;1.7 E&plusmn;308 (15 digits precision)</entry>
    <entry>p = 15</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
<sect2 id="jetora">
<title>Oracle Jet Support</title>
<sect3 id="jetoramap">
<title>OpenLink Oracle Agent – Numeric Data type Mappings</title>
<para>The following table details how the Oracle agent fetches numeric data
from Oracle. The SQL type reported for a SELECT column varies depending on the
native Oracle type of the column, and its precision and scale. The OpenLink C
type used to fetch the data is also shown, together with the effect of the
JetFix command line switch.</para>
<para>Changes to the type mappings are shown in the table as <italic>italics</italic>.</para>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>Informix ODBC to Jet Data Type Mapping</title>
<tgroup align="char" charoff="50" char="." cols="6">
<thead>
  <row>
    <entry>Oracle Type</entry>
    <entry>Scale (s)</entry>
    <entry>Decimal Precision (p)</entry>
    <entry>JetFix</entry>
    <entry>SQL Type</entry>
    <entry>OpenLink Fetch Type CTYPE_xxx</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry morerows="2">FLOAT (b)</entry>
    <entry morerows="2">NA</entry>
    <entry><para>p &lt;= 15</para>
	<para>(b &lt;= 50) {1}</para></entry>
    <entry>NA</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64</entry>
  </row>
  <row>
    <entry morerows="1"><para>15 &lt; p &lt; 38</para>
	<para>(50 &lt; b &lt; 126)</para></entry>
    <entry>ON</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64 {2}</entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR16</entry>
  </row>
  <row>
    <entry morerows="1">FLOAT {3} , NUMBER {4}</entry>
    <entry morerows="1">NA</entry>
    <entry morerows="1">p = 38</entry>
    <entry>ON</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64 {2}</entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR16</entry>
  </row>
  <row>
    <entry morerows="3">NUMBER (p,s)</entry>
    <entry morerows="3">s &lt;&gt; 0</entry>
    <entry morerows="1">p &lt;= 15</entry>
    <entry>ON</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64</entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR16</entry>
  </row>
  <row>
    <entry morerows="1">p &gt; 15</entry>
    <entry>ON</entry>
    <entry><para>SQL_DECIMAL</para>
	<para><italic>SQL_DOUBLE</italic></para></entry>
    <entry><para>VCHR16</para>
	<para><italic>FLT64</italic> {2}?</para></entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR16</entry>
  </row>
  <row>
    <entry morerows="1">Calculated field</entry>
    <entry morerows="1">s = 0</entry>
    <entry morerows="1">p = 0 {5}</entry>
    <entry>ON</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64</entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR16</entry>
  </row>
  <row>
    <entry morerows="6">NUMBER (p)</entry>
    <entry morerows="6">s = 0</entry>
    <entry>0 &lt; p &lt;= 2</entry>
    <entry>NA</entry>
    <entry>SQL_TINYINT</entry>
    <entry>SGN8</entry>
  </row>
  <row>
    <entry>2 &lt; p &lt;= 4</entry>
    <entry>NA</entry>
    <entry>SQL_SMALLINT</entry>
    <entry>SGN16</entry>
  </row>
  <row>
    <entry>4 &lt; p &lt;= 9</entry>
    <entry>NA</entry>
    <entry>SQL_INTEGER</entry>
    <entry>SGN32</entry>
  </row>
  <row>
    <entry morerows="1">9 &lt; p &lt;= 15</entry>
    <entry>ON</entry>
    <entry>SQL_DOUBLE</entry>
    <entry><para>VCHR16</para>
	<para><italic>FLT64</italic></para></entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry><para>SQL_DOUBLE</para>
	<para><italic>SQL_DECIMAL</italic></para></entry>
    <entry>VCHR16</entry>
  </row>
  <row>
    <entry morerows="1">15 &lt; p &lt;= 38 {6}</entry>
    <entry>ON</entry>
    <entry>SQL_DOUBLE</entry>
    <entry>FLT64<SUP> </SUP>{2}</entry>
  </row>
  <row>
    <entry>OFF</entry>
    <entry>SQL_DECIMAL</entry>
    <entry>VCHR16</entry>
  </row>
</tbody>
</tgroup>
</table>
<para>{Notes}:</para>
<itemizedlist>
<listitem>FLOAT(b) specifies a floating point number with binary precision b.
The precision can range from 1 to 126. To convert from binary to decimal
precision, multiply b by 0.30103.</listitem>
<listitem>Possible loss of precision</listitem>
<listitem>FLOAT specifies a floating point number with decimal precision 38,
or a binary precision of 126.</listitem>
<listitem>NUMBER specifies a floating point number with decimal precision = 38.</listitem>
<listitem>Oracle appears to return s=0, p=0 for a calculated field</listitem>
<listitem>Oracle permits a maximum precision of 38.</listitem>
</itemizedlist>
</sect3>
<sect3 id="jetoractype">
<title>Precision of OpenLink C Types</title>
<para>The choice of OpenLink C type used to fetch a numeric value is determined
by the maximum precision supported by the type. If a numeric type exists which
can represent the data to be fetched, without loss of precision, then this is
used as the preferred fetch type. If a numeric type capable of supporting the
required precision does not exist, then the data is fetched in character form,
unless the JetFix switch is on. In this case, the data is fetched using the
CTYPE_FLT64 fetch type. This type has sufficient range to store the maximum
numeric values supported by Oracle, but its use may result in a loss of
precision, if the precision of the data to be fetched exceeds 15 decimal
digits.</para>
<table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
<title>Precision of OpenLink Oracle C Types</title>
<tgroup align="char" charoff="50" char="." cols="4">
<thead>
  <row>
    <entry>OpenLink C Type CTYPE_xxx</entry>
    <entry>Equivalent built in C type (32 bit processor)</entry>
    <entry>Range</entry>
    <entry>Can hold all numbers of precision &lt;= p decimal digits</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>SGN8</entry>
    <entry>signed char</entry>
    <entry>-128…127</entry>
    <entry>p = 2</entry>
  </row>
  <row>
    <entry>SGN16</entry>
    <entry>short</entry>
    <entry>-32768…32767</entry>
    <entry>p = 4</entry>
  </row>
  <row>
    <entry>SGN32</entry>
    <entry>long</entry>
    <entry>-2,147,483,648…2,147,483,647</entry>
    <entry>p = 9</entry>
  </row>
  <row>
    <entry>FLT64</entry>
    <entry>double</entry>
    <entry>&plusmn;1.7 E&plusmn;308 (15 digits precision)</entry>
    <entry>p = 15</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
</sect1>
