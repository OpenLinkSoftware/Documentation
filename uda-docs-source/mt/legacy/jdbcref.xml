<sect1 id="jdbcref" >
<sect1info>
  <keywordset>
    <keyword>JDBC3 Driver</keyword>
    <keyword>JDBC 3 Driver</keyword>
  </keywordset>
</sect1info>
  <title>JDBC 3 Driver Classes</title>
  <para>The OpenLink JDBC driver for JDBC 3.0 has the following classes:</para>
  <sect2 id="jd1.1" xreflabel="Class BaseRowSet" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class BaseRowSet</title>
    <indexterm significance="normal">
      <primary>BaseRowSet</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>BaseRowSet</secondary>
    </indexterm>
    <sect3 id="jd1.1.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
abstract public class <emphasis role="strong">BaseRowSet</emphasis> implements RowSet,Serializable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">BaseRowSet</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">addRowSetListener</emphasis>(javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
  public void <emphasis role="strong">removeRowSetListener</emphasis>(javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
  public void <emphasis role="strong">clearParameters</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getCommand</emphasis>();
  public int <emphasis role="strong">getConcurrency</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getDataSourceName</emphasis>();
  public boolean <emphasis role="strong">getEscapeProcessing</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getFetchDirection</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getFetchSize</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxFieldSize</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxRows</emphasis>() throws java.sql.SQLException;
  public Object[] <emphasis role="strong">getParams</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getPassword</emphasis>();
  public int <emphasis role="strong">getQueryTimeout</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getTransactionIsolation</emphasis>();
  public int <emphasis role="strong">getType</emphasis>() throws java.sql.SQLException;
  public Map <emphasis role="strong">getTypeMap</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getUrl</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getUsername</emphasis>();
  public boolean <emphasis role="strong">isReadOnly</emphasis>();
  public void <emphasis role="strong">setArray</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setAsciiStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                             int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setBigDecimal</emphasis>(int <emphasis>parameterIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setBinaryStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                              int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setBlob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setBoolean</emphasis>(int <emphasis>parameterIndex</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setByte</emphasis>(int <emphasis>parameterIndex</emphasis>, byte <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setBytes</emphasis>(int <emphasis>parameterIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCharacterStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                 int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setClob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>, 
                      java.util.Calendar <emphasis>cal</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setDouble</emphasis>(int <emphasis>parameterIndex</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setFloat</emphasis>(int <emphasis>parameterIndex</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setInt</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setLong</emphasis>(int <emphasis>parameterIndex</emphasis>, long <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setRef</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setShort</emphasis>(int <emphasis>parameterIndex</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setString</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>, 
                      java.util.Calendar <emphasis>cal</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>, 
                           java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setUnicodeStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                               int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>, 
                      java.lang.String <emphasis>typeName</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                        int <emphasis>targetSqlType</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                        int <emphasis>targetSqlType</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>i</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>s</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setEscapeProcessing</emphasis>(boolean <emphasis>flag</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setFetchDirection</emphasis>(int <emphasis>direction</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setFetchSize</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setMaxFieldSize</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setMaxRows</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setQueryTimeout</emphasis>(int <emphasis>seconds</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setTransactionIsolation</emphasis>(int <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setType</emphasis>(int <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setTypeMap</emphasis>(java.util.Map <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setUrl</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setUsername</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.BaseRowSet</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.1.2">
      <title>Members</title>
      <sect4 id="jd1.1.2.1" xreflabel="Method addRowSetListener(javax.sql.RowSetListener)">
        <title>Method addRowSetListener(RowSetListener)</title>
        <indexterm significance="normal">
          <primary>addRowSetListener</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>addRowSetListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">addRowSetListener</emphasis>(
                        javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">listener</literal></emphasis> - an event listener</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
RowSet listener registration. Listeners are notified
 when an event occurs.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.2" xreflabel="Method clearParameters()">
        <title>Method clearParameters()</title>
        <indexterm significance="normal">
          <primary>clearParameters</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>clearParameters</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">clearParameters</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
In general, parameter values remain in force for repeated use of a
 RowSet. Setting a parameter value automatically clears its
 previous value. However, in some cases it is useful to immediately
 release the resources used by the current parameter values; this can
 be done by calling clearParameters.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.3" xreflabel="Method getCommand()">
        <title>Method getCommand()</title>
        <indexterm significance="normal">
          <primary>getCommand</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCommand</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCommand</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the rowset's command property.
 The command property contains a command string that can be executed to
 fill the rowset with data. The default value is null.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.4" xreflabel="Method getConcurrency()">
        <title>Method getConcurrency()</title>
        <indexterm significance="normal">
          <primary>getConcurrency</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConcurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getConcurrency</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the rowset concurrency.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.5" xreflabel="Method getDataSourceName()">
        <title>Method getDataSourceName()</title>
        <indexterm significance="normal">
          <primary>getDataSourceName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDataSourceName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The JNDI name that identifies a JDBC data source. Users should set
 either the url or data source name properties. The most recent
 property set is used to get a connection.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.6" xreflabel="Method getEscapeProcessing()">
        <title>Method getEscapeProcessing()</title>
        <indexterm significance="normal">
          <primary>getEscapeProcessing</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getEscapeProcessing</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getEscapeProcessing</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL to the database.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.7" xreflabel="Method getFetchDirection()">
        <title>Method getFetchDirection()</title>
        <indexterm significance="normal">
          <primary>getFetchDirection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFetchDirection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getFetchDirection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine the fetch direction.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.8" xreflabel="Method getFetchSize()">
        <title>Method getFetchSize()</title>
        <indexterm significance="normal">
          <primary>getFetchSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFetchSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getFetchSize</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Determine the default fetch size.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.9" xreflabel="Method getMaxFieldSize()">
        <title>Method getMaxFieldSize()</title>
        <indexterm significance="normal">
          <primary>getMaxFieldSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMaxFieldSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxFieldSize</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxFieldSize limit (in bytes) is the maximum amount of data
 returned for any column value; it only applies to BINARY,
 VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR
 columns. If the limit is exceeded, the excess data is silently
 discarded.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.10" xreflabel="Method getMaxRows()">
        <title>Method getMaxRows()</title>
        <indexterm significance="normal">
          <primary>getMaxRows</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMaxRows</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxRows</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxRows limit is the maximum number of rows that a
 RowSet can contain. If the limit is exceeded, the excess
 rows are silently dropped.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.11" xreflabel="Method getParams()">
        <title>Method getParams()</title>
        <indexterm significance="normal">
          <primary>getParams</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getParams</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object[] <emphasis role="strong">getParams</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the parameters that were set on the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.12" xreflabel="Method getPassword()">
        <title>Method getPassword()</title>
        <indexterm significance="normal">
          <primary>getPassword</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getPassword</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The password used to create a database connection. The password
 property is set at runtime before calling execute(). It is
 not usually part of the serialized state of a rowset object.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.13" xreflabel="Method getQueryTimeout()">
        <title>Method getQueryTimeout()</title>
        <indexterm significance="normal">
          <primary>getQueryTimeout</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getQueryTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getQueryTimeout</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The queryTimeout limit is the number of seconds the driver will
 wait for a Statement to execute. If the limit is exceeded, a
 SQLException is thrown.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.14" xreflabel="Method getTransactionIsolation()">
        <title>Method getTransactionIsolation()</title>
        <indexterm significance="normal">
          <primary>getTransactionIsolation</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTransactionIsolation</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getTransactionIsolation</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The transaction isolation property contains the JDBC transaction
 isolation level used.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.15" xreflabel="Method getType()">
        <title>Method getType()</title>
        <indexterm significance="normal">
          <primary>getType</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getType</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getType</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return the type of this result set.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.16" xreflabel="Method getTypeMap()">
        <title>Method getTypeMap()</title>
        <indexterm significance="normal">
          <primary>getTypeMap</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTypeMap</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Map <emphasis role="strong">getTypeMap</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the type-map object associated with this rowset.
 By default, the map returned is empty.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.17" xreflabel="Method getUrl()">
        <title>Method getUrl()</title>
        <indexterm significance="normal">
          <primary>getUrl</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUrl</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getUrl</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the url used to create a JDBC connection. The default value
 is null.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.18" xreflabel="Method getUsername()">
        <title>Method getUsername()</title>
        <indexterm significance="normal">
          <primary>getUsername</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUsername</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getUsername</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The username used to create a database connection. The username
 property is set at runtime before calling execute(). It is
 not usually part of the serialized state of a rowset object.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.19" xreflabel="Method isReadOnly()">
        <title>Method isReadOnly()</title>
        <indexterm significance="normal">
          <primary>isReadOnly</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isReadOnly</emphasis>();
          </programlisting>
        </blockquote>
        <para>
A rowset may be read-only. Attempts to update a
 read-only rowset will result in an SQLException being thrown.
 Rowsets are updateable, by default, if updates are possible.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.20" xreflabel="Method removeRowSetListener(javax.sql.RowSetListener)">
        <title>Method removeRowSetListener(RowSetListener)</title>
        <indexterm significance="normal">
          <primary>removeRowSetListener</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>removeRowSetListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">removeRowSetListener</emphasis>(
                        javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">listener</literal></emphasis> - an event listener</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
RowSet listener deregistration.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.21" xreflabel="Method setArray(int, java.sql.Array)">
        <title>Method setArray(int, Array)</title>
        <indexterm significance="normal">
          <primary>setArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setArray</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - an object representing an SQL array</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set an Array parameter.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.22" xreflabel="Method setAsciiStream(int, java.io.InputStream, int)">
        <title>Method setAsciiStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>setAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setAsciiStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                     int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the java input stream which contains the ASCII parameter value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the number of bytes in the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
When a very large ASCII value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.23" xreflabel="Method setBigDecimal(int, java.math.BigDecimal)">
        <title>Method setBigDecimal(int, BigDecimal)</title>
        <indexterm significance="normal">
          <primary>setBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBigDecimal</emphasis>(int <emphasis>parameterIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.lang.BigDecimal value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.24" xreflabel="Method setBinaryStream(int, java.io.InputStream, int)">
        <title>Method setBinaryStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>setBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBinaryStream</emphasis>(int <emphasis>parameterIndex</emphasis>, 
                                      java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the java input stream which contains the binary parameter value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the number of bytes in the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
When a very large binary value is input to a LONGVARBINARY
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.25" xreflabel="Method setBlob(int, java.sql.Blob)">
        <title>Method setBlob(int, Blob)</title>
        <indexterm significance="normal">
          <primary>setBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBlob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - an object representing a BLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a BLOB parameter.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.26" xreflabel="Method setBoolean(int, boolean)">
        <title>Method setBoolean(int, boolean)</title>
        <indexterm significance="normal">
          <primary>setBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBoolean</emphasis>(int <emphasis>parameterIndex</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java boolean value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.27" xreflabel="Method setByte(int, byte)">
        <title>Method setByte(int, byte)</title>
        <indexterm significance="normal">
          <primary>setByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setByte</emphasis>(int <emphasis>parameterIndex</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java byte value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.28" xreflabel="Method setBytes(int, byte[])">
        <title>Method setBytes(int, byte[])</title>
        <indexterm significance="normal">
          <primary>setBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBytes</emphasis>(int <emphasis>parameterIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java array of bytes.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.29" xreflabel="Method setCharacterStream(int, java.io.Reader, int)">
        <title>Method setCharacterStream(int, Reader, int)</title>
        <indexterm significance="normal">
          <primary>setCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCharacterStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                         int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the java reader which contains the UNICODE data</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the number of characters in the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
When a very large UNICODE value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.Reader. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.30" xreflabel="Method setClob(int, java.sql.Clob)">
        <title>Method setClob(int, Clob)</title>
        <indexterm significance="normal">
          <primary>setClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setClob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - an object representing a CLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a CLOB parameter.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.31" xreflabel="Method setCommand(java.lang.String)">
        <title>Method setCommand(String)</title>
        <indexterm significance="normal">
          <primary>setCommand</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCommand</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cmd</literal></emphasis> - a command string, may be null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the rowset's command property.
 This property is optional. The command property may not be needed
 when a rowset is produced by a data source that doesn't support
 commands, such as a spreadsheet.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.32" xreflabel="Method setConcurrency(int)">
        <title>Method setConcurrency(int)</title>
        <indexterm significance="normal">
          <primary>setConcurrency</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setConcurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>i</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">concurrency</literal></emphasis> - a value from ResultSet.CONCUR_XXX</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the rowset concurrency.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.33" xreflabel="Method setDataSourceName(java.lang.String)">
        <title>Method setDataSourceName(String)</title>
        <indexterm significance="normal">
          <primary>setDataSourceName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">name</literal></emphasis> - a data source name</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the data source name.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.34" xreflabel="Method setDate(int, java.sql.Date)">
        <title>Method setDate(int, Date)</title>
        <indexterm significance="normal">
          <primary>setDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Date value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.35" xreflabel="Method setDate(int, java.sql.Date, java.util.Calendar)">
        <title>Method setDate(int, Date, Calendar)</title>
        <indexterm significance="normal">
          <primary>setDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Date value. The driver converts this
 to a SQL DATE value when it sends it to the database.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.36" xreflabel="Method setDouble(int, double)">
        <title>Method setDouble(int, double)</title>
        <indexterm significance="normal">
          <primary>setDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDouble</emphasis>(int <emphasis>parameterIndex</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java double value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.37" xreflabel="Method setEscapeProcessing(boolean)">
        <title>Method setEscapeProcessing(boolean)</title>
        <indexterm significance="normal">
          <primary>setEscapeProcessing</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setEscapeProcessing</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setEscapeProcessing</emphasis>(boolean <emphasis>flag</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">enable</literal></emphasis> - true to enable; false to disable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL to the database.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.38" xreflabel="Method setFetchDirection(int)">
        <title>Method setFetchDirection(int)</title>
        <indexterm significance="normal">
          <primary>setFetchDirection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setFetchDirection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFetchDirection</emphasis>(int <emphasis>direction</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 the result set type is TYPE_FORWARD_ONLY and direction is not
 FETCH_FORWARD.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give a hint as to the direction in which the rows in this result set
 will be processed. The initial value is determined by the statement
 that produced the result set. The fetch direction may be changed
 at any time.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.39" xreflabel="Method setFetchSize(int)">
        <title>Method setFetchSize(int)</title>
        <indexterm significance="normal">
          <primary>setFetchSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setFetchSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFetchSize</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">rows</literal></emphasis> - the number of rows to fetch</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or the
 condition 0 &lt;= rows &lt;= this.getMaxRows() is not satisfied.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for this result
 set. If the fetch size specified is zero, then the JDBC driver
 ignores the value, and is free to make its own best guess as to what
 the fetch size should be. The default value is set by the statement
 that creates the result set. The fetch size may be changed at any
 time.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.40" xreflabel="Method setFloat(int, float)">
        <title>Method setFloat(int, float)</title>
        <indexterm significance="normal">
          <primary>setFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFloat</emphasis>(int <emphasis>parameterIndex</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java float value. The driver converts this
 to a SQL FLOAT value when it sends it to the database.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.41" xreflabel="Method setInt(int, int)">
        <title>Method setInt(int, int)</title>
        <indexterm significance="normal">
          <primary>setInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setInt</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java int value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.42" xreflabel="Method setLong(int, long)">
        <title>Method setLong(int, long)</title>
        <indexterm significance="normal">
          <primary>setLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setLong</emphasis>(int <emphasis>parameterIndex</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java long value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.43" xreflabel="Method setMaxFieldSize(int)">
        <title>Method setMaxFieldSize(int)</title>
        <indexterm significance="normal">
          <primary>setMaxFieldSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMaxFieldSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxFieldSize</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">max</literal></emphasis> - the new max column size limit; zero means unlimited</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxFieldSize limit (in bytes) is set to limit the size of
 data that can be returned for any column value; it only applies
 to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and
 LONGVARCHAR fields. If the limit is exceeded, the excess data
 is silently discarded. For maximum portability use values
 greater than 256.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.44" xreflabel="Method setMaxRows(int)">
        <title>Method setMaxRows(int)</title>
        <indexterm significance="normal">
          <primary>setMaxRows</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMaxRows</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxRows</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">max</literal></emphasis> - the new max rows limit; zero means unlimited</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxRows limit is set to limit the number of rows that any
 RowSet can contain. If the limit is exceeded, the excess
 rows are silently dropped.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.45" xreflabel="Method setNull(int, int)">
        <title>Method setNull(int, int)</title>
        <indexterm significance="normal">
          <primary>setNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">sqlType</literal></emphasis> - SQL type code defined by java.sql.Types</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to SQL NULL. 
        </para>
        <para>
          <emphasis>Note:</emphasis> You must specify the parameter's SQL type.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.46" xreflabel="Method setNull(int, int, java.lang.String)">
        <title>Method setNull(int, int, String)</title>
        <indexterm significance="normal">
          <primary>setNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>, 
                              java.lang.String <emphasis>typeName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">sqlType</literal></emphasis> - a value from java.sql.Types</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">typeName</literal></emphasis> - the fully-qualified name of an SQL user-named type,
 ignored if the parameter is not a user-named type or REF</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the designated parameter to SQL NULL. This version of setNull should
 be used for user-named types and REF type parameters. Examples
 of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
 named array types. 
        </para>
        <para>
          <emphasis>Note:</emphasis> To be portable, applications must give the
 SQL type code and the fully-qualified SQL type name when specifying
 a NULL user-defined or REF parameter. In the case of a user-named type
 the name is the type name of the parameter itself. For a REF
 parameter the name is the type name of the referenced type. If
 a JDBC driver does not need the type code or type name information,
 it may ignore it.
 Although it is intended for user-named and Ref parameters,
 this method may be used to set a null parameter of any JDBC type.
 If the parameter does not have a user-named or REF type, the given
 typeName is ignored.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.47" xreflabel="Method setObject(int, java.lang.Object)">
        <title>Method setObject(int, Object)</title>
        <indexterm significance="normal">
          <primary>setObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - The first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - The object containing the input parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the value of a parameter using an object; use the
 java.lang equivalent objects for integral values. 
        </para>
        <para>
The JDBC specification specifies a standard mapping from
 Java Object types to SQL types. The given argument java object
 will be converted to the corresponding SQL type before being
 sent to the database. 
        </para>
        <para>
Note that this method may be used to pass datatabase
 specific abstract data types, by using a Driver specific Java
 type.
 If the object is of a class implementing SQLData,
 the rowset should call its method writeSQL() to write it
 to the SQL data stream.
 else
 If the object is of a class implementing Ref, Blob, Clob, Struct,
 or Array then pass it to the database as a value of the
 corresponding SQL type.
 Raise an exception if there is an ambiguity, for example, if the
 object is of a class implementing more than one of those interfaces.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.48" xreflabel="Method setObject(int, java.lang.Object, int)">
        <title>Method setObject(int, Object, int)</title>
        <indexterm significance="normal">
          <primary>setObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                int <emphasis>targetSqlType</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
This method is like setObject above, but the scale used is the scale
 of the second parameter. Scalar values have a scale of zero. Literal
 values have the scale present in the literal. While it is supported, it
 is not recommended that this method not be called with floating point
 input values.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.49" xreflabel="Method setObject(int, java.lang.Object, int, int)">
        <title>Method setObject(int, Object, int, int)</title>
        <indexterm significance="normal">
          <primary>setObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                int <emphasis>targetSqlType</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - The first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - The object containing the input parameter value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">targetSqlType</literal></emphasis> - The SQL type (as defined in java.sql.Types) to be
 sent to the database. The scale argument may further qualify this type.</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored,</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.Types</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the value of a parameter using an object; use the
 java.lang equivalent objects for integral values. 
        </para>
        <para>
The given Java object will be converted to the targetSqlType
 before being sent to the database.
 If the object is of a class implementing SQLData,
 the rowset should call its method writeSQL() to write it
 to the SQL data stream.
 else
 If the object is of a class implementing Ref, Blob, Clob, Struct,
 or Array then pass it to the database as a value of the
 corresponding SQL type. 
        </para>
        <para>
Note that this method may be used to pass datatabase-
 specific abstract data types.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.50" xreflabel="Method setPassword(java.lang.String)">
        <title>Method setPassword(String)</title>
        <indexterm significance="normal">
          <primary>setPassword</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">password</literal></emphasis> - the password string</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the password.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.51" xreflabel="Method setQueryTimeout(int)">
        <title>Method setQueryTimeout(int)</title>
        <indexterm significance="normal">
          <primary>setQueryTimeout</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setQueryTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setQueryTimeout</emphasis>(int <emphasis>seconds</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">seconds</literal></emphasis> - the new query timeout limit in seconds; zero means
 unlimited</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The queryTimeout limit is the number of seconds the driver will
 wait for a Statement to execute. If the limit is exceeded, a
 SQLException is thrown.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.52" xreflabel="Method setReadOnly(boolean)">
        <title>Method setReadOnly(boolean)</title>
        <indexterm significance="normal">
          <primary>setReadOnly</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>value</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">value</literal></emphasis> - true if read-only, false otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the read-onlyness of the rowset
        </para>
      </sect4>
      <sect4 id="jd1.1.2.53" xreflabel="Method setRef(int, java.sql.Ref)">
        <title>Method setRef(int, Ref)</title>
        <indexterm significance="normal">
          <primary>setRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setRef</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">i</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - an object representing data of an SQL REF Type</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a REF(&lt;structured-type&gt;) parameter.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.54" xreflabel="Method setShort(int, short)">
        <title>Method setShort(int, short)</title>
        <indexterm significance="normal">
          <primary>setShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setShort</emphasis>(int <emphasis>parameterIndex</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java short value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.55" xreflabel="Method setString(int, java.lang.String)">
        <title>Method setString(int, String)</title>
        <indexterm significance="normal">
          <primary>setString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setString</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java String value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.56" xreflabel="Method setTime(int, java.sql.Time)">
        <title>Method setTime(int, Time)</title>
        <indexterm significance="normal">
          <primary>setTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Time value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.57" xreflabel="Method setTime(int, java.sql.Time, java.util.Calendar)">
        <title>Method setTime(int, Time, Calendar)</title>
        <indexterm significance="normal">
          <primary>setTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Time value. The driver converts this
 to a SQL TIME value when it sends it to the database.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.58" xreflabel="Method setTimestamp(int, java.sql.Timestamp)">
        <title>Method setTimestamp(int, Timestamp)</title>
        <indexterm significance="normal">
          <primary>setTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Timestamp value.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.59" xreflabel="Method setTimestamp(int, java.sql.Timestamp, java.util.Calendar)">
        <title>Method setTimestamp(int, Timestamp, Calendar)</title>
        <indexterm significance="normal">
          <primary>setTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>, 
                                   java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the parameter value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Timestamp value. The driver
 converts this to a SQL TIMESTAMP value when it sends it to the
 database.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.60" xreflabel="Method setTransactionIsolation(int)">
        <title>Method setTransactionIsolation(int)</title>
        <indexterm significance="normal">
          <primary>setTransactionIsolation</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTransactionIsolation</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTransactionIsolation</emphasis>(int <emphasis>value</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">level</literal></emphasis> - the transaction isolation level</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the transaction isolation.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.61" xreflabel="Method setType(int)">
        <title>Method setType(int)</title>
        <indexterm significance="normal">
          <primary>setType</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setType</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setType</emphasis>(int <emphasis>value</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">value</literal></emphasis> - may be TYPE_FORWARD_ONLY, TYPE_SCROLL_INSENSITIVE, or
 TYPE_SCROLL_SENSITIVE</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the type of this result set.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.62" xreflabel="Method setTypeMap(java.util.Map)">
        <title>Method setTypeMap(Map)</title>
        <indexterm significance="normal">
          <primary>setTypeMap</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTypeMap</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTypeMap</emphasis>(java.util.Map <emphasis>value</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">map</literal></emphasis> - a map object</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Install a type-map object as the default type-map for
 this rowset.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.63" xreflabel="Method setUnicodeStream(int, java.io.InputStream, int)">
        <title>Method setUnicodeStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>setUnicodeStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUnicodeStream</emphasis>(int <emphasis>parameterIndex</emphasis>, 
                                       java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parameterIndex</literal></emphasis> - the first parameter is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the java input stream which contains the
 UNICODE parameter value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the number of bytes in the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
When a very large UNICODE value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. The JDBC driver will
 do any necessary conversion from UNICODE to the database char format. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.64" xreflabel="Method setUrl(java.lang.String)">
        <title>Method setUrl(String)</title>
        <indexterm significance="normal">
          <primary>setUrl</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setUrl</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUrl</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">url</literal></emphasis> - a string value, may be null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the url used to create a connection.
 Setting this property is optional. If a url is used, a JDBC driver
 that accepts the url must be loaded by the application before the
 rowset is used to connect to a database. The rowset will use the url
 internally to create a database connection when reading or writing
 data. Either a url or a data source name is used to create a
 connection, whichever was specified most recently.
        </para>
      </sect4>
      <sect4 id="jd1.1.2.65" xreflabel="Method setUsername(java.lang.String)">
        <title>Method setUsername(String)</title>
        <indexterm significance="normal">
          <primary>setUsername</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setUsername</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUsername</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">name</literal></emphasis> - a user name</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the user name.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.2" xreflabel="Class OPLCachedRowSet" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLCachedRowSet</title>
    <indexterm significance="normal">
      <primary>OPLCachedRowSet</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLCachedRowSet</secondary>
    </indexterm>
    <para>
A OPLCachedRowSet is a disconnected, serializable, scrollable container
 for tabular data. A primary purpose of the OPLCachedRowSet class is to
 provide a representation of a JDBC ResultSet that can be passed
 between different components of a remote application. For example, a
 OPLCachedRowSet can be used to send the result of a query executed by
 an Enterprise JavaBeans component running in a server environment over
 a network to a client running in a web browser. A second use for
 OPLCachedRowSets is to provide scrolling and updating for ResultSets that
 don't provide these capabilities themselves. A OPLCachedRowSet can be
 used to augment the capabilities of a JDBC driver that doesn't have
 full support for scrolling and updating. Finally, a OPLCachedRowSet can
 be used to provide Java applications with access to tabular data in an
 environment such as a thin client or PDA, where it would be
 inappropriate to use a JDBC driver due to resource limitations or
 security considerations. The OPLCachedRowSet class provides a means to
 "get rows in" and "get changed rows out" without the need to implement
 the full JDBC API. 
    </para>
    <para>
A OPLCachedRowSet object can contain data retrieved via a JDBC driver or
 data from some other source, such as a spreadsheet. Both a
 OPLCachedRowSet object and its metadata can be created from scratch. A
 component that acts as a factory for rowsets can use this capability
 to create a rowset containing data from non-JDBC data sources. 
    </para>
    <para>
The term 'disconnected' implies that a OPLCachedRowSet only makes use of
 a JDBC connection briefly while data is being read from the database
 and used to populate it with rows, and again while updated rows are being
 propagated back to the underlying database. During the remainder of
 its lifetime, a OPLCachedRowSet object isn't associated with an
 underlying database connection. A OPLCachedRowSet object can simply be
 thought of as a disconnected set of rows that are being cached outside
 of a data source. Since all data is cached in memory, OPLCachedRowSets are
 not appropriate for extremely large data sets. 
    </para>
    <para>
The contents of a OPLCachedRowSet may be updated and the updates can be
 propagated to an underlying data source. OPLCachedRowSets support an
 optimistic concurrency control mechanism - no locks are maintained in
 the underlying database during disconnected use of the rowset. Both the
 original value and current value of the OPLCachedRowSet are maintained
 for use by the optimistic routines.
    </para>
    <sect3 id="jd1.2.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLCachedRowSet</emphasis> extends BaseRowSet implements RowSetInternal,Serializable,Cloneable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLCachedRowSet</emphasis>() throws java.sql.SQLException;
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>cmd</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>concurrency</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">acceptChanges</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">acceptChanges</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">populate</emphasis>(java.sql.ResultSet <emphasis>rs</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setShowDeleted</emphasis>(boolean <emphasis>value</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">getShowDeleted</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getTableName</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setTableName</emphasis>(java.lang.String <emphasis>_tableName</emphasis>) 
      throws java.sql.SQLException;
  public int[] <emphasis role="strong">getKeyCols</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setKeyColumns</emphasis>(int[] <emphasis>keys</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowDelete</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowInsert</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">columnUpdated</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setOriginal</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setOriginalRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">restoreOriginal</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">size</emphasis>();
  public Collection <emphasis role="strong">toCollection</emphasis>() throws java.sql.SQLException;
  public Collection <emphasis role="strong">toCollection</emphasis>(int <emphasis>col</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">release</emphasis>() throws java.sql.SQLException;
  public RowSet <emphasis role="strong">createCopy</emphasis>() throws java.sql.SQLException;
  public RowSet <emphasis role="strong">createShared</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setMetaData</emphasis>(javax.sql.RowSetMetaData <emphasis>md</emphasis>) 
      throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
  public ResultSet <emphasis role="strong">getOriginal</emphasis>() throws java.sql.SQLException;
  public ResultSet <emphasis role="strong">getOriginalRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
  public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
  public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                 int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                    int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                               java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                 java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                    java.io.Reader <emphasis>reader</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                           int <emphasis>scale</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.BaseRowSet</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLCachedRowSet</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.2.2">
      <title>Members</title>
      <sect4 id="jd1.2.2.1" xreflabel="Constructor OPLCachedRowSet()">
        <title>Constructor OPLCachedRowSet()</title>
        <indexterm significance="normal">
          <primary>OPLCachedRowSet</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>OPLCachedRowSet</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public <emphasis role="strong">OPLCachedRowSet</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Create a OPLCachedRowSet object. The object has no metadata.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.2" xreflabel="Method absolute(int)">
        <title>Method absolute(int)</title>
        <indexterm significance="normal">
          <primary>absolute</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>absolute</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 row is 0, or rowset type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to an absolute row number in the rowset.
 It notifies listeners that the cursor has moved. 
        </para>
        <para>
If row is positive, moves to an absolute row with respect to the
 beginning of the rowset. The first row is row 1, the second
 is row 2, etc. 
        </para>
        <para>
If row is negative, moves to an absolute row position with respect to
 the end of rowset. For example, calling absolute(-1) positions the
 cursor on the last row, absolute(-2) indicates the next-to-last
 row, etc. 
        </para>
        <para>
An attempt to position the cursor beyond the first/last row in
 the rowset, leaves the cursor before/after the first/last
 row, respectively. 
        </para>
        <para>
Note: Calling absolute(1) is the same as calling first().
 Calling absolute(-1) is the same as calling last().
        </para>
      </sect4>
      <sect4 id="jd1.2.2.3" xreflabel="Method acceptChanges()">
        <title>Method acceptChanges()</title>
        <indexterm significance="normal">
          <primary>acceptChanges</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>acceptChanges</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">acceptChanges</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Propagate all row update, insert, and delete changes to a data source.
 An SQLException is thrown if any of the updates cannot be
 propagated. If acceptChanges() fails then the caller can assume that
 none of the updates are reflected in the data source. The current row
 is set to the first "updated" row that resulted in an exception, in
 the case that an exception is thrown. With one exception, if the row
 that caused the exception is a "deleted" row, then in the usual case,
 when deleted rows are not shown, the current row isn't affected.
 When successful, calling acceptChanges() replaces the original value
 of the rowset with the current value. Note: Both the original and
 current value of the rowset are maintained. The original state is the
 value of the rowset following its creation (i.e. empty), or following
 the last call to acceptChanges(), execute(), populate(), release(), or
 restoreOriginal(). 
 Internally, a RowSetWriter component is envoked to write the data for
 each row.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.4" xreflabel="Method acceptChanges(java.sql.Connection)">
        <title>Method acceptChanges(Connection)</title>
        <indexterm significance="normal">
          <primary>acceptChanges</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>acceptChanges</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">acceptChanges</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">_conn</literal></emphasis> - a database connection</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Like acceptChanges() above, but takes a Connection argument. The
 Connection is used internally when doing the updates. This form
 isn't used unless the underlying data source is a JDBC data source.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.5" xreflabel="Method afterLast()">
        <title>Method afterLast()</title>
        <indexterm significance="normal">
          <primary>afterLast</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>afterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the end of the rowset, just after the last
 row. Has no effect if the rowset contains no rows.
 It notifies listeners that the cursor has moved.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.6" xreflabel="Method beforeFirst()">
        <title>Method beforeFirst()</title>
        <indexterm significance="normal">
          <primary>beforeFirst</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>beforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the front of the rowset, just before the
 first row. Has no effect if the rowset contains no rows.
 It notifies listeners that the cursor has moved.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.7" xreflabel="Method cancelRowDelete()">
        <title>Method cancelRowDelete()</title>
        <indexterm significance="normal">
          <primary>cancelRowDelete</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>cancelRowDelete</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowDelete</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Cancels deletion of the current row and notifies listeners that a row 
 has changed. After calling cancelRowDelete()
 the current row is no longer marked for deletion. An exception is
 thrown if there is no current row. Note: This method can be
 ignored if deleted rows aren't being shown (the normal case).
        </para>
      </sect4>
      <sect4 id="jd1.2.2.8" xreflabel="Method cancelRowInsert()">
        <title>Method cancelRowInsert()</title>
        <indexterm significance="normal">
          <primary>cancelRowInsert</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>cancelRowInsert</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowInsert</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Cancels insertion of the current row and notifies listeners that a row 
 has changed. An exception is thrown if
 the row isn't an inserted row. The current row is immediately removed
 from the rowset. This operation cannot be undone.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.9" xreflabel="Method cancelRowUpdates()">
        <title>Method cancelRowUpdates()</title>
        <indexterm significance="normal">
          <primary>cancelRowUpdates</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>cancelRowUpdates</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The cancelRowUpdates() method may be called after calling an
 updateXXX() method(s) and before calling updateRow() to rollback
 the updates made to a row. If no updates have been made or
 updateRow() has already been called, then this method has no
 effect. It notifies listeners that a row has changed, if it has effect.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.10" xreflabel="Method clearWarnings()">
        <title>Method clearWarnings()</title>
        <indexterm significance="normal">
          <primary>clearWarnings</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>clearWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
After this call getWarnings returns null until a new warning is
 reported for this ResultSet.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.11" xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm significance="normal">
          <primary>close</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Releases the current contents of this rowset, discarding outstanding updates.
 The rowset contains no rows after the method release is called.
 This method sends a RowSetChangedEvent object to all registered listeners
 prior to returning.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.12" xreflabel="Method columnUpdated(int)">
        <title>Method columnUpdated(int)</title>
        <indexterm significance="normal">
          <primary>columnUpdated</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>columnUpdated</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">columnUpdated</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - true if the column has been updated</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the column from the current row has been updated.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.13" xreflabel="Method createCopy()">
        <title>Method createCopy()</title>
        <indexterm significance="normal">
          <primary>createCopy</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>createCopy</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public RowSet <emphasis role="strong">createCopy</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Creates a RowSet object that is a deep copy of this OPLCachedRowSet object's data.
 Updates made on a copy are not visible to the original rowset;
 a copy of a rowset is completely independent from the original.
 Making a copy saves the cost of creating an identical rowset from
 first principles, which can be quite expensive.
 For example, it doesn't do the query to a remote database server.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.14" xreflabel="Method createShared()">
        <title>Method createShared()</title>
        <indexterm significance="normal">
          <primary>createShared</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>createShared</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public RowSet <emphasis role="strong">createShared</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns a new rowset object backed by the same data. Updates
 made by a shared duplicate are visible to the original rowset and other
 duplicates. A rowset and its duplicates form a set of cursors
 that iterate over a shared set of rows, providing different views
 of the underlying data.
 Duplicates also share property values. So, for example, if a rowset
 is read-only then all of its duplicates will be read-only.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.15" xreflabel="Method deleteRow()">
        <title>Method deleteRow()</title>
        <indexterm significance="normal">
          <primary>deleteRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>deleteRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or if
 called when on the insert row.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Delete the current row from this OPLCachedRowSet object and it notifies 
 listeners that a row has changed. Cannot be called when the cursor is 
 on the insert row. The method marks the current row as deleted, 
 but it does not delete the row from the underlying data source. 
 The method acceptChanges must be called to delete the row in 
 the data source.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.16" xreflabel="Method execute()">
        <title>Method execute()</title>
        <indexterm significance="normal">
          <primary>execute</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates this OPLCachedRowSet object with data. This form of the method uses
 the rowset's user, password, and url or data source name properties to
 create a database connection. If properties that are needed have not been set,
 this method will throw an exception. Another form of this method uses an
 existing JDBC Connection object instead of creating a new one;
 therefore, it ignores the properties used for establishing a new connection.
 The query specified by the command property is executed to create
 a ResultSet object from which to retrieve data.
 The current contents of the rowset are discarded, and the rowset's
 metadata is also (re)set. If there are outstanding updates, they are also ignored.
 The method execute closes any database connections that it creates.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.17" xreflabel="Method execute(java.sql.Connection)">
        <title>Method execute(Connection)</title>
        <indexterm significance="normal">
          <primary>execute</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">_conn</literal></emphasis> - a database connection</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates the rowset with data. The first form uses the properties:
 url/data source name, user, and password to create a database
 connection. If these properties haven't been set, an exception is
 thrown. The second form uses an existing JDBC connection object
 instead. The values of the url/data source name, user, and password
 properties are ignored when the second form is used. Execute() closes
 any database connections that it creates.
 The command specified by the command property is executed to retrieve
 the data. The current contents of the rowset are discarded and the
 rowset's metadata is also (re)set. If there are outstanding updates,
 they are also ignored.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.18" xreflabel="Method findColumn(java.lang.String)">
        <title>Method findColumn(String)</title>
        <indexterm significance="normal">
          <primary>findColumn</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>findColumn</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column index</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Map a Resultset column name to a ResultSet column index.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.19" xreflabel="Method first()">
        <title>Method first()</title>
        <indexterm significance="normal">
          <primary>first</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>first</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the first row in the rowset.
 It notifies listeners that the cursor has moved.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.20" xreflabel="Method getArray(int)">
        <title>Method getArray(int)</title>
        <indexterm significance="normal">
          <primary>getArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing an SQL array</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.21" xreflabel="Method getArray(java.lang.String)">
        <title>Method getArray(String)</title>
        <indexterm significance="normal">
          <primary>getArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing an SQL array</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.22" xreflabel="Method getAsciiStream(int)">
        <title>Method getAsciiStream(int)</title>
        <indexterm significance="normal">
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.23" xreflabel="Method getAsciiStream(java.lang.String)">
        <title>Method getAsciiStream(String)</title>
        <indexterm significance="normal">
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.24" xreflabel="Method getBigDecimal(int)">
        <title>Method getBigDecimal(int)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value (full precision); if the value is SQL NULL,
 the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.25" xreflabel="Method getBigDecimal(int, int)">
        <title>Method getBigDecimal(int, int)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - the number of digits to the right of the decimal</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.26" xreflabel="Method getBigDecimal(java.lang.String)">
        <title>Method getBigDecimal(String)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.27" xreflabel="Method getBigDecimal(java.lang.String, int)">
        <title>Method getBigDecimal(String, int)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                          int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - the number of digits to the right of the decimal</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.28" xreflabel="Method getBinaryStream(int)">
        <title>Method getBinaryStream(int)</title>
        <indexterm significance="normal">
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.29" xreflabel="Method getBinaryStream(java.lang.String)">
        <title>Method getBinaryStream(String)</title>
        <indexterm significance="normal">
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.30" xreflabel="Method getBlob(int)">
        <title>Method getBlob(int)</title>
        <indexterm significance="normal">
          <primary>getBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a BLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.31" xreflabel="Method getBlob(java.lang.String)">
        <title>Method getBlob(String)</title>
        <indexterm significance="normal">
          <primary>getBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a BLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.32" xreflabel="Method getBoolean(int)">
        <title>Method getBoolean(int)</title>
        <indexterm significance="normal">
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is false</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.33" xreflabel="Method getBoolean(java.lang.String)">
        <title>Method getBoolean(String)</title>
        <indexterm significance="normal">
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is false</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.34" xreflabel="Method getByte(int)">
        <title>Method getByte(int)</title>
        <indexterm significance="normal">
          <primary>getByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.35" xreflabel="Method getByte(java.lang.String)">
        <title>Method getByte(String)</title>
        <indexterm significance="normal">
          <primary>getByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.36" xreflabel="Method getBytes(int)">
        <title>Method getBytes(int)</title>
        <indexterm significance="normal">
          <primary>getBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.37" xreflabel="Method getBytes(java.lang.String)">
        <title>Method getBytes(String)</title>
        <indexterm significance="normal">
          <primary>getBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.38" xreflabel="Method getCharacterStream(int)">
        <title>Method getCharacterStream(int)</title>
        <indexterm significance="normal">
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.39" xreflabel="Method getCharacterStream(java.lang.String)">
        <title>Method getCharacterStream(String)</title>
        <indexterm significance="normal">
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.40" xreflabel="Method getClob(int)">
        <title>Method getClob(int)</title>
        <indexterm significance="normal">
          <primary>getClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a CLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.41" xreflabel="Method getClob(java.lang.String)">
        <title>Method getClob(String)</title>
        <indexterm significance="normal">
          <primary>getClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a CLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.42" xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm significance="normal">
          <primary>getConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the Connection passed to the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.43" xreflabel="Method getCursorName()">
        <title>Method getCursorName()</title>
        <indexterm significance="normal">
          <primary>getCursorName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCursorName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the name of the SQL cursor used by this ResultSet.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.44" xreflabel="Method getDate(int)">
        <title>Method getDate(int)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.45" xreflabel="Method getDate(int, java.util.Calendar)">
        <title>Method getDate(int, Calendar)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the date</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.46" xreflabel="Method getDate(java.lang.String)">
        <title>Method getDate(String)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.47" xreflabel="Method getDate(java.lang.String, java.util.Calendar)">
        <title>Method getDate(String, Calendar)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the date</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.48" xreflabel="Method getDouble(int)">
        <title>Method getDouble(int)</title>
        <indexterm significance="normal">
          <primary>getDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.49" xreflabel="Method getDouble(java.lang.String)">
        <title>Method getDouble(String)</title>
        <indexterm significance="normal">
          <primary>getDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.50" xreflabel="Method getFloat(int)">
        <title>Method getFloat(int)</title>
        <indexterm significance="normal">
          <primary>getFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.51" xreflabel="Method getFloat(java.lang.String)">
        <title>Method getFloat(String)</title>
        <indexterm significance="normal">
          <primary>getFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.52" xreflabel="Method getInt(int)">
        <title>Method getInt(int)</title>
        <indexterm significance="normal">
          <primary>getInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.53" xreflabel="Method getInt(java.lang.String)">
        <title>Method getInt(String)</title>
        <indexterm significance="normal">
          <primary>getInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.54" xreflabel="Method getKeyCols()">
        <title>Method getKeyCols()</title>
        <indexterm significance="normal">
          <primary>getKeyCols</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getKeyCols</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int[] <emphasis role="strong">getKeyCols</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the columns that make a key to uniquely identify a row in this
 OPLCachedRowSet object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.55" xreflabel="Method getLong(int)">
        <title>Method getLong(int)</title>
        <indexterm significance="normal">
          <primary>getLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.56" xreflabel="Method getLong(java.lang.String)">
        <title>Method getLong(String)</title>
        <indexterm significance="normal">
          <primary>getLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.57" xreflabel="Method getMetaData()">
        <title>Method getMetaData()</title>
        <indexterm significance="normal">
          <primary>getMetaData</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMetaData</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The number, types and properties of a ResultSet's columns
 are provided by the getMetaData method.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.58" xreflabel="Method getObject(int)">
        <title>Method getObject(int)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a java.lang.Object holding the column value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @column is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(column,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect4>
      <sect4 id="jd1.2.2.59" xreflabel="Method getObject(int, java.util.Map)">
        <title>Method getObject(int, Map)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">map</literal></emphasis> - the mapping from SQL type names to Java classes</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing the SQL value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.60" xreflabel="Method getObject(java.lang.String)">
        <title>Method getObject(String)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a java.lang.Object holding the column value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @columnName is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(columnName,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect4>
      <sect4 id="jd1.2.2.61" xreflabel="Method getObject(java.lang.String, java.util.Map)">
        <title>Method getObject(String, Map)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">map</literal></emphasis> - the mapping from SQL type names to Java classes</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing the SQL value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.62" xreflabel="Method getOriginal()">
        <title>Method getOriginal()</title>
        <indexterm significance="normal">
          <primary>getOriginal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getOriginal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public ResultSet <emphasis role="strong">getOriginal</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns a result set containing the original value of the rowset.
 The cursor is positioned before the first row in the result set.
 Only rows contained in the result set returned by getOriginal()
 are said to have an original value.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.63" xreflabel="Method getOriginalRow()">
        <title>Method getOriginalRow()</title>
        <indexterm significance="normal">
          <primary>getOriginalRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getOriginalRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public ResultSet <emphasis role="strong">getOriginalRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns a result set containing the original value of the current
 row only. If the current row has no original value an empty result set
 is returned. If there is no current row an exception is thrown.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.64" xreflabel="Method getRef(int)">
        <title>Method getRef(int)</title>
        <indexterm significance="normal">
          <primary>getRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing data of an SQL REF type</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.65" xreflabel="Method getRef(java.lang.String)">
        <title>Method getRef(String)</title>
        <indexterm significance="normal">
          <primary>getRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing data of an SQL REF type</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.66" xreflabel="Method getRow()">
        <title>Method getRow()</title>
        <indexterm significance="normal">
          <primary>getRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine the current row number. The first row is number 1, the
 second number 2, etc.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.67" xreflabel="Method getShort(int)">
        <title>Method getShort(int)</title>
        <indexterm significance="normal">
          <primary>getShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.68" xreflabel="Method getShort(java.lang.String)">
        <title>Method getShort(String)</title>
        <indexterm significance="normal">
          <primary>getShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.69" xreflabel="Method getShowDeleted()">
        <title>Method getShowDeleted()</title>
        <indexterm significance="normal">
          <primary>getShowDeleted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getShowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getShowDeleted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
This property determines whether or not rows marked for deletion
 appear in the set of current rows. The default value is false.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.70" xreflabel="Method getStatement()">
        <title>Method getStatement()</title>
        <indexterm significance="normal">
          <primary>getStatement</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getStatement</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return the Statement that produced the ResultSet.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.71" xreflabel="Method getString(int)">
        <title>Method getString(int)</title>
        <indexterm significance="normal">
          <primary>getString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.72" xreflabel="Method getString(java.lang.String)">
        <title>Method getString(String)</title>
        <indexterm significance="normal">
          <primary>getString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.73" xreflabel="Method getTableName()">
        <title>Method getTableName()</title>
        <indexterm significance="normal">
          <primary>getTableName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getTableName</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns an identifier for the object (table) that was used to create this rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.74" xreflabel="Method getTime(int)">
        <title>Method getTime(int)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.75" xreflabel="Method getTime(int, java.util.Calendar)">
        <title>Method getTime(int, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the time</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.76" xreflabel="Method getTime(java.lang.String)">
        <title>Method getTime(String)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.77" xreflabel="Method getTime(java.lang.String, java.util.Calendar)">
        <title>Method getTime(String, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the time</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.78" xreflabel="Method getTimestamp(int)">
        <title>Method getTimestamp(int)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.79" xreflabel="Method getTimestamp(int, java.util.Calendar)">
        <title>Method getTimestamp(int, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the timestamp</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.80" xreflabel="Method getTimestamp(java.lang.String)">
        <title>Method getTimestamp(String)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.81" xreflabel="Method getTimestamp(java.lang.String, java.util.Calendar)">
        <title>Method getTimestamp(String, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the timestamp</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.82" xreflabel="Method getUnicodeStream(int)">
        <title>Method getUnicodeStream(int)</title>
        <indexterm significance="normal">
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.83" xreflabel="Method getUnicodeStream(java.lang.String)">
        <title>Method getUnicodeStream(String)</title>
        <indexterm significance="normal">
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.84" xreflabel="Method getURL(int)">
        <title>Method getURL(int)</title>
        <indexterm significance="normal">
          <primary>getURL</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the index of the column 1 is the first, 2 is the second,...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value as a 
<literal moreinfo="none">java.net.URL</literal> object;
 if the value is SQL 
<literal moreinfo="none">NULL</literal>,
 the value returned is 
<literal moreinfo="none">null</literal> in the Java programming language</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs,
 or if a URL is malformed</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal moreinfo="none">ResultSet</literal> object as a 
          <literal moreinfo="none">java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.85" xreflabel="Method getURL(java.lang.String)">
        <title>Method getURL(String)</title>
        <indexterm significance="normal">
          <primary>getURL</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value as a 
<literal moreinfo="none">java.net.URL</literal> object;
 if the value is SQL 
<literal moreinfo="none">NULL</literal>,
 the value returned is 
<literal moreinfo="none">null</literal> in the Java programming language</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs
 or if a URL is malformed</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal moreinfo="none">ResultSet</literal> object as a 
          <literal moreinfo="none">java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.86" xreflabel="Method getWarnings()">
        <title>Method getWarnings()</title>
        <indexterm significance="normal">
          <primary>getWarnings</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The first warning reported by calls on this ResultSet is
 returned. Subsequent ResultSet warnings will be chained to this
 SQLWarning. 
        </para>
        <para>
The warning chain is automatically cleared each time a new
 row is read. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This warning chain only covers warnings caused
 by ResultSet methods. Any warning caused by statement methods
 (such as reading OUT parameters) will be chained on the
 Statement object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.87" xreflabel="Method insertRow()">
        <title>Method insertRow()</title>
        <indexterm significance="normal">
          <primary>insertRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>insertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs,
 if this method is called when the cursor is not on the insert row</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Inserts the contents of the insert row into this
 rowset following the current row and it notifies 
 listeners that the row has changed.
 The cursor must be on the insert row when this method is called.
 The method marks the current row as inserted, 
 but it does not insert the row to the underlying data source. 
 The method acceptChanges must be called to insert the row to 
 the data source.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.88" xreflabel="Method isAfterLast()">
        <title>Method isAfterLast()</title>
        <indexterm significance="normal">
          <primary>isAfterLast</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isAfterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is after the last row in the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.89" xreflabel="Method isBeforeFirst()">
        <title>Method isBeforeFirst()</title>
        <indexterm significance="normal">
          <primary>isBeforeFirst</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isBeforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is before the first row in the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.90" xreflabel="Method isFirst()">
        <title>Method isFirst()</title>
        <indexterm significance="normal">
          <primary>isFirst</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the first row of the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.91" xreflabel="Method isLast()">
        <title>Method isLast()</title>
        <indexterm significance="normal">
          <primary>isLast</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the last row of the rowset.
 Note: Calling isLast() may be expensive since the rowset
 might need to check ahead one row in order to determine
 whether the current row is the last row in the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.92" xreflabel="Method last()">
        <title>Method last()</title>
        <indexterm significance="normal">
          <primary>last</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>last</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the last row in the rowset.
 It notifies listeners that the cursor has moved.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.93" xreflabel="Method moveToCurrentRow()">
        <title>Method moveToCurrentRow()</title>
        <indexterm significance="normal">
          <primary>moveToCurrentRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>moveToCurrentRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs,
 or the rowset is not updatable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move the cursor to the remembered cursor position, usually the
 current row. Has no effect unless the cursor is on the insert
 row.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.94" xreflabel="Method moveToInsertRow()">
        <title>Method moveToInsertRow()</title>
        <indexterm significance="normal">
          <primary>moveToInsertRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>moveToInsertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs,
 or the rowset is not updatable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to the insert row. The current cursor position is
 remembered while the cursor is positioned on the insert row.
 The insert row is a special row associated with an updatable
 rowset. It is essentially a buffer where a new row may
 be constructed by calling the updateXXX() methods prior to
 inserting the row into the rowset.
 Only the updateXXX(), getXXX(), and insertRow() methods may be
 called when the cursor is on the insert row. All of the columns in
 a rowset must be given a value each time this method is
 called before calling insertRow(). UpdateXXX()must be called before
 getXXX() on a column.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.95" xreflabel="Method next()">
        <title>Method next()</title>
        <indexterm significance="normal">
          <primary>next</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>next</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A ResultSet is initially positioned before its first row; the
 first call to next makes the first row the current row; the
 second call makes the second row the current row, etc. 
        </para>
        <para>
If an input stream from the previous row is open, it is
 implicitly closed. The ResultSet's warning chain is cleared
 when a new row is read.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.96" xreflabel="Method populate(java.sql.ResultSet)">
        <title>Method populate(ResultSet)</title>
        <indexterm significance="normal">
          <primary>populate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>populate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">populate</emphasis>(java.sql.ResultSet <emphasis>rs</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">rs</literal></emphasis> - the data to be read</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populate the OPLCachedRowSet object with data from a ResultSet. This
 method is an alternative to execute() for filling the rowset with
 data. Populate() doesn't require that the properties needed by
 execute(), such as the command property, be set. A RowSetChangedEvent
 is sent to all registered listeners prior to returning.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.97" xreflabel="Method previous()">
        <title>Method previous()</title>
        <indexterm significance="normal">
          <primary>previous</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>previous</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 rowset type is TYPE_FORWAR_DONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the previous row in the rowset. 
        </para>
        <para>
Note: previous() is not the same as relative(-1) since it
 makes sense to call previous() when there is no current row.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.98" xreflabel="Method refreshRow()">
        <title>Method refreshRow()</title>
        <indexterm significance="normal">
          <primary>refreshRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>refreshRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or if
 called when on the insert row.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the current row with its original value and marks the row 
 as not updated, thus undoing any changes made to the row since 
 the last call to the methods updateRow or deleteRow. 
 This method should be called only when the cursor is on a row in 
 this rowset. Cannot be called when on the insert row.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.99" xreflabel="Method relative(int)">
        <title>Method relative(int)</title>
        <indexterm significance="normal">
          <primary>relative</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>relative</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or there
 is no current row, or rowset type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 rowset positions the cursor before/after the
 the first/last row. Calling relative(0) is valid, but does
 not change the cursor position.
 It notifies listeners that the cursor has moved. 
        </para>
        <para>
Note: Calling relative(1) is different than calling next()
 since is makes sense to call next() when there is no current row,
 for example, when the cursor is positioned before the first row
 or after the last row of the rowset.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.100" xreflabel="Method release()">
        <title>Method release()</title>
        <indexterm significance="normal">
          <primary>release</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>release</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">release</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Releases the current contents of the rowset. Outstanding updates are
 discarded. The rowset contains no rows after release is called.
 A RowSetChangedEvent is sent to all registered listeners prior
 to returning.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.101" xreflabel="Method restoreOriginal()">
        <title>Method restoreOriginal()</title>
        <indexterm significance="normal">
          <primary>restoreOriginal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>restoreOriginal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">restoreOriginal</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Restores the rowset to its original state ( the original value
 of the rowset becomes the current value). All updates, inserts, and
 deletes made to the original state are lost. The cursor is positioned
 before the first row. A RowSetChangedEvent is sent to all registered
 listeners prior to returning.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.102" xreflabel="Method rowDeleted()">
        <title>Method rowDeleted()</title>
        <indexterm significance="normal">
          <primary>rowDeleted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>rowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.DatabaseMetaData.deletesAreDetected</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if this row has been deleted. A deleted row may leave
 a visible "hole" in a rowset. This method can be used to
 detect holes in a rowset. The value returned depends on whether
 or not the rowset can detect deletions.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.103" xreflabel="Method rowInserted()">
        <title>Method rowInserted()</title>
        <indexterm significance="normal">
          <primary>rowInserted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>rowInserted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.DatabaseMetaData.insertsAreDetected</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been inserted. The value returned
 depends on whether or not the rowset can detect visible inserts.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.104" xreflabel="Method rowUpdated()">
        <title>Method rowUpdated()</title>
        <indexterm significance="normal">
          <primary>rowUpdated</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>rowUpdated</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.DatabaseMetaData.updatesAreDetected</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been updated. The value returned
 depends on whether or not the rowset can detect updates.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.105" xreflabel="Method setCommand(java.lang.String)">
        <title>Method setCommand(String)</title>
        <indexterm significance="normal">
          <primary>setCommand</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCommand</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>cmd</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cmd</literal></emphasis> - - a String object containing an SQL query that will be
 set as the command</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>- if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets this OPLCachedRowSet object's command property to the given
 String object and clears the parameters, if any, that were set
 for the previous command.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.106" xreflabel="Method setConcurrency(int)">
        <title>Method setConcurrency(int)</title>
        <indexterm significance="normal">
          <primary>setConcurrency</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setConcurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>concurrency</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">concurrency</literal></emphasis> - - one of the following constants: ResultSet.CONCUR_READ_ONLY
 or ResultSet.CONCUR_UPDATABLE</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>- if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the concurrency for this rowset to the specified concurrency.
 The default concurrency is ResultSet.CONCUR_UPDATABLE.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.107" xreflabel="Method setKeyColumns(int[])">
        <title>Method setKeyColumns(int[])</title>
        <indexterm significance="normal">
          <primary>setKeyColumns</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setKeyColumns</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setKeyColumns</emphasis>(int[] <emphasis>keys</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">keys</literal></emphasis> - - an array of int indicating the columns that form a key for
 this OPLCachedRowSet object; every element in the array must be greater
 than 0 and less than or equal to the number of columns in this rowset</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets this OPLCachedRowSet object's keyCols field with the given array of column numbers,
 which forms a key for uniquely identifying a row in this rowset.
 Note: If you don't set the keyCols, the OPLCachedRowSet will set automatically
 based on RowSetMetaData
        </para>
      </sect4>
      <sect4 id="jd1.2.2.108" xreflabel="Method setMetaData(javax.sql.RowSetMetaData)">
        <title>Method setMetaData(RowSetMetaData)</title>
        <indexterm significance="normal">
          <primary>setMetaData</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMetaData</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMetaData</emphasis>(javax.sql.RowSetMetaData <emphasis>md</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">md</literal></emphasis> - a metadata object</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the rowset's metadata.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.109" xreflabel="Method setOriginal()">
        <title>Method setOriginal()</title>
        <indexterm significance="normal">
          <primary>setOriginal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setOriginal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setOriginal</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Marks all rows in this rowset as being original rows. Any updates made
 to the rows become the original values for the rowset.
 Calls to the method setOriginal cannot be reversed.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.110" xreflabel="Method setOriginalRow()">
        <title>Method setOriginalRow()</title>
        <indexterm significance="normal">
          <primary>setOriginalRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setOriginalRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setOriginalRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Marks the current row in this rowset as being an original row.
 The row is no longer marked as inserted, deleted, or updated,
 and its values become the original values.
 A call to setOriginalRow cannot be reversed.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.111" xreflabel="Method setShowDeleted(boolean)">
        <title>Method setShowDeleted(boolean)</title>
        <indexterm significance="normal">
          <primary>setShowDeleted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setShowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setShowDeleted</emphasis>(boolean <emphasis>value</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">value</literal></emphasis> - true if deleted rows should be shown, false otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the show deleted property.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.112" xreflabel="Method setTableName(java.lang.String)">
        <title>Method setTableName(String)</title>
        <indexterm significance="normal">
          <primary>setTableName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTableName</emphasis>(java.lang.String <emphasis>_tableName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">_tabName</literal></emphasis> - - a String object that identifies the table from which
 this OPLCachedRowSet object was derived</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the identifier for the table from which this rowset was derived
 to the given table name.
 Note: You don't usually need to set a table name, because the OPLCachedRowSet tries
 to determine the table name from your SQL query command.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.113" xreflabel="Method size()">
        <title>Method size()</title>
        <indexterm significance="normal">
          <primary>size</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>size</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">size</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the number of rows in this OPLCachedRowSet object.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.114" xreflabel="Method toCollection()">
        <title>Method toCollection()</title>
        <indexterm significance="normal">
          <primary>toCollection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>toCollection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Collection <emphasis role="strong">toCollection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Convert the rowset to a collection of tables. Each tables represents
 a row of the original rowset. The tables are keyed by column number.
 A copy of the rowset's contents is made.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.115" xreflabel="Method toCollection(int)">
        <title>Method toCollection(int)</title>
        <indexterm significance="normal">
          <primary>toCollection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>toCollection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Collection <emphasis role="strong">toCollection</emphasis>(int <emphasis>col</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return a column of the rowset as a collection. Makes a copy of the
 column's data.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.116" xreflabel="Method updateArray(int, java.sql.Array)">
        <title>Method updateArray(int, Array)</title>
        <indexterm significance="normal">
          <primary>updateArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.117" xreflabel="Method updateArray(java.lang.String, java.sql.Array)">
        <title>Method updateArray(String, Array)</title>
        <indexterm significance="normal">
          <primary>updateArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                  java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.118" xreflabel="Method updateAsciiStream(int, java.io.InputStream, int)">
        <title>Method updateAsciiStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the length of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.119" xreflabel="Method updateAsciiStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateAsciiStream(String, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.120" xreflabel="Method updateBigDecimal(int, java.math.BigDecimal)">
        <title>Method updateBigDecimal(int, BigDecimal)</title>
        <indexterm significance="normal">
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.121" xreflabel="Method updateBigDecimal(java.lang.String, java.math.BigDecimal)">
        <title>Method updateBigDecimal(String, BigDecimal)</title>
        <indexterm significance="normal">
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                       java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.122" xreflabel="Method updateBinaryStream(int, java.io.InputStream, int)">
        <title>Method updateBinaryStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the length of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.123" xreflabel="Method updateBinaryStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateBinaryStream(String, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, 
                                         int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.124" xreflabel="Method updateBlob(int, java.sql.Blob)">
        <title>Method updateBlob(int, Blob)</title>
        <indexterm significance="normal">
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.125" xreflabel="Method updateBlob(java.lang.String, java.sql.Blob)">
        <title>Method updateBlob(String, Blob)</title>
        <indexterm significance="normal">
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.126" xreflabel="Method updateBoolean(int, boolean)">
        <title>Method updateBoolean(int, boolean)</title>
        <indexterm significance="normal">
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.127" xreflabel="Method updateBoolean(java.lang.String, boolean)">
        <title>Method updateBoolean(String, boolean)</title>
        <indexterm significance="normal">
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.128" xreflabel="Method updateByte(int, byte)">
        <title>Method updateByte(int, byte)</title>
        <indexterm significance="normal">
          <primary>updateByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.129" xreflabel="Method updateByte(java.lang.String, byte)">
        <title>Method updateByte(String, byte)</title>
        <indexterm significance="normal">
          <primary>updateByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.130" xreflabel="Method updateBytes(int, byte[])">
        <title>Method updateBytes(int, byte[])</title>
        <indexterm significance="normal">
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.131" xreflabel="Method updateBytes(java.lang.String, byte[])">
        <title>Method updateBytes(String, byte[])</title>
        <indexterm significance="normal">
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.132" xreflabel="Method updateCharacterStream(int, java.io.Reader, int)">
        <title>Method updateCharacterStream(int, Reader, int)</title>
        <indexterm significance="normal">
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the length of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.133" xreflabel="Method updateCharacterStream(java.lang.String, java.io.Reader, int)">
        <title>Method updateCharacterStream(String, Reader, int)</title>
        <indexterm significance="normal">
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                            java.io.Reader <emphasis>reader</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.134" xreflabel="Method updateClob(int, java.sql.Clob)">
        <title>Method updateClob(int, Clob)</title>
        <indexterm significance="normal">
          <primary>updateClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.135" xreflabel="Method updateClob(java.lang.String, java.sql.Clob)">
        <title>Method updateClob(String, Clob)</title>
        <indexterm significance="normal">
          <primary>updateClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.136" xreflabel="Method updateDate(int, java.sql.Date)">
        <title>Method updateDate(int, Date)</title>
        <indexterm significance="normal">
          <primary>updateDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.137" xreflabel="Method updateDate(java.lang.String, java.sql.Date)">
        <title>Method updateDate(String, Date)</title>
        <indexterm significance="normal">
          <primary>updateDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.138" xreflabel="Method updateDouble(int, double)">
        <title>Method updateDouble(int, double)</title>
        <indexterm significance="normal">
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.139" xreflabel="Method updateDouble(java.lang.String, double)">
        <title>Method updateDouble(String, double)</title>
        <indexterm significance="normal">
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.140" xreflabel="Method updateFloat(int, float)">
        <title>Method updateFloat(int, float)</title>
        <indexterm significance="normal">
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.141" xreflabel="Method updateFloat(java.lang.String, float)">
        <title>Method updateFloat(String, float)</title>
        <indexterm significance="normal">
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.142" xreflabel="Method updateInt(int, int)">
        <title>Method updateInt(int, int)</title>
        <indexterm significance="normal">
          <primary>updateInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.143" xreflabel="Method updateInt(java.lang.String, int)">
        <title>Method updateInt(String, int)</title>
        <indexterm significance="normal">
          <primary>updateInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.144" xreflabel="Method updateLong(int, long)">
        <title>Method updateLong(int, long)</title>
        <indexterm significance="normal">
          <primary>updateLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.145" xreflabel="Method updateLong(java.lang.String, long)">
        <title>Method updateLong(String, long)</title>
        <indexterm significance="normal">
          <primary>updateLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.146" xreflabel="Method updateNull(int)">
        <title>Method updateNull(int)</title>
        <indexterm significance="normal">
          <primary>updateNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give a nullable column a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.147" xreflabel="Method updateNull(java.lang.String)">
        <title>Method updateNull(String)</title>
        <indexterm significance="normal">
          <primary>updateNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.148" xreflabel="Method updateObject(int, java.lang.Object)">
        <title>Method updateObject(int, Object)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.149" xreflabel="Method updateObject(int, java.lang.Object, int)">
        <title>Method updateObject(int, Object, int)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                   int <emphasis>scale</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.150" xreflabel="Method updateObject(java.lang.String, java.lang.Object)">
        <title>Method updateObject(String, Object)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.151" xreflabel="Method updateObject(java.lang.String, java.lang.Object, int)">
        <title>Method updateObject(String, Object, int)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.152" xreflabel="Method updateRef(int, java.sql.Ref)">
        <title>Method updateRef(int, Ref)</title>
        <indexterm significance="normal">
          <primary>updateRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.153" xreflabel="Method updateRef(java.lang.String, java.sql.Ref)">
        <title>Method updateRef(String, Ref)</title>
        <indexterm significance="normal">
          <primary>updateRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.154" xreflabel="Method updateRow()">
        <title>Method updateRow()</title>
        <indexterm significance="normal">
          <primary>updateRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 if called when on the insert row</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Marks the current row of this rowset as updated but it does not update 
 the row to the underlying data source. The method acceptChanges must 
 be called to update the row to the data source.
 It notifies listeners that the row has changed also. 
 Cannot be called when on the insert row.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.155" xreflabel="Method updateShort(int, short)">
        <title>Method updateShort(int, short)</title>
        <indexterm significance="normal">
          <primary>updateShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.156" xreflabel="Method updateShort(java.lang.String, short)">
        <title>Method updateShort(String, short)</title>
        <indexterm significance="normal">
          <primary>updateShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.157" xreflabel="Method updateString(int, java.lang.String)">
        <title>Method updateString(int, String)</title>
        <indexterm significance="normal">
          <primary>updateString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.158" xreflabel="Method updateString(java.lang.String, java.lang.String)">
        <title>Method updateString(String, String)</title>
        <indexterm significance="normal">
          <primary>updateString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.159" xreflabel="Method updateTime(int, java.sql.Time)">
        <title>Method updateTime(int, Time)</title>
        <indexterm significance="normal">
          <primary>updateTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.160" xreflabel="Method updateTime(java.lang.String, java.sql.Time)">
        <title>Method updateTime(String, Time)</title>
        <indexterm significance="normal">
          <primary>updateTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.161" xreflabel="Method updateTimestamp(int, java.sql.Timestamp)">
        <title>Method updateTimestamp(int, Timestamp)</title>
        <indexterm significance="normal">
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.162" xreflabel="Method updateTimestamp(java.lang.String, java.sql.Timestamp)">
        <title>Method updateTimestamp(String, Timestamp)</title>
        <indexterm significance="normal">
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                      java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.2.2.163" xreflabel="Method wasNull()">
        <title>Method wasNull()</title>
        <indexterm significance="normal">
          <primary>wasNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>wasNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column may have the value of SQL NULL; wasNull reports whether
 the last column read had this special value.
 Note that you must first call getXXX on a column to try to read
 its value and then call wasNull() to find if the value was
 the SQL NULL.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.3" xreflabel="Class OPLConnectionPoolDataSource" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLConnectionPoolDataSource</title>
    <indexterm significance="normal">
      <primary>OPLConnectionPoolDataSource</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLConnectionPoolDataSource</secondary>
    </indexterm>
    <para>
A ConnectionPoolDataSource object is a factory for PooledConnection objects.
 An object that implements this interface will typically be registered with
 a JNDI service.
    </para>
    <sect3 id="jd1.3.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLConnectionPoolDataSource</emphasis> extends OPLDataSource implements ConnectionPoolDataSource,Serializable,Referenceable,ConnectionEventListener {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLConnectionPoolDataSource</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public OPLPoolStatistic <emphasis role="strong">get_statistics</emphasis>();
  public OPLPoolStatistic[] <emphasis role="strong">getAll_statistics</emphasis>();
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">connectionClosed</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
  public void <emphasis role="strong">connectionErrorOccurred</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
  public Reference <emphasis role="strong">getReference</emphasis>() throws javax.naming.NamingException;
  public void <emphasis role="strong">fill</emphasis>() throws java.sql.SQLException;
  public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>() throws java.sql.SQLException;
  public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>(java.lang.String <emphasis>_user</emphasis>, 
                                              java.lang.String <emphasis>_password</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getMinPoolSize</emphasis>();
  public void <emphasis role="strong">setMinPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxPoolSize</emphasis>();
  public void <emphasis role="strong">setMaxPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getInitialPoolSize</emphasis>();
  public void <emphasis role="strong">setInitialPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxIdleTime</emphasis>();
  public void <emphasis role="strong">setMaxIdleTime</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getPropertyCycle</emphasis>();
  public void <emphasis role="strong">setPropertyCycle</emphasis>(int <emphasis>parm</emphasis>);
  public int <emphasis role="strong">getMaxStatements</emphasis>();
  public void <emphasis role="strong">setMaxStatements</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLDataSource</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLConnectionPoolDataSource</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.3.2">
      <title>Members</title>
      <sect4 id="jd1.3.2.1" xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm significance="normal">
          <primary>close</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Physically close all the pooled connections in the cache and free all
 the resources
        </para>
      </sect4>
      <sect4 id="jd1.3.2.2" xreflabel="Method connectionClosed(javax.sql.ConnectionEvent)">
        <title>Method connectionClosed(ConnectionEvent)</title>
        <indexterm significance="normal">
          <primary>connectionClosed</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>connectionClosed</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">connectionClosed</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">event</literal></emphasis> - an event object describing the source of the event</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Invoked when the application calls close() on its representation of
 the connection.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.3" xreflabel="Method connectionErrorOccurred(javax.sql.ConnectionEvent)">
        <title>Method connectionErrorOccurred(ConnectionEvent)</title>
        <indexterm significance="normal">
          <primary>connectionErrorOccurred</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>connectionErrorOccurred</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">connectionErrorOccurred</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">event</literal></emphasis> - an event object describing the source of the event</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Invoked when a fatal connection error occurs, just before an SQLException
 is thrown to the application.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.4" xreflabel="Method fill()">
        <title>Method fill()</title>
        <indexterm significance="normal">
          <primary>fill</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>fill</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">fill</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Fills the cache with PooledConnections for later use.
 Ignored if the MinPoolSize is 0.
 It is usually called when the OPLConnectionPoolDataSource is created
 via JNDI calls.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.5" xreflabel="Method get_statistics()">
        <title>Method get_statistics()</title>
        <indexterm significance="normal">
          <primary>get_statistics</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>get_statistics</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public OPLPoolStatistic <emphasis role="strong">get_statistics</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Return the cache statistics for the OPLConnectionPoolDataSource
        </para>
      </sect4>
      <sect4 id="jd1.3.2.6" xreflabel="Method getAll_statistics()">
        <title>Method getAll_statistics()</title>
        <indexterm significance="normal">
          <primary>getAll_statistics</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getAll_statistics</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public OPLPoolStatistic[] <emphasis role="strong">getAll_statistics</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Return an array of the cache statistics for the all created OPLConnectionPoolDataSources
        </para>
      </sect4>
      <sect4 id="jd1.3.2.7" xreflabel="Method getInitialPoolSize()">
        <title>Method getInitialPoolSize()</title>
        <indexterm significance="normal">
          <primary>getInitialPoolSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getInitialPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInitialPoolSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the number of physical connections the pool
 will contain when it is created
        </para>
      </sect4>
      <sect4 id="jd1.3.2.8" xreflabel="Method getMaxIdleTime()">
        <title>Method getMaxIdleTime()</title>
        <indexterm significance="normal">
          <primary>getMaxIdleTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMaxIdleTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxIdleTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the number of seconds that a physical connection
 will remain unused in the pool before the
 connection is closed. Zero ( 0 ) indicates no limit.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.9" xreflabel="Method getMaxPoolSize()">
        <title>Method getMaxPoolSize()</title>
        <indexterm significance="normal">
          <primary>getMaxPoolSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMaxPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxPoolSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the maximum number of physical connections
 the pool will be able contain. Zero ( 0 ) indicates no maximum size.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.10" xreflabel="Method getMaxStatements()">
        <title>Method getMaxStatements()</title>
        <indexterm significance="normal">
          <primary>getMaxStatements</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMaxStatements</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxStatements</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the total number of statements that the pool will
 keep open. Zero ( 0 ) indicates that caching of
 statements is disabled.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.11" xreflabel="Method getMinPoolSize()">
        <title>Method getMinPoolSize()</title>
        <indexterm significance="normal">
          <primary>getMinPoolSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMinPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMinPoolSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the minimum number of physical connections
 the pool will keep available at all times. Zero ( 0 ) indicates that
 connections will be created as needed.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.12" xreflabel="Method getPooledConnection()">
        <title>Method getPooledConnection()</title>
        <indexterm significance="normal">
          <primary>getPooledConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPooledConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>() throws 
            java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to establish a database connection.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.13" xreflabel="Method getPooledConnection(java.lang.String, java.lang.String)">
        <title>Method getPooledConnection(String, String)</title>
        <indexterm significance="normal">
          <primary>getPooledConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPooledConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>(java.lang.String <emphasis>_user</emphasis>, 
                                                      java.lang.String <emphasis>_password</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">user</literal></emphasis> - the database user on whose behalf the Connection is being made</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">password</literal></emphasis> - the user's password</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a PooledConnection to the database</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to establish a database connection.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.14" xreflabel="Method getPropertyCycle()">
        <title>Method getPropertyCycle()</title>
        <indexterm significance="normal">
          <primary>getPropertyCycle</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPropertyCycle</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getPropertyCycle</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the interval, in seconds, that the pool will wait
 before enforcing the current policy defined by the
 values of the above connection pool properties
        </para>
      </sect4>
      <sect4 id="jd1.3.2.15" xreflabel="Method setInitialPoolSize(int)">
        <title>Method setInitialPoolSize(int)</title>
        <indexterm significance="normal">
          <primary>setInitialPoolSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setInitialPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setInitialPoolSize</emphasis>(int <emphasis>parm</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - a number of physical connections</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of physical connections the pool
 should contain when it is created
        </para>
      </sect4>
      <sect4 id="jd1.3.2.16" xreflabel="Method setMaxIdleTime(int)">
        <title>Method setMaxIdleTime(int)</title>
        <indexterm significance="normal">
          <primary>setMaxIdleTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMaxIdleTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxIdleTime</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - a number of seconds</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of seconds that a physical connection
 should remain unused in the pool before the
 connection is closed. Zero ( 0 ) indicates no limit.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.17" xreflabel="Method setMaxPoolSize(int)">
        <title>Method setMaxPoolSize(int)</title>
        <indexterm significance="normal">
          <primary>setMaxPoolSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMaxPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - a maximum number of physical connections</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the maximum number of physical conections that the pool should contain.
 Zero ( 0 ) indicates no maximum size.
 The default value is 0 .
        </para>
      </sect4>
      <sect4 id="jd1.3.2.18" xreflabel="Method setMaxStatements(int)">
        <title>Method setMaxStatements(int)</title>
        <indexterm significance="normal">
          <primary>setMaxStatements</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMaxStatements</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxStatements</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - a total number of statements</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the total number of statements that the pool should
 keep open. Zero ( 0 ) indicates that caching of
 statements is disabled.
        </para>
      </sect4>
      <sect4 id="jd1.3.2.19" xreflabel="Method setMinPoolSize(int)">
        <title>Method setMinPoolSize(int)</title>
        <indexterm significance="normal">
          <primary>setMinPoolSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setMinPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMinPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - a minimum number of physical connections</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if an error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of physical connections the pool should keep available
 at all times. Zero ( 0 ) indicates that connections should be created
 as needed
 The default value is 0 .
        </para>
      </sect4>
      <sect4 id="jd1.3.2.20" xreflabel="Method setPropertyCycle(int)">
        <title>Method setPropertyCycle(int)</title>
        <indexterm significance="normal">
          <primary>setPropertyCycle</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setPropertyCycle</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPropertyCycle</emphasis>(int <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - an interval (in seconds)</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the interval, in seconds, that the pool should wait
 before enforcing the current policy defined by the
 values of the above connection pool properties
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.4" xreflabel="Class OPLDataSource" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLDataSource</title>
    <indexterm significance="normal">
      <primary>OPLDataSource</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLDataSource</secondary>
    </indexterm>
    <para>
A DataSource object is a factory for Connection objects.
 An object that implements the DataSource interface will typically
 be registered with a JNDI service provider. A JDBC driver that is
 accessed via the DataSource API does not automatically register
 itself with the DriverManager.
    </para>
    <sect3 id="jd1.4.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLDataSource</emphasis> implements DataSource,Serializable,Referenceable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLDataSource</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public Reference <emphasis role="strong">getReference</emphasis>() throws javax.naming.NamingException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                  java.lang.String <emphasis>password</emphasis>) 
      throws java.sql.SQLException;
  public PrintWriter <emphasis role="strong">getLogWriter</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setLogWriter</emphasis>(java.io.PrintWriter <emphasis>parm</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getLoginTimeout</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setLoginTimeout</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getDataSourceName</emphasis>();
  public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getDescription</emphasis>();
  public void <emphasis role="strong">setDescription</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public int <emphasis role="strong">getPortNumber</emphasis>();
  public void <emphasis role="strong">setPortNumber</emphasis>(int <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getServerName</emphasis>();
  public void <emphasis role="strong">setServerName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getDatabaseName</emphasis>();
  public void <emphasis role="strong">setDatabaseName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getUser</emphasis>();
  public void <emphasis role="strong">setUser</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getPassword</emphasis>();
  public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getSVT</emphasis>();
  public void <emphasis role="strong">setSVT</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getReadOnly</emphasis>();
  public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getDbOptions</emphasis>();
  public void <emphasis role="strong">setDbOptions</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getFBS</emphasis>();
  public void <emphasis role="strong">setFBS</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getCharSet</emphasis>();
  public void <emphasis role="strong">setCharSet</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getCursorModel</emphasis>();
  public void <emphasis role="strong">setCursorModel</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getConcurrencyType</emphasis>();
  public void <emphasis role="strong">setConcurrencyType</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getEncrypted</emphasis>();
  public void <emphasis role="strong">setEncrypted</emphasis>(boolean <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getDeferLongFetch</emphasis>();
  public void <emphasis role="strong">setDeferLongFetch</emphasis>(boolean <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getApplication</emphasis>();
  public void <emphasis role="strong">setApplication</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getUnicode</emphasis>();
  public void <emphasis role="strong">setUnicode</emphasis>(boolean <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getURL</emphasis>();
  public void <emphasis role="strong">setURL</emphasis>(java.lang.String <emphasis>parm</emphasis>);
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLDataSource</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.4.2">
      <title>Members</title>
      <sect4 id="jd1.4.2.1" xreflabel="Method getApplication()">
        <title>Method getApplication()</title>
        <indexterm significance="normal">
          <primary>getApplication</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getApplication</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getApplication</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the Application name set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.2" xreflabel="Method getCharSet()">
        <title>Method getCharSet()</title>
        <indexterm significance="normal">
          <primary>getCharSet</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCharSet</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCharSet</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the charset of remote database set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.3" xreflabel="Method getConcurrencyType()">
        <title>Method getConcurrencyType()</title>
        <indexterm significance="normal">
          <primary>getConcurrencyType</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConcurrencyType</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getConcurrencyType</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the default Concurrency Type for scrollable ResultSets
 set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.4" xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm significance="normal">
          <primary>getConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to establish a database connection.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.5" xreflabel="Method getConnection(java.lang.String, java.lang.String)">
        <title>Method getConnection(String, String)</title>
        <indexterm significance="normal">
          <primary>getConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                          java.lang.String <emphasis>password</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">user</literal></emphasis> - the database user on whose behalf the Connection is being made</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">password</literal></emphasis> - the user's password</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Connection to the database</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to establish a database connection.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.6" xreflabel="Method getCursorModel()">
        <title>Method getCursorModel()</title>
        <indexterm significance="normal">
          <primary>getCursorModel</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCursorModel</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCursorModel</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the default Cursor Model for scrollable ResultSets
 set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.7" xreflabel="Method getDatabaseName()">
        <title>Method getDatabaseName()</title>
        <indexterm significance="normal">
          <primary>getDatabaseName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDatabaseName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDatabaseName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the name of the database set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.8" xreflabel="Method getDataSourceName()">
        <title>Method getDataSourceName()</title>
        <indexterm significance="normal">
          <primary>getDataSourceName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDataSourceName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the datasource name for this instance if set.
 The default value is "OPLDataSourceName"
        </para>
      </sect4>
      <sect4 id="jd1.4.2.9" xreflabel="Method getDbOptions()">
        <title>Method getDbOptions()</title>
        <indexterm significance="normal">
          <primary>getDbOptions</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDbOptions</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDbOptions</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the Database Options set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.10" xreflabel="Method getDeferLongFetch()">
        <title>Method getDeferLongFetch()</title>
        <indexterm significance="normal">
          <primary>getDeferLongFetch</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDeferLongFetch</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getDeferLongFetch</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get if the DataSource instance uses the deferLongFetch for long data.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.11" xreflabel="Method getDescription()">
        <title>Method getDescription()</title>
        <indexterm significance="normal">
          <primary>getDescription</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDescription</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDescription</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the description of this data source.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.12" xreflabel="Method getEncrypted()">
        <title>Method getEncrypted()</title>
        <indexterm significance="normal">
          <primary>getEncrypted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getEncrypted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getEncrypted</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get if the outgoing packets are encrypted for this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.13" xreflabel="Method getFBS()">
        <title>Method getFBS()</title>
        <indexterm significance="normal">
          <primary>getFBS</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFBS</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getFBS</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the Fetch Buffer Size set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.14" xreflabel="Method getLoginTimeout()">
        <title>Method getLoginTimeout()</title>
        <indexterm significance="normal">
          <primary>getLoginTimeout</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getLoginTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getLoginTimeout</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the maximum time in seconds that this data source can wait while
 attempting to connect to a database. A value of zero means that the timeout
 is the default system timeout if there is one; otherwise it means that
 there is no timeout. When a DataSource object is created the login timeout
 is initially zero.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.15" xreflabel="Method getLogWriter()">
        <title>Method getLogWriter()</title>
        <indexterm significance="normal">
          <primary>getLogWriter</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getLogWriter</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public PrintWriter <emphasis role="strong">getLogWriter</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The log writer is a character output stream to which all logging and
 tracing messages for this data source object instance will be printed.
 This includes messages printed by the methods of this object, messages
 printed by methods of other objects manufactured by this object, and so on.
 Messages printed to a data source specific log writer are not printed
 to the log writer associated with the java.sql.Drivermanager class.
 When a DataSource object is created the log writer is initially null,
 in other words, logging is disabled.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.16" xreflabel="Method getPassword()">
        <title>Method getPassword()</title>
        <indexterm significance="normal">
          <primary>getPassword</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getPassword</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the password set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.17" xreflabel="Method getPortNumber()">
        <title>Method getPortNumber()</title>
        <indexterm significance="normal">
          <primary>getPortNumber</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPortNumber</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getPortNumber</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the port number on which oplrqb is listening for requests.
 The default value is 5000
        </para>
      </sect4>
      <sect4 id="jd1.4.2.18" xreflabel="Method getReadOnly()">
        <title>Method getReadOnly()</title>
        <indexterm significance="normal">
          <primary>getReadOnly</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getReadOnly</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the ReadOnly attribute set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.19" xreflabel="Method getServerName()">
        <title>Method getServerName()</title>
        <indexterm significance="normal">
          <primary>getServerName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getServerName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getServerName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the name of the host on which oplrqb is running.
 The default value is "localhost"
        </para>
      </sect4>
      <sect4 id="jd1.4.2.20" xreflabel="Method getSVT()">
        <title>Method getSVT()</title>
        <indexterm significance="normal">
          <primary>getSVT</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getSVT</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getSVT</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the ServerType set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.21" xreflabel="Method getUnicode()">
        <title>Method getUnicode()</title>
        <indexterm significance="normal">
          <primary>getUnicode</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUnicode</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getUnicode</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get if the DataSource instance uses the Unicode connection with a DBMS agent.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.22" xreflabel="Method getURL()">
        <title>Method getURL()</title>
        <indexterm significance="normal">
          <primary>getURL</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getURL</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the URL for this Datasource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.23" xreflabel="Method getUser()">
        <title>Method getUser()</title>
        <indexterm significance="normal">
          <primary>getUser</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUser</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getUser</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the user name set on this DataSource instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.24" xreflabel="Method setApplication(java.lang.String)">
        <title>Method setApplication(String)</title>
        <indexterm significance="normal">
          <primary>setApplication</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setApplication</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setApplication</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - Application name to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Application name with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.25" xreflabel="Method setCharSet(java.lang.String)">
        <title>Method setCharSet(String)</title>
        <indexterm significance="normal">
          <primary>setCharSet</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCharSet</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCharSet</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - CharSet to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the charset of remote database with which connections have to be obtained.
 The default value is get from 
          <literal moreinfo="none">System.getProperty("fil...</literal>
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.26" xreflabel="Method setConcurrencyType(java.lang.String)">
        <title>Method setConcurrencyType(String)</title>
        <indexterm significance="normal">
          <primary>setConcurrencyType</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setConcurrencyType</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setConcurrencyType</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - Concurrency Type to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the default Concurrency Type for scrollable ResultSets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.27" xreflabel="Method setCursorModel(java.lang.String)">
        <title>Method setCursorModel(String)</title>
        <indexterm significance="normal">
          <primary>setCursorModel</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCursorModel</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCursorModel</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - CursorModel to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the default Cursor Model for scrollable ResultSets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.28" xreflabel="Method setDatabaseName(java.lang.String)">
        <title>Method setDatabaseName(String)</title>
        <indexterm significance="normal">
          <primary>setDatabaseName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDatabaseName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDatabaseName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - database name to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the name of a particular database on a server.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.29" xreflabel="Method setDataSourceName(java.lang.String)">
        <title>Method setDataSourceName(String)</title>
        <indexterm significance="normal">
          <primary>setDataSourceName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - DataSource name to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the DataSource name. The default value is "OPLDataSourceName"
        </para>
      </sect4>
      <sect4 id="jd1.4.2.30" xreflabel="Method setDbOptions(java.lang.String)">
        <title>Method setDbOptions(String)</title>
        <indexterm significance="normal">
          <primary>setDbOptions</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDbOptions</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDbOptions</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - Database Options to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Database Options with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.31" xreflabel="Method setDeferLongFetch(boolean)">
        <title>Method setDeferLongFetch(boolean)</title>
        <indexterm significance="normal">
          <primary>setDeferLongFetch</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDeferLongFetch</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDeferLongFetch</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - true for a DeferLongFetch connection</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the DeferLongFetch attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.32" xreflabel="Method setDescription(java.lang.String)">
        <title>Method setDescription(String)</title>
        <indexterm significance="normal">
          <primary>setDescription</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setDescription</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDescription</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - Description to be set.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the description for this data source instance.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.33" xreflabel="Method setEncrypted(boolean)">
        <title>Method setEncrypted(boolean)</title>
        <indexterm significance="normal">
          <primary>setEncrypted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setEncrypted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setEncrypted</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - true if outgoing packets must be encrypted</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Encrypted flag for outgoing packets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.34" xreflabel="Method setFBS(java.lang.String)">
        <title>Method setFBS(String)</title>
        <indexterm significance="normal">
          <primary>setFBS</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setFBS</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFBS</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - FetchBufferSize to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets number of JDBC resultset rows that get packed
 into a single network packet
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.35" xreflabel="Method setLoginTimeout(int)">
        <title>Method setLoginTimeout(int)</title>
        <indexterm significance="normal">
          <primary>setLoginTimeout</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setLoginTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setLoginTimeout</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - the data source login time limit (in seconds)</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the maximum time in seconds that this data source will wait while
 attempting to connect to a database. A value of zero specifies that
 the timeout is the default system timeout if there is one; otherwise
 it specifies that there is no timeout. When a DataSource object
 is created the login timeout is initially zero.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.36" xreflabel="Method setLogWriter(java.io.PrintWriter)">
        <title>Method setLogWriter(PrintWriter)</title>
        <indexterm significance="normal">
          <primary>setLogWriter</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setLogWriter</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setLogWriter</emphasis>(java.io.PrintWriter <emphasis>parm</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - the new log writer; to disable, set to null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The log writer is a character output stream to which all logging and
 tracing messages for this data source object instance will be printed.
 This includes messages printed by the methods of this object, messages
 printed by methods of other objects manufactured by this object, and so on.
 Messages printed to a data source specific log writer are not printed
 to the log writer associated with the java.sql.Drivermanager class.
 When a DataSource object is created the log writer is initially null, in
 other words, logging is disabled.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.37" xreflabel="Method setPassword(java.lang.String)">
        <title>Method setPassword(String)</title>
        <indexterm significance="normal">
          <primary>setPassword</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - password to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the password with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.38" xreflabel="Method setPortNumber(int)">
        <title>Method setPortNumber(int)</title>
        <indexterm significance="normal">
          <primary>setPortNumber</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setPortNumber</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPortNumber</emphasis>(int <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - port number on which oplrqb is listening</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the port number where the oplrqb is listening for requests.
 The default value is 5000 . Will be overwritten with value from URL,
 if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.39" xreflabel="Method setReadOnly(boolean)">
        <title>Method setReadOnly(boolean)</title>
        <indexterm significance="normal">
          <primary>setReadOnly</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - true for a readOnly connection</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the ReadOnly attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.40" xreflabel="Method setServerName(java.lang.String)">
        <title>Method setServerName(String)</title>
        <indexterm significance="normal">
          <primary>setServerName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setServerName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setServerName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - name of the host on which oplrqb is running</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the name of the host where the oplrqb is running.
 The default value is "localhost" . Will be overwritten with value from URL,
 if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.41" xreflabel="Method setSVT(java.lang.String)">
        <title>Method setSVT(String)</title>
        <indexterm significance="normal">
          <primary>setSVT</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setSVT</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSVT</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - ServerType to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the ServerType with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.42" xreflabel="Method setUnicode(boolean)">
        <title>Method setUnicode(boolean)</title>
        <indexterm significance="normal">
          <primary>setUnicode</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setUnicode</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUnicode</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - true for a Unicode connection</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Unicode attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.43" xreflabel="Method setURL(java.lang.String)">
        <title>Method setURL(String)</title>
        <indexterm significance="normal">
          <primary>setURL</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setURL</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - URL to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the URL with which connections have to be obtained.
        </para>
      </sect4>
      <sect4 id="jd1.4.2.44" xreflabel="Method setUser(java.lang.String)">
        <title>Method setUser(String)</title>
        <indexterm significance="normal">
          <primary>setUser</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setUser</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUser</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">parm</literal></emphasis> - username to be set</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the user name with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.5" xreflabel="Class OPLDataSourceFactory" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLDataSourceFactory</title>
    <indexterm significance="normal">
      <primary>OPLDataSourceFactory</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLDataSourceFactory</secondary>
    </indexterm>
    <sect3 id="jd1.5.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLDataSourceFactory</emphasis> implements ObjectFactory {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLDataSourceFactory</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public Object <emphasis role="strong">getObjectInstance</emphasis>(java.lang.Object <emphasis>obj</emphasis>, javax.naming.Name <emphasis>name</emphasis>, 
                                  javax.naming.Context <emphasis>nameCtx</emphasis>, 
                                  java.util.Hashtable <emphasis>environment</emphasis>) 
      throws java.lang.Exception;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLDataSourceFactory</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
  </sect2>
  <sect2 id="jd1.6" xreflabel="Class OPLJdbcRowSet" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLJdbcRowSet</title>
    <indexterm significance="normal">
      <primary>OPLJdbcRowSet</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLJdbcRowSet</secondary>
    </indexterm>
    <para>
A OPLJdbcRowSet is a connected rowset. The purpose of the
 OPLJdbcRowSet class is to act like a JavaBean at design time and provide
 a thin layer that wraps around a JDBC ResultSet at runtime. 
    </para>
    <para>
When execute() is called a OPLJdbcRowSet object opens a JDBC connection
 internally which remains open until close() is called, unless a Connection
 is passed to execute() explicitly, in which case that Connection is used
 instead. ResultSet operations such as cursor movement, updating, etc. are
 simply delegated to an underlying JDBC ResultSet object which is maintained
 internally.
    </para>
    <sect3 id="jd1.6.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLJdbcRowSet</emphasis> extends BaseRowSet  {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLJdbcRowSet</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
  public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
  public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                 int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                    int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                               java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                 java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                    java.io.Reader <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                           int <emphasis>scale</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.BaseRowSet</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLJdbcRowSet</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.6.2">
      <title>Members</title>
      <sect4 id="jd1.6.2.1" xreflabel="Method absolute(int)">
        <title>Method absolute(int)</title>
        <indexterm significance="normal">
          <primary>absolute</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>absolute</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 row is 0, or result set type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to an absolute row number in the result set. 
        </para>
        <para>
If row is positive, moves to an absolute row with respect to the
 beginning of the result set. The first row is row 1, the second
 is row 2, etc. 
        </para>
        <para>
If row is negative, moves to an absolute row position with respect to
 the end of result set. For example, calling absolute(-1) positions the
 cursor on the last row, absolute(-2) indicates the next-to-last
 row, etc. 
        </para>
        <para>
An attempt to position the cursor beyond the first/last row in
 the result set, leaves the cursor before/after the first/last
 row, respectively. 
        </para>
        <para>
Note: Calling absolute(1) is the same as calling first().
 Calling absolute(-1) is the same as calling last().
        </para>
      </sect4>
      <sect4 id="jd1.6.2.2" xreflabel="Method afterLast()">
        <title>Method afterLast()</title>
        <indexterm significance="normal">
          <primary>afterLast</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>afterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the end of the result set, just after the last
 row. Has no effect if the result set contains no rows.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.3" xreflabel="Method beforeFirst()">
        <title>Method beforeFirst()</title>
        <indexterm significance="normal">
          <primary>beforeFirst</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>beforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the front of the result set, just before the
 first row. Has no effect if the result set contains no rows.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.4" xreflabel="Method cancelRowUpdates()">
        <title>Method cancelRowUpdates()</title>
        <indexterm significance="normal">
          <primary>cancelRowUpdates</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>cancelRowUpdates</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The cancelRowUpdates() method may be called after calling an
 updateXXX() method(s) and before calling updateRow() to rollback
 the updates made to a row. If no updates have been made or
 updateRow() has already been called, then this method has no
 effect.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.5" xreflabel="Method clearWarnings()">
        <title>Method clearWarnings()</title>
        <indexterm significance="normal">
          <primary>clearWarnings</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>clearWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
After this call getWarnings returns null until a new warning is
 reported for this ResultSet.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.6" xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm significance="normal">
          <primary>close</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
In some cases, it is desirable to immediately release a
 ResultSet's database and JDBC resources instead of waiting for
 this to happen when it is automatically closed; the close
 method provides this immediate release. 
        </para>
        <para>
          <emphasis>Note:</emphasis> A ResultSet is automatically closed by the
 Statement that generated it when that Statement is closed,
 re-executed, or is used to retrieve the next result from a
 sequence of multiple results. A ResultSet is also automatically
 closed when it is garbage collected.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.7" xreflabel="Method deleteRow()">
        <title>Method deleteRow()</title>
        <indexterm significance="normal">
          <primary>deleteRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>deleteRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or if
 called when on the insert row.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Delete the current row from the result set and the underlying
 database. Cannot be called when on the insert row.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.8" xreflabel="Method execute()">
        <title>Method execute()</title>
        <indexterm significance="normal">
          <primary>execute</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates the rowset with data.
 Execute() may use the following properties: url, data source name,
 user name, password, transaction isolation, and type map to create a
 connection for reading data.
 Execute may use the following properties to create a statement
 to execute a command: command, read only, maximum field size,
 maximum rows, escape processing, and query timeout.
 If the required properties have not been set, an exception is
 thrown. If successful, the current contents of the rowset are
 discarded and the rowset's metadata is also (re)set. If there are
 outstanding updates, they are ignored.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.9" xreflabel="Method execute(java.sql.Connection)">
        <title>Method execute(Connection)</title>
        <indexterm significance="normal">
          <primary>execute</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">_conn</literal></emphasis> - a Connection to use</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates the rowset with data. Uses an existing JDBC connection object.
 The values of the url/data source name, user, and password
 properties are ignored. The command specified by the command property
 is executed to retrieve
 the data. The current contents of the rowset are discarded and the
 rowset's metadata is also (re)set. If there are outstanding updates,
 they are also ignored.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.10" xreflabel="Method findColumn(java.lang.String)">
        <title>Method findColumn(String)</title>
        <indexterm significance="normal">
          <primary>findColumn</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>findColumn</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column index</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Map a Resultset column name to a ResultSet column index.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.11" xreflabel="Method first()">
        <title>Method first()</title>
        <indexterm significance="normal">
          <primary>first</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>first</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the first row in the result set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.12" xreflabel="Method getArray(int)">
        <title>Method getArray(int)</title>
        <indexterm significance="normal">
          <primary>getArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing an SQL array</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.13" xreflabel="Method getArray(java.lang.String)">
        <title>Method getArray(String)</title>
        <indexterm significance="normal">
          <primary>getArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing an SQL array</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.14" xreflabel="Method getAsciiStream(int)">
        <title>Method getAsciiStream(int)</title>
        <indexterm significance="normal">
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.15" xreflabel="Method getAsciiStream(java.lang.String)">
        <title>Method getAsciiStream(String)</title>
        <indexterm significance="normal">
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.16" xreflabel="Method getBigDecimal(int)">
        <title>Method getBigDecimal(int)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value (full precision); if the value is SQL NULL,
 the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.17" xreflabel="Method getBigDecimal(int, int)">
        <title>Method getBigDecimal(int, int)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - the number of digits to the right of the decimal</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.18" xreflabel="Method getBigDecimal(java.lang.String)">
        <title>Method getBigDecimal(String)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.19" xreflabel="Method getBigDecimal(java.lang.String, int)">
        <title>Method getBigDecimal(String, int)</title>
        <indexterm significance="normal">
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                          int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - the number of digits to the right of the decimal</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.20" xreflabel="Method getBinaryStream(int)">
        <title>Method getBinaryStream(int)</title>
        <indexterm significance="normal">
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.21" xreflabel="Method getBinaryStream(java.lang.String)">
        <title>Method getBinaryStream(String)</title>
        <indexterm significance="normal">
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.22" xreflabel="Method getBlob(int)">
        <title>Method getBlob(int)</title>
        <indexterm significance="normal">
          <primary>getBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a BLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.23" xreflabel="Method getBlob(java.lang.String)">
        <title>Method getBlob(String)</title>
        <indexterm significance="normal">
          <primary>getBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a BLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.24" xreflabel="Method getBoolean(int)">
        <title>Method getBoolean(int)</title>
        <indexterm significance="normal">
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is false</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.25" xreflabel="Method getBoolean(java.lang.String)">
        <title>Method getBoolean(String)</title>
        <indexterm significance="normal">
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is false</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.26" xreflabel="Method getByte(int)">
        <title>Method getByte(int)</title>
        <indexterm significance="normal">
          <primary>getByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.27" xreflabel="Method getByte(java.lang.String)">
        <title>Method getByte(String)</title>
        <indexterm significance="normal">
          <primary>getByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.28" xreflabel="Method getBytes(int)">
        <title>Method getBytes(int)</title>
        <indexterm significance="normal">
          <primary>getBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.29" xreflabel="Method getBytes(java.lang.String)">
        <title>Method getBytes(String)</title>
        <indexterm significance="normal">
          <primary>getBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.30" xreflabel="Method getCharacterStream(int)">
        <title>Method getCharacterStream(int)</title>
        <indexterm significance="normal">
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.31" xreflabel="Method getCharacterStream(java.lang.String)">
        <title>Method getCharacterStream(String)</title>
        <indexterm significance="normal">
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.32" xreflabel="Method getClob(int)">
        <title>Method getClob(int)</title>
        <indexterm significance="normal">
          <primary>getClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a CLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.33" xreflabel="Method getClob(java.lang.String)">
        <title>Method getClob(String)</title>
        <indexterm significance="normal">
          <primary>getClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing a CLOB</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.34" xreflabel="Method getCursorName()">
        <title>Method getCursorName()</title>
        <indexterm significance="normal">
          <primary>getCursorName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCursorName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if an error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the name of the SQL cursor used by this ResultSet.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.35" xreflabel="Method getDate(int)">
        <title>Method getDate(int)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.36" xreflabel="Method getDate(int, java.util.Calendar)">
        <title>Method getDate(int, Calendar)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the date</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.37" xreflabel="Method getDate(java.lang.String)">
        <title>Method getDate(String)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.38" xreflabel="Method getDate(java.lang.String, java.util.Calendar)">
        <title>Method getDate(String, Calendar)</title>
        <indexterm significance="normal">
          <primary>getDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the date</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.39" xreflabel="Method getDouble(int)">
        <title>Method getDouble(int)</title>
        <indexterm significance="normal">
          <primary>getDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.40" xreflabel="Method getDouble(java.lang.String)">
        <title>Method getDouble(String)</title>
        <indexterm significance="normal">
          <primary>getDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.41" xreflabel="Method getFloat(int)">
        <title>Method getFloat(int)</title>
        <indexterm significance="normal">
          <primary>getFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.42" xreflabel="Method getFloat(java.lang.String)">
        <title>Method getFloat(String)</title>
        <indexterm significance="normal">
          <primary>getFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.43" xreflabel="Method getInt(int)">
        <title>Method getInt(int)</title>
        <indexterm significance="normal">
          <primary>getInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.44" xreflabel="Method getInt(java.lang.String)">
        <title>Method getInt(String)</title>
        <indexterm significance="normal">
          <primary>getInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.45" xreflabel="Method getLong(int)">
        <title>Method getLong(int)</title>
        <indexterm significance="normal">
          <primary>getLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.46" xreflabel="Method getLong(java.lang.String)">
        <title>Method getLong(String)</title>
        <indexterm significance="normal">
          <primary>getLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.47" xreflabel="Method getMetaData()">
        <title>Method getMetaData()</title>
        <indexterm significance="normal">
          <primary>getMetaData</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMetaData</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The number, types and properties of a ResultSet's columns
 are provided by the getMetaData method.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.48" xreflabel="Method getObject(int)">
        <title>Method getObject(int)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a java.lang.Object holding the column value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @column is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(column,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect4>
      <sect4 id="jd1.6.2.49" xreflabel="Method getObject(int, java.util.Map)">
        <title>Method getObject(int, Map)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">map</literal></emphasis> - the mapping from SQL type names to Java classes</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing the SQL value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.50" xreflabel="Method getObject(java.lang.String)">
        <title>Method getObject(String)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a java.lang.Object holding the column value.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @columnName is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(columnName,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect4>
      <sect4 id="jd1.6.2.51" xreflabel="Method getObject(java.lang.String, java.util.Map)">
        <title>Method getObject(String, Map)</title>
        <indexterm significance="normal">
          <primary>getObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">map</literal></emphasis> - the mapping from SQL type names to Java classes</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing the SQL value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.52" xreflabel="Method getRef(int)">
        <title>Method getRef(int)</title>
        <indexterm significance="normal">
          <primary>getRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing data of an SQL REF type</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.53" xreflabel="Method getRef(java.lang.String)">
        <title>Method getRef(String)</title>
        <indexterm significance="normal">
          <primary>getRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">colName</literal></emphasis> - the column name</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - an object representing data of an SQL REF type</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.54" xreflabel="Method getRow()">
        <title>Method getRow()</title>
        <indexterm significance="normal">
          <primary>getRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine the current row number. The first row is number 1, the
 second number 2, etc.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.55" xreflabel="Method getShort(int)">
        <title>Method getShort(int)</title>
        <indexterm significance="normal">
          <primary>getShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.56" xreflabel="Method getShort(java.lang.String)">
        <title>Method getShort(String)</title>
        <indexterm significance="normal">
          <primary>getShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is 0</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.57" xreflabel="Method getStatement()">
        <title>Method getStatement()</title>
        <indexterm significance="normal">
          <primary>getStatement</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getStatement</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return the Statement that produced the ResultSet.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.58" xreflabel="Method getString(int)">
        <title>Method getString(int)</title>
        <indexterm significance="normal">
          <primary>getString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.59" xreflabel="Method getString(java.lang.String)">
        <title>Method getString(String)</title>
        <indexterm significance="normal">
          <primary>getString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.60" xreflabel="Method getTime(int)">
        <title>Method getTime(int)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.61" xreflabel="Method getTime(int, java.util.Calendar)">
        <title>Method getTime(int, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the time</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.62" xreflabel="Method getTime(java.lang.String)">
        <title>Method getTime(String)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.63" xreflabel="Method getTime(java.lang.String, java.util.Calendar)">
        <title>Method getTime(String, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the time</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.64" xreflabel="Method getTimestamp(int)">
        <title>Method getTimestamp(int)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.65" xreflabel="Method getTimestamp(int, java.util.Calendar)">
        <title>Method getTimestamp(int, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the timestamp</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.66" xreflabel="Method getTimestamp(java.lang.String)">
        <title>Method getTimestamp(String)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.67" xreflabel="Method getTimestamp(java.lang.String, java.util.Calendar)">
        <title>Method getTimestamp(String, Calendar)</title>
        <indexterm significance="normal">
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">cal</literal></emphasis> - the calendar to use in constructing the timestamp</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value; if the value is SQL NULL, the result is null</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.68" xreflabel="Method getUnicodeStream(int)">
        <title>Method getUnicodeStream(int)</title>
        <indexterm significance="normal">
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.69" xreflabel="Method getUnicodeStream(java.lang.String)">
        <title>Method getUnicodeStream(String)</title>
        <indexterm significance="normal">
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - is the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.70" xreflabel="Method getURL(int)">
        <title>Method getURL(int)</title>
        <indexterm significance="normal">
          <primary>getURL</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the index of the column 1 is the first, 2 is the second,...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value as a 
<literal moreinfo="none">java.net.URL</literal> object;
 if the value is SQL 
<literal moreinfo="none">NULL</literal>,
 the value returned is 
<literal moreinfo="none">null</literal> in the Java programming language</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs,
 or if a URL is malformed</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal moreinfo="none">ResultSet</literal> object as a 
          <literal moreinfo="none">java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.71" xreflabel="Method getURL(java.lang.String)">
        <title>Method getURL(String)</title>
        <indexterm significance="normal">
          <primary>getURL</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the SQL name of the column</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the column value as a 
<literal moreinfo="none">java.net.URL</literal> object;
 if the value is SQL 
<literal moreinfo="none">NULL</literal>,
 the value returned is 
<literal moreinfo="none">null</literal> in the Java programming language</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs
 or if a URL is malformed</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal moreinfo="none">ResultSet</literal> object as a 
          <literal moreinfo="none">java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.72" xreflabel="Method getWarnings()">
        <title>Method getWarnings()</title>
        <indexterm significance="normal">
          <primary>getWarnings</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The first warning reported by calls on this ResultSet is
 returned. Subsequent ResultSet warnings will be chained to this
 SQLWarning. 
        </para>
        <para>
The warning chain is automatically cleared each time a new
 row is read. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This warning chain only covers warnings caused
 by ResultSet methods. Any warning caused by statement methods
 (such as reading OUT parameters) will be chained on the
 Statement object.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.73" xreflabel="Method insertRow()">
        <title>Method insertRow()</title>
        <indexterm significance="normal">
          <primary>insertRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>insertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs,
 if this method is called when the cursor is not on the insert row,
 or if not all of non-nullable columns in
 the insert row have been given a value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Inserts the contents of the insert row into this 
          <literal moreinfo="none">ResultSet</literal> objaect and into the database.
 The cursor must be on the insert row when this method is called.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.74" xreflabel="Method isAfterLast()">
        <title>Method isAfterLast()</title>
        <indexterm significance="normal">
          <primary>isAfterLast</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isAfterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is after the last row in the result
 set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.75" xreflabel="Method isBeforeFirst()">
        <title>Method isBeforeFirst()</title>
        <indexterm significance="normal">
          <primary>isBeforeFirst</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isBeforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is before the first row in the result
 set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.76" xreflabel="Method isFirst()">
        <title>Method isFirst()</title>
        <indexterm significance="normal">
          <primary>isFirst</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the first row of the result set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.77" xreflabel="Method isLast()">
        <title>Method isLast()</title>
        <indexterm significance="normal">
          <primary>isLast</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the last row of the result set.
 Note: Calling isLast() may be expensive since the JDBC driver
 might need to fetch ahead one row in order to determine
 whether the current row is the last row in the result set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.78" xreflabel="Method last()">
        <title>Method last()</title>
        <indexterm significance="normal">
          <primary>last</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>last</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the last row in the result set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.79" xreflabel="Method moveToCurrentRow()">
        <title>Method moveToCurrentRow()</title>
        <indexterm significance="normal">
          <primary>moveToCurrentRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>moveToCurrentRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs,
 or the result set is not updatable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move the cursor to the remembered cursor position, usually the
 current row. Has no effect unless the cursor is on the insert
 row.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.80" xreflabel="Method moveToInsertRow()">
        <title>Method moveToInsertRow()</title>
        <indexterm significance="normal">
          <primary>moveToInsertRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>moveToInsertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs,
 or the result set is not updatable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to the insert row. The current cursor position is
 remembered while the cursor is positioned on the insert row.
 The insert row is a special row associated with an updatable
 result set. It is essentially a buffer where a new row may
 be constructed by calling the updateXXX() methods prior to
 inserting the row into the result set.
 Only the updateXXX(), getXXX(), and insertRow() methods may be
 called when the cursor is on the insert row. All of the columns in
 a result set must be given a value each time this method is
 called before calling insertRow(). UpdateXXX()must be called before
 getXXX() on a column.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.81" xreflabel="Method next()">
        <title>Method next()</title>
        <indexterm significance="normal">
          <primary>next</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>next</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A ResultSet is initially positioned before its first row; the
 first call to next makes the first row the current row; the
 second call makes the second row the current row, etc. 
        </para>
        <para>
If an input stream from the previous row is open, it is
 implicitly closed. The ResultSet's warning chain is cleared
 when a new row is read.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.82" xreflabel="Method previous()">
        <title>Method previous()</title>
        <indexterm significance="normal">
          <primary>previous</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>previous</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 result set type is TYPE_FORWAR_DONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the previous row in the result set. 
        </para>
        <para>
Note: previous() is not the same as relative(-1) since it
 makes sense to call previous() when there is no current row.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.83" xreflabel="Method refreshRow()">
        <title>Method refreshRow()</title>
        <indexterm significance="normal">
          <primary>refreshRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>refreshRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or if
 called when on the insert row.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Refresh the value of the current row with its current value in
 the database. Cannot be called when on the insert row.
 The refreshRow() method provides a way for an application to
 explicitly tell the JDBC driver to refetch a row(s) from the
 database. An application may want to call refreshRow() when
 caching or prefetching is being done by the JDBC driver to
 fetch the latest value of a row from the database. The JDBC driver
 may actually refresh multiple rows at once if the fetch size is
 greater than one.
 All values are refetched subject to the transaction isolation
 level and cursor sensitivity. If refreshRow() is called after
 calling updateXXX(), but before calling updateRow() then the
 updates made to the row are lost. Calling refreshRow() frequently
 will likely slow performance.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.84" xreflabel="Method relative(int)">
        <title>Method relative(int)</title>
        <indexterm significance="normal">
          <primary>relative</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>relative</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or there
 is no current row, or result set type is TYPE_FORWARD_ONLY.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 result set positions the cursor before/after the
 the first/last row. Calling relative(0) is valid, but does
 not change the cursor position. 
        </para>
        <para>
Note: Calling relative(1) is different than calling next()
 since is makes sense to call next() when there is no current row,
 for example, when the cursor is positioned before the first row
 or after the last row of the result set.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.85" xreflabel="Method rowDeleted()">
        <title>Method rowDeleted()</title>
        <indexterm significance="normal">
          <primary>rowDeleted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>rowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.DatabaseMetaData.deletesAreDetected</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if this row has been deleted. A deleted row may leave
 a visible "hole" in a result set. This method can be used to
 detect holes in a result set. The value returned depends on whether
 or not the result set can detect deletions.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.86" xreflabel="Method rowInserted()">
        <title>Method rowInserted()</title>
        <indexterm significance="normal">
          <primary>rowInserted</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>rowInserted</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.DatabaseMetaData.insertsAreDetected</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been inserted. The value returned
 depends on whether or not the result set can detect visible inserts.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.87" xreflabel="Method rowUpdated()">
        <title>Method rowUpdated()</title>
        <indexterm significance="normal">
          <primary>rowUpdated</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>rowUpdated</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.DatabaseMetaData.updatesAreDetected</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been updated. The value returned
 depends on whether or not the result set can detect updates.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.88" xreflabel="Method updateArray(int, java.sql.Array)">
        <title>Method updateArray(int, Array)</title>
        <indexterm significance="normal">
          <primary>updateArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.89" xreflabel="Method updateArray(java.lang.String, java.sql.Array)">
        <title>Method updateArray(String, Array)</title>
        <indexterm significance="normal">
          <primary>updateArray</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                  java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.90" xreflabel="Method updateAsciiStream(int, java.io.InputStream, int)">
        <title>Method updateAsciiStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the length of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.91" xreflabel="Method updateAsciiStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateAsciiStream(String, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.92" xreflabel="Method updateBigDecimal(int, java.math.BigDecimal)">
        <title>Method updateBigDecimal(int, BigDecimal)</title>
        <indexterm significance="normal">
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.93" xreflabel="Method updateBigDecimal(java.lang.String, java.math.BigDecimal)">
        <title>Method updateBigDecimal(String, BigDecimal)</title>
        <indexterm significance="normal">
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                       java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.94" xreflabel="Method updateBinaryStream(int, java.io.InputStream, int)">
        <title>Method updateBinaryStream(int, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the length of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.95" xreflabel="Method updateBinaryStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateBinaryStream(String, InputStream, int)</title>
        <indexterm significance="normal">
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, 
                                         int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.96" xreflabel="Method updateBlob(int, java.sql.Blob)">
        <title>Method updateBlob(int, Blob)</title>
        <indexterm significance="normal">
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.97" xreflabel="Method updateBlob(java.lang.String, java.sql.Blob)">
        <title>Method updateBlob(String, Blob)</title>
        <indexterm significance="normal">
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.98" xreflabel="Method updateBoolean(int, boolean)">
        <title>Method updateBoolean(int, boolean)</title>
        <indexterm significance="normal">
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.99" xreflabel="Method updateBoolean(java.lang.String, boolean)">
        <title>Method updateBoolean(String, boolean)</title>
        <indexterm significance="normal">
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.100" xreflabel="Method updateByte(int, byte)">
        <title>Method updateByte(int, byte)</title>
        <indexterm significance="normal">
          <primary>updateByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.101" xreflabel="Method updateByte(java.lang.String, byte)">
        <title>Method updateByte(String, byte)</title>
        <indexterm significance="normal">
          <primary>updateByte</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.102" xreflabel="Method updateBytes(int, byte[])">
        <title>Method updateBytes(int, byte[])</title>
        <indexterm significance="normal">
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.103" xreflabel="Method updateBytes(java.lang.String, byte[])">
        <title>Method updateBytes(String, byte[])</title>
        <indexterm significance="normal">
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.104" xreflabel="Method updateCharacterStream(int, java.io.Reader, int)">
        <title>Method updateCharacterStream(int, Reader, int)</title>
        <indexterm significance="normal">
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - the length of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.105" xreflabel="Method updateCharacterStream(java.lang.String, java.io.Reader, int)">
        <title>Method updateCharacterStream(String, Reader, int)</title>
        <indexterm significance="normal">
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                            java.io.Reader <emphasis>x</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">length</literal></emphasis> - of the stream</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.106" xreflabel="Method updateClob(int, java.sql.Clob)">
        <title>Method updateClob(int, Clob)</title>
        <indexterm significance="normal">
          <primary>updateClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.107" xreflabel="Method updateClob(java.lang.String, java.sql.Clob)">
        <title>Method updateClob(String, Clob)</title>
        <indexterm significance="normal">
          <primary>updateClob</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.108" xreflabel="Method updateDate(int, java.sql.Date)">
        <title>Method updateDate(int, Date)</title>
        <indexterm significance="normal">
          <primary>updateDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.109" xreflabel="Method updateDate(java.lang.String, java.sql.Date)">
        <title>Method updateDate(String, Date)</title>
        <indexterm significance="normal">
          <primary>updateDate</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.110" xreflabel="Method updateDouble(int, double)">
        <title>Method updateDouble(int, double)</title>
        <indexterm significance="normal">
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.111" xreflabel="Method updateDouble(java.lang.String, double)">
        <title>Method updateDouble(String, double)</title>
        <indexterm significance="normal">
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.112" xreflabel="Method updateFloat(int, float)">
        <title>Method updateFloat(int, float)</title>
        <indexterm significance="normal">
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.113" xreflabel="Method updateFloat(java.lang.String, float)">
        <title>Method updateFloat(String, float)</title>
        <indexterm significance="normal">
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.114" xreflabel="Method updateInt(int, int)">
        <title>Method updateInt(int, int)</title>
        <indexterm significance="normal">
          <primary>updateInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.115" xreflabel="Method updateInt(java.lang.String, int)">
        <title>Method updateInt(String, int)</title>
        <indexterm significance="normal">
          <primary>updateInt</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.116" xreflabel="Method updateLong(int, long)">
        <title>Method updateLong(int, long)</title>
        <indexterm significance="normal">
          <primary>updateLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.117" xreflabel="Method updateLong(java.lang.String, long)">
        <title>Method updateLong(String, long)</title>
        <indexterm significance="normal">
          <primary>updateLong</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.118" xreflabel="Method updateNull(int)">
        <title>Method updateNull(int)</title>
        <indexterm significance="normal">
          <primary>updateNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give a nullable column a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.119" xreflabel="Method updateNull(java.lang.String)">
        <title>Method updateNull(String)</title>
        <indexterm significance="normal">
          <primary>updateNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.120" xreflabel="Method updateObject(int, java.lang.Object)">
        <title>Method updateObject(int, Object)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.121" xreflabel="Method updateObject(int, java.lang.Object, int)">
        <title>Method updateObject(int, Object, int)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                   int <emphasis>scale</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.122" xreflabel="Method updateObject(java.lang.String, java.lang.Object)">
        <title>Method updateObject(String, Object)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.123" xreflabel="Method updateObject(java.lang.String, java.lang.Object, int)">
        <title>Method updateObject(String, Object, int)</title>
        <indexterm significance="normal">
          <primary>updateObject</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.124" xreflabel="Method updateRef(int, java.sql.Ref)">
        <title>Method updateRef(int, Ref)</title>
        <indexterm significance="normal">
          <primary>updateRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.125" xreflabel="Method updateRef(java.lang.String, java.sql.Ref)">
        <title>Method updateRef(String, Ref)</title>
        <indexterm significance="normal">
          <primary>updateRef</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.4</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal moreinfo="none">java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal moreinfo="none">updateRow</literal> or 
          <literal moreinfo="none">insertRow</literal> methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.126" xreflabel="Method updateRow()">
        <title>Method updateRow()</title>
        <indexterm significance="normal">
          <primary>updateRow</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs, or
 if called when on the insert row</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update the underlying database with the new contents of the
 current row. Cannot be called when on the insert row.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.127" xreflabel="Method updateShort(int, short)">
        <title>Method updateShort(int, short)</title>
        <indexterm significance="normal">
          <primary>updateShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.128" xreflabel="Method updateShort(java.lang.String, short)">
        <title>Method updateShort(String, short)</title>
        <indexterm significance="normal">
          <primary>updateShort</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.129" xreflabel="Method updateString(int, java.lang.String)">
        <title>Method updateString(int, String)</title>
        <indexterm significance="normal">
          <primary>updateString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.130" xreflabel="Method updateString(java.lang.String, java.lang.String)">
        <title>Method updateString(String, String)</title>
        <indexterm significance="normal">
          <primary>updateString</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.131" xreflabel="Method updateTime(int, java.sql.Time)">
        <title>Method updateTime(int, Time)</title>
        <indexterm significance="normal">
          <primary>updateTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.132" xreflabel="Method updateTime(java.lang.String, java.sql.Time)">
        <title>Method updateTime(String, Time)</title>
        <indexterm significance="normal">
          <primary>updateTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.133" xreflabel="Method updateTimestamp(int, java.sql.Timestamp)">
        <title>Method updateTimestamp(int, Timestamp)</title>
        <indexterm significance="normal">
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnIndex</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.134" xreflabel="Method updateTimestamp(java.lang.String, java.sql.Timestamp)">
        <title>Method updateTimestamp(String, Timestamp)</title>
        <indexterm significance="normal">
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                      java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the name of the column</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">x</literal></emphasis> - the new column value</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect4>
      <sect4 id="jd1.6.2.135" xreflabel="Method wasNull()">
        <title>Method wasNull()</title>
        <indexterm significance="normal">
          <primary>wasNull</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>wasNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column may have the value of SQL NULL; wasNull reports whether
 the last column read had this special value.
 Note that you must first call getXXX on a column to try to read
 its value and then call wasNull() to find if the value was
 the SQL NULL.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.7" xreflabel="Class OPLPooledConnection" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLPooledConnection</title>
    <indexterm significance="normal">
      <primary>OPLPooledConnection</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLPooledConnection</secondary>
    </indexterm>
    <para>
A PooledConnection object is a connection object that provides hooks
 for connection pool management. A PooledConnection object represents
 a physical connection to a data source.
    </para>
    <sect3 id="jd1.7.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLPooledConnection</emphasis> implements PooledConnection,Cloneable {
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public void <emphasis role="strong">addConnectionEventListener</emphasis>(
                javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
  public void <emphasis role="strong">removeConnectionEventListener</emphasis>(
                javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">closeAll</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLPooledConnection</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.7.2">
      <title>Members</title>
      <sect4 id="jd1.7.2.1" xreflabel="Method addConnectionEventListener(javax.sql.ConnectionEventListener)">
        <title>Method addConnectionEventListener(ConnectionEventListener)</title>
        <indexterm significance="normal">
          <primary>addConnectionEventListener</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>addConnectionEventListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">addConnectionEventListener</emphasis>(
                        javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <para>
Add an event listener.
        </para>
      </sect4>
      <sect4 id="jd1.7.2.2" xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm significance="normal">
          <primary>close</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Close the physical connection.
        </para>
      </sect4>
      <sect4 id="jd1.7.2.3" xreflabel="Method closeAll()">
        <title>Method closeAll()</title>
        <indexterm significance="normal">
          <primary>closeAll</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>closeAll</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">closeAll</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Close all the Statement objects that have been opened by this
 PooledConnection object.
        </para>
      </sect4>
      <sect4 id="jd1.7.2.4" xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm significance="normal">
          <primary>getConnection</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>java.sql.SQLException</para></entry>
                <entry><para>if a database-access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Create an object handle for this physical connection.
 The object returned is a temporary handle used by application code
 to refer to a physical connection that is being pooled.
        </para>
      </sect4>
      <sect4 id="jd1.7.2.5" xreflabel="Method removeConnectionEventListener(javax.sql.ConnectionEventListener)">
        <title>Method removeConnectionEventListener(ConnectionEventListener)</title>
        <indexterm significance="normal">
          <primary>removeConnectionEventListener</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>removeConnectionEventListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">removeConnectionEventListener</emphasis>(
                        javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <para>
Remove an event listener.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.8" xreflabel="Class OPLPoolStatistic" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLPoolStatistic</title>
    <indexterm significance="normal">
      <primary>OPLPoolStatistic</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLPoolStatistic</secondary>
    </indexterm>
    <sect3 id="jd1.8.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLPoolStatistic</emphasis> implements Cloneable {
  <emphasis>// Public Methods</emphasis>
  public int <emphasis role="strong">getHits</emphasis>();
  public int <emphasis role="strong">getMisses</emphasis>();
  public long <emphasis role="strong">getMaxWaitTime</emphasis>();
  public long <emphasis role="strong">getMinWaitTime</emphasis>();
  public long <emphasis role="strong">getCumWaitTime</emphasis>();
  public int <emphasis role="strong">getCacheSize</emphasis>();
  public int <emphasis role="strong">getConnsInUse</emphasis>();
  public int <emphasis role="strong">getConnsUnUsed</emphasis>();
  public String <emphasis role="strong">getName</emphasis>();
  public String <emphasis role="strong">toString</emphasis>();
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLPoolStatistic</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.8.2">
      <title>Members</title>
      <sect4 id="jd1.8.2.1" xreflabel="Method getCacheSize()">
        <title>Method getCacheSize()</title>
        <indexterm significance="normal">
          <primary>getCacheSize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCacheSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getCacheSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the connection pool size.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.2" xreflabel="Method getConnsInUse()">
        <title>Method getConnsInUse()</title>
        <indexterm significance="normal">
          <primary>getConnsInUse</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConnsInUse</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getConnsInUse</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of used connections in the connection pool size.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.3" xreflabel="Method getConnsUnUsed()">
        <title>Method getConnsUnUsed()</title>
        <indexterm significance="normal">
          <primary>getConnsUnUsed</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getConnsUnUsed</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getConnsUnUsed</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of unused connections in the connection pool size.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.4" xreflabel="Method getCumWaitTime()">
        <title>Method getCumWaitTime()</title>
        <indexterm significance="normal">
          <primary>getCumWaitTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCumWaitTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getCumWaitTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the sum of all waiting time for the connection pool.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.5" xreflabel="Method getHits()">
        <title>Method getHits()</title>
        <indexterm significance="normal">
          <primary>getHits</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getHits</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getHits</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of the connection pool hits.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.6" xreflabel="Method getMaxWaitTime()">
        <title>Method getMaxWaitTime()</title>
        <indexterm significance="normal">
          <primary>getMaxWaitTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMaxWaitTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getMaxWaitTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the maximal waiting time for the connection pool.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.7" xreflabel="Method getMinWaitTime()">
        <title>Method getMinWaitTime()</title>
        <indexterm significance="normal">
          <primary>getMinWaitTime</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMinWaitTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getMinWaitTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the minimal waiting time for the connection pool.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.8" xreflabel="Method getMisses()">
        <title>Method getMisses()</title>
        <indexterm significance="normal">
          <primary>getMisses</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getMisses</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMisses</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of the connection pool misses.
        </para>
      </sect4>
      <sect4 id="jd1.8.2.9" xreflabel="Method getName()">
        <title>Method getName()</title>
        <indexterm significance="normal">
          <primary>getName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the name of ConectionPoolDataSource.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="jd1.9" xreflabel="Class OPLRowSetMetaData" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Class OPLRowSetMetaData</title>
    <indexterm significance="normal">
      <primary>OPLRowSetMetaData</primary>
    </indexterm>
    <indexterm significance="normal">
      <primary>Classes</primary>
      <secondary>OPLRowSetMetaData</secondary>
    </indexterm>
    <para>
The RowSetMetaData interface extends ResultSetMetaData with
 methods that allow a metadata object to be initialized.
    </para>
    <sect3 id="jd1.9.1">
      <title>Synopsis</title>
      <programlisting width="80" format="linespecific">
public class <emphasis role="strong">OPLRowSetMetaData</emphasis> implements RowSetMetaData,Serializable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLRowSetMetaData</emphasis>(java.sql.ResultSetMetaData <emphasis>rsmd</emphasis>) 
      throws java.sql.SQLException;
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">setAutoIncrement</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCaseSensitive</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCatalogName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>catalogName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnCount</emphasis>(int <emphasis>columnCount</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>, int <emphasis>size</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnLabel</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>label</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnType</emphasis>(int <emphasis>column</emphasis>, int <emphasis>SQLType</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnTypeName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>typeName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCurrency</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setNullable</emphasis>(int <emphasis>column</emphasis>, int <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setPrecision</emphasis>(int <emphasis>column</emphasis>, int <emphasis>precision</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setScale</emphasis>(int <emphasis>column</emphasis>, int <emphasis>scale</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setSchemaName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>schemaName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setSearchable</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setSigned</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTableName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>tableName</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getColumnCount</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isAutoIncrement</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isCaseSensitive</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isSearchable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isCurrency</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">isNullable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isSigned</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnLabel</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getSchemaName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getPrecision</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getScale</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getTableName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getCatalogName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getColumnType</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnTypeName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isReadOnly</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isWritable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isDefinitelyWritable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnClassName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup align="center" cols="1">
          <thead>
            <row>
              <entry align="left"><para>Inheritance Path</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><simpara>java.lang.Object</simpara></entry>
            </row>
            <row>
              <entry><para>|</para></entry>
            </row>
            <row>
              <entry><simpara>openlink.javax.OPLRowSetMetaData</simpara></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="jd1.9.2">
      <title>Members</title>
      <sect4 id="jd1.9.2.1" xreflabel="Method getCatalogName(int)">
        <title>Method getCatalogName(int)</title>
        <indexterm significance="normal">
          <primary>getCatalogName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getCatalogName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCatalogName</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - column name or "" if not applicable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's table's catalog name.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.2" xreflabel="Method getColumnClassName(int)">
        <title>Method getColumnClassName(int)</title>
        <indexterm significance="normal">
          <primary>getColumnClassName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnClassName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnClassName</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>Since</para></entry>
                <entry><para><simplelist type="inline"><member>1.2</member>
</simplelist>
                  </para></entry>
              </row>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member><ulink url="package-summary.html#2.0 API">What Is in the JDBC
 2.0 API</ulink></member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the fully-qualified name of the Java class whose instances
 are manufactured if the method 
          <literal moreinfo="none">ResultSet.getObject</literal>
 is called to retrieve a value
 from the column. 
          <literal moreinfo="none">ResultSet.getObject</literal> may return a subclass of the
 class returned by this method.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.3" xreflabel="Method getColumnCount()">
        <title>Method getColumnCount()</title>
        <indexterm significance="normal">
          <primary>getColumnCount</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnCount</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getColumnCount</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the number of columns in this RowSet
        </para>
      </sect4>
      <sect4 id="jd1.9.2.4" xreflabel="Method getColumnDisplaySize(int)">
        <title>Method getColumnDisplaySize(int)</title>
        <indexterm significance="normal">
          <primary>getColumnDisplaySize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnDisplaySize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the normal maximum number of characters allowed as the width
 of the designated column</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates the designated column's normal maximum width in characters.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.5" xreflabel="Method getColumnLabel(int)">
        <title>Method getColumnLabel(int)</title>
        <indexterm significance="normal">
          <primary>getColumnLabel</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnLabel</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnLabel</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the suggested column title</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's suggested title for use in printouts and
 displays.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.6" xreflabel="Method getColumnName(int)">
        <title>Method getColumnName(int)</title>
        <indexterm significance="normal">
          <primary>getColumnName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - column name</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the designated column's name.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.7" xreflabel="Method getColumnType(int)">
        <title>Method getColumnType(int)</title>
        <indexterm significance="normal">
          <primary>getColumnType</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnType</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getColumnType</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - SQL type from java.sql.Types</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.Types</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the designated column's SQL type.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.8" xreflabel="Method getColumnTypeName(int)">
        <title>Method getColumnTypeName(int)</title>
        <indexterm significance="normal">
          <primary>getColumnTypeName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getColumnTypeName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnTypeName</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - type name used by the database. If the column type is
 a user-defined type, then a fully-qualified type name is returned.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the designated column's database-specific type name.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.9" xreflabel="Method getPrecision(int)">
        <title>Method getPrecision(int)</title>
        <indexterm significance="normal">
          <primary>getPrecision</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getPrecision</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getPrecision</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - precision</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the designated column's number of decimal digits.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.10" xreflabel="Method getScale(int)">
        <title>Method getScale(int)</title>
        <indexterm significance="normal">
          <primary>getScale</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getScale</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getScale</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - scale</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's number of digits to right of the decimal point.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.11" xreflabel="Method getSchemaName(int)">
        <title>Method getSchemaName(int)</title>
        <indexterm significance="normal">
          <primary>getSchemaName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getSchemaName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getSchemaName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - schema name or "" if not applicable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the designated column's table's schema.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.12" xreflabel="Method getTableName(int)">
        <title>Method getTableName(int)</title>
        <indexterm significance="normal">
          <primary>getTableName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>getTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getTableName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - table name or "" if not applicable</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's table name.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.13" xreflabel="Method isAutoIncrement(int)">
        <title>Method isAutoIncrement(int)</title>
        <indexterm significance="normal">
          <primary>isAutoIncrement</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isAutoIncrement</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isAutoIncrement</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - true if so</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the column is automatically numbered, thus read-only.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.14" xreflabel="Method isCaseSensitive(int)">
        <title>Method isCaseSensitive(int)</title>
        <indexterm significance="normal">
          <primary>isCaseSensitive</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isCaseSensitive</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isCaseSensitive</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether a column's case matters.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.15" xreflabel="Method isCurrency(int)">
        <title>Method isCurrency(int)</title>
        <indexterm significance="normal">
          <primary>isCurrency</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isCurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isCurrency</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the designated column is a cash value.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.16" xreflabel="Method isDefinitelyWritable(int)">
        <title>Method isDefinitelyWritable(int)</title>
        <indexterm significance="normal">
          <primary>isDefinitelyWritable</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isDefinitelyWritable</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isDefinitelyWritable</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether a write on the designated column will definitely succeed.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.17" xreflabel="Method isNullable(int)">
        <title>Method isNullable(int)</title>
        <indexterm significance="normal">
          <primary>isNullable</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isNullable</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public int <emphasis role="strong">isNullable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - the nullability status of the given column; one of 
<literal moreinfo="none">columnNoNulls</literal>, 
<literal moreinfo="none">columnNullable</literal> or 
<literal moreinfo="none">columnNullableUnknown</literal></para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates the nullability of values in the designated column.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.18" xreflabel="Method isReadOnly(int)">
        <title>Method isReadOnly(int)</title>
        <indexterm significance="normal">
          <primary>isReadOnly</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isReadOnly</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the designated column is definitely not writable.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.19" xreflabel="Method isSearchable(int)">
        <title>Method isSearchable(int)</title>
        <indexterm significance="normal">
          <primary>isSearchable</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isSearchable</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isSearchable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the designated column can be used in a where clause.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.20" xreflabel="Method isSigned(int)">
        <title>Method isSigned(int)</title>
        <indexterm significance="normal">
          <primary>isSigned</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isSigned</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isSigned</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether values in the designated column are signed numbers.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.21" xreflabel="Method isWritable(int)">
        <title>Method isWritable(int)</title>
        <indexterm significance="normal">
          <primary>isWritable</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>isWritable</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isWritable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><literal moreinfo="none">return</literal> - <literal moreinfo="none">true</literal> if so; 
<literal moreinfo="none">false</literal> otherwise</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database access error occurs</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether it is possible for a write on the designated column to succeed.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.22" xreflabel="Method setAutoIncrement(int, boolean)">
        <title>Method setAutoIncrement(int, boolean)</title>
        <indexterm significance="normal">
          <primary>setAutoIncrement</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setAutoIncrement</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setAutoIncrement</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">property</literal></emphasis> - is either true or false (default is false).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the is column automatically numbered, thus read-only.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.23" xreflabel="Method setCaseSensitive(int, boolean)">
        <title>Method setCaseSensitive(int, boolean)</title>
        <indexterm significance="normal">
          <primary>setCaseSensitive</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCaseSensitive</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCaseSensitive</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">property</literal></emphasis> - is either true or false (default is false).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column is case sensitive.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.24" xreflabel="Method setCatalogName(int, java.lang.String)">
        <title>Method setCatalogName(int, String)</title>
        <indexterm significance="normal">
          <primary>setCatalogName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCatalogName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCatalogName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>catalogName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">catalogName</literal></emphasis> - column's catalog name.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's table's catalog name, if any.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.25" xreflabel="Method setColumnCount(int)">
        <title>Method setColumnCount(int)</title>
        <indexterm significance="normal">
          <primary>setColumnCount</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setColumnCount</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnCount</emphasis>(int <emphasis>columnCount</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnCount</literal></emphasis> - number of columns.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of columns in the RowSet.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.26" xreflabel="Method setColumnDisplaySize(int, int)">
        <title>Method setColumnDisplaySize(int, int)</title>
        <indexterm significance="normal">
          <primary>setColumnDisplaySize</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setColumnDisplaySize</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>, int <emphasis>size</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">size</literal></emphasis> - size of the column</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's normal max width in chars.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.27" xreflabel="Method setColumnLabel(int, java.lang.String)">
        <title>Method setColumnLabel(int, String)</title>
        <indexterm significance="normal">
          <primary>setColumnLabel</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setColumnLabel</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnLabel</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>label</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">label</literal></emphasis> - the column title</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the suggested column title for use in printouts and
 displays, if any.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.28" xreflabel="Method setColumnName(int, java.lang.String)">
        <title>Method setColumnName(int, String)</title>
        <indexterm significance="normal">
          <primary>setColumnName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setColumnName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">columnName</literal></emphasis> - the column name</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column name.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.29" xreflabel="Method setColumnType(int, int)">
        <title>Method setColumnType(int, int)</title>
        <indexterm significance="normal">
          <primary>setColumnType</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setColumnType</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnType</emphasis>(int <emphasis>column</emphasis>, int <emphasis>SQLType</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">SQLType</literal></emphasis> - column's SQL type.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="4*"/>
            <spanspec namest="c1" align="left" spanname="span" nameend="c2"/>
            <thead>
              <row>
                <entry spanname="span"><para>Additional Information</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>See Also</para></entry>
                <entry><para><simplelist type="inline">
  <member>java.sql.Types</member>
</simplelist>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's SQL type.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.30" xreflabel="Method setColumnTypeName(int, java.lang.String)">
        <title>Method setColumnTypeName(int, String)</title>
        <indexterm significance="normal">
          <primary>setColumnTypeName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setColumnTypeName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnTypeName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>typeName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">typeName</literal></emphasis> - data source specific type name.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's data source specific type name, if any.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.31" xreflabel="Method setCurrency(int, boolean)">
        <title>Method setCurrency(int, boolean)</title>
        <indexterm significance="normal">
          <primary>setCurrency</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setCurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCurrency</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">property</literal></emphasis> - is either true or false (default is false).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column is a cash value.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.32" xreflabel="Method setNullable(int, int)">
        <title>Method setNullable(int, int)</title>
        <indexterm significance="normal">
          <primary>setNullable</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setNullable</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setNullable</emphasis>(int <emphasis>column</emphasis>, int <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">property</literal></emphasis> - is either one of columnNoNulls, columnNullable 
 or columnNullableUnknown (default is columnNullableUnknown).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column's value can be set to NULL.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.33" xreflabel="Method setPrecision(int, int)">
        <title>Method setPrecision(int, int)</title>
        <indexterm significance="normal">
          <primary>setPrecision</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setPrecision</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPrecision</emphasis>(int <emphasis>column</emphasis>, int <emphasis>precision</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">precision</literal></emphasis> - number of decimal digits.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's number of decimal digits.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.34" xreflabel="Method setScale(int, int)">
        <title>Method setScale(int, int)</title>
        <indexterm significance="normal">
          <primary>setScale</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setScale</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setScale</emphasis>(int <emphasis>column</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">scale</literal></emphasis> - number of digits to right of decimal point.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's number of digits to right of the decimal point.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.35" xreflabel="Method setSchemaName(int, java.lang.String)">
        <title>Method setSchemaName(int, String)</title>
        <indexterm significance="normal">
          <primary>setSchemaName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setSchemaName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSchemaName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>schemaName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">schemaName</literal></emphasis> - the schema name</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's table's schema, if any.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.36" xreflabel="Method setSearchable(int, boolean)">
        <title>Method setSearchable(int, boolean)</title>
        <indexterm significance="normal">
          <primary>setSearchable</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setSearchable</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSearchable</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">property</literal></emphasis> - is either true or false (default is false).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column can be used in a where clause.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.37" xreflabel="Method setSigned(int, boolean)">
        <title>Method setSigned(int, boolean)</title>
        <indexterm significance="normal">
          <primary>setSigned</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setSigned</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSigned</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">property</literal></emphasis> - is either true or false (default is false).</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Speicfy whether the column is a signed number.
        </para>
      </sect4>
      <sect4 id="jd1.9.2.38" xreflabel="Method setTableName(int, java.lang.String)">
        <title>Method setTableName(int, String)</title>
        <indexterm significance="normal">
          <primary>setTableName</primary>
        </indexterm>
        <indexterm significance="normal">
          <primary>Methods</primary>
          <secondary>setTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting format="linespecific">
<emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTableName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>tableName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colname="param" colwidth="*"/>
            <thead>
              <colspec colname="param" colwidth="*"/>
              <row>
                <entry><para>Parameters</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para><emphasis><literal moreinfo="none">column</literal></emphasis> - the first column is 1, the second is 2, ...</para></entry>
              </row>
              <row>
                <entry><para><emphasis><literal moreinfo="none">tableName</literal></emphasis> - column's table name.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="throws" colwidth="*"/>
            <colspec colname="throws" colwidth="2*"/>
            <thead>
              <colspec colname="throws" colwidth="*"/>
              <row>
                <entry><para>Exceptions</para></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><para>SQLException</para></entry>
                <entry><para>if a database-access error occurs.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's table name, if any.
        </para>
      </sect4>
    </sect3>
  </sect2>
</sect1>
