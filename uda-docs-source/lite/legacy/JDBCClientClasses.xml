<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="jdbcinstandconf" ><title>OpenLink JDBC Driver (Single-Tier Edition)</title>
<!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
<abstract id="introduction">
<title>Introduction</title>
    <para>The OpenLink Drivers for JDBC enable the development, deployment, and
    utilization of database independent Java Applications, Applets, Servlets, and Bean
    Components (collectively called JDBC Clients) that conform to the JDBC 1.0.2, JDBC 1.1.x,
    or JDBC 2.0.x specifications from JavaSoft. </para>
    <para>JDBC clients are built by importing the &quot;java.sql.*&quot; collection of classes known
    as the JDBC Driver Manager interface. The JDBC Driver Manager uses JDBC URLs to link JDBC
    clients with JDBC Drivers. It is important to note that JDBC URLs are JDBC Driver
    specific. Detailed information regarding JDBC is available from:</para>
    <para>http://java.sun.com/products/jdbc/index.html</para>
</abstract>
<chapterinfo>
  <keywordset>
    <keyword>JDBC</keyword>
    <keyword>JDBC Driver</keyword>
    <keyword>JDBC Drivers</keyword>
    <keyword>Datasource</keyword>
    <keyword>Data Source</keyword>
    <keyword>Windows</keyword>
    <keyword>Setup</keyword>
    <keyword>Unix</keyword>
    <keyword>Mac</keyword>
    <keyword>OS X</keyword>
    <keyword>Jetfix</keyword>
    <keyword>Lite</keyword>
  </keywordset>
</chapterinfo>
<!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
<sect1 id="opljava"><title>OpenLink JDBC Driver (Single-Tier Edition) for Java Database Connectivity (JDBC)</title>
<sect1info>
  <keywordset>
    <keyword>Java Database</keyword>
  </keywordset>
</sect1info>
<sect2 id="New_Features_Summary">
<title>New JDBC Driver Packages</title>
<para>OpenLink now has a broader range of JDBC Driver types which also
transcend JDBC versions.</para>
<para>The drivers are now categorized as follows:</para>
<itemizedlist mark="bullet">
<listitem><para>Generic Drivers for JDBC 1.1.x (compatible with Java
Virtual Machine version 1.1.x)</para>
</listitem>
<listitem><para>Generic Drivers for JDBC 2.0 (compatible with Java
Virtual Machine version 1.2 &amp; 1.3)</para>
</listitem>
<listitem><para>Generic Drivers for JDBC 3.0 (compatible with Java
Virtual Machine version 1.4)</para>
</listitem>
<listitem><para>Megathin Drivers for JDBC 1.1.x (compatible with
Java Virtual Machine version 1.1.x)</para>
</listitem>
<listitem><para>Megathin Drivers for JDBC 2.0 (compatible with
Java Virtual Machine version 1.2 &amp; 1.3)</para>
</listitem>
<listitem><para>Megathin Drivers for JDBC 3.0 (compatible with
Java Virtual Machine version 1.4)</para>
</listitem>
</itemizedlist>
<para>The following table depicts how each of these drivers is packaged, what
JDBC Driver formats are supported, and whether they are certified 100% Pure
Java or Not:</para>
<table>
<tgroup><thead>
<row><entry><para>Product Name</para></entry><entry><para>Java Package</para></entry>
<entry><para>JDBC Driver Name</para></entry><entry><para>JDBC Driver Formats </para></entry>
<entry><para>100% Pure Java ?</para></entry>
</row>
</thead>
<tbody>
<row><entry><para>Generic Drivers for JDBC 1.1.x</para></entry>
<entry><para>opljdbc.jar</para></entry><entry><para>openlink.jdbc.Driver</para></entry>
<entry><para>1,2,3</para></entry><entry><para>N</para></entry>
</row>
<row><entry><para>Generic  Drivers for JDBC 2.0</para></entry>
<entry><para>opljdbc2.jar</para></entry><entry><para>openlink.jdbc2.Driver</para></entry>
<entry><para>1,2,3</para></entry><entry><para>N</para></entry>
</row>
<row><entry><para>Generic  Drivers for JDBC 3.0</para></entry>
<entry><para>opljdbc3.jar</para></entry><entry><para>openlink.jdbc3.Driver</para></entry>
<entry><para>1,2,3</para></entry><entry><para>N</para></entry>
</row>
<row><entry><para>Megathin Drivers for JDBC 1.1.x</para></entry>
<entry><para>megathin.jar</para></entry><entry><para>openlink.jdbc.Driver</para></entry>
<entry><para>3</para></entry><entry><para>Y</para></entry>
</row>
<row><entry><para>Megathin Drivers for JDBC 2.0</para></entry>
<entry><para>megathin2.jar</para></entry><entry><para>openlink.jdbc2.Driver</para></entry>
<entry><para>3</para></entry><entry><para>Y</para></entry>
</row>
<row><entry><para>Megathin Drivers for JDBC 3.0</para></entry>
<entry><para>megathin3.jar</para></entry><entry><para>openlink.jdbc3.Driver</para></entry>
<entry><para>3</para></entry><entry><para>Y</para></entry>
</row>
</tbody></tgroup></table>
</sect2>
<sect2 id="newfeat"><title>New Features &amp; Enhancements</title>
<orderedlist>
<listitem>
<formalpara><title>Enhanced Communications Layer</title>
<para>Prior to Release 4.1, the JDBC driver sent preformed database metadata calls in
a manner considered to be redundant prior to SELECT statements. With this new release, each
SELECT statement only sends and receives TCP packets associated with these metadata calls one
time prior to execution.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>Connection Pooling Support</title>
<para>The JDBC driver now supports connection pooling according to the
JDBC 2.0 specification.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>Scrollable Cursors</title>
<para>A new OpenLink RowSet class enables JDBC applications to take advantage of ODBC-style scrollable cursors functionality, with the ability to: retrieve rowsets, go to any row in the resultset or rowset, add new rows to the database, refresh and update any row with a single method invocation, lock and unlock any row, retrieve the current row number, as well as use ODBC-style bookmarks. This is an OpenLink extension to JDBC.</para>
<para>
The Drivers for JDBC 2.0 implement the Scrollable Cursor Interfaces introduced in JDBC 2.0. They also retain support for the OpenLink Scrollable Cursor extension so as to provide access to those Scrollable Cursor features that exist in ODBC but are missing from the JDBC 2.0 specification.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>Array Binding</title>
<para>As part of the new RowSet class. It is now possible to bind data arrays to the columns of the OpenLink RowSet object, and retrieve the data directly into the arrays with a single invocation of the RowSet.next() method. Please see the accompanying demonstration application for an example of its usage.</para>
<para>
This approach enables you to retrieve multiple records with a reduced number of
calls to the RowSet.next() method. It basically improves JDBC Application
performance.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>openlink.sql.Statement</title>
<para>This is a new OpenLink interface that extends java.sql.Statement to
provide additional methods for configuring the ODBC-Style Scrollable Cursors
functionality.</para>
<para>
You only need this functionality when working with the OpenLink Scrollable
Cursor extensions. The Drivers for JDBC 2.0 implement similar features for the
JDBC 2.0 Scrollable Cursor specification.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>Security</title>
<para>The OpenLink client and server components for JDBC encrypt the
data sent across the network between the client and server. This provides for
enhanced security, particularly over a WAN. This is transparent to the
application, and there are no driver specific properties for the application
to set.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>Version self-checking</title>
<para>The OpenLink client component for JDBC now cross checks version
numbers with the server at connect time, thus ensuring that
compatible components are always in use. An exception will be thrown when
incompatibilities are encountered, this exception will also contain information
about the component versions relating to the exception.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>Easier Client Version checking</title>
<para>There is now an easier way of checking the OpenLink client for JDBC
version. Make sure that the driver is in the classpath and then at
your command prompt enter the command:</para>
<programlisting>java openlink.jdbc.Driver</programlisting>
<para>(for JDK 1.x Drivers)</para>
<para>or</para>
<programlisting>java openlink.jdbc2.Driver</programlisting>
<para>(for JDK 1.2 or 1.3/2.0 Drivers)</para>
<para>or</para>
<programlisting>java openlink.jdbc3.Driver</programlisting>
<para>(for JDK 1.4/3.0 Drivers)</para>
<para>or</para>
<programlisting>java openlink.jdbc.Driver</programlisting>
<para>(for 100% Pure Java Drivers for JDK 1.x)</para>
<para>or</para>
<programlisting>java openlink.jdbc2.Driver</programlisting>
<para>(for 100% Pure Java Drivers for JDK 1.2 or 1.3/2.0)</para>
<para>or</para>
<programlisting>java openlink.jdbc3.Driver</programlisting>
<para>(for 100% Pure Java Drivers for JDK 1.4/3.0)</para>
<para>The driver will respond with appropriate version and release number
information.</para>
</formalpara>
</listitem>
<listitem>
<formalpara><title>OpenLink Native (UDBC) Bridge for JDBC</title>
<para>UDBC is OpenLink's Universal Database Connectivity solution for cross
platform data access. The new OpenLink Client UDBC Bridge for JDBC
enables JDBC binding to Native Database Interfaces without going through an
ODBC Driver Manager.</para>
</formalpara>
</listitem>
</orderedlist>
</sect2>
</sect1>
<sect1 id="downloadingjdbc">
<sect1info>
  <keywordset>
    <keyword>OpenLink JDBC Driver (Single-Tier Edition) Download</keyword>
    <keyword>Download</keyword>
  </keywordset>
</sect1info>
<title>Downloading Driver Software</title>
	<para>The OpenLink Drivers for JDBC are packaged either as a bundle alongside the other OpenLink
    data access drivers (ODBC, UDBC, and OLE-DB) that make up the OpenLink Universal Data
    Access Driver Suite or as a separate release archive which contains only the OpenLink
    Megathin Drivers for JDBC, a 100% pure Java Driver for JDBC.</para>
    <para>When you download the drivers as part of the data access driver suite bundle three driver types
		for JDBC are available to you:</para>
	<itemizedlist mark="bullet">
		<listitem><para>OpenLink Driver for JDBC Type 1 (JDBC-ODBC Bridge)</para></listitem>
        <listitem><para>OpenLink Driver for JDBC Type 2 (JDBC-Native Bridge)</para></listitem>
        <listitem><para>OpenLink Driver for JDBC Type 3 (Network enabled all Java Driver)</para></listitem>
    </itemizedlist>
    <para>When you download the OpenLink Megathin Drivers for JDBC
    you only get a very thin 100% Pure Java Type 3 Driver for JDBC known as the OpenLink
    Megathin Driver for JDBC.</para>
	<para>If you are not installing these Drivers from a CD you would have to visit the OpenLink Web Site's
    download page, &usweb;, to obtain these Drivers.</para>
    <para>The screen shots that follow depict the OpenLink download
    wizard interaction that is required in order to download either the JDBC Driver bundle or
    the standalone Megathin Drivers.</para>
    <sect2 id="downwizintjbundle">
	<title>OpenLink Web Download Wizard Interaction for obtaining OpenLink Drivers for JDBC Bundle</title>
    <orderedlist>
    <listitem><para>Select a Client Operating System from the &quot;Select
        Client Operating System&quot; listbox and then select a database engine that you will be
        connecting to via your Driver for JDBC using the &quot;Select Database&quot; listbox.</para>
		<figure id="fg-jcc001" float="1">
		<title>Client OS</title>
		<graphic fileref="clicls01.gif" format="gif"></graphic>
		</figure>
		</listitem>
	<listitem><para>Pick one or more server components matching the server
        operating system that will host the OpenLink Server components required by the Drivers for
        JDBC.&nbsp; Then click on the &quot;Download Selected Software&quot; button.</para>
		<figure id="fg-jcc002" float="1">
		<title>Client OS</title>
		<graphic fileref="clicls02.gif" format="gif"></graphic>
		</figure>
		</listitem>
    <listitem><para>Download all the software components presented in the
        &quot;Software Download&quot; page.</para>
		<figure id="fg-jcc003" float="1">
		<title>Software Download</title>
		<graphic fileref="clicls03.gif" format="gif"></graphic>
		</figure>
		</listitem>
	</orderedlist>
</sect2>
<sect2 id="downwizjmthin">
<title>Download Wizard Interaction for obtaining OpenLink Megathin Drivers for JDBC</title>
<orderedlist>
    <listitem><para>Select a Java Virtual Machine version from the
        &quot;Select Client Operating System&quot; listbox and then select a database engine that
        you will be connecting to via your Driver for JDBC using the &quot;Select Database&quot;
        listbox.</para>
		<figure id="fg-jcc004" float="1">
		<title>Software Download</title>
		<graphic fileref="clicls04.gif" format="gif"></graphic>
		</figure>
		</listitem>
    <listitem><para>Pick one or more server components matching the server
        operating system that will host the OpenLink Server components required by the Drivers for
        JDBC.&nbsp; Then click on the &quot;Download Selected Software&quot; button.</para>
		<figure id="fg-jcc005" float="1">
		<title>Software Download</title>
		<graphic fileref="clicls05.gif" format="gif"></graphic>
		</figure>
		</listitem>
    <listitem><para>Download all the software components presented in the
        &quot;Software Download&quot; page.</para>
		<figure id="fg-jcc006" float="1">
		<title>Software Download</title>
		<graphic fileref="clicls06.gif" format="gif"></graphic>
		</figure>
		</listitem>
</orderedlist>
</sect2>
</sect1>
<!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
<sect1 id="jdbcliteinst"><title>OpenLink JDBC Driver (Single-Tier Lite Edition) Configuration</title>
<sect1info>
  <keywordset>
    <keyword>JDBC Lite</keyword>
    <keyword>JDBC Lite Configuration</keyword>
  </keywordset>
</sect1info>
  <para>The JDBC Client Classes can be downloaded as part of the OpenLink Lite
  Data Access bundle or separately by choosing JDBC as the client platform
  on the web.</para>
  <para>Before any connections can be made using JDBC for Lite you must ensure
  that a Lite data source is configured correctly.  Refer to the previous chapters
  to correctly install and configure the Database vendors communications layer
  and the corresponding OpenLink Lite driver.</para>
  <para>Once the underlying OpenLink Lite Data Access Driver has been configured
  correctly the following section should be followed to construct suitable JDBC
  Connect Strings to connect to the database successfully.</para>
</sect1>
<!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
<sect1 id="OPLDriversUtilization">
<sect1info>
  <keywordset>
    <keyword>Driver for JDBC</keyword>
    <keyword>Drivers for JDBC</keyword>
    <keyword>Type 1; Type 2; Type 3; Type 4</keyword>
  </keywordset>
</sect1info>
<title>OpenLink JDBC Driver (Single-Tier Edition) for JDBC Utilization</title>
    <para>OpenLink Drivers for JDBC are available in three
    different JDBC Driver formats.</para>
	<itemizedlist>
      <listitem><formalpara><title>JDBC Type 1</title>
		<para>Driver for JDBC is implemented as a bridge to ODBC Drivers, thereby implementing the JDBC
        Driver classes through native methods, this is due to the fact that ODBC is a &apos;C&apos; language
        based data access application programming interface. Thus, this driver format is
        inherently part Java and part Native, implying that it is inherently platform specific
        rather than independent.
        </para></formalpara></listitem>
      <listitem><formalpara><title>JDBC Type 2</title>
		<para>Driver for JDBC is implemented as a bridge
        to Native Database Call Level Interfaces, thereby implementing the JDBC Driver classes
        through native methods, this is due to the fact that Native Database Call Interfaces are
        either C/C++ language based data access application programming interfaces. Thus, this
        driver format is inherently part Java and part Native, implying that it is inherently
        platform specific rather than independent
        </para></formalpara></listitem>
    </itemizedlist>
    <note><title>Note:</title>
    <para>JDBC Lite can be JDBC Types 1 or 2 only because you have to address
    platform specific database vender software beneath.</para></note>
    <para>JDBC Applets, Applications, Bean Components, and Servlets
    communicate with JDBC drivers through JDBC Uniform Resource Locators (URLs). Theses URLs
    are service request and binding formats implemented slightly differently for each OpenLink
    Driver for JDBC format. The general JDBC URL format is:</para>
    <para>jdbc:&lt;jdbc-subprotocol&gt;:[jdbc implementation
    specific URL attributes]</para>
    <para>The &quot;sub-protocol&quot; component of the URL above
    identifies each JDBC implementation and typically identifies the JDBC driver vendor, the
    actual URL attributes are vendor specific. Each OpenLink Driver for JDBC type has a
    different JDBC URL format, the sections that follow depict and provides examples of these
    formats.</para>
<sect2 id="JDBCType1">
<title>OpenLink Driver for JDBC Type 1 </title>
    <para>URL Format variation 1</para>
    <para>This driver format connects you to ODBC Data Source Names (DSNs) via JDBC. The URL format
    is as follows:</para>
    <programlisting>jdbc:openlink://ODBC[/DSN][/UID][/PWD][/READONLY]</programlisting>
    <para>URL Attributes</para>
    <para>/DSN - ODBC Data Source Name</para>
    <para>/UID - Username</para>
    <para>/PWD - Password</para>
    <para>/READONLY - Determines session mode, read-write or read-only.</para>
    <para>Example:</para>
    <para>If you were attempting to connect to an ODBC DSN on your
    machine named &quot;Customers Database&quot; in read-only mode then you would enter the
    following JDBC URL:</para>
    <para>jdbc:openlink://ODBC/DSN=CustomerDatabase/UID=test/PWD=test/READONLY=Y</para>
    <note><title>Note:</title><para>In the case of OpenLink ODBC DSNs you do not have
    to provide values for the /UID and /PWD attributes since these can be controlled and
    configured on the database or application server using the OpenLink Session Rules Book.
    </para></note>
    <para>URL Format variation 2</para>
    <para>This is an alternative connect string format, that is compatable
    with the Sun JDBC to ODBC Type 1 bridge:</para>
    <programlisting>jdbc:odbc:&lt;dsn&gt;;UID=&lt;uid&gt;;PWD=&lt;pwd&gt;</programlisting>
    <para>URL Attributes</para>
    <para>&lt;dsn&gt; - ODBC Data Source Name</para>
    <para>&lt;uid&gt; - Username</para>
    <para>&lt;pwd&gt; - Password</para>
</sect2>
<sect2 id="JDBCType2">
<title>OpenLink Driver for JDBC Type 2 </title>
    <para>URL Format</para>
    <para>This driver format connects you to UDBC Data Source Names (DSNs) via JDBC. The URL format is
    as follows:</para>
    <programlisting>jdbc:openlink://UDBC[/DSN][/UID][/PWD][/READONLY]</programlisting>
    <para>URL Attributes</para>
    <para>/DSN - ODBC Data Source Name</para>
    <para>/UID - Username</para>
    <para>/PWD - Password</para>
    <para>/READONLY - Determines session mode, read-write or read-only.</para>
    <para>Example:</para>
    <para>If you were attempting to connect to an UDBC DSN on your
    machine named &quot;Customers Database&quot; in read-only mode then you would enter the
    following JDBC URL:</para>
    <para>jdbc:openlink://UDBC/DSN=CustomerDatabase/UID=test/PWD=test/READONLY=Y</para>
    <note><title>Note:</title><para>In the case of OpenLink ODBC DSNs you do not have
    to provide values for the /UID and /PWD attributes since these can be controlled and
    configured on the database or application server using the OpenLink Session Rules Book.</para></note>
</sect2>
<sect2 id="JDBCType3">
<title>OpenLink Driver for JDBC Type 3</title>
    <para>URL Format</para>
    <para>This driver format connects you to remote database directly via the OpenLink Database drivers. The URL format is as follows:</para>
    <programlisting>
	jdbc:openlink://&lt;Hostname&gt;:[portnumber] [/DSN] [/UID] [/PWD] [/READONLY] [/FBS]
			[/JDBCAGENT] [/SVT] [/DATABASE] [/OPTIONS] [/DRIVER]</programlisting>
    <para>URL Attributes</para>
    <para>Hostname - Network Alias or IP address of server machine
    running an OpenLink Request Broker instance</para>
    <para>Port Number - Port number that identifies location of
    OpenLink JDBC Agent Service, the default value is 5000</para>
    <para>/DSN - ODBC Data Source Name</para>
    <para>/UID - Username</para>
    <para>/PWD - Password</para>
    <para>/READONLY - Determines session mode, read-write or
    read-only</para>
    <para>/FBS - Sets number of JDBC resultset rows that get packed
    into a single network packet</para>
    <para>/JDBCAGENT - Determines JDBC Agent type used rather than
    default (JDBC Agents exist for ODBC and UDBC) </para>
    <para>/SVT - Determines OpenLink Database Agent type (Oracle,
    Informix, Sybase, Progress, Ingres, SQL Sever, Sybase etc.) </para>
    <para>/DATABASE - Actual database name within a particular
    database environment</para>
    <para>/OPTIONS - Values used to connect to OpenLink Database
    Agents to remote database servers using database vendors networking</para>
    <para>/DRIVER - Used when making a DSN-Less connection to a
    remote ODBC Driver</para>
</sect2>
<sect2 id="examples">
<title>Examples</title>
<sect3 id="connremoteodbc">
    <title>Connecting To Remote Database</title>
    <para>If you were attempting to connect to a remote Database
    Server Type &quot;SQLServer 2000&quot;, hosted on a database server machine with the network
    alias &quot;pluto&quot;, with an OpenLink JDBC server listening at port 5001 (rather than default of 5000), and you wanted
    this session to be in read-only mode then you would enter the following JDBC URL:</para>
    <programlisting>jdbc:openlink://pluto:5001/SVT=SQLServer 2000/UID=test/PWD=test/
		READONLY=YES/FBS=55</programlisting>
    <note><title>Note:</title>
		<orderedlist>
      <listitem><para>In the case of OpenLink ODBC DSNs you do not have to
        provide values for the /UID and /PWD attributes since these can be controlled and
        configured on the database or application server using the OpenLink Session Rules Book</para>
      </listitem>
      <listitem><para>&quot;/FBS&quot; ensures that each iteration of a JDBC
        Resultset fetch loop returns 55 records or less until all records have been retrieved from
        a remote database server</para></listitem>
    </orderedlist>
	</note>
</sect3>
<sect3 id="connremoteudbc">
<title>Connecting To Remote UDBC DSN</title>
    <para>If you were attempting to connect to a remote UDBC DSN
    named &quot;Customers Database&quot;, hosted on a database server machine with the network
    alias &quot;pluto&quot;, with an OpenLink JDBC server listening at port 5001 (rather than default of 5000),
		and you wanted
    this session to be in read-only mode then you would enter the following JDBC URL:</para>
    <programlisting>jdbc:openlink://pluto:5001/DSN=CustomerDatabase/UID=test/PWD=test/
		READONLY=Y/JDBCAGENT=judbc/FBS=55</programlisting>
    <note>
	<title>Note:</title>
	<orderedlist>
      <listitem><para>In the case of OpenLink ODBC DSNs you do not have to
        provide values for the /UID and /PWD attributes since these can be controlled and
        configured on the database or application server using the OpenLink Session Rules Book
        </para>
      </listitem>
      <listitem><para>If &quot;pluto&quot; is a Linux or UNIX machine then the
        &quot;/JDBCAGENT&quot; attribute defaults to &quot;judbc&quot; when left out of the JDBC
        URL. Likewise if &quot;pluto&quot; is a Windows 95/98/NT/2000 machine the
        &quot;/JDBCAGENT&quot; attribute defaults to &quot;jodbc&quot;</para>
        </listitem>
      <listitem><para>&quot;/FBS&quot; ensures that each iteration of a JDBC
        Resultset fetch loop returns 55 records or less until all records have been retrieved from
        a remote database server</para></listitem>
    </orderedlist>
	</note>
</sect3>
<sect3 id="dsnlessconnection">
<title>Connecting To Databases Using DSN-Less Connections</title>
    <para>You do not have to create ODBC or UDBC DSNs in order to
    use your OpenLink Drivers for JDBC when using the type 3 format. Instead you can specify
    the OpenLink Database Type and Database Name attributes as part of your JDBC URL.</para>
    <para>To connect to a remote Microsoft SQL Server database
    without going via an ODBC DSN you would construct the following URL:</para>
    <programlisting>jdbc:openlink://saturn:5001/SVT=SQLServer6/DATABASE=pubs/UID=sa/
		PWD=/FBS=55/READONLY=Y</programlisting>
    <note><title>Notes:</title>
		<orderedlist>
      <listitem><para>In the case of OpenLink ODBC DSNs you do not have to
        provide values for the /UID and /PWD attributes since these can be controlled and
        configured on the database or application server using the OpenLink Session Rules Book</para>
      </listitem>
      <listitem><para>As &quot;saturn&quot; is a Windows 95/98/NT/2000 machine
        the &quot;/JDBCAGENT&quot; attribute defaults to &quot;jodbc&quot;</para>
      </listitem>
      <listitem><para>This feature applies to both OpenLink JDBC Agent types: JODBC Agent and JUDBC Agent
        </para></listitem>
    </orderedlist>
	</note>
</sect3>
<sect3 id="dsnlessodbcdriverconn">
<title>Connecting To Database via ODBC Driver Without A DSN (DSN-Less Connection)</title>
    <para>This JDBC URL format is currently only supported by the
    OpenLink JDBC Agent for ODBC DSNs (JODBC Agent).&nbsp; DSN-Less connections require you to
    determine the ODBC connect string attributes for the ODBC Driver that you are using. For
    OpenLink ODBC Drivers these values are:</para>
    <table>
	<title>Connect String Attributes</title>
	<tgroup align="char" charoff="50" char="." cols="2">
		<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
		<thead>
			<row><entry>Attribute</entry><entry>Description</entry></row>
		</thead>
		<tbody>
			<row><entry>ServerType</entry><entry>Database Type</entry></row>
			<row><entry>Host</entry><entry>Machine hosting the Database Agent serving an OpenLink ODBC Driver</entry></row>
			<row><entry>Username</entry><entry>Valid Database Username</entry></row>
			<row><entry>Password</entry><entry>Valid Password for Username</entry></row>
			<row><entry>FetchBufferSize</entry><entry>Number of resultset records fetched during each ODBC fetch loop</entry></row>
			<row><entry>Database</entry><entry>Actual database name within database server environment</entry></row>
			<row><entry>NoLoginBox</entry><entry>Disables OpenLink ODBC
    Drivers attempt to present dialog when ODBC Driver determines an incomplete ODBC connect
    string (collection of ODBC attributes passed at connect time) good examples being missing
    or blank &quot;Username&quot; and &quot;Password&quot; attributes.</entry></row>
	</tbody>
    </tgroup>
    </table>
    <para>If you were connecting a remote Oracle database on a
    machine called &quot;pluto&quot; and you wanted this session to be read-only, your URL
    formal would be as follows:</para>
    <programlisting>jdbc:openlink://pluto/DRIVER={OpenLink Generic 32 Bit Driver}/Database=ORCL/Username=test/
			PWD=test/ReadOnly=Yes/FBS=55/ServerType=Oracle 8/Host=pluto</programlisting>
</sect3>
<sect3 id="ConnectingToRemoteDBonSepServer">
<title>Connecting To Remote Databases On Separate Server Machine (OpenLink 3-Tier Architecture)</title>
    <para>You may choose to install your OpenLink Drivers for JDBC
    on an Application Server and then install your OpenLink Data Access Server components
    (Request Broker and Database Agents) on your dedicated database server machine. In such a
    scenario you will be connecting to your remote database engine using OpenLink Database
    Independent as opposed to your Database vendor's database specific networking middleware.</para>
    <para>If you were connecting from your Application Server
    called &quot;pluto&quot; to a dedicated Database Server machine named
    &quot;ora_server&quot;, hosting an Oracle database identified as &quot;ORCL&quot;
    you would construct the following JDBC URL:</para>
    <para>jdbc:openlink://pluto/SVT=Oracle 6/UID=test/PWD=test/HOST=ora_server</para>
    <note><title>Notes:</title>
	<orderedlist>
      <listitem><para>This feature applies to both OpenLink JDBC Agent types: JODBC Agent and JUDBC Agent</para>
        </listitem>
      <listitem><para>You could also have used the &quot;/DSN&quot;
        attribute to point to an ODBC or UDBC DSN which has been configured to connect to the
        Database Server machine, this simply reduces the size of your JDBC URL, but imposes the
        use of DSNs upon you.</para></listitem>
    </orderedlist>
	</note>
</sect3>
<sect3 id="ConnectingToRemoteDBUsingDBComs">
<title>Connecting To Remote Databases On Separate Server Machine Using Database Vendors Networking (Mixed 3-Tier Architecture)</title>
    <para>Organizational standards or individual preference may
    present you with a scenario in which you have two server machines in use, one acting as an
    Application Server hosting your OpenLink Drivers for JDBC and OpenLink Data Access Server
    components (Request Broker &amp; Database Agents), and the other acting as a dedicated
    Database Server. You may not have the necessary authority to install the OpenLink Data
    Access Server components on the Database Server, or you simply prefer to use your database
    vendors networking software which is already configured on your Application Server. This
    scenario can be described as a &quot;Mixed 3-Tier&quot; architecture, this is because you
    are going to use your OpenLink Database Agents atop database vendor provided networking
    rather than connecting to an OpenLink Database Agent using OpenLink Database independent
    networking.</para>
    <para>If you were connecting to a remote Oracle database
    somewhere on your network from our application server called &quot;pluto&quot; using an
    ODBC DSN called &quot;Customers&quot; you would construct the following JDBC URL assuming
    a Net8 or SQL*Net &quot;tnsname&quot; or server alias called &quot;ora_pluto&quot;:</para>
    <programlisting>jdbc:openlink://pluto/SVT=Oracle 8/UID=test/PWD=test/OPTIONS=ora_pluto</programlisting>
    <note><title>Notes:</title>
	<orderedlist>
      <listitem><para>The &quot;/OPTIONS&quot; JDBC URL attribute provides the
        entry or bind point for connecting OpenLink Database agents to Database vendors networking
        products. This applies to all supported OpenLink databases, see the OpenLink Database Agents configuration guide for
        additional information relating to the database specific formats of values passed to the
        &quot;/OPTIONS&quot; JDBC URL attribute</para>
		</listitem>
      <listitem><para>This feature applies to both OpenLink JDBC Agent types:
        JODBC Agent and JUDBC Agent
        </para></listitem>
      <listitem><para>You could also have used the &quot;/DSN&quot; &nbsp;
        attribute to point to an ODBC or UDBC DSN which has been configured to connect to the
        Database Server machine, this simply reduces the size of your JDBC URL, but imposes the
        use of DSNs upon you.</para></listitem>
    </orderedlist></note>
		</sect3>
	</sect2>
</sect1>
<!-- ===== ~~~~~ ===== ~~~~~ ===== ~~~~~ ===== -->
<sect1 id="JDBCDemos">
<sect1info>
  <keywordset>
    <keyword>JDBC Demo</keyword>
    <keyword>JDBC Demonstration</keyword>
  </keywordset>
</sect1info>
<title>OpenLink JDBC Driver (Single-Tier Edition) Demonstration Programs</title>
<para>To assist you further during your utilization or evaluation
    of OpenLink's Drivers for JDBC a number of demonstration JDBC
    compliant Applets and Applications are bundled with your OpenLink Driver for JDBC
    installation, these programs are provided in both binary and source code format for
    your free use. The sections that follow guide you through the process of using these
    programs</para>
<sect2 id="JDBCAppletDemos">
<title>JDBC Compliant Applet Demos</title>
    <para>Three JDBC applet samples are bundled with your OpenLink
    Driver for JDBC installation, each one of these demonstrating practical use of JDBC
    applets and highlighting OpenLink specific functionality. Each of these demos reside in
    the &quot;samples\jdbc\jdk[10 or 11 or 12]&quot; sub-directory below the directory into
    which you installed your OpenLink software. Each applet is accessible from the OpenLink
    Admin Assistant (an OpenLink agent that provides HTTP services like any Web Server does).
    The programs are:</para>
<orderedlist>
      <listitem><formalpara><title>JDBCDemo</title><para>demonstrates basic JDBC functionality via an Applet</para></formalpara>
      </listitem>
      <listitem><formalpara><title>ScrollDemo</title><para>demonstrates JDBC
        functionality via an Applet. It also demonstrates the additional Resultset navigation
        functionality provided by OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC
        on a Record by Record Basis.</para></formalpara>
      </listitem>
      <listitem><formalpara><title>ScrollDemo2</title><para>demonstrates JDBC
        functionality via an Applet. It also demonstrates the additional Resultset navigation
        functionality provided by JDBC 2.0</para></formalpara>
      </listitem>
      <listitem><formalpara><title>RowSetDemo</title><para>demonstrates JDBC
        functionality via an Applet. It also demonstrates the additional Resultset navigation
        functionality provided by OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC
        on a RowSet by RowSet Basis.</para></formalpara></listitem>
    </orderedlist>
</sect2>
<sect2 id="SimpleJDBCDemo">
<title>JDBCDemo</title>
    <para>This applet demonstrates basic JDBC functionality via an Applet.</para>
    <para>Utilization Steps:</para>
<orderedlist>
      <listitem><para>Start the OpenLink Request Broker
	<!-- (click <a href="../nt/servnt.htm#Startup">here</a> for instructions on how to do this under Windows
        and <a href="../servadm.htm#Startup">here</a> on how to do this on Linux or UNIX machines)<br> -->
        </para>
      </listitem>
      <listitem><para>Start up your Web Browser
        </para>
      </listitem>
      <listitem><para>Enter one of the following URLs into your browser depending on the location of your OpenLink Request Broker:</para>
        <para>Local To you:</para>
        <programlisting>http://localhost:8000</programlisting>
        <para>Remote Server:</para>
        <programlisting>http://&lt;hostname or IP address of remote server&gt;:8000</programlisting>
        <note><title>Note:</title><para>Port &quot;8000&quot; presumes that you provide this value when prompted during your
        OpenLink Sever components installation.</para></note>
      </listitem>
      <listitem><para>Follow the Admin Assistant's Menu tree to the location of
        the &quot;Sample Applications-&gt;JDBC Applet Demos&quot; menu item. The graphic below
        depicts this process.</para>
		  <figure id="fg-001" float="1">
		  <title>JDBC Applet Demos</title>
  			<graphic fileref="clicls0x.gif" format="gif"></graphic>
		  </figure>
        </listitem>
      <listitem><para>Click on the hyperlink that reads &quot;Applet
        demonstration with OpenLink Software JDBC Driver&quot;
        </para>
      </listitem>
      <listitem><para>Use the Applet's File-&gt;Set Connection URL menu item set
        a URL pointing to an ODBC or UDBC DSN. If uncertain follows the instructions laid out in
        the section covering OpenLink JDBC URL formats which
        shows you how to construct Type 1, 2, and 3 URL formats for your OpenLink Drivers for JDBC. This applet
        will run with non OpenLink Drivers for JDBC but you will need to obtain URL construction
        information from the relevant driver vendor.</para>
        <para>
        The line below depicts the URL construction dialog presented:</para>
        <programlisting>
        jdbc:openlink://localhost/DSN=WebJDBCDemo</programlisting>
      </listitem>
      <listitem><para>Enter a valid SQL statement for the back end database that
        you are connecting to via JDBC and then click on the &quot;Query&quot; button. The screen
        shot below depicts this process:</para>
		  <figure id="fg-002" float="1">
		  <title>WebJDBC Applet Demo</title>
  			<graphic fileref="clicls09.gif" format="gif"></graphic>
		  </figure>
		</listitem>
      <listitem><para>Basic JDBC 1.1 functionality provides Forward-Only as
        opposed to Bi-Directional record Scrolling, this is why the basic JDBC applet on has a
        &quot;Next&quot; button. When you click on the &quot;Next&quot; button you are moved to
        the next record in your JDBC resultset, unfortunately you have to hit the
        &quot;Query&quot; button again and re-start the Forward-Only resultset navigation if you
        need to see the First or Prior resultset records from your current position. The examples
        that follow show how OpenLink and the new release of JDBC (version 2.0) address the
        Bi-Directional Scrolling Limitation demonstrated by this Applet.
        </para></listitem>
    </orderedlist>
</sect2>
<sect2 id="ScrollDemo">
<title>ScrollDemo</title>
    <para>This program demonstrates JDBC functionality via an
    Applet. It also demonstrates the additional Resultset navigation functionality provided by
    OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC on a Record by Record
    Basis.</para>
    <para>Utilization Steps:</para>
<orderedlist>
      <listitem><para>Start the OpenLink Request Broker.
<!-- (click <a href="../nt/servnt.htm#Startup">here</a> for instructions on how to do this under Windows
        and <a href="../servadm.htm#Startup">here</a> on how to do this on Linux or UNIX machines)<br> -->
        </para>
      </listitem>
      <listitem><para>Start up your Web Browser</para>
      </listitem>
      <listitem><para>Enter one of the following URLs into your browser
        depending on the location of your OpenLink Request Broker:</para>
        <para>Local To you:</para>
        <para>http://localhost:8000</para>
        <para>Remote Server:</para>
        <para>http://&lt;hostname or IP address of remote server&gt;:8000</para>
        <note><title>Note:</title>
		<para>Port &quot;8000&quot; presumes that you provide this value when prompted during your
        OpenLink Sever components installation.
        </para></note>
		</listitem>
      <listitem><para>Follow the Admin Assistant's Menu tree to the location of
        the &quot;JDBC Applet Demos&quot; menu item. The graphic below depicts this process.</para>
		  <figure id="fg-003" float="1">
		  <title>WebJDBC Applet Demo</title>
  			<graphic fileref="clicls0x.gif" format="gif"></graphic>
		  </figure>
		</listitem>
      <listitem><para>Click on the hyperlink that reads &quot;Applet
        demonstration with OpenLink Software JDBC Scrollable Cursor extensions&quot;
        </para>
      </listitem>
      <listitem><para>Use the Applet's File-&gt;Set Connection URL menu item set
        a URL pointing to an ODBC or UDBC DSN. If uncertain follows the instructions laid out in
        the section covering OpenLink JDBC URL formats which
        shows you how to construct Type 1, 2, and 3 URL formats for your OpenLink Drivers for JDBC.</para>
        <para>The line below depicts the URL construction dialog presented:</para>
        <programlisting>jdbc:openlink://localhost/DSN=WebScrollDemo</programlisting>
      </listitem>
      <listitem><para>Enter a valid SQL statement for the back end database that
        you are connecting to via JDBC and then click on the &quot;Query&quot; button. The screen
        shot below depicts this process:</para>
		  <figure id="fg-004" float="1">
		  <title>WebScroll Applet Demo</title>
  			<graphic fileref="clicls12.gif" format="gif"></graphic>
		  </figure>
		</listitem>
      <listitem><para>JDBC 1.1 functionality provides Forward-Only as opposed to
        Bi-Directional Resultset Scrolling, OpenLink's Scrollable Resultset Extensions for JDBC
        enable Bi-Directional Resultset Scrolling. This is why this applet has an additional set
        of Resultset Navigation buttons: &quot;First&quot;,&quot;Next&quot;,
        &quot;Prior&quot;,&quot;Last&quot;, &quot;Lock&quot;, &quot;Unlock&quot;, &quot;Add&quot;,
        &quot;Update&quot;, &quot;Get Bookmark&quot;, &quot;Set Bookmark&quot;, &quot;and Go
        To&quot;.  The existence of Bi-directional Scrollable Result sets (or Cursors) is
        often presumed by end-users and developers alike, its importance rarely understood prior
        to embarking upon JDBC application development or product selection, the unfortunate
        consequence being complex application re-writes or implementation of sub par JDBC
        solutions. Each of the button in the applet demo is explained below so as to understand
        the magnitude of this issue:</para>
    <table>
	<title>Scroll Demo Keys Explained</title>
	<tgroup align="char" charoff="50" char="." cols="2">
		<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
		<thead>
			<row><entry>Button</entry><entry>Explanation</entry></row>
		</thead>
		<tbody>
			<row><entry>First</entry><entry>takes you to first record in the Resultset</entry></row>
			<row><entry>Next</entry><entry>takes you to the next record in the Resultset from your current position</entry></row>
			<row><entry>Prior</entry><entry>takes you to the previous record in the Resultset from your current position</entry></row>
			<row><entry>Last</entry><entry>takes you to the last record in the Resultset</entry></row>
			<row><entry>Lock</entry><entry>locks the current record</entry></row>
			<row><entry>Unlock</entry><entry>unlocks the current record</entry></row>
			<row><entry>Add</entry><entry>add a new record to database</entry></row>
			<row><entry>Update</entry><entry>change current record</entry></row>
			<row><entry>Delete</entry><entry>remove current record from database</entry></row>
			<row><entry>Get Bookmark</entry><entry>mark current record position for future revisit</entry></row>
			<row><entry>Set Bookmark</entry><entry>revisit previous marked position in current ResultSet</entry></row>
			<row><entry>Go To</entry><entry>go directly to a specific record number within the current ResultSet</entry></row>
			<row><entry>Refresh</entry><entry>Reopen current resultset</entry></row>
		</tbody>
	</tgroup>
    </table>
</listitem>
    </orderedlist>
</sect2>
<sect2 id="Scroll2Demo">
<title>ScrollDemo2</title>
    <para>This applet demonstrates JDBC functionality via an
    Applet. It also demonstrates the additional Resultset navigation functionality provided by
    JDBC 2.0</para>
    <para>This Applet require a browser that is Java Virtual Machine version 1.2.x or 2.x compliant.
    If you do not have such a Browser, you can simply run the JDBC Application version of this program.</para>
    <para>Utilization Steps:</para>
<orderedlist>
      <listitem><para>Start the OpenLink Request Broker</para>
      </listitem>
      <listitem><para>Start up your Web Browser</para>
      </listitem>
      <listitem><para>Enter one of the following URLs into your browser
        depending on the location of your OpenLink Request Broker:</para>
        <para>Local To you:</para>
        <para>http://localhost:8000/</para>
        <para>Remote Server:</para>
        <para>http://&lt;hostname or IP address of remote server&gt;:8000</para>
        <note><title>Note:</title>
		<para>Port &quot;8000&quot; presumes that you provide this value when prompted during your
        OpenLink Sever components installation.</para></note>
      </listitem>
      <listitem><para>Follow the Admin Assistant's Menu tree to the location of
        the &quot;Sample Applications-&gt;JDBC Applet Demos&quot; menu item. The graphic below
        depicts this process.</para>
		  <figure id="fg-005" float="1">
		  <title>Scroll2 Applet Demo</title>
  			<graphic fileref="clicls0x.gif" format="gif"></graphic>
		  </figure>
		</listitem>
      <listitem><para>Click on the hyperlink that reads &quot;Applet
        demonstration with OpenLink Software JDBC 2.0 Scrollable Cursors&quot;
        </para>
      </listitem>
      <listitem><para>Use the Applet's File-&gt;Set Connection URL menu item set
        register your Driver for JDBC 2.0 and then enter a URL pointing to an ODBC or UDBC DSN. If
        uncertain follow the instructions laid out in the section covering OpenLink JDBC URL formats which shows you how to
        construct Type 1, 2, and 3 URL formats for your OpenLink Drivers for JDBC. This applet will
        run with non OpenLink Drivers for JDBC but you will need to obtain Driver registration and
        JDBC URL construction information from the relevant Driver vendor.</para>
        <para>
        The screen shot below depicts the URL construction dialog presented:</para>
		  <figure id="fg-006" float="1">
		  <title>Connection dialog</title>
  			<graphic fileref="clicls08.gif" format="gif"></graphic>
		  </figure>
		</listitem>
      <listitem><para>Enter a valid SQL statement for the back end database that
        you are connecting to via JDBC and then click on the &quot;Query&quot; button.
        </para>
      </listitem>
      <listitem><para>JDBC 1.1 functionality provides Forward-Only as opposed to
        Bi-Directional Resultset Scrolling, JDBC 2.0 on the other hand supports Bi-Directional
        Resultset Scrolling. As a result this applet has an additional set of Resultset Navigation
        buttons: &quot;First&quot;,&quot;Next&quot;, &quot;Previous&quot;,&quot;Last&quot;,
        &quot;Insert&quot;, &quot;Update&quot;, &quot;Absolute&quot;, &quot;Relative&quot;.
        Unfortunately JDBC 2.0 does not provide Bookmarking or Row Level concurrency control hence
        the exclusion of the &quot;Lock&quot;, &quot;UnLock&quot;, &quot;Go To&quot;, &quot;Set
        Bookmark&quot;, &quot;Get Bookmark&quot; navigation buttons provided in the
        &quot;ScrollDemo&quot; applet. To use this functionality in a JDBC 2.0 environment you
        simply make use of the OpenLink Scrollable ResultSet &amp; RowSet Extensions.</para>
        <para>
        Each navigation button is described below so as to shed more light on the Scrollable
        ResultSet functionality provided by JDBC 2.0.</para>
    <table>
	<title>Scroll Demo Keys Explained</title>
	<tgroup align="char" charoff="50" char="." cols="2">
		<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
		<thead>
			<row><entry>Button</entry><entry>Explanation</entry></row>
		</thead>
		<tbody>
			<row><entry>First</entry><entry>takes you to first record in the Resultset</entry></row>
			<row><entry>Next</entry><entry>takes you to the next record in the Resultset from your current position</entry></row>
			<row><entry>Previous</entry><entry>takes you to the previous record in the Resultset from your current position</entry></row>
			<row><entry>Last</entry><entry>takes you to the last record in the Resultset</entry></row>
			<row><entry>Add</entry><entry>add a new record to database</entry></row>
			<row><entry>Update</entry><entry>change current record</entry></row>
			<row><entry>Delete</entry><entry>remove current record from database</entry></row>
			<row><entry>Relative</entry><entry>moves N number of records forward from the current record
        where N represents a value entered into the field beside the &quot;Relative&quot; button.
        IF the field contains a negative number then it indicates a backwards move.</entry></row>
						<row><entry>Absolute</entry><entry>go directly to&nbsp; record number N within the current
        ResultSet where N represents a value entered into the field beside the
        &quot;Relative&quot; button, the actual direction of Resultset navigation depends on the
        actual location of the record in question</entry></row>
						<row><entry>Refresh</entry><entry>Reopen current resultset</entry></row>
		</tbody>
	</tgroup>
	</table>
		</listitem>
    </orderedlist>
</sect2>
<sect2 id="RowSetDemo">
<title>RowSetDemo</title>
    <para>This applet demonstrates JDBC functionality via an
    Applet. It also demonstrates the additional Resultset navigation functionality provided by
    OpenLink's Scrollable Resultset &amp; RowSet Extensions for JDBC on a RowSet by RowSet
    Basis.</para>
    <para>Utilization Steps:</para>
<orderedlist>
      <listitem><para>Start the OpenLink Request Broker</para>
      </listitem>
      <listitem><para>Start up your Web Browser</para>
      </listitem>
      <listitem><para>Enter one of the following URLs into your browser depending on the location of your OpenLink Request Broker:</para>
        <para>Local To you:</para>
        <programlisting>http://localhost:8000</programlisting>
        <para>Remote Server:</para>
        <programlisting>http://&lt;hostname or IP address of remote server&gt;:8000</programlisting>
        <note><title>Note:</title>
		<para>Port &quot;8000&quot; presumes that you provide this value when prompted during your
        OpenLink Sever components installation.</para></note>
      </listitem>
      <listitem><para>Follow the Admin Assistant's Menu tree to the location of
        the &quot;Sample Applications-&gt;JDBC Applet Demos&quot; menu item. The graphic below
        depicts this process.</para>
		  <figure id="fg-007" float="1">
		  <title>Connection dialog</title>
  			<graphic fileref="clicls0x.gif" format="gif"></graphic>
		  </figure>
        </listitem>
      <listitem><para>Click on the hyperlink that reads &quot;Applet
        demonstration with OpenLink Software JDBC Scrollable Cursor RowSet Extensions&quot;</para>
      </listitem>
      <listitem><para>Use the Applet's File-&gt;Set Connection URL menu item set
        a URL pointing to an ODBC or UDBC DSN. If uncertain follows the instructions laid out in
        the section covering OpenLink JDBC URL formats which shows you how to construct Type 1, 2, and 3 URL
			formats for your OpenLink Drivers for JDBC. This applet
        will run with non OpenLink Drivers for JDBC but you will need to obtain URL construction
        information from the relevant driver vendor.</para>
        <para>The screen shot below depicts the URL construction dialog presented:</para>
		  <figure id="fg-008" float="1">
		  <title>URL Construction</title>
  			<graphic fileref="clicls14.gif" format="gif"></graphic>
		  </figure>
        </listitem>
      <listitem><para>Enter a valid SQL statement for the back end database that
        you are connecting to via JDBC and then click on the &quot;Query&quot; button. The screen
        shot below depicts this process:</para>
		  <figure id="fg-009" float="1">
		  <title>Querying</title>
  			<graphic fileref="clicls15.gif" format="gif"></graphic>
		  </figure>
      </listitem>
      <listitem><para>JDBC 1.1 functionality provides Forward-Only as opposed to
        Bi-Directional Resultset Scrolling, JDBC 2.0 provides Scrollable Result sets but does not
        provide Bookmarking or Attached RowSets (transient RowSets located in the same process
        space as the ResultSet). OpenLink's Scrollable Resultset Extensions for JDBC address these
        issues irrespective of JDBC version. As a result this applet has an additional set of
        Resultset Navigation buttons when compared to the basic JDBC 2.0 Applet
		in the prior section, the buttons are: &quot;First&quot;,&quot;Next&quot;,
        &quot;Prior&quot;,&quot;Last&quot;, &quot;Lock&quot;, &quot;Unlock&quot;, &quot;Add&quot;,
        &quot;Update&quot;, &quot;Get Bookmark&quot;, &quot;Set Bookmark&quot;, &quot;and Go
        To&quot; .&nbsp; The existence of transient RowSets due to Bi-directional Scrollable
        Result sets (or Cursors) in JDBC 2.0 is more than likely presumed to exist by end-users and
        developers alike, it is important that you take note of this before embarking upon JDBC
        2.0 application development or product selection. Each of the buttons in the Applet demo
        is explained below so as to assist in the understanding of these matters:</para>
    <table>
	<title>Scroll Demo Keys Explained</title>
	<tgroup align="char" charoff="50" char="." cols="2">
		<colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
		<thead>
			<row><entry>Button</entry><entry>Explanation</entry></row>
		</thead>
		<tbody>
			<row><entry>First</entry><entry>takes you to first RowSet in the Resultset</entry></row>
			<row><entry>Next</entry><entry>takes you to the next RowSet in the Resultset from your current position</entry></row>
			<row><entry>Prior</entry><entry>takes you to the previous RowSet in the Resultset from your current position</entry></row>
			<row><entry>Last</entry><entry>takes you to the last RowSet in the Resultset</entry></row>
			<row><entry>Lock</entry><entry>locks the current RowSet</entry></row>
			<row><entry>Unlock</entry><entry>unlocks the current RowSet</entry></row>
			<row><entry>Add</entry><entry>add a new record to database</entry></row>
			<row><entry>Update</entry><entry>change current record with the current RowSet of </entry></row>
			<row><entry>Delete</entry><entry>remove current record from within the current RowSet from the database</entry></row>
			<row><entry>Get Bookmark</entry><entry>mark current RowSet within Resultset for future revisit</entry></row>
			<row><entry>Set Bookmark</entry><entry>revisit previous marked RowSet position in current ResultSet</entry></row>
			<row><entry>Go To</entry><entry>go directly to a specific record number within the current ResultSet</entry></row>
			<row><entry>Refresh</entry><entry>Reopen current resultset</entry></row>
		</tbody>
	</tgroup>
	</table>
		</listitem>
    </orderedlist>
</sect2>
<sect2 id="JDBCDemoApplications">
<title>JDBC compliant Application Demos</title>
    <para>All the JDBC compliant Applet demos described in the
    previous sections have also been implemented as JDBC compliant Applications Demos, you can
    run these programs in a number of ways depending on operating system hosting your Java
    Virtual Machine.</para>
<sect3 id="WindowsJDBCAppDemos">
<title>Windows 95/98/NT/2000</title>
<orderedlist>
      <listitem><para>Click on your Windows Start Menu Button</para>
		</listitem>
      <listitem><para>Select the &quot;OpenLink Data Access Drivers&quot; Start Menu Group
        </para></listitem>
      <listitem><para>Locate the &quot;JDBC Samples&quot; Menu Item
        </para></listitem>
      <listitem><para>Choose from the list of JDBC Applications presented
        </para></listitem>
    </orderedlist>
</sect3>
<sect3 id="LinuxJDBCAppDemos">
<title>Linux or UNIX</title>
<orderedlist>
      <listitem><para>Move into your OpenLink base installation directory
        </para></listitem>
      <listitem><para>The following directory listing shows the
        location of the various JDBC Application demos by Java Virtual Machine version:
        </para>
<screen>
JDBC/jdk1.0.2/Applications:
JDBCDemo RowSetDemo ScrollDemo
JDBC/jdk1.0.2/Applications/JDBCDemo:
DialogConnection.class JDBCDemo.class
DialogConnection.java JDBCDemo.java
JDBC/jdk1.0.2/Applications/RowSetDemo:
DataTextField.class DialogConnection.java readme.txt
DataTextField.java RowSetDemo.class
DialogConnection.class RowSetDemo.java
JDBC/jdk1.0.2/Applications/ScrollDemo:
DialogConnection.class ScrollDemo.class readme.txt
DialogConnection.java ScrollDemo.java
JDBC/jdk1.1.x/Applications:
JDBCDemo RowSetDemo ScrollDemo
JDBC/jdk1.1.x/Applications/JDBCDemo:
DialogConnection.class JDBCDemo.class
DialogConnection.java JDBCDemo.java
JDBC/jdk1.1.x/Applications/RowSetDemo:
DataTextField.class DialogConnection.java readme.txt
DataTextField.java RowSetDemo.class
DialogConnection.class RowSetDemo.java
JDBC/jdk1.1.x/Applications/ScrollDemo:
DialogConnection.class ScrollDemo.class readme.txt
DialogConnection.java ScrollDemo.java
JDBC/jdk1.2.x/Applications:
JDBCDemo RowSetDemo ScrollDemo ScrollDemo2
JDBC/jdk1.2.x/Applications/JDBCDemo:
DialogConnection.class JDBCDemo.class
DialogConnection.java JDBCDemo.java
JDBC/jdk1.2.x/Applications/RowSetDemo:
DataTextField.class DialogConnection.java readme.txt
DataTextField.java RowSetDemo.class
DialogConnection.class RowSetDemo.java
JDBC/jdk1.2.x/Applications/ScrollDemo:
DialogConnection.class ScrollDemo.class readme.txt
DialogConnection.java ScrollDemo.java
JDBC/jdk1.2.x/Applications/ScrollDemo2:
DialogConnection.class ScrollDemo2.class
DialogConnection.java ScrollDemo2.java
</screen>
      </listitem>
      <listitem><para>Move into the appropriate directory and then execute the
        following command:</para>
        <programlisting>java &lt;classname&gt;</programlisting>
        <para>where &quot;&lt;classname&gt;&quot; represents the JDBC class file hosting your JDBC
        application demo. For instance if you wanted to run the &quot;RowSetDemo&quot; JDBC
        application you would type the following:</para>
        <programlisting>java RowSetDemo</programlisting></listitem>
    </orderedlist>
</sect3>
<sect3 id="MacJDBCAppDemos">
<title>Mac OS X</title>
<orderedlist>
   <listitem><para>Using the Apple 'Finder', browse to the '/Applications/Utilities'
      Folder and run the Terminal application.</para>
   </listitem>
   <listitem><para>Move into the appropriate sample directory beneath:</para>
      <para>/Library/Application support/openlink/Samples/JDBC</para>
   </listitem>
   <listitem><para>Execute the following command:</para>
      <programlisting>java &lt;classname&gt;</programlisting>
        <para>where &quot;&lt;classname&gt;&quot; represents the JDBC class file hosting your JDBC
        application demo. For instance if you wanted to run the &quot;RowSetDemo&quot; JDBC
        application you would type the following:</para>
        <programlisting>java RowSetDemo</programlisting>
   </listitem>
</orderedlist>
</sect3>
</sect2>
</sect1>
<!-- ######################################## -->
<sect1 id="ImportantJDBCIssues">
<sect1info>
  <keywordset>
    <keyword>JDBC Solution</keyword>
    <keyword>Multi-user</keyword>
  </keywordset>
</sect1info>
<title>OpenLink JDBC Driver (Single-Tier Edition) Important Multi-User JDBC Solution Development &amp; Utilization Issues</title>
<sect2 id="ChangeSensitivity">
<title>Sensitivity To Changes In Underlying Database</title>
    <para>It is extremely important to application developers and end-users alike to understand the
    degree to which the Result sets presented to them by a JDBC solution are actually sensitive
    to underlying changes in the source database. JDBC 1.1 not only fails to provide you with
    Bi-directional Resultset Scrolling, it also presents what is basically a snapshot of the
    data in your database at the time a JDBC query is executed. This has the effect of
    increasing Multi-User JDBC solution development complexity or limiting the functionality
    and usability of JDBC by end-users.</para>
    <para>Sensitive to changes in underlying database takes many
    forms, this includes: Static, KeySet, Dynamic, and Mixed modes of sensitivity.</para>
    <formalpara>
    <title>Static</title>
	<para> - same as basic JDBC, records scrolling occurs over a database
    snapshot and is insensitive to underlying change by other users</para>
    </formalpara>
	<formalpara>
    <title>KeySet</title><para> - JDBC resultset records scroll over a set of record identifiers
    uniquely identifying records in the underlying database, this type of scrolling is
    sensitive to changes is those records with identifiers at the time of query execution.
    This form of scrolling is insensitive to record record additions or deletions.</para>
    </formalpara>
	<formalpara>
	<title>Dynamic</title><para> - JDBC resultset records scroll over a set of record identifiers
    uniquely identifying records in the underlying database, these unique identifiers are
    recreated before each RowSet traversal (collection of resultset records used as scrolling
    marker or sliding window or Cursor), rather than once at query execution time. This type
    of scrolling is sensitive to all changes in the underlying database but may introduce a
    performance penalties depending on the size of RowSets and available network bandwidth.</para>
    </formalpara>
    <formalpara>
	<title>Mixed</title><para> - JDBC resultset records scroll over a set of record identifiers
    uniquely identifying records in the underlying database, these unique identifiers are
    created to a limited size (known as the KeySet Size) at query execution time, only when
    RowSet traversal goes beyond the existing set of unique row identifiers is another
    collection of unique identifiers assembled. This type of scrolling is sensitive to all
    changes in the underlying database, but insensitive to Additions or Deletions affecting
    records in the current RowSet scrolling across a current KeySet, once KeySet boundaries
    are crossed Insertions or Deletions are recognized. This mode of sensitivity provides
    increased performance and the expense of reduced sensitivity.</para>
    </formalpara>
</sect2>
<sect2 id="ConcurrencyControl">
<title>Concurrency Control</title>
<para>In addition to being sensitive to changes in the underlying database, Multi-User
    applications need to be able to protect users and application processes from the effects
    of one another when the same record or collection of records are being manipulated at the
    same time. The process by which these issue are addressed is known as Concurrency Control.</para>
    <para>
    Concurrency control occurs in one of two ways, Optimistic or Pessimistic control. </para>
	<formalpara>
    <title>Optimistic Concurrency Control</title><para> - presumes that probability and frequency
    of multiple users and processes instigating changes to the same database records is low.
    As result when an end-user or process attempts to change records it first of all
    determines if the record values at the point of change are still the same as what they
    were at the time of retrieval. If they are unchanged at the point of change then the
    change occurs otherwise the change process is rejected and then re-attempted. Although
    this reduces concurrent user latency, it does have the knock on effect of reducing data
    integrity if changes rejections aren't managed carefully.</para>
	</formalpara>
	<formalpara>
    <title>Pessimistic Concurrency Control</title><para> - presumes that the probability and
    frequency of multiple user processing and instigating changes to the same records is high.
    As a result an end-user or process attempts to changes records it first of all secures
    Exclusive Locks on the records in question, performs the changes, and then releases the
    locks. Although this increases and preserves data integrity it does introduce concurrent
    use latency , which is perceived as performance degradation by the end-user or application
    developer.</para>
	</formalpara>
	<para>
    OpenLink's Scrollable ResultSet and RowSet extensions for JDBC all the Multi-User JDBC
    solution issues raised in this section, our bundled and </para>
	<programlisting>&usweb;/demo</programlisting>
	<para>live online demonstrations enable you to evaluate this for yourself and ultimately make a
	knowledgeable JDBC Driver product and vendor selection.</para>
</sect2>
</sect1>
</chapter>