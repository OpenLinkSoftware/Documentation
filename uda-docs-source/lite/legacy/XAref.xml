<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="xareflite" lable="XAref.xml">
  <title>Classes</title>
  <chapterinfo>
    <keywords>
      <keyword>XA</keyword>
      <keyword>DTP</keyword>
      <keyword>distributed transaction processing</keyword>
      <keyword>JDBC</keyword>
      <keyword>JDBC implementation reference</keyword>
    </keywords>
  </chapterinfo>
  <sect1 xreflabel="Class BaseRowSet" id="xaref">
    <title>Class BaseRowSet</title>
    <indexterm>
      <primary>BaseRowSet</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>BaseRowSet</secondary>
    </indexterm>
    <sect2 id="xarefSynopsis">
      <title>Synopsis</title>
      <programlisting width="80">
abstract public class <emphasis role="strong">BaseRowSet</emphasis> implements RowSet,Serializable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">BaseRowSet</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">addRowSetListener</emphasis>(javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
  public void <emphasis role="strong">removeRowSetListener</emphasis>(javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
  public void <emphasis role="strong">clearParameters</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getCommand</emphasis>();
  public int <emphasis role="strong">getConcurrency</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getDataSourceName</emphasis>();
  public boolean <emphasis role="strong">getEscapeProcessing</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getFetchDirection</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getFetchSize</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxFieldSize</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxRows</emphasis>() throws java.sql.SQLException;
  public Object[] <emphasis role="strong">getParams</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getPassword</emphasis>();
  public int <emphasis role="strong">getQueryTimeout</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getTransactionIsolation</emphasis>();
  public int <emphasis role="strong">getType</emphasis>() throws java.sql.SQLException;
  public Map <emphasis role="strong">getTypeMap</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getUrl</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getUsername</emphasis>();
  public boolean <emphasis role="strong">isReadOnly</emphasis>();
  public void <emphasis role="strong">setArray</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setAsciiStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                             int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setBigDecimal</emphasis>(int <emphasis>parameterIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setBinaryStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                              int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setBlob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setBoolean</emphasis>(int <emphasis>parameterIndex</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setByte</emphasis>(int <emphasis>parameterIndex</emphasis>, byte <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setBytes</emphasis>(int <emphasis>parameterIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCharacterStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                 int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setClob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>, 
                      java.util.Calendar <emphasis>cal</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setDouble</emphasis>(int <emphasis>parameterIndex</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setFloat</emphasis>(int <emphasis>parameterIndex</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setInt</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setLong</emphasis>(int <emphasis>parameterIndex</emphasis>, long <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setRef</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setShort</emphasis>(int <emphasis>parameterIndex</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setString</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>, 
                      java.util.Calendar <emphasis>cal</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>, 
                           java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setUnicodeStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                               int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>, 
                      java.lang.String <emphasis>typeName</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                        int <emphasis>targetSqlType</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                        int <emphasis>targetSqlType</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>i</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>s</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setEscapeProcessing</emphasis>(boolean <emphasis>flag</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setFetchDirection</emphasis>(int <emphasis>direction</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setFetchSize</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setMaxFieldSize</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setMaxRows</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setQueryTimeout</emphasis>(int <emphasis>seconds</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setTransactionIsolation</emphasis>(int <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setType</emphasis>(int <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setTypeMap</emphasis>(java.util.Map <emphasis>value</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setUrl</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setUsername</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.BaseRowSet</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="xarefmembers">
      <title>Members</title>
      <sect3 xreflabel="Method addRowSetListener(javax.sql.RowSetListener)">
        <title>Method addRowSetListener(RowSetListener)</title>
        <indexterm>
          <primary>addRowSetListener</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>addRowSetListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">addRowSetListener</emphasis>(
                        javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>listener</literal>
                    </emphasis> - an event listener</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
RowSet listener registration. Listeners are notified
 when an event occurs.
        </para>
      </sect3>
      <sect3 xreflabel="Method clearParameters()">
        <title>Method clearParameters()</title>
        <indexterm>
          <primary>clearParameters</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>clearParameters</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">clearParameters</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
In general, parameter values remain in force for repeated use of a
 RowSet. Setting a parameter value automatically clears its
 previous value. However, in some cases it is useful to immediately
 release the resources used by the current parameter values; this can
 be done by calling clearParameters.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCommand()">
        <title>Method getCommand()</title>
        <indexterm>
          <primary>getCommand</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCommand</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCommand</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the rowset's command property.
 The command property contains a command string that can be executed to
 fill the rowset with data. The default value is null.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConcurrency()">
        <title>Method getConcurrency()</title>
        <indexterm>
          <primary>getConcurrency</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConcurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getConcurrency</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the rowset concurrency.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDataSourceName()">
        <title>Method getDataSourceName()</title>
        <indexterm>
          <primary>getDataSourceName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDataSourceName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The JNDI name that identifies a JDBC data source. Users should set
 either the url or data source name properties. The most recent
 property set is used to get a connection.
        </para>
      </sect3>
      <sect3 xreflabel="Method getEscapeProcessing()">
        <title>Method getEscapeProcessing()</title>
        <indexterm>
          <primary>getEscapeProcessing</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getEscapeProcessing</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getEscapeProcessing</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL to the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFetchDirection()">
        <title>Method getFetchDirection()</title>
        <indexterm>
          <primary>getFetchDirection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFetchDirection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getFetchDirection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine the fetch direction.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFetchSize()">
        <title>Method getFetchSize()</title>
        <indexterm>
          <primary>getFetchSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFetchSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getFetchSize</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Determine the default fetch size.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMaxFieldSize()">
        <title>Method getMaxFieldSize()</title>
        <indexterm>
          <primary>getMaxFieldSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMaxFieldSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxFieldSize</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxFieldSize limit (in bytes) is the maximum amount of data
 returned for any column value; it only applies to BINARY,
 VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR
 columns. If the limit is exceeded, the excess data is silently
 discarded.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMaxRows()">
        <title>Method getMaxRows()</title>
        <indexterm>
          <primary>getMaxRows</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMaxRows</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxRows</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxRows limit is the maximum number of rows that a
 RowSet can contain. If the limit is exceeded, the excess
 rows are silently dropped.
        </para>
      </sect3>
      <sect3 xreflabel="Method getParams()">
        <title>Method getParams()</title>
        <indexterm>
          <primary>getParams</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getParams</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object[] <emphasis role="strong">getParams</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the parameters that were set on the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPassword()">
        <title>Method getPassword()</title>
        <indexterm>
          <primary>getPassword</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getPassword</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The password used to create a database connection. The password
 property is set at runtime before calling execute(). It is
 not usually part of the serialized state of a rowset object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getQueryTimeout()">
        <title>Method getQueryTimeout()</title>
        <indexterm>
          <primary>getQueryTimeout</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getQueryTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getQueryTimeout</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The queryTimeout limit is the number of seconds the driver will
 wait for a Statement to execute. If the limit is exceeded, a
 SQLException is thrown.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTransactionIsolation()">
        <title>Method getTransactionIsolation()</title>
        <indexterm>
          <primary>getTransactionIsolation</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTransactionIsolation</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getTransactionIsolation</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The transaction isolation property contains the JDBC transaction
 isolation level used.
        </para>
      </sect3>
      <sect3 xreflabel="Method getType()">
        <title>Method getType()</title>
        <indexterm>
          <primary>getType</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getType</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getType</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return the type of this result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTypeMap()">
        <title>Method getTypeMap()</title>
        <indexterm>
          <primary>getTypeMap</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTypeMap</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Map <emphasis role="strong">getTypeMap</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the type-map object associated with this rowset.
 By default, the map returned is empty.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUrl()">
        <title>Method getUrl()</title>
        <indexterm>
          <primary>getUrl</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUrl</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getUrl</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the url used to create a JDBC connection. The default value
 is null.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUsername()">
        <title>Method getUsername()</title>
        <indexterm>
          <primary>getUsername</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUsername</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getUsername</emphasis>();
          </programlisting>
        </blockquote>
        <para>
The username used to create a database connection. The username
 property is set at runtime before calling execute(). It is
 not usually part of the serialized state of a rowset object.
        </para>
      </sect3>
      <sect3 xreflabel="Method isReadOnly()">
        <title>Method isReadOnly()</title>
        <indexterm>
          <primary>isReadOnly</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isReadOnly</emphasis>();
          </programlisting>
        </blockquote>
        <para>
A rowset may be read-only. Attempts to update a
 read-only rowset will result in an SQLException being thrown.
 Rowsets are updateable, by default, if updates are possible.
        </para>
      </sect3>
      <sect3 xreflabel="Method removeRowSetListener(javax.sql.RowSetListener)">
        <title>Method removeRowSetListener(RowSetListener)</title>
        <indexterm>
          <primary>removeRowSetListener</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>removeRowSetListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">removeRowSetListener</emphasis>(
                        javax.sql.RowSetListener <emphasis>rowsetlistener</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>listener</literal>
                    </emphasis> - an event listener</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
RowSet listener deregistration.
        </para>
      </sect3>
      <sect3 xreflabel="Method setArray(int, java.sql.Array)">
        <title>Method setArray(int, Array)</title>
        <indexterm>
          <primary>setArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setArray</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>i</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - an object representing an SQL array</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set an Array parameter.
        </para>
      </sect3>
      <sect3 xreflabel="Method setAsciiStream(int, java.io.InputStream, int)">
        <title>Method setAsciiStream(int, InputStream, int)</title>
        <indexterm>
          <primary>setAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setAsciiStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                     int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the java input stream which contains the ASCII parameter value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the number of bytes in the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
When a very large ASCII value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect3>
      <sect3 xreflabel="Method setBigDecimal(int, java.math.BigDecimal)">
        <title>Method setBigDecimal(int, BigDecimal)</title>
        <indexterm>
          <primary>setBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBigDecimal</emphasis>(int <emphasis>parameterIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.lang.BigDecimal value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setBinaryStream(int, java.io.InputStream, int)">
        <title>Method setBinaryStream(int, InputStream, int)</title>
        <indexterm>
          <primary>setBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBinaryStream</emphasis>(int <emphasis>parameterIndex</emphasis>, 
                                      java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the java input stream which contains the binary parameter value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the number of bytes in the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
When a very large binary value is input to a LONGVARBINARY
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect3>
      <sect3 xreflabel="Method setBlob(int, java.sql.Blob)">
        <title>Method setBlob(int, Blob)</title>
        <indexterm>
          <primary>setBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBlob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>i</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - an object representing a BLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a BLOB parameter.
        </para>
      </sect3>
      <sect3 xreflabel="Method setBoolean(int, boolean)">
        <title>Method setBoolean(int, boolean)</title>
        <indexterm>
          <primary>setBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBoolean</emphasis>(int <emphasis>parameterIndex</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java boolean value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setByte(int, byte)">
        <title>Method setByte(int, byte)</title>
        <indexterm>
          <primary>setByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setByte</emphasis>(int <emphasis>parameterIndex</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java byte value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setBytes(int, byte[])">
        <title>Method setBytes(int, byte[])</title>
        <indexterm>
          <primary>setBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setBytes</emphasis>(int <emphasis>parameterIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java array of bytes.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCharacterStream(int, java.io.Reader, int)">
        <title>Method setCharacterStream(int, Reader, int)</title>
        <indexterm>
          <primary>setCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCharacterStream</emphasis>(int <emphasis>parameterIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                         int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the java reader which contains the UNICODE data</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the number of characters in the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
When a very large UNICODE value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.Reader. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect3>
      <sect3 xreflabel="Method setClob(int, java.sql.Clob)">
        <title>Method setClob(int, Clob)</title>
        <indexterm>
          <primary>setClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setClob</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>i</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - an object representing a CLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a CLOB parameter.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCommand(java.lang.String)">
        <title>Method setCommand(String)</title>
        <indexterm>
          <primary>setCommand</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCommand</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cmd</literal>
                    </emphasis> - a command string, may be null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the rowset's command property.
 This property is optional. The command property may not be needed
 when a rowset is produced by a data source that doesn't support
 commands, such as a spreadsheet.
        </para>
      </sect3>
      <sect3 xreflabel="Method setConcurrency(int)">
        <title>Method setConcurrency(int)</title>
        <indexterm>
          <primary>setConcurrency</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setConcurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>i</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>concurrency</literal>
                    </emphasis> - a value from ResultSet.CONCUR_XXX</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the rowset concurrency.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDataSourceName(java.lang.String)">
        <title>Method setDataSourceName(String)</title>
        <indexterm>
          <primary>setDataSourceName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>name</literal>
                    </emphasis> - a data source name</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the data source name.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDate(int, java.sql.Date)">
        <title>Method setDate(int, Date)</title>
        <indexterm>
          <primary>setDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Date value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDate(int, java.sql.Date, java.util.Calendar)">
        <title>Method setDate(int, Date, Calendar)</title>
        <indexterm>
          <primary>setDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDate</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Date value. The driver converts this
 to a SQL DATE value when it sends it to the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDouble(int, double)">
        <title>Method setDouble(int, double)</title>
        <indexterm>
          <primary>setDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDouble</emphasis>(int <emphasis>parameterIndex</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java double value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setEscapeProcessing(boolean)">
        <title>Method setEscapeProcessing(boolean)</title>
        <indexterm>
          <primary>setEscapeProcessing</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setEscapeProcessing</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setEscapeProcessing</emphasis>(boolean <emphasis>flag</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>enable</literal>
                    </emphasis> - true to enable; false to disable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
If escape scanning is on (the default), the driver will do
 escape substitution before sending the SQL to the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method setFetchDirection(int)">
        <title>Method setFetchDirection(int)</title>
        <indexterm>
          <primary>setFetchDirection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setFetchDirection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFetchDirection</emphasis>(int <emphasis>direction</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 the result set type is TYPE_FORWARD_ONLY and direction is not
 FETCH_FORWARD.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give a hint as to the direction in which the rows in this result set
 will be processed. The initial value is determined by the statement
 that produced the result set. The fetch direction may be changed
 at any time.
        </para>
      </sect3>
      <sect3 xreflabel="Method setFetchSize(int)">
        <title>Method setFetchSize(int)</title>
        <indexterm>
          <primary>setFetchSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setFetchSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFetchSize</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>rows</literal>
                    </emphasis> - the number of rows to fetch</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or the
 condition 0 &lt;= rows &lt;= this.getMaxRows() is not satisfied.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give the JDBC driver a hint as to the number of rows that should
 be fetched from the database when more rows are needed for this result
 set. If the fetch size specified is zero, then the JDBC driver
 ignores the value, and is free to make its own best guess as to what
 the fetch size should be. The default value is set by the statement
 that creates the result set. The fetch size may be changed at any
 time.
        </para>
      </sect3>
      <sect3 xreflabel="Method setFloat(int, float)">
        <title>Method setFloat(int, float)</title>
        <indexterm>
          <primary>setFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFloat</emphasis>(int <emphasis>parameterIndex</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java float value. The driver converts this
 to a SQL FLOAT value when it sends it to the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method setInt(int, int)">
        <title>Method setInt(int, int)</title>
        <indexterm>
          <primary>setInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setInt</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java int value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setLong(int, long)">
        <title>Method setLong(int, long)</title>
        <indexterm>
          <primary>setLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setLong</emphasis>(int <emphasis>parameterIndex</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java long value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setMaxFieldSize(int)">
        <title>Method setMaxFieldSize(int)</title>
        <indexterm>
          <primary>setMaxFieldSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMaxFieldSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxFieldSize</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>max</literal>
                    </emphasis> - the new max column size limit; zero means unlimited</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxFieldSize limit (in bytes) is set to limit the size of
 data that can be returned for any column value; it only applies
 to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and
 LONGVARCHAR fields. If the limit is exceeded, the excess data
 is silently discarded. For maximum portability use values
 greater than 256.
        </para>
      </sect3>
      <sect3 xreflabel="Method setMaxRows(int)">
        <title>Method setMaxRows(int)</title>
        <indexterm>
          <primary>setMaxRows</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMaxRows</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxRows</emphasis>(int <emphasis>max</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>max</literal>
                    </emphasis> - the new max rows limit; zero means unlimited</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The maxRows limit is set to limit the number of rows that any
 RowSet can contain. If the limit is exceeded, the excess
 rows are silently dropped.
        </para>
      </sect3>
      <sect3 xreflabel="Method setNull(int, int)">
        <title>Method setNull(int, int)</title>
        <indexterm>
          <primary>setNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>sqlType</literal>
                    </emphasis> - SQL type code defined by java.sql.Types</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to SQL NULL. 
        </para>
        <para>
          <emphasis>Note:</emphasis> You must specify the parameter's SQL type.
        </para>
      </sect3>
      <sect3 xreflabel="Method setNull(int, int, java.lang.String)">
        <title>Method setNull(int, int, String)</title>
        <indexterm>
          <primary>setNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setNull</emphasis>(int <emphasis>parameterIndex</emphasis>, int <emphasis>sqlType</emphasis>, 
                              java.lang.String <emphasis>typeName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>sqlType</literal>
                    </emphasis> - a value from java.sql.Types</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>typeName</literal>
                    </emphasis> - the fully-qualified name of an SQL user-named type,
 ignored if the parameter is not a user-named type or REF</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the designated parameter to SQL NULL. This version of setNull should
 be used for user-named types and REF type parameters. Examples
 of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
 named array types. 
        </para>
        <para>
          <emphasis>Note:</emphasis> To be portable, applications must give the
 SQL type code and the fully-qualified SQL type name when specifying
 a NULL user-defined or REF parameter. In the case of a user-named type
 the name is the type name of the parameter itself. For a REF
 parameter the name is the type name of the referenced type. If
 a JDBC driver does not need the type code or type name information,
 it may ignore it.
 Although it is intended for user-named and Ref parameters,
 this method may be used to set a null parameter of any JDBC type.
 If the parameter does not have a user-named or REF type, the given
 typeName is ignored.
        </para>
      </sect3>
      <sect3 xreflabel="Method setObject(int, java.lang.Object)">
        <title>Method setObject(int, Object)</title>
        <indexterm>
          <primary>setObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - The first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - The object containing the input parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the value of a parameter using an object; use the
 java.lang equivalent objects for integral values. 
        </para>
        <para>
The JDBC specification specifies a standard mapping from
 Java Object types to SQL types. The given argument java object
 will be converted to the corresponding SQL type before being
 sent to the database. 
        </para>
        <para>
Note that this method may be used to pass datatabase
 specific abstract data types, by using a Driver specific Java
 type.
 If the object is of a class implementing SQLData,
 the rowset should call its method writeSQL() to write it
 to the SQL data stream.
 else
 If the object is of a class implementing Ref, Blob, Clob, Struct,
 or Array then pass it to the database as a value of the
 corresponding SQL type.
 Raise an exception if there is an ambiguity, for example, if the
 object is of a class implementing more than one of those interfaces.
        </para>
      </sect3>
      <sect3 xreflabel="Method setObject(int, java.lang.Object, int)">
        <title>Method setObject(int, Object, int)</title>
        <indexterm>
          <primary>setObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                int <emphasis>targetSqlType</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
This method is like setObject above, but the scale used is the scale
 of the second parameter. Scalar values have a scale of zero. Literal
 values have the scale present in the literal. While it is supported, it
 is not recommended that this method not be called with floating point
 input values.
        </para>
      </sect3>
      <sect3 xreflabel="Method setObject(int, java.lang.Object, int, int)">
        <title>Method setObject(int, Object, int, int)</title>
        <indexterm>
          <primary>setObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setObject</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                int <emphasis>targetSqlType</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - The first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - The object containing the input parameter value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>targetSqlType</literal>
                    </emphasis> - The SQL type (as defined in java.sql.Types) to be
 sent to the database. The scale argument may further qualify this type.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored,</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.Types</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the value of a parameter using an object; use the
 java.lang equivalent objects for integral values. 
        </para>
        <para>
The given Java object will be converted to the targetSqlType
 before being sent to the database.
 If the object is of a class implementing SQLData,
 the rowset should call its method writeSQL() to write it
 to the SQL data stream.
 else
 If the object is of a class implementing Ref, Blob, Clob, Struct,
 or Array then pass it to the database as a value of the
 corresponding SQL type. 
        </para>
        <para>
Note that this method may be used to pass datatabase-
 specific abstract data types.
        </para>
      </sect3>
      <sect3 xreflabel="Method setPassword(java.lang.String)">
        <title>Method setPassword(String)</title>
        <indexterm>
          <primary>setPassword</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>password</literal>
                    </emphasis> - the password string</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the password.
        </para>
      </sect3>
      <sect3 xreflabel="Method setQueryTimeout(int)">
        <title>Method setQueryTimeout(int)</title>
        <indexterm>
          <primary>setQueryTimeout</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setQueryTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setQueryTimeout</emphasis>(int <emphasis>seconds</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>seconds</literal>
                    </emphasis> - the new query timeout limit in seconds; zero means
 unlimited</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The queryTimeout limit is the number of seconds the driver will
 wait for a Statement to execute. If the limit is exceeded, a
 SQLException is thrown.
        </para>
      </sect3>
      <sect3 xreflabel="Method setReadOnly(boolean)">
        <title>Method setReadOnly(boolean)</title>
        <indexterm>
          <primary>setReadOnly</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>value</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>value</literal>
                    </emphasis> - true if read-only, false otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the read-onlyness of the rowset
        </para>
      </sect3>
      <sect3 xreflabel="Method setRef(int, java.sql.Ref)">
        <title>Method setRef(int, Ref)</title>
        <indexterm>
          <primary>setRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setRef</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>i</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - an object representing data of an SQL REF Type</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a REF(&lt;structured-type&gt;) parameter.
        </para>
      </sect3>
      <sect3 xreflabel="Method setShort(int, short)">
        <title>Method setShort(int, short)</title>
        <indexterm>
          <primary>setShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setShort</emphasis>(int <emphasis>parameterIndex</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java short value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setString(int, java.lang.String)">
        <title>Method setString(int, String)</title>
        <indexterm>
          <primary>setString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setString</emphasis>(int <emphasis>parameterIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a Java String value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTime(int, java.sql.Time)">
        <title>Method setTime(int, Time)</title>
        <indexterm>
          <primary>setTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Time value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTime(int, java.sql.Time, java.util.Calendar)">
        <title>Method setTime(int, Time, Calendar)</title>
        <indexterm>
          <primary>setTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTime</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Time value. The driver converts this
 to a SQL TIME value when it sends it to the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTimestamp(int, java.sql.Timestamp)">
        <title>Method setTimestamp(int, Timestamp)</title>
        <indexterm>
          <primary>setTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Timestamp value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTimestamp(int, java.sql.Timestamp, java.util.Calendar)">
        <title>Method setTimestamp(int, Timestamp, Calendar)</title>
        <indexterm>
          <primary>setTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTimestamp</emphasis>(int <emphasis>parameterIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>, 
                                   java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the parameter value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set a parameter to a java.sql.Timestamp value. The driver
 converts this to a SQL TIMESTAMP value when it sends it to the
 database.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTransactionIsolation(int)">
        <title>Method setTransactionIsolation(int)</title>
        <indexterm>
          <primary>setTransactionIsolation</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTransactionIsolation</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTransactionIsolation</emphasis>(int <emphasis>value</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>level</literal>
                    </emphasis> - the transaction isolation level</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the transaction isolation.
        </para>
      </sect3>
      <sect3 xreflabel="Method setType(int)">
        <title>Method setType(int)</title>
        <indexterm>
          <primary>setType</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setType</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setType</emphasis>(int <emphasis>value</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>value</literal>
                    </emphasis> - may be TYPE_FORWARD_ONLY, TYPE_SCROLL_INSENSITIVE, or
 TYPE_SCROLL_SENSITIVE</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the type of this result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTypeMap(java.util.Map)">
        <title>Method setTypeMap(Map)</title>
        <indexterm>
          <primary>setTypeMap</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTypeMap</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTypeMap</emphasis>(java.util.Map <emphasis>value</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>map</literal>
                    </emphasis> - a map object</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Install a type-map object as the default type-map for
 this rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method setUnicodeStream(int, java.io.InputStream, int)">
        <title>Method setUnicodeStream(int, InputStream, int)</title>
        <indexterm>
          <primary>setUnicodeStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUnicodeStream</emphasis>(int <emphasis>parameterIndex</emphasis>, 
                                       java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parameterIndex</literal>
                    </emphasis> - the first parameter is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the java input stream which contains the
 UNICODE parameter value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the number of bytes in the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
When a very large UNICODE value is input to a LONGVARCHAR
 parameter, it may be more practical to send it via a
 java.io.InputStream. JDBC will read the data from the stream
 as needed, until it reaches end-of-file. The JDBC driver will
 do any necessary conversion from UNICODE to the database char format. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This stream object can either be a standard
 Java stream object or your own subclass that implements the
 standard interface.
        </para>
      </sect3>
      <sect3 xreflabel="Method setUrl(java.lang.String)">
        <title>Method setUrl(String)</title>
        <indexterm>
          <primary>setUrl</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setUrl</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUrl</emphasis>(java.lang.String <emphasis>s</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>url</literal>
                    </emphasis> - a string value, may be null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the url used to create a connection.
 Setting this property is optional. If a url is used, a JDBC driver
 that accepts the url must be loaded by the application before the
 rowset is used to connect to a database. The rowset will use the url
 internally to create a database connection when reading or writing
 data. Either a url or a data source name is used to create a
 connection, whichever was specified most recently.
        </para>
      </sect3>
      <sect3 xreflabel="Method setUsername(java.lang.String)">
        <title>Method setUsername(String)</title>
        <indexterm>
          <primary>setUsername</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setUsername</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUsername</emphasis>(java.lang.String <emphasis>s</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>name</literal>
                    </emphasis> - a user name</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the user name.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLCachedRowSet" id="oplcachedrowset">
    <title>Class OPLCachedRowSet</title>
    <indexterm>
      <primary>OPLCachedRowSet</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLCachedRowSet</secondary>
    </indexterm>
    <para>
A OPLCachedRowSet is a disconnected, serializable, scrollable container
 for tabular data. A primary purpose of the OPLCachedRowSet class is to
 provide a representation of a JDBC ResultSet that can be passed
 between different components of a remote application. For example, a
 OPLCachedRowSet can be used to send the result of a query executed by
 an Enterprise JavaBeans component running in a server environment over
 a network to a client running in a web browser. A second use for
 OPLCachedRowSets is to provide scrolling and updating for ResultSets that
 don't provide these capabilities themselves. A OPLCachedRowSet can be
 used to augment the capabilities of a JDBC driver that doesn't have
 full support for scrolling and updating. Finally, a OPLCachedRowSet can
 be used to provide Java applications with access to tabular data in an
 environment such as a thin client or PDA, where it would be
 inappropriate to use a JDBC driver due to resource limitations or
 security considerations. The OPLCachedRowSet class provides a means to
 "get rows in" and "get changed rows out" without the need to implement
 the full JDBC API. 
    </para>
    <para>
A OPLCachedRowSet object can contain data retrieved via a JDBC driver or
 data from some other source, such as a spreadsheet. Both a
 OPLCachedRowSet object and its metadata can be created from scratch. A
 component that acts as a factory for rowsets can use this capability
 to create a rowset containing data from non-JDBC data sources. 
    </para>
    <para>
The term 'disconnected' implies that a OPLCachedRowSet only makes use of
 a JDBC connection briefly while data is being read from the database
 and used to populate it with rows, and again while updated rows are being
 propagated back to the underlying database. During the remainder of
 its lifetime, a OPLCachedRowSet object isn't associated with an
 underlying database connection. A OPLCachedRowSet object can simply be
 thought of as a disconnected set of rows that are being cached outside
 of a data source. Since all data is cached in memory, OPLCachedRowSets are
 not appropriate for extremely large data sets. 
    </para>
    <para>
The contents of a OPLCachedRowSet may be updated and the updates can be
 propagated to an underlying data source. OPLCachedRowSets support an
 optimistic concurrency control mechanism - no locks are maintained in
 the underlying database during disconnected use of the rowset. Both the
 original value and current value of the OPLCachedRowSet are maintained
 for use by the optimistic routines.
    </para>
    <sect2 id="oplcachedrowsetsynopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLCachedRowSet</emphasis> extends BaseRowSet implements RowSetInternal,Serializable,Cloneable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLCachedRowSet</emphasis>() throws java.sql.SQLException;
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>cmd</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>concurrency</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">acceptChanges</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">acceptChanges</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">populate</emphasis>(java.sql.ResultSet <emphasis>rs</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setShowDeleted</emphasis>(boolean <emphasis>value</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">getShowDeleted</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getTableName</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setTableName</emphasis>(java.lang.String <emphasis>_tableName</emphasis>) 
      throws java.sql.SQLException;
  public int[] <emphasis role="strong">getKeyCols</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setKeyColumns</emphasis>(int[] <emphasis>keys</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowDelete</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowInsert</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">columnUpdated</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setOriginal</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setOriginalRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">restoreOriginal</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">size</emphasis>();
  public Collection <emphasis role="strong">toCollection</emphasis>() throws java.sql.SQLException;
  public Collection <emphasis role="strong">toCollection</emphasis>(int <emphasis>col</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">release</emphasis>() throws java.sql.SQLException;
  public RowSet <emphasis role="strong">createCopy</emphasis>() throws java.sql.SQLException;
  public RowSet <emphasis role="strong">createShared</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setMetaData</emphasis>(javax.sql.RowSetMetaData <emphasis>md</emphasis>) 
      throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
  public ResultSet <emphasis role="strong">getOriginal</emphasis>() throws java.sql.SQLException;
  public ResultSet <emphasis role="strong">getOriginalRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
  public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
  public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                 int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                    int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                               java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                 java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                    java.io.Reader <emphasis>reader</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                           int <emphasis>scale</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.BaseRowSet</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLCachedRowSet</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x1members">
      <title>Members</title>
      <sect3 xreflabel="Constructor OPLCachedRowSet()">
        <title>Constructor OPLCachedRowSet()</title>
        <indexterm>
          <primary>OPLCachedRowSet</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>OPLCachedRowSet</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public <emphasis role="strong">OPLCachedRowSet</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Create a OPLCachedRowSet object. The object has no metadata.
        </para>
      </sect3>
      <sect3 xreflabel="Method absolute(int)">
        <title>Method absolute(int)</title>
        <indexterm>
          <primary>absolute</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>absolute</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 row is 0, or rowset type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to an absolute row number in the rowset.
 It notifies listeners that the cursor has moved. 
        </para>
        <para>
If row is positive, moves to an absolute row with respect to the
 beginning of the rowset. The first row is row 1, the second
 is row 2, etc. 
        </para>
        <para>
If row is negative, moves to an absolute row position with respect to
 the end of rowset. For example, calling absolute(-1) positions the
 cursor on the last row, absolute(-2) indicates the next-to-last
 row, etc. 
        </para>
        <para>
An attempt to position the cursor beyond the first/last row in
 the rowset, leaves the cursor before/after the first/last
 row, respectively. 
        </para>
        <para>
Note: Calling absolute(1) is the same as calling first().
 Calling absolute(-1) is the same as calling last().
        </para>
      </sect3>
      <sect3 xreflabel="Method acceptChanges()">
        <title>Method acceptChanges()</title>
        <indexterm>
          <primary>acceptChanges</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>acceptChanges</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">acceptChanges</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Propagate all row update, insert, and delete changes to a data source.
 An SQLException is thrown if any of the updates cannot be
 propagated. If acceptChanges() fails then the caller can assume that
 none of the updates are reflected in the data source. The current row
 is set to the first "updated" row that resulted in an exception, in
 the case that an exception is thrown. With one exception, if the row
 that caused the exception is a "deleted" row, then in the usual case,
 when deleted rows are not shown, the current row isn't affected.
 When successful, calling acceptChanges() replaces the original value
 of the rowset with the current value. Note: Both the original and
 current value of the rowset are maintained. The original state is the
 value of the rowset following its creation (i.e. empty), or following
 the last call to acceptChanges(), execute(), populate(), release(), or
 restoreOriginal(). 
 Internally, a RowSetWriter component is envoked to write the data for
 each row.
        </para>
      </sect3>
      <sect3 xreflabel="Method acceptChanges(java.sql.Connection)">
        <title>Method acceptChanges(Connection)</title>
        <indexterm>
          <primary>acceptChanges</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>acceptChanges</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">acceptChanges</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>_conn</literal>
                    </emphasis> - a database connection</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Like acceptChanges() above, but takes a Connection argument. The
 Connection is used internally when doing the updates. This form
 isn't used unless the underlying data source is a JDBC data source.
        </para>
      </sect3>
      <sect3 xreflabel="Method afterLast()">
        <title>Method afterLast()</title>
        <indexterm>
          <primary>afterLast</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>afterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the end of the rowset, just after the last
 row. Has no effect if the rowset contains no rows.
 It notifies listeners that the cursor has moved.
        </para>
      </sect3>
      <sect3 xreflabel="Method beforeFirst()">
        <title>Method beforeFirst()</title>
        <indexterm>
          <primary>beforeFirst</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>beforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the front of the rowset, just before the
 first row. Has no effect if the rowset contains no rows.
 It notifies listeners that the cursor has moved.
        </para>
      </sect3>
      <sect3 xreflabel="Method cancelRowDelete()">
        <title>Method cancelRowDelete()</title>
        <indexterm>
          <primary>cancelRowDelete</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>cancelRowDelete</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowDelete</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Cancels deletion of the current row and notifies listeners that a row 
 has changed. After calling cancelRowDelete()
 the current row is no longer marked for deletion. An exception is
 thrown if there is no current row. Note: This method can be
 ignored if deleted rows aren't being shown (the normal case).
        </para>
      </sect3>
      <sect3 xreflabel="Method cancelRowInsert()">
        <title>Method cancelRowInsert()</title>
        <indexterm>
          <primary>cancelRowInsert</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>cancelRowInsert</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowInsert</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Cancels insertion of the current row and notifies listeners that a row 
 has changed. An exception is thrown if
 the row isn't an inserted row. The current row is immediately removed
 from the rowset. This operation cannot be undone.
        </para>
      </sect3>
      <sect3 xreflabel="Method cancelRowUpdates()">
        <title>Method cancelRowUpdates()</title>
        <indexterm>
          <primary>cancelRowUpdates</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>cancelRowUpdates</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The cancelRowUpdates() method may be called after calling an
 updateXXX() method(s) and before calling updateRow() to rollback
 the updates made to a row. If no updates have been made or
 updateRow() has already been called, then this method has no
 effect. It notifies listeners that a row has changed, if it has effect.
        </para>
      </sect3>
      <sect3 xreflabel="Method clearWarnings()">
        <title>Method clearWarnings()</title>
        <indexterm>
          <primary>clearWarnings</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>clearWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
After this call getWarnings returns null until a new warning is
 reported for this ResultSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm>
          <primary>close</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Releases the current contents of this rowset, discarding outstanding updates.
 The rowset contains no rows after the method release is called.
 This method sends a RowSetChangedEvent object to all registered listeners
 prior to returning.
        </para>
      </sect3>
      <sect3 xreflabel="Method columnUpdated(int)">
        <title>Method columnUpdated(int)</title>
        <indexterm>
          <primary>columnUpdated</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>columnUpdated</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">columnUpdated</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - true if the column has been updated</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the column from the current row has been updated.
        </para>
      </sect3>
      <sect3 xreflabel="Method createCopy()">
        <title>Method createCopy()</title>
        <indexterm>
          <primary>createCopy</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>createCopy</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public RowSet <emphasis role="strong">createCopy</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Creates a RowSet object that is a deep copy of this OPLCachedRowSet object's data.
 Updates made on a copy are not visible to the original rowset;
 a copy of a rowset is completely independent from the original.
 Making a copy saves the cost of creating an identical rowset from
 first principles, which can be quite expensive.
 For example, it doesn't do the query to a remote database server.
        </para>
      </sect3>
      <sect3 xreflabel="Method createShared()">
        <title>Method createShared()</title>
        <indexterm>
          <primary>createShared</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>createShared</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public RowSet <emphasis role="strong">createShared</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns a new rowset object backed by the same data. Updates
 made by a shared duplicate are visible to the original rowset and other
 duplicates. A rowset and its duplicates form a set of cursors
 that iterate over a shared set of rows, providing different views
 of the underlying data.
 Duplicates also share property values. So, for example, if a rowset
 is read-only then all of its duplicates will be read-only.
        </para>
      </sect3>
      <sect3 xreflabel="Method deleteRow()">
        <title>Method deleteRow()</title>
        <indexterm>
          <primary>deleteRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>deleteRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Delete the current row from this OPLCachedRowSet object and it notifies 
 listeners that a row has changed. Cannot be called when the cursor is 
 on the insert row. The method marks the current row as deleted, 
 but it does not delete the row from the underlying data source. 
 The method acceptChanges must be called to delete the row in 
 the data source.
        </para>
      </sect3>
      <sect3 xreflabel="Method execute()">
        <title>Method execute()</title>
        <indexterm>
          <primary>execute</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates this OPLCachedRowSet object with data. This form of the method uses
 the rowset's user, password, and url or data source name properties to
 create a database connection. If properties that are needed have not been set,
 this method will throw an exception. Another form of this method uses an
 existing JDBC Connection object instead of creating a new one;
 therefore, it ignores the properties used for establishing a new connection.
 The query specified by the command property is executed to create
 a ResultSet object from which to retrieve data.
 The current contents of the rowset are discarded, and the rowset's
 metadata is also (re)set. If there are outstanding updates, they are also ignored.
 The method execute closes any database connections that it creates.
        </para>
      </sect3>
      <sect3 xreflabel="Method execute(java.sql.Connection)">
        <title>Method execute(Connection)</title>
        <indexterm>
          <primary>execute</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>_conn</literal>
                    </emphasis> - a database connection</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates the rowset with data. The first form uses the properties:
 url/data source name, user, and password to create a database
 connection. If these properties haven't been set, an exception is
 thrown. The second form uses an existing JDBC connection object
 instead. The values of the url/data source name, user, and password
 properties are ignored when the second form is used. Execute() closes
 any database connections that it creates.
 The command specified by the command property is executed to retrieve
 the data. The current contents of the rowset are discarded and the
 rowset's metadata is also (re)set. If there are outstanding updates,
 they are also ignored.
        </para>
      </sect3>
      <sect3 xreflabel="Method findColumn(java.lang.String)">
        <title>Method findColumn(String)</title>
        <indexterm>
          <primary>findColumn</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>findColumn</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column index</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Map a Resultset column name to a ResultSet column index.
        </para>
      </sect3>
      <sect3 xreflabel="Method first()">
        <title>Method first()</title>
        <indexterm>
          <primary>first</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>first</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the first row in the rowset.
 It notifies listeners that the cursor has moved.
        </para>
      </sect3>
      <sect3 xreflabel="Method getArray(int)">
        <title>Method getArray(int)</title>
        <indexterm>
          <primary>getArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing an SQL array</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getArray(java.lang.String)">
        <title>Method getArray(String)</title>
        <indexterm>
          <primary>getArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing an SQL array</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getAsciiStream(int)">
        <title>Method getAsciiStream(int)</title>
        <indexterm>
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect3>
      <sect3 xreflabel="Method getAsciiStream(java.lang.String)">
        <title>Method getAsciiStream(String)</title>
        <indexterm>
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(int)">
        <title>Method getBigDecimal(int)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value (full precision); if the value is SQL NULL,
 the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(int, int)">
        <title>Method getBigDecimal(int, int)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - the number of digits to the right of the decimal</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(java.lang.String)">
        <title>Method getBigDecimal(String)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(java.lang.String, int)">
        <title>Method getBigDecimal(String, int)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                          int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - the number of digits to the right of the decimal</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBinaryStream(int)">
        <title>Method getBinaryStream(int)</title>
        <indexterm>
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBinaryStream(java.lang.String)">
        <title>Method getBinaryStream(String)</title>
        <indexterm>
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBlob(int)">
        <title>Method getBlob(int)</title>
        <indexterm>
          <primary>getBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a BLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBlob(java.lang.String)">
        <title>Method getBlob(String)</title>
        <indexterm>
          <primary>getBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a BLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBoolean(int)">
        <title>Method getBoolean(int)</title>
        <indexterm>
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBoolean(java.lang.String)">
        <title>Method getBoolean(String)</title>
        <indexterm>
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect3>
      <sect3 xreflabel="Method getByte(int)">
        <title>Method getByte(int)</title>
        <indexterm>
          <primary>getByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect3>
      <sect3 xreflabel="Method getByte(java.lang.String)">
        <title>Method getByte(String)</title>
        <indexterm>
          <primary>getByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBytes(int)">
        <title>Method getBytes(int)</title>
        <indexterm>
          <primary>getBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBytes(java.lang.String)">
        <title>Method getBytes(String)</title>
        <indexterm>
          <primary>getBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCharacterStream(int)">
        <title>Method getCharacterStream(int)</title>
        <indexterm>
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCharacterStream(java.lang.String)">
        <title>Method getCharacterStream(String)</title>
        <indexterm>
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect3>
      <sect3 xreflabel="Method getClob(int)">
        <title>Method getClob(int)</title>
        <indexterm>
          <primary>getClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a CLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getClob(java.lang.String)">
        <title>Method getClob(String)</title>
        <indexterm>
          <primary>getClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a CLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the Connection passed to the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCursorName()">
        <title>Method getCursorName()</title>
        <indexterm>
          <primary>getCursorName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCursorName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the name of the SQL cursor used by this ResultSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(int)">
        <title>Method getDate(int)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(int, java.util.Calendar)">
        <title>Method getDate(int, Calendar)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the date</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(java.lang.String)">
        <title>Method getDate(String)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(java.lang.String, java.util.Calendar)">
        <title>Method getDate(String, Calendar)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the date</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDouble(int)">
        <title>Method getDouble(int)</title>
        <indexterm>
          <primary>getDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDouble(java.lang.String)">
        <title>Method getDouble(String)</title>
        <indexterm>
          <primary>getDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFloat(int)">
        <title>Method getFloat(int)</title>
        <indexterm>
          <primary>getFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFloat(java.lang.String)">
        <title>Method getFloat(String)</title>
        <indexterm>
          <primary>getFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect3>
      <sect3 xreflabel="Method getInt(int)">
        <title>Method getInt(int)</title>
        <indexterm>
          <primary>getInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect3>
      <sect3 xreflabel="Method getInt(java.lang.String)">
        <title>Method getInt(String)</title>
        <indexterm>
          <primary>getInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect3>
      <sect3 xreflabel="Method getKeyCols()">
        <title>Method getKeyCols()</title>
        <indexterm>
          <primary>getKeyCols</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getKeyCols</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int[] <emphasis role="strong">getKeyCols</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the columns that make a key to uniquely identify a row in this
 OPLCachedRowSet object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getLong(int)">
        <title>Method getLong(int)</title>
        <indexterm>
          <primary>getLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect3>
      <sect3 xreflabel="Method getLong(java.lang.String)">
        <title>Method getLong(String)</title>
        <indexterm>
          <primary>getLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMetaData()">
        <title>Method getMetaData()</title>
        <indexterm>
          <primary>getMetaData</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMetaData</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The number, types and properties of a ResultSet's columns
 are provided by the getMetaData method.
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(int)">
        <title>Method getObject(int)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a java.lang.Object holding the column value.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @column is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(column,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(int, java.util.Map)">
        <title>Method getObject(int, Map)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>map</literal>
                    </emphasis> - the mapping from SQL type names to Java classes</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing the SQL value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(java.lang.String)">
        <title>Method getObject(String)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a java.lang.Object holding the column value.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @columnName is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(columnName,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(java.lang.String, java.util.Map)">
        <title>Method getObject(String, Map)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>map</literal>
                    </emphasis> - the mapping from SQL type names to Java classes</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing the SQL value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect3>
      <sect3 xreflabel="Method getOriginal()">
        <title>Method getOriginal()</title>
        <indexterm>
          <primary>getOriginal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getOriginal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public ResultSet <emphasis role="strong">getOriginal</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns a result set containing the original value of the rowset.
 The cursor is positioned before the first row in the result set.
 Only rows contained in the result set returned by getOriginal()
 are said to have an original value.
        </para>
      </sect3>
      <sect3 xreflabel="Method getOriginalRow()">
        <title>Method getOriginalRow()</title>
        <indexterm>
          <primary>getOriginalRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getOriginalRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public ResultSet <emphasis role="strong">getOriginalRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns a result set containing the original value of the current
 row only. If the current row has no original value an empty result set
 is returned. If there is no current row an exception is thrown.
        </para>
      </sect3>
      <sect3 xreflabel="Method getRef(int)">
        <title>Method getRef(int)</title>
        <indexterm>
          <primary>getRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing data of an SQL REF type</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getRef(java.lang.String)">
        <title>Method getRef(String)</title>
        <indexterm>
          <primary>getRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing data of an SQL REF type</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getRow()">
        <title>Method getRow()</title>
        <indexterm>
          <primary>getRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine the current row number. The first row is number 1, the
 second number 2, etc.
        </para>
      </sect3>
      <sect3 xreflabel="Method getShort(int)">
        <title>Method getShort(int)</title>
        <indexterm>
          <primary>getShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect3>
      <sect3 xreflabel="Method getShort(java.lang.String)">
        <title>Method getShort(String)</title>
        <indexterm>
          <primary>getShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect3>
      <sect3 xreflabel="Method getShowDeleted()">
        <title>Method getShowDeleted()</title>
        <indexterm>
          <primary>getShowDeleted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getShowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getShowDeleted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
This property determines whether or not rows marked for deletion
 appear in the set of current rows. The default value is false.
        </para>
      </sect3>
      <sect3 xreflabel="Method getStatement()">
        <title>Method getStatement()</title>
        <indexterm>
          <primary>getStatement</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getStatement</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return the Statement that produced the ResultSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method getString(int)">
        <title>Method getString(int)</title>
        <indexterm>
          <primary>getString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect3>
      <sect3 xreflabel="Method getString(java.lang.String)">
        <title>Method getString(String)</title>
        <indexterm>
          <primary>getString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTableName()">
        <title>Method getTableName()</title>
        <indexterm>
          <primary>getTableName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getTableName</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns an identifier for the object (table) that was used to create this rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(int)">
        <title>Method getTime(int)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(int, java.util.Calendar)">
        <title>Method getTime(int, Calendar)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the time</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(java.lang.String)">
        <title>Method getTime(String)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(java.lang.String, java.util.Calendar)">
        <title>Method getTime(String, Calendar)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the time</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(int)">
        <title>Method getTimestamp(int)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(int, java.util.Calendar)">
        <title>Method getTimestamp(int, Calendar)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the timestamp</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(java.lang.String)">
        <title>Method getTimestamp(String)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(java.lang.String, java.util.Calendar)">
        <title>Method getTimestamp(String, Calendar)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the timestamp</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUnicodeStream(int)">
        <title>Method getUnicodeStream(int)</title>
        <indexterm>
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUnicodeStream(java.lang.String)">
        <title>Method getUnicodeStream(String)</title>
        <indexterm>
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect3>
      <sect3 xreflabel="Method getURL(int)">
        <title>Method getURL(int)</title>
        <indexterm>
          <primary>getURL</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the index of the column 1 is the first, 2 is the second,...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs,
 or if a URL is malformed</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect3>
      <sect3 xreflabel="Method getURL(java.lang.String)">
        <title>Method getURL(String)</title>
        <indexterm>
          <primary>getURL</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs
 or if a URL is malformed</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect3>
      <sect3 xreflabel="Method getWarnings()">
        <title>Method getWarnings()</title>
        <indexterm>
          <primary>getWarnings</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The first warning reported by calls on this ResultSet is
 returned. Subsequent ResultSet warnings will be chained to this
 SQLWarning. 
        </para>
        <para>
The warning chain is automatically cleared each time a new
 row is read. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This warning chain only covers warnings caused
 by ResultSet methods. Any warning caused by statement methods
 (such as reading OUT parameters) will be chained on the
 Statement object.
        </para>
      </sect3>
      <sect3 xreflabel="Method insertRow()">
        <title>Method insertRow()</title>
        <indexterm>
          <primary>insertRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>insertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs,
 if this method is called when the cursor is not on the insert row</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Inserts the contents of the insert row into this
 rowset following the current row and it notifies 
 listeners that the row has changed.
 The cursor must be on the insert row when this method is called.
 The method marks the current row as inserted, 
 but it does not insert the row to the underlying data source. 
 The method acceptChanges must be called to insert the row to 
 the data source.
        </para>
      </sect3>
      <sect3 xreflabel="Method isAfterLast()">
        <title>Method isAfterLast()</title>
        <indexterm>
          <primary>isAfterLast</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isAfterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is after the last row in the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method isBeforeFirst()">
        <title>Method isBeforeFirst()</title>
        <indexterm>
          <primary>isBeforeFirst</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isBeforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is before the first row in the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method isFirst()">
        <title>Method isFirst()</title>
        <indexterm>
          <primary>isFirst</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the first row of the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method isLast()">
        <title>Method isLast()</title>
        <indexterm>
          <primary>isLast</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the last row of the rowset.
 Note: Calling isLast() may be expensive since the rowset
 might need to check ahead one row in order to determine
 whether the current row is the last row in the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method last()">
        <title>Method last()</title>
        <indexterm>
          <primary>last</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>last</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 rowset type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the last row in the rowset.
 It notifies listeners that the cursor has moved.
        </para>
      </sect3>
      <sect3 xreflabel="Method moveToCurrentRow()">
        <title>Method moveToCurrentRow()</title>
        <indexterm>
          <primary>moveToCurrentRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>moveToCurrentRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs,
 or the rowset is not updatable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move the cursor to the remembered cursor position, usually the
 current row. Has no effect unless the cursor is on the insert
 row.
        </para>
      </sect3>
      <sect3 xreflabel="Method moveToInsertRow()">
        <title>Method moveToInsertRow()</title>
        <indexterm>
          <primary>moveToInsertRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>moveToInsertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs,
 or the rowset is not updatable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to the insert row. The current cursor position is
 remembered while the cursor is positioned on the insert row.
 The insert row is a special row associated with an updatable
 rowset. It is essentially a buffer where a new row may
 be constructed by calling the updateXXX() methods prior to
 inserting the row into the rowset.
 Only the updateXXX(), getXXX(), and insertRow() methods may be
 called when the cursor is on the insert row. All of the columns in
 a rowset must be given a value each time this method is
 called before calling insertRow(). UpdateXXX()must be called before
 getXXX() on a column.
        </para>
      </sect3>
      <sect3 xreflabel="Method next()">
        <title>Method next()</title>
        <indexterm>
          <primary>next</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>next</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A ResultSet is initially positioned before its first row; the
 first call to next makes the first row the current row; the
 second call makes the second row the current row, etc. 
        </para>
        <para>
If an input stream from the previous row is open, it is
 implicitly closed. The ResultSet's warning chain is cleared
 when a new row is read.
        </para>
      </sect3>
      <sect3 xreflabel="Method populate(java.sql.ResultSet)">
        <title>Method populate(ResultSet)</title>
        <indexterm>
          <primary>populate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>populate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">populate</emphasis>(java.sql.ResultSet <emphasis>rs</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>rs</literal>
                    </emphasis> - the data to be read</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populate the OPLCachedRowSet object with data from a ResultSet. This
 method is an alternative to execute() for filling the rowset with
 data. Populate() doesn't require that the properties needed by
 execute(), such as the command property, be set. A RowSetChangedEvent
 is sent to all registered listeners prior to returning.
        </para>
      </sect3>
      <sect3 xreflabel="Method previous()">
        <title>Method previous()</title>
        <indexterm>
          <primary>previous</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>previous</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 rowset type is TYPE_FORWAR_DONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the previous row in the rowset. 
        </para>
        <para>
Note: previous() is not the same as relative(-1) since it
 makes sense to call previous() when there is no current row.
        </para>
      </sect3>
      <sect3 xreflabel="Method refreshRow()">
        <title>Method refreshRow()</title>
        <indexterm>
          <primary>refreshRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>refreshRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the current row with its original value and marks the row 
 as not updated, thus undoing any changes made to the row since 
 the last call to the methods updateRow or deleteRow. 
 This method should be called only when the cursor is on a row in 
 this rowset. Cannot be called when on the insert row.
        </para>
      </sect3>
      <sect3 xreflabel="Method relative(int)">
        <title>Method relative(int)</title>
        <indexterm>
          <primary>relative</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>relative</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or there
 is no current row, or rowset type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 rowset positions the cursor before/after the
 the first/last row. Calling relative(0) is valid, but does
 not change the cursor position.
 It notifies listeners that the cursor has moved. 
        </para>
        <para>
Note: Calling relative(1) is different than calling next()
 since is makes sense to call next() when there is no current row,
 for example, when the cursor is positioned before the first row
 or after the last row of the rowset.
        </para>
      </sect3>
      <sect3 xreflabel="Method release()">
        <title>Method release()</title>
        <indexterm>
          <primary>release</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>release</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">release</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Releases the current contents of the rowset. Outstanding updates are
 discarded. The rowset contains no rows after release is called.
 A RowSetChangedEvent is sent to all registered listeners prior
 to returning.
        </para>
      </sect3>
      <sect3 xreflabel="Method restoreOriginal()">
        <title>Method restoreOriginal()</title>
        <indexterm>
          <primary>restoreOriginal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>restoreOriginal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">restoreOriginal</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Restores the rowset to its original state ( the original value
 of the rowset becomes the current value). All updates, inserts, and
 deletes made to the original state are lost. The cursor is positioned
 before the first row. A RowSetChangedEvent is sent to all registered
 listeners prior to returning.
        </para>
      </sect3>
      <sect3 xreflabel="Method rowDeleted()">
        <title>Method rowDeleted()</title>
        <indexterm>
          <primary>rowDeleted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.DatabaseMetaData.deletesAreDetected</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if this row has been deleted. A deleted row may leave
 a visible "hole" in a rowset. This method can be used to
 detect holes in a rowset. The value returned depends on whether
 or not the rowset can detect deletions.
        </para>
      </sect3>
      <sect3 xreflabel="Method rowInserted()">
        <title>Method rowInserted()</title>
        <indexterm>
          <primary>rowInserted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rowInserted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.DatabaseMetaData.insertsAreDetected</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been inserted. The value returned
 depends on whether or not the rowset can detect visible inserts.
        </para>
      </sect3>
      <sect3 xreflabel="Method rowUpdated()">
        <title>Method rowUpdated()</title>
        <indexterm>
          <primary>rowUpdated</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rowUpdated</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.DatabaseMetaData.updatesAreDetected</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been updated. The value returned
 depends on whether or not the rowset can detect updates.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCommand(java.lang.String)">
        <title>Method setCommand(String)</title>
        <indexterm>
          <primary>setCommand</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCommand</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCommand</emphasis>(java.lang.String <emphasis>cmd</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cmd</literal>
                    </emphasis> - - a String object containing an SQL query that will be
 set as the command</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>- if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets this OPLCachedRowSet object's command property to the given
 String object and clears the parameters, if any, that were set
 for the previous command.
        </para>
      </sect3>
      <sect3 xreflabel="Method setConcurrency(int)">
        <title>Method setConcurrency(int)</title>
        <indexterm>
          <primary>setConcurrency</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setConcurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setConcurrency</emphasis>(int <emphasis>concurrency</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>concurrency</literal>
                    </emphasis> - - one of the following constants: ResultSet.CONCUR_READ_ONLY
 or ResultSet.CONCUR_UPDATABLE</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>- if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the concurrency for this rowset to the specified concurrency.
 The default concurrency is ResultSet.CONCUR_UPDATABLE.
        </para>
      </sect3>
      <sect3 xreflabel="Method setKeyColumns(int[])">
        <title>Method setKeyColumns(int[])</title>
        <indexterm>
          <primary>setKeyColumns</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setKeyColumns</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setKeyColumns</emphasis>(int[] <emphasis>keys</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>keys</literal>
                    </emphasis> - - an array of int indicating the columns that form a key for
 this OPLCachedRowSet object; every element in the array must be greater
 than 0 and less than or equal to the number of columns in this rowset</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets this OPLCachedRowSet object's keyCols field with the given array of column numbers,
 which forms a key for uniquely identifying a row in this rowset.
 Note: If you don't set the keyCols, the OPLCachedRowSet will set automatically
 based on RowSetMetaData
        </para>
      </sect3>
      <sect3 xreflabel="Method setMetaData(javax.sql.RowSetMetaData)">
        <title>Method setMetaData(RowSetMetaData)</title>
        <indexterm>
          <primary>setMetaData</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMetaData</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMetaData</emphasis>(javax.sql.RowSetMetaData <emphasis>md</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>md</literal>
                    </emphasis> - a metadata object</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the rowset's metadata.
        </para>
      </sect3>
      <sect3 xreflabel="Method setOriginal()">
        <title>Method setOriginal()</title>
        <indexterm>
          <primary>setOriginal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setOriginal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setOriginal</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Marks all rows in this rowset as being original rows. Any updates made
 to the rows become the original values for the rowset.
 Calls to the method setOriginal cannot be reversed.
        </para>
      </sect3>
      <sect3 xreflabel="Method setOriginalRow()">
        <title>Method setOriginalRow()</title>
        <indexterm>
          <primary>setOriginalRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setOriginalRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setOriginalRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Marks the current row in this rowset as being an original row.
 The row is no longer marked as inserted, deleted, or updated,
 and its values become the original values.
 A call to setOriginalRow cannot be reversed.
        </para>
      </sect3>
      <sect3 xreflabel="Method setShowDeleted(boolean)">
        <title>Method setShowDeleted(boolean)</title>
        <indexterm>
          <primary>setShowDeleted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setShowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setShowDeleted</emphasis>(boolean <emphasis>value</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>value</literal>
                    </emphasis> - true if deleted rows should be shown, false otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the show deleted property.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTableName(java.lang.String)">
        <title>Method setTableName(String)</title>
        <indexterm>
          <primary>setTableName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTableName</emphasis>(java.lang.String <emphasis>_tableName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>_tabName</literal>
                    </emphasis> - - a String object that identifies the table from which
 this OPLCachedRowSet object was derived</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the identifier for the table from which this rowset was derived
 to the given table name.
 Note: You don't usually need to set a table name, because the OPLCachedRowSet tries
 to determine the table name from your SQL query command.
        </para>
      </sect3>
      <sect3 xreflabel="Method size()">
        <title>Method size()</title>
        <indexterm>
          <primary>size</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>size</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">size</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the number of rows in this OPLCachedRowSet object.
        </para>
      </sect3>
      <sect3 xreflabel="Method toCollection()">
        <title>Method toCollection()</title>
        <indexterm>
          <primary>toCollection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>toCollection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Collection <emphasis role="strong">toCollection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Convert the rowset to a collection of tables. Each tables represents
 a row of the original rowset. The tables are keyed by column number.
 A copy of the rowset's contents is made.
        </para>
      </sect3>
      <sect3 xreflabel="Method toCollection(int)">
        <title>Method toCollection(int)</title>
        <indexterm>
          <primary>toCollection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>toCollection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Collection <emphasis role="strong">toCollection</emphasis>(int <emphasis>col</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return a column of the rowset as a collection. Makes a copy of the
 column's data.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateArray(int, java.sql.Array)">
        <title>Method updateArray(int, Array)</title>
        <indexterm>
          <primary>updateArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateArray(java.lang.String, java.sql.Array)">
        <title>Method updateArray(String, Array)</title>
        <indexterm>
          <primary>updateArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                  java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateAsciiStream(int, java.io.InputStream, int)">
        <title>Method updateAsciiStream(int, InputStream, int)</title>
        <indexterm>
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the length of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateAsciiStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateAsciiStream(String, InputStream, int)</title>
        <indexterm>
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBigDecimal(int, java.math.BigDecimal)">
        <title>Method updateBigDecimal(int, BigDecimal)</title>
        <indexterm>
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBigDecimal(java.lang.String, java.math.BigDecimal)">
        <title>Method updateBigDecimal(String, BigDecimal)</title>
        <indexterm>
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                       java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBinaryStream(int, java.io.InputStream, int)">
        <title>Method updateBinaryStream(int, InputStream, int)</title>
        <indexterm>
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the length of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBinaryStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateBinaryStream(String, InputStream, int)</title>
        <indexterm>
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, 
                                         int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBlob(int, java.sql.Blob)">
        <title>Method updateBlob(int, Blob)</title>
        <indexterm>
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBlob(java.lang.String, java.sql.Blob)">
        <title>Method updateBlob(String, Blob)</title>
        <indexterm>
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBoolean(int, boolean)">
        <title>Method updateBoolean(int, boolean)</title>
        <indexterm>
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBoolean(java.lang.String, boolean)">
        <title>Method updateBoolean(String, boolean)</title>
        <indexterm>
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateByte(int, byte)">
        <title>Method updateByte(int, byte)</title>
        <indexterm>
          <primary>updateByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateByte(java.lang.String, byte)">
        <title>Method updateByte(String, byte)</title>
        <indexterm>
          <primary>updateByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBytes(int, byte[])">
        <title>Method updateBytes(int, byte[])</title>
        <indexterm>
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBytes(java.lang.String, byte[])">
        <title>Method updateBytes(String, byte[])</title>
        <indexterm>
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateCharacterStream(int, java.io.Reader, int)">
        <title>Method updateCharacterStream(int, Reader, int)</title>
        <indexterm>
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the length of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateCharacterStream(java.lang.String, java.io.Reader, int)">
        <title>Method updateCharacterStream(String, Reader, int)</title>
        <indexterm>
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                            java.io.Reader <emphasis>reader</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateClob(int, java.sql.Clob)">
        <title>Method updateClob(int, Clob)</title>
        <indexterm>
          <primary>updateClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateClob(java.lang.String, java.sql.Clob)">
        <title>Method updateClob(String, Clob)</title>
        <indexterm>
          <primary>updateClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDate(int, java.sql.Date)">
        <title>Method updateDate(int, Date)</title>
        <indexterm>
          <primary>updateDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDate(java.lang.String, java.sql.Date)">
        <title>Method updateDate(String, Date)</title>
        <indexterm>
          <primary>updateDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDouble(int, double)">
        <title>Method updateDouble(int, double)</title>
        <indexterm>
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDouble(java.lang.String, double)">
        <title>Method updateDouble(String, double)</title>
        <indexterm>
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateFloat(int, float)">
        <title>Method updateFloat(int, float)</title>
        <indexterm>
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateFloat(java.lang.String, float)">
        <title>Method updateFloat(String, float)</title>
        <indexterm>
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateInt(int, int)">
        <title>Method updateInt(int, int)</title>
        <indexterm>
          <primary>updateInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateInt(java.lang.String, int)">
        <title>Method updateInt(String, int)</title>
        <indexterm>
          <primary>updateInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateLong(int, long)">
        <title>Method updateLong(int, long)</title>
        <indexterm>
          <primary>updateLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateLong(java.lang.String, long)">
        <title>Method updateLong(String, long)</title>
        <indexterm>
          <primary>updateLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateNull(int)">
        <title>Method updateNull(int)</title>
        <indexterm>
          <primary>updateNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give a nullable column a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateNull(java.lang.String)">
        <title>Method updateNull(String)</title>
        <indexterm>
          <primary>updateNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(int, java.lang.Object)">
        <title>Method updateObject(int, Object)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(int, java.lang.Object, int)">
        <title>Method updateObject(int, Object, int)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                   int <emphasis>scale</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(java.lang.String, java.lang.Object)">
        <title>Method updateObject(String, Object)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(java.lang.String, java.lang.Object, int)">
        <title>Method updateObject(String, Object, int)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateRef(int, java.sql.Ref)">
        <title>Method updateRef(int, Ref)</title>
        <indexterm>
          <primary>updateRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateRef(java.lang.String, java.sql.Ref)">
        <title>Method updateRef(String, Ref)</title>
        <indexterm>
          <primary>updateRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateRow()">
        <title>Method updateRow()</title>
        <indexterm>
          <primary>updateRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 if called when on the insert row</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Marks the current row of this rowset as updated but it does not update 
 the row to the underlying data source. The method acceptChanges must 
 be called to update the row to the data source.
 It notifies listeners that the row has changed also. 
 Cannot be called when on the insert row.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateShort(int, short)">
        <title>Method updateShort(int, short)</title>
        <indexterm>
          <primary>updateShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateShort(java.lang.String, short)">
        <title>Method updateShort(String, short)</title>
        <indexterm>
          <primary>updateShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateString(int, java.lang.String)">
        <title>Method updateString(int, String)</title>
        <indexterm>
          <primary>updateString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateString(java.lang.String, java.lang.String)">
        <title>Method updateString(String, String)</title>
        <indexterm>
          <primary>updateString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTime(int, java.sql.Time)">
        <title>Method updateTime(int, Time)</title>
        <indexterm>
          <primary>updateTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTime(java.lang.String, java.sql.Time)">
        <title>Method updateTime(String, Time)</title>
        <indexterm>
          <primary>updateTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTimestamp(int, java.sql.Timestamp)">
        <title>Method updateTimestamp(int, Timestamp)</title>
        <indexterm>
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTimestamp(java.lang.String, java.sql.Timestamp)">
        <title>Method updateTimestamp(String, Timestamp)</title>
        <indexterm>
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                      java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method wasNull()">
        <title>Method wasNull()</title>
        <indexterm>
          <primary>wasNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>wasNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column may have the value of SQL NULL; wasNull reports whether
 the last column read had this special value.
 Note that you must first call getXXX on a column to try to read
 its value and then call wasNull() to find if the value was
 the SQL NULL.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLConnectionPoolDataSource">
    <title>Class OPLConnectionPoolDataSource</title>
    <indexterm>
      <primary>OPLConnectionPoolDataSource</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLConnectionPoolDataSource</secondary>
    </indexterm>
    <para>
A ConnectionPoolDataSource object is a factory for PooledConnection objects.
 An object that implements this interface will typically be registered with
 a JNDI service.
    </para>
    <sect2 id="x1synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLConnectionPoolDataSource</emphasis> extends OPLDataSource implements ConnectionPoolDataSource,ConnectionEventListener {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLConnectionPoolDataSource</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public OPLPoolStatistic <emphasis role="strong">get_statistics</emphasis>();
  public OPLPoolStatistic[] <emphasis role="strong">getAll_statistics</emphasis>();
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">connectionClosed</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
  public void <emphasis role="strong">connectionErrorOccurred</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
  public Reference <emphasis role="strong">getReference</emphasis>() throws javax.naming.NamingException;
  public void <emphasis role="strong">fill</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                  java.lang.String <emphasis>password</emphasis>) 
      throws java.sql.SQLException;
  public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>() throws java.sql.SQLException;
  public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>(java.lang.String <emphasis>_user</emphasis>, 
                                              java.lang.String <emphasis>_password</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getMinPoolSize</emphasis>();
  public void <emphasis role="strong">setMinPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxPoolSize</emphasis>();
  public void <emphasis role="strong">setMaxPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getInitialPoolSize</emphasis>();
  public void <emphasis role="strong">setInitialPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getMaxIdleTime</emphasis>();
  public void <emphasis role="strong">setMaxIdleTime</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getPropertyCycle</emphasis>();
  public void <emphasis role="strong">setPropertyCycle</emphasis>(int <emphasis>parm</emphasis>);
  public int <emphasis role="strong">getMaxStatements</emphasis>();
  public void <emphasis role="strong">setMaxStatements</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLDataSource</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLConnectionPoolDataSource</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x1members">
      <title>Members</title>
      <sect3 xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm>
          <primary>close</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Physically close all the pooled connections in the cache and free all
 the resources
        </para>
      </sect3>
      <sect3 xreflabel="Method connectionClosed(javax.sql.ConnectionEvent)">
        <title>Method connectionClosed(ConnectionEvent)</title>
        <indexterm>
          <primary>connectionClosed</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>connectionClosed</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">connectionClosed</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>event</literal>
                    </emphasis> - an event object describing the source of the event</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Invoked when the application calls close() on its representation of
 the connection.
        </para>
      </sect3>
      <sect3 xreflabel="Method connectionErrorOccurred(javax.sql.ConnectionEvent)">
        <title>Method connectionErrorOccurred(ConnectionEvent)</title>
        <indexterm>
          <primary>connectionErrorOccurred</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>connectionErrorOccurred</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">connectionErrorOccurred</emphasis>(javax.sql.ConnectionEvent <emphasis>event</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>event</literal>
                    </emphasis> - an event object describing the source of the event</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Invoked when a fatal connection error occurs, just before an SQLException
 is thrown to the application.
        </para>
      </sect3>
      <sect3 xreflabel="Method fill()">
        <title>Method fill()</title>
        <indexterm>
          <primary>fill</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>fill</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">fill</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Fills the cache with PooledConnections for later use.
 Ignored if the MinPoolSize is 0.
 It is usually called when the OPLConnectionPoolDataSource is created
 via JNDI calls.
        </para>
      </sect3>
      <sect3 xreflabel="Method get_statistics()">
        <title>Method get_statistics()</title>
        <indexterm>
          <primary>get_statistics</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>get_statistics</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public OPLPoolStatistic <emphasis role="strong">get_statistics</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Return the cache statistics for the OPLConnectionPoolDataSource
        </para>
      </sect3>
      <sect3 xreflabel="Method getAll_statistics()">
        <title>Method getAll_statistics()</title>
        <indexterm>
          <primary>getAll_statistics</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getAll_statistics</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public OPLPoolStatistic[] <emphasis role="strong">getAll_statistics</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Return an array of the cache statistics for the all created OPLConnectionPoolDataSources
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to get a database connection from the pool or
 to establish a database connection .
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection(java.lang.String, java.lang.String)">
        <title>Method getConnection(String, String)</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                          java.lang.String <emphasis>password</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>user</literal>
                    </emphasis> - the database user on whose behalf the Connection is being made</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>password</literal>
                    </emphasis> - the user's password</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Connection to the database</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to get a database connection from the pool or
 to establish a database connection .
        </para>
      </sect3>
      <sect3 xreflabel="Method getInitialPoolSize()">
        <title>Method getInitialPoolSize()</title>
        <indexterm>
          <primary>getInitialPoolSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getInitialPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInitialPoolSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the number of physical connections the pool
 will contain when it is created
        </para>
      </sect3>
      <sect3 xreflabel="Method getMaxIdleTime()">
        <title>Method getMaxIdleTime()</title>
        <indexterm>
          <primary>getMaxIdleTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMaxIdleTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxIdleTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the number of seconds that a physical connection
 will remain unused in the pool before the
 connection is closed. Zero ( 0 ) indicates no limit.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMaxPoolSize()">
        <title>Method getMaxPoolSize()</title>
        <indexterm>
          <primary>getMaxPoolSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMaxPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxPoolSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the maximum number of physical connections
 the pool will be able contain. Zero ( 0 ) indicates no maximum size.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMaxStatements()">
        <title>Method getMaxStatements()</title>
        <indexterm>
          <primary>getMaxStatements</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMaxStatements</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMaxStatements</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the total number of statements that the pool will
 keep open. Zero ( 0 ) indicates that caching of
 statements is disabled.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMinPoolSize()">
        <title>Method getMinPoolSize()</title>
        <indexterm>
          <primary>getMinPoolSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMinPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMinPoolSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the minimum number of physical connections
 the pool will keep available at all times. Zero ( 0 ) indicates that
 connections will be created as needed.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPooledConnection()">
        <title>Method getPooledConnection()</title>
        <indexterm>
          <primary>getPooledConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPooledConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>() throws 
            java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempts to establish a physical database connection that can
 be used as a pooled connection.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPooledConnection(java.lang.String, java.lang.String)">
        <title>Method getPooledConnection(String, String)</title>
        <indexterm>
          <primary>getPooledConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPooledConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public PooledConnection <emphasis role="strong">getPooledConnection</emphasis>(java.lang.String <emphasis>_user</emphasis>, 
                                                      java.lang.String <emphasis>_password</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>user</literal>
                    </emphasis> - the database user on whose behalf the Connection is being made</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>password</literal>
                    </emphasis> - the user's password</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a PooledConnection to the database</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempts to establish a physical database connection that can
 be used as a pooled connection.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPropertyCycle()">
        <title>Method getPropertyCycle()</title>
        <indexterm>
          <primary>getPropertyCycle</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPropertyCycle</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getPropertyCycle</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the interval, in seconds, that the pool will wait
 before enforcing the current policy defined by the
 values of the above connection pool properties
        </para>
      </sect3>
      <sect3 xreflabel="Method setInitialPoolSize(int)">
        <title>Method setInitialPoolSize(int)</title>
        <indexterm>
          <primary>setInitialPoolSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setInitialPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setInitialPoolSize</emphasis>(int <emphasis>parm</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - a number of physical connections</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of physical connections the pool
 should contain when it is created
        </para>
      </sect3>
      <sect3 xreflabel="Method setMaxIdleTime(int)">
        <title>Method setMaxIdleTime(int)</title>
        <indexterm>
          <primary>setMaxIdleTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMaxIdleTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxIdleTime</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - a number of seconds</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of seconds that a physical connection
 should remain unused in the pool before the
 connection is closed. Zero ( 0 ) indicates no limit.
        </para>
      </sect3>
      <sect3 xreflabel="Method setMaxPoolSize(int)">
        <title>Method setMaxPoolSize(int)</title>
        <indexterm>
          <primary>setMaxPoolSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMaxPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - a maximum number of physical connections</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the maximum number of physical conections that the pool should contain.
 Zero ( 0 ) indicates no maximum size.
 The default value is 0 .
        </para>
      </sect3>
      <sect3 xreflabel="Method setMaxStatements(int)">
        <title>Method setMaxStatements(int)</title>
        <indexterm>
          <primary>setMaxStatements</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMaxStatements</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMaxStatements</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - a total number of statements</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the total number of statements that the pool should
 keep open. Zero ( 0 ) indicates that caching of
 statements is disabled.
        </para>
      </sect3>
      <sect3 xreflabel="Method setMinPoolSize(int)">
        <title>Method setMinPoolSize(int)</title>
        <indexterm>
          <primary>setMinPoolSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setMinPoolSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setMinPoolSize</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - a minimum number of physical connections</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of physical connections the pool should keep available
 at all times. Zero ( 0 ) indicates that connections should be created
 as needed
 The default value is 0 .
        </para>
      </sect3>
      <sect3 xreflabel="Method setPropertyCycle(int)">
        <title>Method setPropertyCycle(int)</title>
        <indexterm>
          <primary>setPropertyCycle</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setPropertyCycle</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPropertyCycle</emphasis>(int <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - an interval (in seconds)</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the interval, in seconds, that the pool should wait
 before enforcing the current policy defined by the
 values of the above connection pool properties
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLDataSource">
    <title>Class OPLDataSource</title>
    <indexterm>
      <primary>OPLDataSource</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLDataSource</secondary>
    </indexterm>
    <para>
A DataSource object is a factory for Connection objects.
 An object that implements the DataSource interface will typically
 be registered with a JNDI service provider. A JDBC driver that is
 accessed via the DataSource API does not automatically register
 itself with the DriverManager.
    </para>
    <sect2 id="x2synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLDataSource</emphasis> implements DataSource,Serializable,Referenceable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLDataSource</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public Reference <emphasis role="strong">getReference</emphasis>() throws javax.naming.NamingException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                  java.lang.String <emphasis>password</emphasis>) 
      throws java.sql.SQLException;
  public PrintWriter <emphasis role="strong">getLogWriter</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setLogWriter</emphasis>(java.io.PrintWriter <emphasis>parm</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getLoginTimeout</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">setLoginTimeout</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getDataSourceName</emphasis>();
  public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getDescription</emphasis>();
  public void <emphasis role="strong">setDescription</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public int <emphasis role="strong">getPortNumber</emphasis>();
  public void <emphasis role="strong">setPortNumber</emphasis>(int <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getServerName</emphasis>();
  public void <emphasis role="strong">setServerName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getDatabaseName</emphasis>();
  public void <emphasis role="strong">setDatabaseName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getUser</emphasis>();
  public void <emphasis role="strong">setUser</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getPassword</emphasis>();
  public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getSVT</emphasis>();
  public void <emphasis role="strong">setSVT</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getReadOnly</emphasis>();
  public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getDbOptions</emphasis>();
  public void <emphasis role="strong">setDbOptions</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getFBS</emphasis>();
  public void <emphasis role="strong">setFBS</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getCharSet</emphasis>();
  public void <emphasis role="strong">setCharSet</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getCursorModel</emphasis>();
  public void <emphasis role="strong">setCursorModel</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getConcurrencyType</emphasis>();
  public void <emphasis role="strong">setConcurrencyType</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getEncrypted</emphasis>();
  public void <emphasis role="strong">setEncrypted</emphasis>(boolean <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getDeferLongFetch</emphasis>();
  public void <emphasis role="strong">setDeferLongFetch</emphasis>(boolean <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getApplication</emphasis>();
  public void <emphasis role="strong">setApplication</emphasis>(java.lang.String <emphasis>parm</emphasis>);
  public boolean <emphasis role="strong">getUnicode</emphasis>();
  public void <emphasis role="strong">setUnicode</emphasis>(boolean <emphasis>parm</emphasis>);
  public String <emphasis role="strong">getURL</emphasis>();
  public void <emphasis role="strong">setURL</emphasis>(java.lang.String <emphasis>parm</emphasis>);
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLDataSource</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x2members">
      <title>Members</title>
      <sect3 xreflabel="Method getApplication()">
        <title>Method getApplication()</title>
        <indexterm>
          <primary>getApplication</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getApplication</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getApplication</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the Application name set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCharSet()">
        <title>Method getCharSet()</title>
        <indexterm>
          <primary>getCharSet</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCharSet</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCharSet</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the charset of remote database set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConcurrencyType()">
        <title>Method getConcurrencyType()</title>
        <indexterm>
          <primary>getConcurrencyType</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConcurrencyType</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getConcurrencyType</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the default Concurrency Type for scrollable ResultSets
 set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to establish a database connection.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection(java.lang.String, java.lang.String)">
        <title>Method getConnection(String, String)</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                          java.lang.String <emphasis>password</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>user</literal>
                    </emphasis> - the database user on whose behalf the Connection is being made</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>password</literal>
                    </emphasis> - the user's password</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Connection to the database</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempt to establish a database connection.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCursorModel()">
        <title>Method getCursorModel()</title>
        <indexterm>
          <primary>getCursorModel</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCursorModel</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCursorModel</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the default Cursor Model for scrollable ResultSets
 set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDatabaseName()">
        <title>Method getDatabaseName()</title>
        <indexterm>
          <primary>getDatabaseName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDatabaseName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDatabaseName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the name of the database set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDataSourceName()">
        <title>Method getDataSourceName()</title>
        <indexterm>
          <primary>getDataSourceName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDataSourceName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the datasource name for this instance if set.
 The default value is "OPLDataSourceName"
        </para>
      </sect3>
      <sect3 xreflabel="Method getDbOptions()">
        <title>Method getDbOptions()</title>
        <indexterm>
          <primary>getDbOptions</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDbOptions</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDbOptions</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the Database Options set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDeferLongFetch()">
        <title>Method getDeferLongFetch()</title>
        <indexterm>
          <primary>getDeferLongFetch</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDeferLongFetch</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getDeferLongFetch</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get if the DataSource instance uses the deferLongFetch for long data.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDescription()">
        <title>Method getDescription()</title>
        <indexterm>
          <primary>getDescription</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDescription</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getDescription</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the description of this data source.
        </para>
      </sect3>
      <sect3 xreflabel="Method getEncrypted()">
        <title>Method getEncrypted()</title>
        <indexterm>
          <primary>getEncrypted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getEncrypted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getEncrypted</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get if the outgoing packets are encrypted for this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFBS()">
        <title>Method getFBS()</title>
        <indexterm>
          <primary>getFBS</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFBS</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getFBS</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the Fetch Buffer Size set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getLoginTimeout()">
        <title>Method getLoginTimeout()</title>
        <indexterm>
          <primary>getLoginTimeout</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getLoginTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getLoginTimeout</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the maximum time in seconds that this data source can wait while
 attempting to connect to a database. A value of zero means that the timeout
 is the default system timeout if there is one; otherwise it means that
 there is no timeout. When a DataSource object is created the login timeout
 is initially zero.
        </para>
      </sect3>
      <sect3 xreflabel="Method getLogWriter()">
        <title>Method getLogWriter()</title>
        <indexterm>
          <primary>getLogWriter</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getLogWriter</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public PrintWriter <emphasis role="strong">getLogWriter</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The log writer is a character output stream to which all logging and
 tracing messages for this data source object instance will be printed.
 This includes messages printed by the methods of this object, messages
 printed by methods of other objects manufactured by this object, and so on.
 Messages printed to a data source specific log writer are not printed
 to the log writer associated with the java.sql.Drivermanager class.
 When a DataSource object is created the log writer is initially null,
 in other words, logging is disabled.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPassword()">
        <title>Method getPassword()</title>
        <indexterm>
          <primary>getPassword</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getPassword</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the password set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPortNumber()">
        <title>Method getPortNumber()</title>
        <indexterm>
          <primary>getPortNumber</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPortNumber</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getPortNumber</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the port number on which oplrqb is listening for requests.
 The default value is 5000
        </para>
      </sect3>
      <sect3 xreflabel="Method getReadOnly()">
        <title>Method getReadOnly()</title>
        <indexterm>
          <primary>getReadOnly</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getReadOnly</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the ReadOnly attribute set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getServerName()">
        <title>Method getServerName()</title>
        <indexterm>
          <primary>getServerName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getServerName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getServerName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the name of the host on which oplrqb is running.
 The default value is "localhost"
        </para>
      </sect3>
      <sect3 xreflabel="Method getSVT()">
        <title>Method getSVT()</title>
        <indexterm>
          <primary>getSVT</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getSVT</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getSVT</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the ServerType set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUnicode()">
        <title>Method getUnicode()</title>
        <indexterm>
          <primary>getUnicode</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUnicode</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getUnicode</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get if the DataSource instance uses the Unicode connection with a DBMS agent.
        </para>
      </sect3>
      <sect3 xreflabel="Method getURL()">
        <title>Method getURL()</title>
        <indexterm>
          <primary>getURL</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getURL</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the URL for this Datasource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUser()">
        <title>Method getUser()</title>
        <indexterm>
          <primary>getUser</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUser</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getUser</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the user name set on this DataSource instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method setApplication(java.lang.String)">
        <title>Method setApplication(String)</title>
        <indexterm>
          <primary>setApplication</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setApplication</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setApplication</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - Application name to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Application name with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCharSet(java.lang.String)">
        <title>Method setCharSet(String)</title>
        <indexterm>
          <primary>setCharSet</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCharSet</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCharSet</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - CharSet to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the charset of remote database with which connections have to be obtained.
 The default value is get from 
          <literal>System.getProperty("fil...</literal>
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setConcurrencyType(java.lang.String)">
        <title>Method setConcurrencyType(String)</title>
        <indexterm>
          <primary>setConcurrencyType</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setConcurrencyType</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setConcurrencyType</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - Concurrency Type to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the default Concurrency Type for scrollable ResultSets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCursorModel(java.lang.String)">
        <title>Method setCursorModel(String)</title>
        <indexterm>
          <primary>setCursorModel</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCursorModel</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCursorModel</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - CursorModel to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the default Cursor Model for scrollable ResultSets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDatabaseName(java.lang.String)">
        <title>Method setDatabaseName(String)</title>
        <indexterm>
          <primary>setDatabaseName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDatabaseName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDatabaseName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - database name to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the name of a particular database on a server.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDataSourceName(java.lang.String)">
        <title>Method setDataSourceName(String)</title>
        <indexterm>
          <primary>setDataSourceName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDataSourceName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDataSourceName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - DataSource name to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the DataSource name. The default value is "OPLDataSourceName"
        </para>
      </sect3>
      <sect3 xreflabel="Method setDbOptions(java.lang.String)">
        <title>Method setDbOptions(String)</title>
        <indexterm>
          <primary>setDbOptions</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDbOptions</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDbOptions</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - Database Options to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Database Options with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDeferLongFetch(boolean)">
        <title>Method setDeferLongFetch(boolean)</title>
        <indexterm>
          <primary>setDeferLongFetch</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDeferLongFetch</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDeferLongFetch</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - true for a DeferLongFetch connection</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the DeferLongFetch attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setDescription(java.lang.String)">
        <title>Method setDescription(String)</title>
        <indexterm>
          <primary>setDescription</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setDescription</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setDescription</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - Description to be set.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the description for this data source instance.
        </para>
      </sect3>
      <sect3 xreflabel="Method setEncrypted(boolean)">
        <title>Method setEncrypted(boolean)</title>
        <indexterm>
          <primary>setEncrypted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setEncrypted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setEncrypted</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - true if outgoing packets must be encrypted</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Encrypted flag for outgoing packets
 with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setFBS(java.lang.String)">
        <title>Method setFBS(String)</title>
        <indexterm>
          <primary>setFBS</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setFBS</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setFBS</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - FetchBufferSize to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets number of JDBC resultset rows that get packed
 into a single network packet
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setLoginTimeout(int)">
        <title>Method setLoginTimeout(int)</title>
        <indexterm>
          <primary>setLoginTimeout</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setLoginTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setLoginTimeout</emphasis>(int <emphasis>parm</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - the data source login time limit (in seconds)</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Sets the maximum time in seconds that this data source will wait while
 attempting to connect to a database. A value of zero specifies that
 the timeout is the default system timeout if there is one; otherwise
 it specifies that there is no timeout. When a DataSource object
 is created the login timeout is initially zero.
        </para>
      </sect3>
      <sect3 xreflabel="Method setLogWriter(java.io.PrintWriter)">
        <title>Method setLogWriter(PrintWriter)</title>
        <indexterm>
          <primary>setLogWriter</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setLogWriter</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setLogWriter</emphasis>(java.io.PrintWriter <emphasis>parm</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - the new log writer; to disable, set to null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The log writer is a character output stream to which all logging and
 tracing messages for this data source object instance will be printed.
 This includes messages printed by the methods of this object, messages
 printed by methods of other objects manufactured by this object, and so on.
 Messages printed to a data source specific log writer are not printed
 to the log writer associated with the java.sql.Drivermanager class.
 When a DataSource object is created the log writer is initially null, in
 other words, logging is disabled.
        </para>
      </sect3>
      <sect3 xreflabel="Method setPassword(java.lang.String)">
        <title>Method setPassword(String)</title>
        <indexterm>
          <primary>setPassword</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setPassword</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPassword</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - password to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the password with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setPortNumber(int)">
        <title>Method setPortNumber(int)</title>
        <indexterm>
          <primary>setPortNumber</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setPortNumber</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPortNumber</emphasis>(int <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - port number on which oplrqb is listening</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the port number where the oplrqb is listening for requests.
 The default value is 5000 . Will be overwritten with value from URL,
 if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setReadOnly(boolean)">
        <title>Method setReadOnly(boolean)</title>
        <indexterm>
          <primary>setReadOnly</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setReadOnly</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - true for a readOnly connection</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the ReadOnly attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setServerName(java.lang.String)">
        <title>Method setServerName(String)</title>
        <indexterm>
          <primary>setServerName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setServerName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setServerName</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - name of the host on which oplrqb is running</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the name of the host where the oplrqb is running.
 The default value is "localhost" . Will be overwritten with value from URL,
 if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setSVT(java.lang.String)">
        <title>Method setSVT(String)</title>
        <indexterm>
          <primary>setSVT</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setSVT</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSVT</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - ServerType to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the ServerType with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setUnicode(boolean)">
        <title>Method setUnicode(boolean)</title>
        <indexterm>
          <primary>setUnicode</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setUnicode</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUnicode</emphasis>(boolean <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - true for a Unicode connection</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the Unicode attribute with which connections have to be obtained.
 The default value is false .
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
      <sect3 xreflabel="Method setURL(java.lang.String)">
        <title>Method setURL(String)</title>
        <indexterm>
          <primary>setURL</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setURL</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - URL to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the URL with which connections have to be obtained.
        </para>
      </sect3>
      <sect3 xreflabel="Method setUser(java.lang.String)">
        <title>Method setUser(String)</title>
        <indexterm>
          <primary>setUser</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setUser</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setUser</emphasis>(java.lang.String <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - username to be set</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the user name with which connections have to be obtained.
 Will be overwritten with value from URL, if URL is set.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLDataSourceFactory">
    <title>Class OPLDataSourceFactory</title>
    <indexterm>
      <primary>OPLDataSourceFactory</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLDataSourceFactory</secondary>
    </indexterm>
    <sect2 id="x3synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLDataSourceFactory</emphasis> implements ObjectFactory {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLDataSourceFactory</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public Object <emphasis role="strong">getObjectInstance</emphasis>(java.lang.Object <emphasis>obj</emphasis>, javax.naming.Name <emphasis>name</emphasis>, 
                                  javax.naming.Context <emphasis>nameCtx</emphasis>, 
                                  java.util.Hashtable <emphasis>environment</emphasis>) 
      throws java.lang.Exception;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLDataSourceFactory</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLJdbcRowSet">
    <title>Class OPLJdbcRowSet</title>
    <indexterm>
      <primary>OPLJdbcRowSet</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLJdbcRowSet</secondary>
    </indexterm>
    <para>
A OPLJdbcRowSet is a connected rowset. The purpose of the
OPLJdbcRowSet class is to act like a JavaBean at design time and provide
a thin layer that wraps around a JDBC ResultSet at runtime. 
    </para>
    <para>
When execute() is called a OPLJdbcRowSet object opens a JDBC connection
internally which remains open until close() is called, unless a Connection
is passed to execute() explicitly, in which case that Connection is used
instead. ResultSet operations such as cursor movement, updating, etc. are
simply delegated to an underlying JDBC ResultSet object which is maintained
internally.
    </para>
    <sect2 id="x4synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLJdbcRowSet</emphasis> extends BaseRowSet  {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLJdbcRowSet</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
  public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
  public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
  public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
  public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
      throws java.sql.SQLException;
  public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                 int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                    int <emphasis>length</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                               java.math.BigDecimal <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.String <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.sql.Timestamp <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                 java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                    java.io.Reader <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                           int <emphasis>scale</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
  public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
      throws java.sql.SQLException;
  public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                java.util.Calendar <emphasis>cal</emphasis>) 
      throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
  public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
      throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.BaseRowSet</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLJdbcRowSet</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x4members">
      <title>Members</title>
      <sect3 xreflabel="Method absolute(int)">
        <title>Method absolute(int)</title>
        <indexterm>
          <primary>absolute</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>absolute</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">absolute</emphasis>(int <emphasis>row</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 row is 0, or result set type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to an absolute row number in the result set. 
        </para>
        <para>
If row is positive, moves to an absolute row with respect to the
 beginning of the result set. The first row is row 1, the second
 is row 2, etc. 
        </para>
        <para>
If row is negative, moves to an absolute row position with respect to
 the end of result set. For example, calling absolute(-1) positions the
 cursor on the last row, absolute(-2) indicates the next-to-last
 row, etc. 
        </para>
        <para>
An attempt to position the cursor beyond the first/last row in
 the result set, leaves the cursor before/after the first/last
 row, respectively. 
        </para>
        <para>
Note: Calling absolute(1) is the same as calling first().
 Calling absolute(-1) is the same as calling last().
        </para>
      </sect3>
      <sect3 xreflabel="Method afterLast()">
        <title>Method afterLast()</title>
        <indexterm>
          <primary>afterLast</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>afterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">afterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the end of the result set, just after the last
 row. Has no effect if the result set contains no rows.
        </para>
      </sect3>
      <sect3 xreflabel="Method beforeFirst()">
        <title>Method beforeFirst()</title>
        <indexterm>
          <primary>beforeFirst</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>beforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">beforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the front of the result set, just before the
 first row. Has no effect if the result set contains no rows.
        </para>
      </sect3>
      <sect3 xreflabel="Method cancelRowUpdates()">
        <title>Method cancelRowUpdates()</title>
        <indexterm>
          <primary>cancelRowUpdates</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>cancelRowUpdates</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">cancelRowUpdates</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The cancelRowUpdates() method may be called after calling an
 updateXXX() method(s) and before calling updateRow() to rollback
 the updates made to a row. If no updates have been made or
 updateRow() has already been called, then this method has no
 effect.
        </para>
      </sect3>
      <sect3 xreflabel="Method clearWarnings()">
        <title>Method clearWarnings()</title>
        <indexterm>
          <primary>clearWarnings</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>clearWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">clearWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
After this call getWarnings returns null until a new warning is
 reported for this ResultSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm>
          <primary>close</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
In some cases, it is desirable to immediately release a
 ResultSet's database and JDBC resources instead of waiting for
 this to happen when it is automatically closed; the close
 method provides this immediate release. 
        </para>
        <para>
          <emphasis>Note:</emphasis> A ResultSet is automatically closed by the
 Statement that generated it when that Statement is closed,
 re-executed, or is used to retrieve the next result from a
 sequence of multiple results. A ResultSet is also automatically
 closed when it is garbage collected.
        </para>
      </sect3>
      <sect3 xreflabel="Method deleteRow()">
        <title>Method deleteRow()</title>
        <indexterm>
          <primary>deleteRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>deleteRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">deleteRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Delete the current row from the result set and the underlying
 database. Cannot be called when on the insert row.
        </para>
      </sect3>
      <sect3 xreflabel="Method execute()">
        <title>Method execute()</title>
        <indexterm>
          <primary>execute</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates the rowset with data.
 Execute() may use the following properties: url, data source name,
 user name, password, transaction isolation, and type map to create a
 connection for reading data.
 Execute may use the following properties to create a statement
 to execute a command: command, read only, maximum field size,
 maximum rows, escape processing, and query timeout.
 If the required properties have not been set, an exception is
 thrown. If successful, the current contents of the rowset are
 discarded and the rowset's metadata is also (re)set. If there are
 outstanding updates, they are ignored.
        </para>
      </sect3>
      <sect3 xreflabel="Method execute(java.sql.Connection)">
        <title>Method execute(Connection)</title>
        <indexterm>
          <primary>execute</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>execute</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">execute</emphasis>(java.sql.Connection <emphasis>_conn</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>_conn</literal>
                    </emphasis> - a Connection to use</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Populates the rowset with data. Uses an existing JDBC connection object.
 The values of the url/data source name, user, and password
 properties are ignored. The command specified by the command property
 is executed to retrieve
 the data. The current contents of the rowset are discarded and the
 rowset's metadata is also (re)set. If there are outstanding updates,
 they are also ignored.
        </para>
      </sect3>
      <sect3 xreflabel="Method findColumn(java.lang.String)">
        <title>Method findColumn(String)</title>
        <indexterm>
          <primary>findColumn</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>findColumn</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">findColumn</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column index</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Map a Resultset column name to a ResultSet column index.
        </para>
      </sect3>
      <sect3 xreflabel="Method first()">
        <title>Method first()</title>
        <indexterm>
          <primary>first</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>first</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">first</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the first row in the result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method getArray(int)">
        <title>Method getArray(int)</title>
        <indexterm>
          <primary>getArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing an SQL array</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getArray(java.lang.String)">
        <title>Method getArray(String)</title>
        <indexterm>
          <primary>getArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Array <emphasis role="strong">getArray</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing an SQL array</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get an array column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getAsciiStream(int)">
        <title>Method getAsciiStream(int)</title>
        <indexterm>
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect3>
      <sect3 xreflabel="Method getAsciiStream(java.lang.String)">
        <title>Method getAsciiStream(String)</title>
        <indexterm>
          <primary>getAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of one byte ASCII characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of ASCII characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into ASCII. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(int)">
        <title>Method getBigDecimal(int)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value (full precision); if the value is SQL NULL,
 the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(int, int)">
        <title>Method getBigDecimal(int, int)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - the number of digits to the right of the decimal</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(java.lang.String)">
        <title>Method getBigDecimal(String)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBigDecimal(java.lang.String, int)">
        <title>Method getBigDecimal(String, int)</title>
        <indexterm>
          <primary>getBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public BigDecimal <emphasis role="strong">getBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                          int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - the number of digits to the right of the decimal</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
Get the value of a column in the current row as a java.math.BigDecimal
 object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBinaryStream(int)">
        <title>Method getBinaryStream(int)</title>
        <indexterm>
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBinaryStream(java.lang.String)">
        <title>Method getBinaryStream(String)</title>
        <indexterm>
          <primary>getBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of uninterpreted bytes. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column value can be retrieved as a stream of uninterpreted bytes
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARBINARY values. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBlob(int)">
        <title>Method getBlob(int)</title>
        <indexterm>
          <primary>getBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a BLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBlob(java.lang.String)">
        <title>Method getBlob(String)</title>
        <indexterm>
          <primary>getBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Blob <emphasis role="strong">getBlob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a BLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a BLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBoolean(int)">
        <title>Method getBoolean(int)</title>
        <indexterm>
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBoolean(java.lang.String)">
        <title>Method getBoolean(String)</title>
        <indexterm>
          <primary>getBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">getBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is false</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java boolean.
        </para>
      </sect3>
      <sect3 xreflabel="Method getByte(int)">
        <title>Method getByte(int)</title>
        <indexterm>
          <primary>getByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect3>
      <sect3 xreflabel="Method getByte(java.lang.String)">
        <title>Method getByte(String)</title>
        <indexterm>
          <primary>getByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte <emphasis role="strong">getByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBytes(int)">
        <title>Method getBytes(int)</title>
        <indexterm>
          <primary>getBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect3>
      <sect3 xreflabel="Method getBytes(java.lang.String)">
        <title>Method getBytes(String)</title>
        <indexterm>
          <primary>getBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public byte[] <emphasis role="strong">getBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java byte array.
 The bytes represent the raw values returned by the driver.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCharacterStream(int)">
        <title>Method getCharacterStream(int)</title>
        <indexterm>
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCharacterStream(java.lang.String)">
        <title>Method getCharacterStream(String)</title>
        <indexterm>
          <primary>getCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Reader <emphasis role="strong">getCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <para>
Get the value of a column in the current row as a java.io.Reader.
        </para>
      </sect3>
      <sect3 xreflabel="Method getClob(int)">
        <title>Method getClob(int)</title>
        <indexterm>
          <primary>getClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a CLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getClob(java.lang.String)">
        <title>Method getClob(String)</title>
        <indexterm>
          <primary>getClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Clob <emphasis role="strong">getClob</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing a CLOB</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a CLOB column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCursorName()">
        <title>Method getCursorName()</title>
        <indexterm>
          <primary>getCursorName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCursorName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCursorName</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the name of the SQL cursor used by this ResultSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(int)">
        <title>Method getDate(int)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(int, java.util.Calendar)">
        <title>Method getDate(int, Calendar)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the date</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(java.lang.String)">
        <title>Method getDate(String)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDate(java.lang.String, java.util.Calendar)">
        <title>Method getDate(String, Calendar)</title>
        <indexterm>
          <primary>getDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Date <emphasis role="strong">getDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the date</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Date
 object. Use the calendar to construct an appropriate millisecond
 value for the Date, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDouble(int)">
        <title>Method getDouble(int)</title>
        <indexterm>
          <primary>getDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect3>
      <sect3 xreflabel="Method getDouble(java.lang.String)">
        <title>Method getDouble(String)</title>
        <indexterm>
          <primary>getDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public double <emphasis role="strong">getDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java double.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFloat(int)">
        <title>Method getFloat(int)</title>
        <indexterm>
          <primary>getFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect3>
      <sect3 xreflabel="Method getFloat(java.lang.String)">
        <title>Method getFloat(String)</title>
        <indexterm>
          <primary>getFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public float <emphasis role="strong">getFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java float.
        </para>
      </sect3>
      <sect3 xreflabel="Method getInt(int)">
        <title>Method getInt(int)</title>
        <indexterm>
          <primary>getInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect3>
      <sect3 xreflabel="Method getInt(java.lang.String)">
        <title>Method getInt(String)</title>
        <indexterm>
          <primary>getInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java int.
        </para>
      </sect3>
      <sect3 xreflabel="Method getLong(int)">
        <title>Method getLong(int)</title>
        <indexterm>
          <primary>getLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect3>
      <sect3 xreflabel="Method getLong(java.lang.String)">
        <title>Method getLong(String)</title>
        <indexterm>
          <primary>getLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java long.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMetaData()">
        <title>Method getMetaData()</title>
        <indexterm>
          <primary>getMetaData</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMetaData</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public ResultSetMetaData <emphasis role="strong">getMetaData</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The number, types and properties of a ResultSet's columns
 are provided by the getMetaData method.
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(int)">
        <title>Method getObject(int)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a java.lang.Object holding the column value.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @column is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(column,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(int, java.util.Map)">
        <title>Method getObject(int, Map)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(int <emphasis>colIndex</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>map</literal>
                    </emphasis> - the mapping from SQL type names to Java classes</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing the SQL value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(java.lang.String)">
        <title>Method getObject(String)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a java.lang.Object holding the column value.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java object. 
        </para>
        <para>
This method will return the value of the given column as a
 Java object. The type of the Java object will be the default
 Java object type corresponding to the column's SQL type,
 following the mapping for built-in types specified in the JDBC
 spec. 
        </para>
        <para>
This method may also be used to read database specific
 abstract data types.
 JDBC 2.0
 New behavior for getObject().
 The behavior of method getObject() is extended to materialize
 data of SQL user-defined types. When the column @columnName is
 a structured or distinct value, the behavior of this method is as
 if it were a call to: getObject(columnName,
 this.getStatement().getConnection().getTypeMap()).
        </para>
      </sect3>
      <sect3 xreflabel="Method getObject(java.lang.String, java.util.Map)">
        <title>Method getObject(String, Map)</title>
        <indexterm>
          <primary>getObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Object <emphasis role="strong">getObject</emphasis>(java.lang.String <emphasis>colName</emphasis>, java.util.Map <emphasis>map</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>map</literal>
                    </emphasis> - the mapping from SQL type names to Java classes</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing the SQL value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the value of column @i as a Java object. Use the
 map to determine the class from which to construct data of
 SQL structured and distinct types.
        </para>
      </sect3>
      <sect3 xreflabel="Method getRef(int)">
        <title>Method getRef(int)</title>
        <indexterm>
          <primary>getRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(int <emphasis>colIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing data of an SQL REF type</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getRef(java.lang.String)">
        <title>Method getRef(String)</title>
        <indexterm>
          <primary>getRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Ref <emphasis role="strong">getRef</emphasis>(java.lang.String <emphasis>colName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>colName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an object representing data of an SQL REF type</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get a REF(&lt;structured-type&gt;) column.
        </para>
      </sect3>
      <sect3 xreflabel="Method getRow()">
        <title>Method getRow()</title>
        <indexterm>
          <primary>getRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine the current row number. The first row is number 1, the
 second number 2, etc.
        </para>
      </sect3>
      <sect3 xreflabel="Method getShort(int)">
        <title>Method getShort(int)</title>
        <indexterm>
          <primary>getShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect3>
      <sect3 xreflabel="Method getShort(java.lang.String)">
        <title>Method getShort(String)</title>
        <indexterm>
          <primary>getShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public short <emphasis role="strong">getShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is 0</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java short.
        </para>
      </sect3>
      <sect3 xreflabel="Method getStatement()">
        <title>Method getStatement()</title>
        <indexterm>
          <primary>getStatement</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getStatement</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Statement <emphasis role="strong">getStatement</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Return the Statement that produced the ResultSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method getString(int)">
        <title>Method getString(int)</title>
        <indexterm>
          <primary>getString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect3>
      <sect3 xreflabel="Method getString(java.lang.String)">
        <title>Method getString(String)</title>
        <indexterm>
          <primary>getString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getString</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a Java String.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(int)">
        <title>Method getTime(int)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(int, java.util.Calendar)">
        <title>Method getTime(int, Calendar)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the time</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(java.lang.String)">
        <title>Method getTime(String)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTime(java.lang.String, java.util.Calendar)">
        <title>Method getTime(String, Calendar)</title>
        <indexterm>
          <primary>getTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Time <emphasis role="strong">getTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                              java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the time</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Time
 object. Use the calendar to construct an appropriate millisecond
 value for the Time, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(int)">
        <title>Method getTimestamp(int)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(int, java.util.Calendar)">
        <title>Method getTimestamp(int, Calendar)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the timestamp</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(java.lang.String)">
        <title>Method getTimestamp(String)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTimestamp(java.lang.String, java.util.Calendar)">
        <title>Method getTimestamp(String, Calendar)</title>
        <indexterm>
          <primary>getTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Timestamp <emphasis role="strong">getTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.util.Calendar <emphasis>cal</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>cal</literal>
                    </emphasis> - the calendar to use in constructing the timestamp</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value; if the value is SQL NULL, the result is null</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the value of a column in the current row as a java.sql.Timestamp
 object. Use the calendar to construct an appropriate millisecond
 value for the Timestamp, if the underlying database doesn't store
 timezone information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUnicodeStream(int)">
        <title>Method getUnicodeStream(int)</title>
        <indexterm>
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(int <emphasis>columnIndex</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must be
 read prior to getting the value of any other column. The next
 call to a get method implicitly closes the stream. . Also, a
 stream may return 0 for available() whether there is data
 available or not.
        </para>
      </sect3>
      <sect3 xreflabel="Method getUnicodeStream(java.lang.String)">
        <title>Method getUnicodeStream(String)</title>
        <indexterm>
          <primary>getUnicodeStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getUnicodeStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public InputStream <emphasis role="strong">getUnicodeStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - is the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - a Java input stream that delivers the database column value
 as a stream of two byte Unicode characters. If the value is SQL NULL
 then the result is null.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <warning>
          <title>Deprecated</title>
        </warning>
        <para>
A column value can be retrieved as a stream of Unicode characters
 and then read in chunks from the stream. This method is particularly
 suitable for retrieving large LONGVARCHAR values. The JDBC driver will
 do any necessary conversion from the database format into Unicode. 
        </para>
        <para>
          <emphasis>Note:</emphasis> All the data in the returned stream must
 be read prior to getting the value of any other column. The
 next call to a get method implicitly closes the stream.
        </para>
      </sect3>
      <sect3 xreflabel="Method getURL(int)">
        <title>Method getURL(int)</title>
        <indexterm>
          <primary>getURL</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the index of the column 1 is the first, 2 is the second,...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs,
 or if a URL is malformed</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect3>
      <sect3 xreflabel="Method getURL(java.lang.String)">
        <title>Method getURL(String)</title>
        <indexterm>
          <primary>getURL</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getURL</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public URL <emphasis role="strong">getURL</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the SQL name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the column value as a 
<literal>java.net.URL</literal> object;
 if the value is SQL 
<literal>NULL</literal>,
 the value returned is 
<literal>null</literal> in the Java programming language</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs
 or if a URL is malformed</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the value of the designated column in the current row
 of this 
          <literal>ResultSet</literal> object as a 
          <literal>java.net.URL</literal>
 object in the Java programming language.
        </para>
      </sect3>
      <sect3 xreflabel="Method getWarnings()">
        <title>Method getWarnings()</title>
        <indexterm>
          <primary>getWarnings</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getWarnings</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public SQLWarning <emphasis role="strong">getWarnings</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
The first warning reported by calls on this ResultSet is
 returned. Subsequent ResultSet warnings will be chained to this
 SQLWarning. 
        </para>
        <para>
The warning chain is automatically cleared each time a new
 row is read. 
        </para>
        <para>
          <emphasis>Note:</emphasis> This warning chain only covers warnings caused
 by ResultSet methods. Any warning caused by statement methods
 (such as reading OUT parameters) will be chained on the
 Statement object.
        </para>
      </sect3>
      <sect3 xreflabel="Method insertRow()">
        <title>Method insertRow()</title>
        <indexterm>
          <primary>insertRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>insertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">insertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs,
 if this method is called when the cursor is not on the insert row,
 or if not all of non-nullable columns in
 the insert row have been given a value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Inserts the contents of the insert row into this 
          <literal>ResultSet</literal> objaect and into the database.
 The cursor must be on the insert row when this method is called.
        </para>
      </sect3>
      <sect3 xreflabel="Method isAfterLast()">
        <title>Method isAfterLast()</title>
        <indexterm>
          <primary>isAfterLast</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isAfterLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isAfterLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is after the last row in the result
 set.
        </para>
      </sect3>
      <sect3 xreflabel="Method isBeforeFirst()">
        <title>Method isBeforeFirst()</title>
        <indexterm>
          <primary>isBeforeFirst</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isBeforeFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isBeforeFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is before the first row in the result
 set.
        </para>
      </sect3>
      <sect3 xreflabel="Method isFirst()">
        <title>Method isFirst()</title>
        <indexterm>
          <primary>isFirst</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isFirst</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isFirst</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the first row of the result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method isLast()">
        <title>Method isLast()</title>
        <indexterm>
          <primary>isLast</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isLast</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isLast</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the cursor is on the last row of the result set.
 Note: Calling isLast() may be expensive since the JDBC driver
 might need to fetch ahead one row in order to determine
 whether the current row is the last row in the result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method last()">
        <title>Method last()</title>
        <indexterm>
          <primary>last</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>last</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">last</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 result set type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the last row in the result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method moveToCurrentRow()">
        <title>Method moveToCurrentRow()</title>
        <indexterm>
          <primary>moveToCurrentRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>moveToCurrentRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToCurrentRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs,
 or the result set is not updatable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move the cursor to the remembered cursor position, usually the
 current row. Has no effect unless the cursor is on the insert
 row.
        </para>
      </sect3>
      <sect3 xreflabel="Method moveToInsertRow()">
        <title>Method moveToInsertRow()</title>
        <indexterm>
          <primary>moveToInsertRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>moveToInsertRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">moveToInsertRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs,
 or the result set is not updatable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Move to the insert row. The current cursor position is
 remembered while the cursor is positioned on the insert row.
 The insert row is a special row associated with an updatable
 result set. It is essentially a buffer where a new row may
 be constructed by calling the updateXXX() methods prior to
 inserting the row into the result set.
 Only the updateXXX(), getXXX(), and insertRow() methods may be
 called when the cursor is on the insert row. All of the columns in
 a result set must be given a value each time this method is
 called before calling insertRow(). UpdateXXX()must be called before
 getXXX() on a column.
        </para>
      </sect3>
      <sect3 xreflabel="Method next()">
        <title>Method next()</title>
        <indexterm>
          <primary>next</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>next</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">next</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A ResultSet is initially positioned before its first row; the
 first call to next makes the first row the current row; the
 second call makes the second row the current row, etc. 
        </para>
        <para>
If an input stream from the previous row is open, it is
 implicitly closed. The ResultSet's warning chain is cleared
 when a new row is read.
        </para>
      </sect3>
      <sect3 xreflabel="Method previous()">
        <title>Method previous()</title>
        <indexterm>
          <primary>previous</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>previous</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">previous</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 result set type is TYPE_FORWAR_DONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves to the previous row in the result set. 
        </para>
        <para>
Note: previous() is not the same as relative(-1) since it
 makes sense to call previous() when there is no current row.
        </para>
      </sect3>
      <sect3 xreflabel="Method refreshRow()">
        <title>Method refreshRow()</title>
        <indexterm>
          <primary>refreshRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>refreshRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">refreshRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or if
 called when on the insert row.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Refresh the value of the current row with its current value in
 the database. Cannot be called when on the insert row.
 The refreshRow() method provides a way for an application to
 explicitly tell the JDBC driver to refetch a row(s) from the
 database. An application may want to call refreshRow() when
 caching or prefetching is being done by the JDBC driver to
 fetch the latest value of a row from the database. The JDBC driver
 may actually refresh multiple rows at once if the fetch size is
 greater than one.
 All values are refetched subject to the transaction isolation
 level and cursor sensitivity. If refreshRow() is called after
 calling updateXXX(), but before calling updateRow() then the
 updates made to the row are lost. Calling refreshRow() frequently
 will likely slow performance.
        </para>
      </sect3>
      <sect3 xreflabel="Method relative(int)">
        <title>Method relative(int)</title>
        <indexterm>
          <primary>relative</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>relative</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">relative</emphasis>(int <emphasis>rows</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or there
 is no current row, or result set type is TYPE_FORWARD_ONLY.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Moves a relative number of rows, either positive or negative.
 Attempting to move beyond the first/last row in the
 result set positions the cursor before/after the
 the first/last row. Calling relative(0) is valid, but does
 not change the cursor position. 
        </para>
        <para>
Note: Calling relative(1) is different than calling next()
 since is makes sense to call next() when there is no current row,
 for example, when the cursor is positioned before the first row
 or after the last row of the result set.
        </para>
      </sect3>
      <sect3 xreflabel="Method rowDeleted()">
        <title>Method rowDeleted()</title>
        <indexterm>
          <primary>rowDeleted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rowDeleted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowDeleted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.DatabaseMetaData.deletesAreDetected</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if this row has been deleted. A deleted row may leave
 a visible "hole" in a result set. This method can be used to
 detect holes in a result set. The value returned depends on whether
 or not the result set can detect deletions.
        </para>
      </sect3>
      <sect3 xreflabel="Method rowInserted()">
        <title>Method rowInserted()</title>
        <indexterm>
          <primary>rowInserted</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rowInserted</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowInserted</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.DatabaseMetaData.insertsAreDetected</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been inserted. The value returned
 depends on whether or not the result set can detect visible inserts.
        </para>
      </sect3>
      <sect3 xreflabel="Method rowUpdated()">
        <title>Method rowUpdated()</title>
        <indexterm>
          <primary>rowUpdated</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rowUpdated</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">rowUpdated</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.DatabaseMetaData.updatesAreDetected</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Determine if the current row has been updated. The value returned
 depends on whether or not the result set can detect updates.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateArray(int, java.sql.Array)">
        <title>Method updateArray(int, Array)</title>
        <indexterm>
          <primary>updateArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateArray(java.lang.String, java.sql.Array)">
        <title>Method updateArray(String, Array)</title>
        <indexterm>
          <primary>updateArray</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateArray</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateArray</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                  java.sql.Array <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Array</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateAsciiStream(int, java.io.InputStream, int)">
        <title>Method updateAsciiStream(int, InputStream, int)</title>
        <indexterm>
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the length of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateAsciiStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateAsciiStream(String, InputStream, int)</title>
        <indexterm>
          <primary>updateAsciiStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateAsciiStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateAsciiStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                        java.io.InputStream <emphasis>x</emphasis>, 
                                        int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an ascii stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBigDecimal(int, java.math.BigDecimal)">
        <title>Method updateBigDecimal(int, BigDecimal)</title>
        <indexterm>
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(int <emphasis>columnIndex</emphasis>, java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBigDecimal(java.lang.String, java.math.BigDecimal)">
        <title>Method updateBigDecimal(String, BigDecimal)</title>
        <indexterm>
          <primary>updateBigDecimal</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBigDecimal</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBigDecimal</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                       java.math.BigDecimal <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a BigDecimal value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBinaryStream(int, java.io.InputStream, int)">
        <title>Method updateBinaryStream(int, InputStream, int)</title>
        <indexterm>
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(int <emphasis>columnIndex</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the length of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBinaryStream(java.lang.String, java.io.InputStream, int)">
        <title>Method updateBinaryStream(String, InputStream, int)</title>
        <indexterm>
          <primary>updateBinaryStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBinaryStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBinaryStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                         java.io.InputStream <emphasis>x</emphasis>, 
                                         int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a binary stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBlob(int, java.sql.Blob)">
        <title>Method updateBlob(int, Blob)</title>
        <indexterm>
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBlob(java.lang.String, java.sql.Blob)">
        <title>Method updateBlob(String, Blob)</title>
        <indexterm>
          <primary>updateBlob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBlob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBlob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Blob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Blob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBoolean(int, boolean)">
        <title>Method updateBoolean(int, boolean)</title>
        <indexterm>
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(int <emphasis>columnIndex</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBoolean(java.lang.String, boolean)">
        <title>Method updateBoolean(String, boolean)</title>
        <indexterm>
          <primary>updateBoolean</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBoolean</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBoolean</emphasis>(java.lang.String <emphasis>columnName</emphasis>, boolean <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a boolean value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateByte(int, byte)">
        <title>Method updateByte(int, byte)</title>
        <indexterm>
          <primary>updateByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(int <emphasis>columnIndex</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateByte(java.lang.String, byte)">
        <title>Method updateByte(String, byte)</title>
        <indexterm>
          <primary>updateByte</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateByte</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateByte</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBytes(int, byte[])">
        <title>Method updateBytes(int, byte[])</title>
        <indexterm>
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(int <emphasis>columnIndex</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateBytes(java.lang.String, byte[])">
        <title>Method updateBytes(String, byte[])</title>
        <indexterm>
          <primary>updateBytes</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateBytes</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateBytes</emphasis>(java.lang.String <emphasis>columnName</emphasis>, byte[] <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a byte array value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateCharacterStream(int, java.io.Reader, int)">
        <title>Method updateCharacterStream(int, Reader, int)</title>
        <indexterm>
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(int <emphasis>columnIndex</emphasis>, java.io.Reader <emphasis>x</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - the length of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateCharacterStream(java.lang.String, java.io.Reader, int)">
        <title>Method updateCharacterStream(String, Reader, int)</title>
        <indexterm>
          <primary>updateCharacterStream</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateCharacterStream</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateCharacterStream</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                            java.io.Reader <emphasis>x</emphasis>, 
                                            int <emphasis>length</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>length</literal>
                    </emphasis> - of the stream</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a character stream value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateClob(int, java.sql.Clob)">
        <title>Method updateClob(int, Clob)</title>
        <indexterm>
          <primary>updateClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateClob(java.lang.String, java.sql.Clob)">
        <title>Method updateClob(String, Clob)</title>
        <indexterm>
          <primary>updateClob</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateClob</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateClob</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Clob <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Clob</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDate(int, java.sql.Date)">
        <title>Method updateDate(int, Date)</title>
        <indexterm>
          <primary>updateDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDate(java.lang.String, java.sql.Date)">
        <title>Method updateDate(String, Date)</title>
        <indexterm>
          <primary>updateDate</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDate</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDate</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Date <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Date value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDouble(int, double)">
        <title>Method updateDouble(int, double)</title>
        <indexterm>
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(int <emphasis>columnIndex</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateDouble(java.lang.String, double)">
        <title>Method updateDouble(String, double)</title>
        <indexterm>
          <primary>updateDouble</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateDouble</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateDouble</emphasis>(java.lang.String <emphasis>columnName</emphasis>, double <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a double value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateFloat(int, float)">
        <title>Method updateFloat(int, float)</title>
        <indexterm>
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(int <emphasis>columnIndex</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateFloat(java.lang.String, float)">
        <title>Method updateFloat(String, float)</title>
        <indexterm>
          <primary>updateFloat</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateFloat</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateFloat</emphasis>(java.lang.String <emphasis>columnName</emphasis>, float <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a float value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateInt(int, int)">
        <title>Method updateInt(int, int)</title>
        <indexterm>
          <primary>updateInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(int <emphasis>columnIndex</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateInt(java.lang.String, int)">
        <title>Method updateInt(String, int)</title>
        <indexterm>
          <primary>updateInt</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateInt</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateInt</emphasis>(java.lang.String <emphasis>columnName</emphasis>, int <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an integer value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateLong(int, long)">
        <title>Method updateLong(int, long)</title>
        <indexterm>
          <primary>updateLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(int <emphasis>columnIndex</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateLong(java.lang.String, long)">
        <title>Method updateLong(String, long)</title>
        <indexterm>
          <primary>updateLong</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateLong</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateLong</emphasis>(java.lang.String <emphasis>columnName</emphasis>, long <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a long value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateNull(int)">
        <title>Method updateNull(int)</title>
        <indexterm>
          <primary>updateNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(int <emphasis>columnIndex</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Give a nullable column a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateNull(java.lang.String)">
        <title>Method updateNull(String)</title>
        <indexterm>
          <primary>updateNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateNull</emphasis>(java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a null value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(int, java.lang.Object)">
        <title>Method updateObject(int, Object)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(int, java.lang.Object, int)">
        <title>Method updateObject(int, Object, int)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.Object <emphasis>x</emphasis>, 
                                   int <emphasis>scale</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(java.lang.String, java.lang.Object)">
        <title>Method updateObject(String, Object)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateObject(java.lang.String, java.lang.Object, int)">
        <title>Method updateObject(String, Object, int)</title>
        <indexterm>
          <primary>updateObject</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateObject</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateObject</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.Object <emphasis>x</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
 this is the number of digits after the decimal. For all other
 types this value will be ignored.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with an Object value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateRef(int, java.sql.Ref)">
        <title>Method updateRef(int, Ref)</title>
        <indexterm>
          <primary>updateRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateRef(java.lang.String, java.sql.Ref)">
        <title>Method updateRef(String, Ref)</title>
        <indexterm>
          <primary>updateRef</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateRef</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRef</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Ref <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.4</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Updates the designated column with a 
          <literal>java.sql.Ref</literal> value.
 The updater methods are used to update column values in the
 current row or the insert row. The updater methods do not
 update the underlying database; instead the 
          <literal>updateRow</literal> or 
          <literal>insertRow</literal> methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateRow()">
        <title>Method updateRow()</title>
        <indexterm>
          <primary>updateRow</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateRow</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateRow</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs, or
 if called when on the insert row</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update the underlying database with the new contents of the
 current row. Cannot be called when on the insert row.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateShort(int, short)">
        <title>Method updateShort(int, short)</title>
        <indexterm>
          <primary>updateShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(int <emphasis>columnIndex</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateShort(java.lang.String, short)">
        <title>Method updateShort(String, short)</title>
        <indexterm>
          <primary>updateShort</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateShort</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateShort</emphasis>(java.lang.String <emphasis>columnName</emphasis>, short <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a short value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateString(int, java.lang.String)">
        <title>Method updateString(int, String)</title>
        <indexterm>
          <primary>updateString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(int <emphasis>columnIndex</emphasis>, java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateString(java.lang.String, java.lang.String)">
        <title>Method updateString(String, String)</title>
        <indexterm>
          <primary>updateString</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateString</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateString</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                   java.lang.String <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a String value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTime(int, java.sql.Time)">
        <title>Method updateTime(int, Time)</title>
        <indexterm>
          <primary>updateTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTime(java.lang.String, java.sql.Time)">
        <title>Method updateTime(String, Time)</title>
        <indexterm>
          <primary>updateTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTime</emphasis>(java.lang.String <emphasis>columnName</emphasis>, java.sql.Time <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Time value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTimestamp(int, java.sql.Timestamp)">
        <title>Method updateTimestamp(int, Timestamp)</title>
        <indexterm>
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(int <emphasis>columnIndex</emphasis>, java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnIndex</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method updateTimestamp(java.lang.String, java.sql.Timestamp)">
        <title>Method updateTimestamp(String, Timestamp)</title>
        <indexterm>
          <primary>updateTimestamp</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>updateTimestamp</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">updateTimestamp</emphasis>(java.lang.String <emphasis>columnName</emphasis>, 
                                      java.sql.Timestamp <emphasis>x</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the name of the column</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>x</literal>
                    </emphasis> - the new column value</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Update a column with a Timestamp value.
 The updateXXX() methods are used to update column values in the
 current row, or the insert row. The updateXXX() methods do not
 update the underlying database, instead the updateRow() or insertRow()
 methods are called to update the database.
        </para>
      </sect3>
      <sect3 xreflabel="Method wasNull()">
        <title>Method wasNull()</title>
        <indexterm>
          <primary>wasNull</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>wasNull</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">wasNull</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
A column may have the value of SQL NULL; wasNull reports whether
 the last column read had this special value.
 Note that you must first call getXXX on a column to try to read
 its value and then call wasNull() to find if the value was
 the SQL NULL.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLPooledConnection">
    <title>Class OPLPooledConnection</title>
    <indexterm>
      <primary>OPLPooledConnection</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLPooledConnection</secondary>
    </indexterm>
    <para>
A PooledConnection object is a connection object that provides hooks
 for connection pool management. A PooledConnection object represents
 a physical connection to a data source.
    </para>
    <sect2 id="x5synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLPooledConnection</emphasis> implements PooledConnection,Cloneable {
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">finalize</emphasis>() throws java.lang.Throwable;
  public void <emphasis role="strong">addConnectionEventListener</emphasis>(
                javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
  public void <emphasis role="strong">removeConnectionEventListener</emphasis>(
                javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">closeAll</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLPooledConnection</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x5members">
      <title>Members</title>
      <sect3 xreflabel="Method addConnectionEventListener(javax.sql.ConnectionEventListener)">
        <title>Method addConnectionEventListener(ConnectionEventListener)</title>
        <indexterm>
          <primary>addConnectionEventListener</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>addConnectionEventListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">addConnectionEventListener</emphasis>(
                        javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - listener a component, usually the connection pool manager,
 that has implemented the 
<literal>ConnectionEventListener</literal> interface and wants to be
 notified when the connection is closed or has an error</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>openlink.javax.OPLPooledConnection.removeConnectionEventListener</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Registers the given event listener so that it will be notified
 when an event occurs on this 
          <literal>PooledConnection</literal> object.
        </para>
      </sect3>
      <sect3 xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm>
          <primary>close</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Closes the physical connection that this 
          <literal>PooledConnection</literal>
 object represents. An application never calls this method directly;
 it is called by the connection pool module, or manager. 
        </para>
        <para>
 See the 
          <emphasis>interface description</emphasis> for more
 information.
        </para>
      </sect3>
      <sect3 xreflabel="Method closeAll()">
        <title>Method closeAll()</title>
        <indexterm>
          <primary>closeAll</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>closeAll</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">closeAll</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Close all the Statement objects that have been opened by this
 PooledConnection object.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Create an object handle for this physical connection.
 The object returned is a temporary handle used by application code
 to refer to a physical connection that is being pooled.
        </para>
      </sect3>
      <sect3 xreflabel="Method removeConnectionEventListener(javax.sql.ConnectionEventListener)">
        <title>Method removeConnectionEventListener(ConnectionEventListener)</title>
        <indexterm>
          <primary>removeConnectionEventListener</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>removeConnectionEventListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">removeConnectionEventListener</emphasis>(
                        javax.sql.ConnectionEventListener <emphasis>parm</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - listener a component, usually the connection pool manager,
 that has implemented the 
<literal>ConnectionEventListener</literal> interface and
 been registered with this 
<literal>PooledConnection</literal> object as
 a listener</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>openlink.javax.OPLPooledConnection.addConnectionEventListener</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Removes the given event listener from the list of components that
 will be notified when an event occurs on this 
          <literal>PooledConnection</literal> object.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLPoolStatistic">
    <title>Class OPLPoolStatistic</title>
    <indexterm>
      <primary>OPLPoolStatistic</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLPoolStatistic</secondary>
    </indexterm>
    <sect2 id="x6synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLPoolStatistic</emphasis> implements Cloneable {
  <emphasis>// Public Methods</emphasis>
  public int <emphasis role="strong">getHits</emphasis>();
  public int <emphasis role="strong">getMisses</emphasis>();
  public long <emphasis role="strong">getMaxWaitTime</emphasis>();
  public long <emphasis role="strong">getMinWaitTime</emphasis>();
  public long <emphasis role="strong">getCumWaitTime</emphasis>();
  public int <emphasis role="strong">getCacheSize</emphasis>();
  public int <emphasis role="strong">getConnsInUse</emphasis>();
  public int <emphasis role="strong">getConnsUnUsed</emphasis>();
  public String <emphasis role="strong">getName</emphasis>();
  public String <emphasis role="strong">toString</emphasis>();
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLPoolStatistic</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x6members">
      <title>Members</title>
      <sect3 xreflabel="Method getCacheSize()">
        <title>Method getCacheSize()</title>
        <indexterm>
          <primary>getCacheSize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCacheSize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getCacheSize</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the connection pool size.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnsInUse()">
        <title>Method getConnsInUse()</title>
        <indexterm>
          <primary>getConnsInUse</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnsInUse</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getConnsInUse</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of used connections in the connection pool size.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnsUnUsed()">
        <title>Method getConnsUnUsed()</title>
        <indexterm>
          <primary>getConnsUnUsed</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnsUnUsed</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getConnsUnUsed</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of unused connections in the connection pool size.
        </para>
      </sect3>
      <sect3 xreflabel="Method getCumWaitTime()">
        <title>Method getCumWaitTime()</title>
        <indexterm>
          <primary>getCumWaitTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCumWaitTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getCumWaitTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the sum of all waiting time for the connection pool.
        </para>
      </sect3>
      <sect3 xreflabel="Method getHits()">
        <title>Method getHits()</title>
        <indexterm>
          <primary>getHits</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getHits</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getHits</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of the connection pool hits.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMaxWaitTime()">
        <title>Method getMaxWaitTime()</title>
        <indexterm>
          <primary>getMaxWaitTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMaxWaitTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getMaxWaitTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the maximal waiting time for the connection pool.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMinWaitTime()">
        <title>Method getMinWaitTime()</title>
        <indexterm>
          <primary>getMinWaitTime</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMinWaitTime</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public long <emphasis role="strong">getMinWaitTime</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the minimal waiting time for the connection pool.
        </para>
      </sect3>
      <sect3 xreflabel="Method getMisses()">
        <title>Method getMisses()</title>
        <indexterm>
          <primary>getMisses</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getMisses</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getMisses</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the amount of the connection pool misses.
        </para>
      </sect3>
      <sect3 xreflabel="Method getName()">
        <title>Method getName()</title>
        <indexterm>
          <primary>getName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getName</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Returns the name of ConectionPoolDataSource.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLRowSetMetaData">
    <title>Class OPLRowSetMetaData</title>
    <indexterm>
      <primary>OPLRowSetMetaData</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLRowSetMetaData</secondary>
    </indexterm>
    <para>
The RowSetMetaData interface extends ResultSetMetaData with
 methods that allow a metadata object to be initialized.
    </para>
    <sect2 id="x7synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLRowSetMetaData</emphasis> implements RowSetMetaData,Serializable {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLRowSetMetaData</emphasis>(java.sql.ResultSetMetaData <emphasis>rsmd</emphasis>) 
      throws java.sql.SQLException;
  <emphasis>// Public Methods</emphasis>
  public void <emphasis role="strong">setAutoIncrement</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCaseSensitive</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCatalogName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>catalogName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnCount</emphasis>(int <emphasis>columnCount</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>, int <emphasis>size</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnLabel</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>label</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>columnName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnType</emphasis>(int <emphasis>column</emphasis>, int <emphasis>SQLType</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setColumnTypeName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>typeName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setCurrency</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setNullable</emphasis>(int <emphasis>column</emphasis>, int <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setPrecision</emphasis>(int <emphasis>column</emphasis>, int <emphasis>precision</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setScale</emphasis>(int <emphasis>column</emphasis>, int <emphasis>scale</emphasis>) throws java.sql.SQLException;
  public void <emphasis role="strong">setSchemaName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>schemaName</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setSearchable</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setSigned</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
      throws java.sql.SQLException;
  public void <emphasis role="strong">setTableName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>tableName</emphasis>) 
      throws java.sql.SQLException;
  public int <emphasis role="strong">getColumnCount</emphasis>() throws java.sql.SQLException;
  public boolean <emphasis role="strong">isAutoIncrement</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isCaseSensitive</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isSearchable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isCurrency</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">isNullable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isSigned</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnLabel</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getSchemaName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getPrecision</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getScale</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getTableName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getCatalogName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public int <emphasis role="strong">getColumnType</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnTypeName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isReadOnly</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isWritable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public boolean <emphasis role="strong">isDefinitelyWritable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
  public String <emphasis role="strong">getColumnClassName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLRowSetMetaData</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x8members">
      <title>Members</title>
      <sect3 xreflabel="Method getCatalogName(int)">
        <title>Method getCatalogName(int)</title>
        <indexterm>
          <primary>getCatalogName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getCatalogName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getCatalogName</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - column name or "" if not applicable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's table's catalog name.
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnClassName(int)">
        <title>Method getColumnClassName(int)</title>
        <indexterm>
          <primary>getColumnClassName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnClassName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnClassName</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Since</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>1.2</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>
                        <ulink url="package-summary.html#2.0 API">What Is in the JDBC
 2.0 API</ulink>
                      </member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the fully-qualified name of the Java class whose instances
 are manufactured if the method 
          <literal>ResultSet.getObject</literal>
 is called to retrieve a value
 from the column. 
          <literal>ResultSet.getObject</literal> may return a subclass of the
 class returned by this method.
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnCount()">
        <title>Method getColumnCount()</title>
        <indexterm>
          <primary>getColumnCount</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnCount</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getColumnCount</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Returns the number of columns in this RowSet
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnDisplaySize(int)">
        <title>Method getColumnDisplaySize(int)</title>
        <indexterm>
          <primary>getColumnDisplaySize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnDisplaySize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the normal maximum number of characters allowed as the width
 of the designated column</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates the designated column's normal maximum width in characters.
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnLabel(int)">
        <title>Method getColumnLabel(int)</title>
        <indexterm>
          <primary>getColumnLabel</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnLabel</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnLabel</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the suggested column title</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's suggested title for use in printouts and
 displays.
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnName(int)">
        <title>Method getColumnName(int)</title>
        <indexterm>
          <primary>getColumnName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - column name</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the designated column's name.
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnType(int)">
        <title>Method getColumnType(int)</title>
        <indexterm>
          <primary>getColumnType</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnType</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getColumnType</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - SQL type from java.sql.Types</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.Types</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the designated column's SQL type.
        </para>
      </sect3>
      <sect3 xreflabel="Method getColumnTypeName(int)">
        <title>Method getColumnTypeName(int)</title>
        <indexterm>
          <primary>getColumnTypeName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getColumnTypeName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getColumnTypeName</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - type name used by the database. If the column type is
 a user-defined type, then a fully-qualified type name is returned.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves the designated column's database-specific type name.
        </para>
      </sect3>
      <sect3 xreflabel="Method getPrecision(int)">
        <title>Method getPrecision(int)</title>
        <indexterm>
          <primary>getPrecision</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getPrecision</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getPrecision</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - precision</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the designated column's number of decimal digits.
        </para>
      </sect3>
      <sect3 xreflabel="Method getScale(int)">
        <title>Method getScale(int)</title>
        <indexterm>
          <primary>getScale</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getScale</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getScale</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - scale</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's number of digits to right of the decimal point.
        </para>
      </sect3>
      <sect3 xreflabel="Method getSchemaName(int)">
        <title>Method getSchemaName(int)</title>
        <indexterm>
          <primary>getSchemaName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getSchemaName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getSchemaName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - schema name or "" if not applicable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Get the designated column's table's schema.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTableName(int)">
        <title>Method getTableName(int)</title>
        <indexterm>
          <primary>getTableName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getTableName</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - table name or "" if not applicable</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Gets the designated column's table name.
        </para>
      </sect3>
      <sect3 xreflabel="Method isAutoIncrement(int)">
        <title>Method isAutoIncrement(int)</title>
        <indexterm>
          <primary>isAutoIncrement</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isAutoIncrement</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isAutoIncrement</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - true if so</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the column is automatically numbered, thus read-only.
        </para>
      </sect3>
      <sect3 xreflabel="Method isCaseSensitive(int)">
        <title>Method isCaseSensitive(int)</title>
        <indexterm>
          <primary>isCaseSensitive</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isCaseSensitive</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isCaseSensitive</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether a column's case matters.
        </para>
      </sect3>
      <sect3 xreflabel="Method isCurrency(int)">
        <title>Method isCurrency(int)</title>
        <indexterm>
          <primary>isCurrency</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isCurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isCurrency</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the designated column is a cash value.
        </para>
      </sect3>
      <sect3 xreflabel="Method isDefinitelyWritable(int)">
        <title>Method isDefinitelyWritable(int)</title>
        <indexterm>
          <primary>isDefinitelyWritable</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isDefinitelyWritable</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isDefinitelyWritable</emphasis>(int <emphasis>column</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether a write on the designated column will definitely succeed.
        </para>
      </sect3>
      <sect3 xreflabel="Method isNullable(int)">
        <title>Method isNullable(int)</title>
        <indexterm>
          <primary>isNullable</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isNullable</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">isNullable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - the nullability status of the given column; one of 
<literal>columnNoNulls</literal>, 
<literal>columnNullable</literal> or 
<literal>columnNullableUnknown</literal>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates the nullability of values in the designated column.
        </para>
      </sect3>
      <sect3 xreflabel="Method isReadOnly(int)">
        <title>Method isReadOnly(int)</title>
        <indexterm>
          <primary>isReadOnly</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isReadOnly</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isReadOnly</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the designated column is definitely not writable.
        </para>
      </sect3>
      <sect3 xreflabel="Method isSearchable(int)">
        <title>Method isSearchable(int)</title>
        <indexterm>
          <primary>isSearchable</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isSearchable</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isSearchable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether the designated column can be used in a where clause.
        </para>
      </sect3>
      <sect3 xreflabel="Method isSigned(int)">
        <title>Method isSigned(int)</title>
        <indexterm>
          <primary>isSigned</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isSigned</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isSigned</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether values in the designated column are signed numbers.
        </para>
      </sect3>
      <sect3 xreflabel="Method isWritable(int)">
        <title>Method isWritable(int)</title>
        <indexterm>
          <primary>isWritable</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isWritable</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isWritable</emphasis>(int <emphasis>column</emphasis>) throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if so; 
<literal>false</literal> otherwise</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Indicates whether it is possible for a write on the designated column to succeed.
        </para>
      </sect3>
      <sect3 xreflabel="Method setAutoIncrement(int, boolean)">
        <title>Method setAutoIncrement(int, boolean)</title>
        <indexterm>
          <primary>setAutoIncrement</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setAutoIncrement</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setAutoIncrement</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>property</literal>
                    </emphasis> - is either true or false (default is false).</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the is column automatically numbered, thus read-only.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCaseSensitive(int, boolean)">
        <title>Method setCaseSensitive(int, boolean)</title>
        <indexterm>
          <primary>setCaseSensitive</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCaseSensitive</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCaseSensitive</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>property</literal>
                    </emphasis> - is either true or false (default is false).</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column is case sensitive.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCatalogName(int, java.lang.String)">
        <title>Method setCatalogName(int, String)</title>
        <indexterm>
          <primary>setCatalogName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCatalogName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCatalogName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>catalogName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>catalogName</literal>
                    </emphasis> - column's catalog name.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's table's catalog name, if any.
        </para>
      </sect3>
      <sect3 xreflabel="Method setColumnCount(int)">
        <title>Method setColumnCount(int)</title>
        <indexterm>
          <primary>setColumnCount</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setColumnCount</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnCount</emphasis>(int <emphasis>columnCount</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnCount</literal>
                    </emphasis> - number of columns.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the number of columns in the RowSet.
        </para>
      </sect3>
      <sect3 xreflabel="Method setColumnDisplaySize(int, int)">
        <title>Method setColumnDisplaySize(int, int)</title>
        <indexterm>
          <primary>setColumnDisplaySize</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setColumnDisplaySize</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnDisplaySize</emphasis>(int <emphasis>column</emphasis>, int <emphasis>size</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>size</literal>
                    </emphasis> - size of the column</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's normal max width in chars.
        </para>
      </sect3>
      <sect3 xreflabel="Method setColumnLabel(int, java.lang.String)">
        <title>Method setColumnLabel(int, String)</title>
        <indexterm>
          <primary>setColumnLabel</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setColumnLabel</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnLabel</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>label</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>label</literal>
                    </emphasis> - the column title</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the suggested column title for use in printouts and
 displays, if any.
        </para>
      </sect3>
      <sect3 xreflabel="Method setColumnName(int, java.lang.String)">
        <title>Method setColumnName(int, String)</title>
        <indexterm>
          <primary>setColumnName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setColumnName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>columnName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>columnName</literal>
                    </emphasis> - the column name</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column name.
        </para>
      </sect3>
      <sect3 xreflabel="Method setColumnType(int, int)">
        <title>Method setColumnType(int, int)</title>
        <indexterm>
          <primary>setColumnType</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setColumnType</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnType</emphasis>(int <emphasis>column</emphasis>, int <emphasis>SQLType</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>SQLType</literal>
                    </emphasis> - column's SQL type.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>java.sql.Types</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's SQL type.
        </para>
      </sect3>
      <sect3 xreflabel="Method setColumnTypeName(int, java.lang.String)">
        <title>Method setColumnTypeName(int, String)</title>
        <indexterm>
          <primary>setColumnTypeName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setColumnTypeName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setColumnTypeName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>typeName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>typeName</literal>
                    </emphasis> - data source specific type name.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's data source specific type name, if any.
        </para>
      </sect3>
      <sect3 xreflabel="Method setCurrency(int, boolean)">
        <title>Method setCurrency(int, boolean)</title>
        <indexterm>
          <primary>setCurrency</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setCurrency</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setCurrency</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>property</literal>
                    </emphasis> - is either true or false (default is false).</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column is a cash value.
        </para>
      </sect3>
      <sect3 xreflabel="Method setNullable(int, int)">
        <title>Method setNullable(int, int)</title>
        <indexterm>
          <primary>setNullable</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setNullable</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setNullable</emphasis>(int <emphasis>column</emphasis>, int <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>property</literal>
                    </emphasis> - is either one of columnNoNulls, columnNullable 
 or columnNullableUnknown (default is columnNullableUnknown).</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column's value can be set to NULL.
        </para>
      </sect3>
      <sect3 xreflabel="Method setPrecision(int, int)">
        <title>Method setPrecision(int, int)</title>
        <indexterm>
          <primary>setPrecision</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setPrecision</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setPrecision</emphasis>(int <emphasis>column</emphasis>, int <emphasis>precision</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>precision</literal>
                    </emphasis> - number of decimal digits.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's number of decimal digits.
        </para>
      </sect3>
      <sect3 xreflabel="Method setScale(int, int)">
        <title>Method setScale(int, int)</title>
        <indexterm>
          <primary>setScale</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setScale</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setScale</emphasis>(int <emphasis>column</emphasis>, int <emphasis>scale</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>scale</literal>
                    </emphasis> - number of digits to right of decimal point.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's number of digits to right of the decimal point.
        </para>
      </sect3>
      <sect3 xreflabel="Method setSchemaName(int, java.lang.String)">
        <title>Method setSchemaName(int, String)</title>
        <indexterm>
          <primary>setSchemaName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setSchemaName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSchemaName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>schemaName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>schemaName</literal>
                    </emphasis> - the schema name</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's table's schema, if any.
        </para>
      </sect3>
      <sect3 xreflabel="Method setSearchable(int, boolean)">
        <title>Method setSearchable(int, boolean)</title>
        <indexterm>
          <primary>setSearchable</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setSearchable</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSearchable</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>property</literal>
                    </emphasis> - is either true or false (default is false).</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify whether the column can be used in a where clause.
        </para>
      </sect3>
      <sect3 xreflabel="Method setSigned(int, boolean)">
        <title>Method setSigned(int, boolean)</title>
        <indexterm>
          <primary>setSigned</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setSigned</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setSigned</emphasis>(int <emphasis>column</emphasis>, boolean <emphasis>property</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>property</literal>
                    </emphasis> - is either true or false (default is false).</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Speicfy whether the column is a signed number.
        </para>
      </sect3>
      <sect3 xreflabel="Method setTableName(int, java.lang.String)">
        <title>Method setTableName(int, String)</title>
        <indexterm>
          <primary>setTableName</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTableName</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setTableName</emphasis>(int <emphasis>column</emphasis>, java.lang.String <emphasis>tableName</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>column</literal>
                    </emphasis> - the first column is 1, the second is 2, ...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>tableName</literal>
                    </emphasis> - column's table name.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database-access error occurs.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Specify the column's table name, if any.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLXAConnection">
    <title>Class OPLXAConnection</title>
    <indexterm>
      <primary>OPLXAConnection</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLXAConnection</secondary>
    </indexterm>
    <para>
An object that provides support for distributed
 transactions. An 
      <literal>XAConnection</literal> object may be enlisted
 in a distributed transaction by means of an 
      <literal>XAResource</literal> object.
 A transaction manager, usually part of a middle tier server, manages an 
      <literal>XAConnection</literal> object through the 
      <literal>XAResource</literal> object. 
    </para>
    <para>
 An application programmer does not use this interface directly; rather,
 it is used by a transaction manager working in the middle tier server.
    </para>
    <sect2 id="x9synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLXAConnection</emphasis> implements XAConnection,XAResource {
  <emphasis>// Public Methods</emphasis>
  public XAResource <emphasis role="strong">getXAResource</emphasis>() throws java.sql.SQLException;
  public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
  public void <emphasis role="strong">addConnectionEventListener</emphasis>(
                javax.sql.ConnectionEventListener <emphasis>listener</emphasis>);
  public void <emphasis role="strong">removeConnectionEventListener</emphasis>(
                javax.sql.ConnectionEventListener <emphasis>listener</emphasis>);
  public void <emphasis role="strong">commit</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>, boolean <emphasis>onePhase</emphasis>) 
      throws javax.transaction.xa.XAException;
  public void <emphasis role="strong">end</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>, int <emphasis>flags</emphasis>) 
      throws javax.transaction.xa.XAException;
  public void <emphasis role="strong">forget</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
      throws javax.transaction.xa.XAException;
  public int <emphasis role="strong">getTransactionTimeout</emphasis>() throws javax.transaction.xa.XAException;
  public boolean <emphasis role="strong">isSameRM</emphasis>(javax.transaction.xa.XAResource <emphasis>xares</emphasis>) 
      throws javax.transaction.xa.XAException;
  public int <emphasis role="strong">prepare</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
      throws javax.transaction.xa.XAException;
  public Xid[] <emphasis role="strong">recover</emphasis>(int <emphasis>flag</emphasis>) throws javax.transaction.xa.XAException;
  public void <emphasis role="strong">rollback</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
      throws javax.transaction.xa.XAException;
  public boolean <emphasis role="strong">setTransactionTimeout</emphasis>(int <emphasis>seconds</emphasis>) 
      throws javax.transaction.xa.XAException;
  public void <emphasis role="strong">start</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>, int <emphasis>flags</emphasis>) 
      throws javax.transaction.xa.XAException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="1*" colname="c1"/>
          <colspec colwidth="4*" colname="c2"/>
          <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
          <thead>
            <row>
              <entry spanname="span">
                <para>Additional Information</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Since</para>
              </entry>
              <entry>
                <para>
                  <simplelist type="inline">
                    <member>1.4</member>
                  </simplelist>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLXAConnection</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="x9members">
      <title>Members</title>
      <sect3 xreflabel="Method addConnectionEventListener(javax.sql.ConnectionEventListener)">
        <title>Method addConnectionEventListener(ConnectionEventListener)</title>
        <indexterm>
          <primary>addConnectionEventListener</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>addConnectionEventListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">addConnectionEventListener</emphasis>(
                        javax.sql.ConnectionEventListener <emphasis>listener</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>listener</literal>
                    </emphasis> - a component, usually the connection pool manager,
 that has implemented the 
<literal>ConnectionEventListener</literal> interface and wants to be
 notified when the connection is closed or has an error</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>openlink.javax.OPLXAConnection.removeConnectionEventListener</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Registers the given event listener so that it will be notified
 when an event occurs on this 
          <literal>OPLXAConnection</literal> object.
        </para>
      </sect3>
      <sect3 xreflabel="Method close()">
        <title>Method close()</title>
        <indexterm>
          <primary>close</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>close</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">close</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Closes the physical connection that this 
          <literal>OPLXAConnection</literal>
 object represents. An application never calls this method directly;
 it is called by the connection pool module, or manager. 
        </para>
        <para>
 See the 
          <emphasis>interface description</emphasis> for more
 information.
        </para>
      </sect3>
      <sect3 xreflabel="Method commit(javax.transaction.xa.Xid, boolean)">
        <title>Method commit(Xid, boolean)</title>
        <indexterm>
          <primary>commit</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>commit</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">commit</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>, boolean <emphasis>onePhase</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xid</literal>
                    </emphasis> - A global transaction identifier</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>onePhase</literal>
                    </emphasis> - If true, the resource manager should use a one-phase commit
 protocol to commit the work done on behalf of xid.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible XAExceptions are
 XA_HEURHAZ, XA_HEURCOM, XA_HEURRB, XA_HEURMIX, XAER_RMERR, XAER_RMFAIL,
 XAER_NOTA, XAER_INVAL, or XAER_PROTO.
 If the resource manager did not commit the transaction and the paramether
 onePhase is set to true, the resource manager may throw one of the XA_RB* exceptions.
 Upon return, the resource manager has rolled back the branch's work and has
 released all held resources.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Commit the global transaction specified by xid.
        </para>
      </sect3>
      <sect3 xreflabel="Method end(javax.transaction.xa.Xid, int)">
        <title>Method end(Xid, int)</title>
        <indexterm>
          <primary>end</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>end</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">end</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>, int <emphasis>flags</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xid</literal>
                    </emphasis> - A global transaction identifier that is the same as what was used
 previously in the start method.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>flags</literal>
                    </emphasis> - One of TMSUCCESS, TMFAIL, or TMSUSPEND</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible XAException values are
 XAER_RMERR, XAER_RMFAILED, XAER_NOTA, XAER_INVAL, XAER_PROTO, or XA_RB*.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Ends the work performed on behalf of a transaction branch. The resource manager
 disassociates the XA resource from the transaction branch specified and let
 the transaction be completed.
 If TMSUSPEND is specified in flags, the transaction branch is temporarily
 suspended in incomplete state. The transaction context is in suspened state
 and must be resumed via start with TMRESUME specified.
 If TMFAIL is specified, the portion of work has failed. The resource manager
 may mark the transaction as rollback-only
 If TMSUCCESS is specified, the portion of work has completed successfully.
        </para>
      </sect3>
      <sect3 xreflabel="Method forget(javax.transaction.xa.Xid)">
        <title>Method forget(Xid)</title>
        <indexterm>
          <primary>forget</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>forget</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">forget</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xid</literal>
                    </emphasis> - A global transaction identifier</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible exception values are
 XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or XAER_PROTO.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Tell the resource manager to forget about a heuristically completed transaction branch.
        </para>
      </sect3>
      <sect3 xreflabel="Method getConnection()">
        <title>Method getConnection()</title>
        <indexterm>
          <primary>getConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Connection <emphasis role="strong">getConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Creates and returns a 
          <literal>Connection</literal> object that is a handle
 for the physical connection that
 this 
          <literal>PooledConnection</literal> object represents.
 The connection pool manager calls this method when an application has
 called the method 
          <literal>DataSource.getConnectio...</literal> and there are
 no 
          <literal>PooledConnection</literal> objects available. See the 
          <emphasis>interface description</emphasis> for more information.
        </para>
      </sect3>
      <sect3 xreflabel="Method getTransactionTimeout()">
        <title>Method getTransactionTimeout()</title>
        <indexterm>
          <primary>getTransactionTimeout</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getTransactionTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">getTransactionTimeout</emphasis>() throws 
            javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible exception values are XAER_RMERR, XAER_RMFAIL.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Obtain the current transaction timeout value set for this XAResource instance.
 If 
          <literal>XAResource.setTransacti...</literal> was not use prior to invoking this method,
 the return value is the default timeout set for the resource manager;
 otherwise, the value used in the previous 
          <literal>setTransactionTimeout</literal> call is returned.
        </para>
      </sect3>
      <sect3 xreflabel="Method getXAResource()">
        <title>Method getXAResource()</title>
        <indexterm>
          <primary>getXAResource</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getXAResource</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public XAResource <emphasis role="strong">getXAResource</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Retrieves an 
          <literal>XAResource</literal> object that
 the transaction manager will use
 to manage this 
          <literal>XAConnection</literal> object's participation in a
 distributed transaction.
        </para>
      </sect3>
      <sect3 xreflabel="Method isSameRM(javax.transaction.xa.XAResource)">
        <title>Method isSameRM(XAResource)</title>
        <indexterm>
          <primary>isSameRM</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>isSameRM</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">isSameRM</emphasis>(javax.transaction.xa.XAResource <emphasis>xares</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xares</literal>
                    </emphasis> - An XAResource object whose resource manager instance is to be
 compared with the resource manager instance of the target object.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if it's the same RM instance; otherwise 
<literal>false</literal>.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible exception values are
 XAER_RMERR, XAER_RMFAIL.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
This method is called to determine if the resource manager instance represented
 by the target object is the same as the resouce manager instance represented
 by the parameter 
          <literal>xares</literal>.
        </para>
      </sect3>
      <sect3 xreflabel="Method prepare(javax.transaction.xa.Xid)">
        <title>Method prepare(Xid)</title>
        <indexterm>
          <primary>prepare</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>prepare</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public int <emphasis role="strong">prepare</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xid</literal>
                    </emphasis> - A global transaction identifier</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - A value indicating the resource manager's vote on the outcome of
 the transaction. The possible values are: XA_RDONLY or XA_OK. If the resource
 manager wants to roll back the transaction, it should do so by raising
 an appropriate XAException in the prepare method.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible exception values are:
 XA_RB*, XAER_RMERR, XAER_RMFAIL, XAER_NOTA, XAER_INVAL, or XAER_PROTO.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Ask the resource manager to prepare for a transaction commit of the transaction
 specified in xid.
        </para>
      </sect3>
      <sect3 xreflabel="Method recover(int)">
        <title>Method recover(int)</title>
        <indexterm>
          <primary>recover</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>recover</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public Xid[] <emphasis role="strong">recover</emphasis>(int <emphasis>flag</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>flag</literal>
                    </emphasis> - One of TMSTARTRSCAN, TMENDRSCAN, TMNOFLAGS. TMNOFLAGS must be used
 when no other flags are set in flags.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - The resource manager returns zero or more XIDs for the transaction
 branches that are currently in a prepared or heuristically completed state.
 If an error occurs during the operation, the resource manager should throw
 the appropriate XAException.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible values are XAER_RMERR,
 XAER_RMFAIL, XAER_INVAL, and XAER_PROTO.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Obtain a list of prepared transaction branches from a resource manager.
 The transaction manager calls this method during recovery to obtain the list
 of transaction branches that are currently in prepared or heuristically completed states.
        </para>
      </sect3>
      <sect3 xreflabel="Method removeConnectionEventListener(javax.sql.ConnectionEventListener)">
        <title>Method removeConnectionEventListener(ConnectionEventListener)</title>
        <indexterm>
          <primary>removeConnectionEventListener</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>removeConnectionEventListener</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">removeConnectionEventListener</emphasis>(
                        javax.sql.ConnectionEventListener <emphasis>listener</emphasis>);
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>listener</literal>
                    </emphasis> - a component, usually the connection pool manager,
 that has implemented the 
<literal>ConnectionEventListener</literal> interface and
 been registered with this 
<literal>PooledConnection</literal> object as
 a listener</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="1*" colname="c1"/>
            <colspec colwidth="4*" colname="c2"/>
            <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
            <thead>
              <row>
                <entry spanname="span">
                  <para>Additional Information</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>See Also</para>
                </entry>
                <entry>
                  <para>
                    <simplelist type="inline">
                      <member>openlink.javax.OPLXAConnection.addConnectionEventListener</member>
                    </simplelist>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Removes the given event listener from the list of components that
 will be notified when an event occurs on this 
          <literal>OPLXAConnection</literal> object.
        </para>
      </sect3>
      <sect3 xreflabel="Method rollback(javax.transaction.xa.Xid)">
        <title>Method rollback(Xid)</title>
        <indexterm>
          <primary>rollback</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>rollback</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">rollback</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xid</literal>
                    </emphasis> - A global transaction identifier</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Inform the resource manager to roll back work done on behalf of a transaction branch
        </para>
      </sect3>
      <sect3 xreflabel="Method setTransactionTimeout(int)">
        <title>Method setTransactionTimeout(int)</title>
        <indexterm>
          <primary>setTransactionTimeout</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setTransactionTimeout</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public boolean <emphasis role="strong">setTransactionTimeout</emphasis>(int <emphasis>seconds</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>seconds</literal>
                    </emphasis> - the transaction timeout value in seconds.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - <literal>true</literal> if transaction timeout value is set successfully;
 otherwise 
<literal>false</literal>.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible exception values are
 XAER_RMERR, XAER_RMFAIL, or XAER_INVAL.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the current transaction timeout value for this 
          <literal>XAResource</literal> instance.
 Once set, this timeout value is effective until 
          <literal>setTransactionTimeout</literal>
 is invoked again with a different value. To reset the timeout value to the default
 value used by the resource manager, set the value to zero. If the timeout operation
 is performed successfully, the method returns 
          <literal>true</literal>;
 otherwise 
          <literal>false</literal>. If a resource manager does not support transaction
 timeout value to be set explicitly, this method returns 
          <literal>false</literal>.
        </para>
      </sect3>
      <sect3 xreflabel="Method start(javax.transaction.xa.Xid, int)">
        <title>Method start(Xid, int)</title>
        <indexterm>
          <primary>start</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>start</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">start</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>, int <emphasis>flags</emphasis>) 
              throws javax.transaction.xa.XAException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>xid</literal>
                    </emphasis> - A global transaction identifier to be associated with the resource</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>flags</literal>
                    </emphasis> - One of TMNOFLAGS, TMJOIN, or TMRESUME</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>XAException</para>
                </entry>
                <entry>
                  <para>An error has occurred. Possible exceptions are XA_RB*,
 XAER_RMERR, XAER_RMFAIL, XAER_DUPID, XAER_OUTSIDE, XAER_NOTA, XAER_INVAL,
 or XAER_PROTO.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Start work on behalf of a transaction branch specified in xid If TMJOIN is
 specified, the start is for joining a transaction previously seen by
 the resource manager. If TMRESUME is specified, the start is to resume
 a suspended transaction specified in the parameter xid. If neither TMJOIN
 nor TMRESUME is specified and the transaction specified by 
          <literal>xid</literal>
 has previously been seen by the resource manager, the resource manager
 throws the XAException exception with XAER_DUPID error code.
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLXADataSource">
    <title>Class OPLXADataSource</title>
    <indexterm>
      <primary>OPLXADataSource</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLXADataSource</secondary>
    </indexterm>
    <para>
A factory for 
      <literal>XAConnection</literal> objects that is used internally.
 An object that implements the 
      <literal>XADataSource</literal> interface is
 typically registered with a naming service that uses the
 Java Naming and Directory Interface
      <superscript>TM</superscript>
 (JNDI).
    </para>
    <sect2 id="xx1synopsys">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLXADataSource</emphasis> extends OPLConnectionPoolDataSource implements XADataSource {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLXADataSource</emphasis>();
  <emphasis>// Public Methods</emphasis>
  public Reference <emphasis role="strong">getReference</emphasis>() throws javax.naming.NamingException;
  public String <emphasis role="strong">getXaInfo</emphasis>();
  public void <emphasis role="strong">setXaInfo</emphasis>(java.lang.String <emphasis>parm</emphasis>) throws java.sql.SQLException;
  public XAConnection <emphasis role="strong">getXAConnection</emphasis>() throws java.sql.SQLException;
  public XAConnection <emphasis role="strong">getXAConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                      java.lang.String <emphasis>password</emphasis>) 
      throws java.sql.SQLException;
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="1*" colname="c1"/>
          <colspec colwidth="4*" colname="c2"/>
          <spanspec spanname="span" nameend="c2" align="left" namest="c1"/>
          <thead>
            <row>
              <entry spanname="span">
                <para>Additional Information</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Since</para>
              </entry>
              <entry>
                <para>
                  <simplelist type="inline">
                    <member>1.4</member>
                  </simplelist>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLDataSource</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLConnectionPoolDataSource</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLXADataSource</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 id="xx1memberes">
      <title>Members</title>
      <sect3 xreflabel="Method getXAConnection()">
        <title>Method getXAConnection()</title>
        <indexterm>
          <primary>getXAConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getXAConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public XAConnection <emphasis role="strong">getXAConnection</emphasis>() throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempts to establish a physical database connection that can be
 used in a distributed transaction.
        </para>
      </sect3>
      <sect3 xreflabel="Method getXAConnection(java.lang.String, java.lang.String)">
        <title>Method getXAConnection(String, String)</title>
        <indexterm>
          <primary>getXAConnection</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getXAConnection</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public XAConnection <emphasis role="strong">getXAConnection</emphasis>(java.lang.String <emphasis>user</emphasis>, 
                                              java.lang.String <emphasis>password</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>user</literal>
                    </emphasis> - the database user on whose behalf the connection is being made</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>password</literal>
                    </emphasis> - the user's password</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <literal>return</literal> - an 
<literal>XAConnection</literal> object, which represents a
 physical connection to a data source, that can be used in
 a distributed transaction</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>SQLException</para>
                </entry>
                <entry>
                  <para>if a database access error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Attempts to establish a physical database connection, using the given
 user name and password. The connection that is returned is one that
 can be used in a distributed transaction.
        </para>
      </sect3>
      <sect3 xreflabel="Method getXaInfo()">
        <title>Method getXaInfo()</title>
        <indexterm>
          <primary>getXaInfo</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>getXaInfo</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public String <emphasis role="strong">getXaInfo</emphasis>();
          </programlisting>
        </blockquote>
        <para>
Get the xaInfo connections string
        </para>
      </sect3>
      <sect3 xreflabel="Method setXaInfo(java.lang.String)">
        <title>Method setXaInfo(String)</title>
        <indexterm>
          <primary>setXaInfo</primary>
        </indexterm>
        <indexterm>
          <primary>Methods</primary>
          <secondary>setXaInfo</secondary>
        </indexterm>
        <blockquote>
          <programlisting>
            <emphasis>Synopsis: </emphasis>public void <emphasis role="strong">setXaInfo</emphasis>(java.lang.String <emphasis>parm</emphasis>) 
              throws java.sql.SQLException;
          </programlisting>
        </blockquote>
        <informaltable frame="none">
          <tgroup cols="1">
            <colspec colwidth="*" colname="param"/>
            <thead>
              <colspec colwidth="*" colname="param"/>
              <row>
                <entry>
                  <para>Parameters</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>
                    <emphasis>
                      <literal>parm</literal>
                    </emphasis> - a xaInfo connection string</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="*" colname="throws"/>
            <colspec colwidth="2*" colname="throws"/>
            <thead>
              <colspec colwidth="*" colname="throws"/>
              <row>
                <entry>
                  <para>Exceptions</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>java.sql.SQLException</para>
                </entry>
                <entry>
                  <para>if an error occurs</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>
Set the xaInfo connection string
 The default value is "" .
        </para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xreflabel="Class OPLXid">
    <title>Class OPLXid</title>
    <indexterm>
      <primary>OPLXid</primary>
    </indexterm>
    <indexterm>
      <primary>Classes</primary>
      <secondary>OPLXid</secondary>
    </indexterm>
    <sect2 id="xx2synopsis">
      <title>Synopsis</title>
      <programlisting width="80">
public class <emphasis role="strong">OPLXid</emphasis> extends XID implements Xid {
  <emphasis>// Public Constructors</emphasis>
  public <emphasis role="strong">OPLXid</emphasis>(javax.transaction.xa.Xid <emphasis>xid</emphasis>) 
      throws javax.transaction.xa.XAException;
  public <emphasis role="strong">OPLXid</emphasis>(openlink.jdbc3.XID <emphasis>xid</emphasis>) 
      throws javax.transaction.xa.XAException;
  public <emphasis role="strong">OPLXid</emphasis>(int <emphasis>_formatID</emphasis>, byte[] <emphasis>_gtrid</emphasis>, byte[] <emphasis>_bqual</emphasis>) 
      throws javax.transaction.xa.XAException;
  <emphasis>// Public Methods</emphasis>
  public int <emphasis role="strong">getFormatId</emphasis>();
  public byte[] <emphasis role="strong">getGlobalTransactionId</emphasis>();
  public byte[] <emphasis role="strong">getBranchQualifier</emphasis>();
  public boolean <emphasis role="strong">equals</emphasis>(java.lang.Object <emphasis>obj</emphasis>);
}
      </programlisting>
      <informaltable frame="none">
        <tgroup cols="1" align="center">
          <thead>
            <row>
              <entry align="left">
                <para>Inheritance Path</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <simpara>java.lang.Object</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.jdbc3.XID</simpara>
              </entry>
            </row>
            <row>
              <entry>
                <para>|</para>
              </entry>
            </row>
            <row>
              <entry>
                <simpara>openlink.javax.OPLXid</simpara>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>
</chapter>
