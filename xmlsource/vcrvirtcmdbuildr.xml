<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vcrvirtcmdbuildr">
          <title>VirtuosoCommandBuilder Class</title>
          <para>Provides a means of automatically generating single-table commands used to reconcile changes
made to a DataSet with the associated Virtuoso database. This class cannot be inherited.</para>
          <simplelist type="vert">
            <member>System.Object</member>
            <member>   System.MarshalByRefObject</member>
            <member>      System.ComponentModel.Component</member>
            <member>         VirtuosoCommandBuilder</member>
          </simplelist>
          <classsynopsis>
            <ooclass>
              <modifier>public</modifier>
              <modifier>sealed</modifier>
              <modifier>class</modifier>
              <classname>VirtuosoCommandBuilder</classname>
            </ooclass>
            <ooclass>
              <classname>Component</classname>
            </ooclass>
          </classsynopsis>
          <section>
            <title>Thread Safety</title>
            <para>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations.
Any instance members are not guaranteed to be thread safe.</para>
          </section>
          <section>
            <title>Remarks</title>
            <para>The VirtuosoDataAdapter does not automatically generate the SQL statements required to reconcile
changes made to a DataSet associated with the data source. However, you can create a VirtuosoCommandBuilder object
that generates SQL statements for single-table updates if you set the SelectCommand property of the VirtuosoDataAdapter.
Then, the VirtuosoCommandBuilder generates any additional SQL statements that you do not set.</para>
            <para>The relationship between a VirtuosoDataAdapter and its corresponding VirtuosoCommandBuilder is always
one-to-one. To create this correspondence, you set the DataAdapter property of the VirtuosoCommandBuilder object.
This causes the VirtuosoCommandBuilder to register itself as a listener for RowUpdating events on the specified
VirtuosoDataAdapter object.</para>
            <para>To generate INSERT, UPDATE, or DELETE statements, the VirtuosoCommandBuilder uses the SelectCommand
property to retrieve a required set of metadata. If you change the value of SelectCommand after the metadata
has been retrieved (for example, after the first update), you then should call the RefreshSchema method to update
the  metadata.</para>
            <para>The VirtuosoCommandBuilder also uses the Connection, CommandTimeout, and Transaction properties
referenced by the SelectCommand. The user should call RefreshSchema if any of these properties are modified, or
if the value of the SelectCommand property itself is changed. Otherwise the InsertCommand, UpdateCommand, and
DeleteCommand properties retain their previous values.</para>
            <para>If you call Dispose, the VirtuosoCommandBuilder is disassociated from the VirtuosoDataAdapter,
and the generated commands are no longer used.</para>
          </section>
          <section>
            <title>VirtuosoCommandBuilder Constructor</title>
            <section>
              <title>VirtuosoCommandBuilder Constructor ()</title>
              <para>Initializes a new instance of the VirtuosoCommandBuilder class.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoCommandBuilder</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>VirtuosoCommandBuilder Constructor (VirtuosoDataAdapter)</title>
              <para>Initializes a new instance of the VirtuosoCommandBuilder class with the associated
VirtuosoDataAdapter object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoCommandBuilder</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>VirtuosoDataAdapter</type>
                  <parameter>adapter</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>adapter</term>
                    <listitem>
                      <para>
		    A VirtuosoDataAdapter object to associate with this VirtuosoCommandBuilder.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Remarks</title>
                <para>The VirtuosoCommandBuilder registers itself as a listener for RowUpdating events that are
generated by the VirtuosoDataAdapter specified in this property.</para>
              </section>
            </section>
          </section>
          <section>
            <title>Properties</title>
            <section>
              <title>DataAdapter Property</title>
              <para>Gets or sets a VirtuosoDataAdapter object for which SQL statements are automatically generated.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoDataAdapter</type>
                <varname>DataAdapter</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>A VirtuosoDataAdapter object.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The VirtuosoCommandBuilder registers itself as a listener for RowUpdating events that are generated
by the VirtuosoDataAdapter specified in this property.</para>
              </section>
            </section>
            <section>
              <title>QuotePrefix Property</title>
              <para>Gets or sets the beginning character or characters to use when working with database objects
(for example, tables or columns) whose names contain characters such as spaces.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <varname>QuotePrefix</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The beginning character or characters to use. The default is an empty string.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Database objects in Virtuoso servers can contain any valid characters, including spaces, commas,
and semicolons. To accommodate this capability, use the QuotePrefix and QuoteSuffix properties to specify delimiters
such as a left bracket and a right bracket to encapsulate the object name.</para>
              </section>
            </section>
            <section>
              <title>QuoteSuffix Property</title>
              <para>Gets or sets the ending character or characters to use when working with database objects
(for example, tables or columns) whose names contain characters such as spaces.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <varname>QuotePrefix</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The ending character or characters to use. The default is an empty string.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Database objects in Virtuoso servers can contain any valid characters, including spaces, commas,
and semicolons. To accommodate this capability, use the QuotePrefix and QuoteSuffix properties to specify delimiters
such as a left bracket and a right bracket to encapsulate the object name.</para>
              </section>
            </section>
          </section>
          <section>
            <title>Methods</title>
            <section>
              <title>DeriveParameters Method</title>
              <para>Retrieves parameter information from the stored procedure specified in the VirtuosoCommand and
populates the Parameters collection of the specified VirtuosoCommand object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>static</modifier>
                <void/>
                <methodname>DeriveParameters</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>VirtuosoCommand</type>
                  <parameter>command</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>command</term>
                    <listitem>
                      <para>
		    The VirtuosoCommand referencing the stored procedure from which the parameter information is to be
		    derived. The derived parameters are added to the Parameters collection of the VirtuosoCommand.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Remarks</title>
                <para><methodname>DeriveParameters</methodname>

   overwrites any existing parameter information for
the VirtuosoCommand. <methodname>DeriveParameters</methodname>

   requires an extra call to the data server to obtain
the information. If the parameter information is known in advance, it is more efficient to populate the parameters
collection by setting the information explicitly.</para>
                <para>For more information, see "Using Stored Procedures with a Command" in the
Microsoft® .NET Framework SDK documentation.</para>
              </section>
            </section>
            <section>
              <title>Dispose Method</title>
              <para>Releases the unmanaged and, optionally, the managed resources used by the VirtuosoCommandBuilder.</para>
              <methodsynopsis>
                <modifier>protected</modifier>
                <modifier>override</modifier>
                <void/>
                <methodname>Dispose</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>bool</type>
                  <parameter>disposing</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>disposing</term>
                    <listitem>
                      <para><literal>true</literal>
                       to release both managed and unmanaged resources;
                      <literal>false</literal>
                       to release only unmanaged resources.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Remarks</title>
                <para>This method is called by the public Dispose method and the Finalize method. Dispose() invokes
the protected Dispose(Boolean) method with the disposing parameter set to true. Finalize invokes Dispose with
disposing set to false.</para>
                <para>When the disposing parameter is true, the method releases all resources held by any managed objects
that this VirtuosoCommand references. It does this by invoking the Dispose() method of each referenced object.</para>
                <para>For more information about Dispose and Finalize, see "Cleaning Up Unmanaged Resources," and "Overriding the Finalize Method," in the .NET Framework SDK documentation.</para>
              </section>
            </section>
            <section>
              <title>GetDeleteCommand Method</title>
              <para>Gets the automatically generated VirtuosoCommand object required to perform deletions on
the Virtuoso database.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoCommand</type>
                <methodname>GetDeleteCommand</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>The automatically generated VirtuosoCommand object required to perform deletions.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>You can use the GetDeleteCommand method for informational or troubleshooting purposes because
it returns the VirtuosoCommand object to be executed.</para>
                <para>You can also use GetDeleteCommand as the basis of a modified command. For example, you might call
GetDeleteCommand and modify the CommandTimeout value, and then explicitly set that on the VirtuosoDataAdapter.</para>
                <para>After the SQL statement is first generated, you must explicitly call RefreshSchema if you change
the statement in any way. Otherwise, the GetDeleteCommand still will be using information from the previous statement,
which might not be correct. The SQL statements are first generated when the application calls either Update or
GetDeleteCommand.</para>
              </section>
            </section>
            <section>
              <title>GetInsertCommand Method</title>
              <para>Gets the automatically generated VirtuosoCommand object required to perform insertions on
the Virtuoso database.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoCommand</type>
                <methodname>GetInsertCommand</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>The automatically generated VirtuosoCommand object required to perform insertions.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>You can use the GetInsertCommand method for informational or troubleshooting purposes because
it returns the VirtuosoCommand object to be executed.</para>
                <para>You can also use GetInsertCommand as the basis of a modified command. For example, you might call
GetInsertCommand and modify the CommandTimeout value, and then explicitly set that on the VirtuosoDataAdapter.</para>
                <para>After the SQL statement is first generated, you must explicitly call RefreshSchema if you change
the statement in any way. Otherwise, the GetInsertCommand still will be using information from the previous statement,
which might not be correct. The SQL statements are first generated when the application calls either Update or
GetInsertCommand.</para>
              </section>
            </section>
            <section>
              <title>GetUpdateCommand Method</title>
              <para>Gets the automatically generated VirtuosoCommand object required to perform updates on
the Virtuoso database.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoCommand</type>
                <methodname>GetUpdateCommand</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>The automatically generated VirtuosoCommand object required to perform updates.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>You can use the GetUpdateCommand method for informational or troubleshooting purposes because
it returns the VirtuosoCommand object to be executed.</para>
                <para>You can also use GetUpdateCommand as the basis of a modified command. For example, you might call
GetUpdateCommand and modify the CommandTimeout value, and then explicitly set that on the VirtuosoDataAdapter.</para>
                <para>After the SQL statement is first generated, you must explicitly call RefreshSchema if you change
the statement in any way. Otherwise, the GetUpdateCommand still will be using information from the previous statement,
which might not be correct. The SQL statements are first generated when the application calls either Update or
GetUpdateCommand.</para>
              </section>
            </section>
            <section>
              <title>RefreshSchema Method</title>
              <para>Refreshes the database schema information used to generate INSERT, UPDATE, or DELETE statements.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>RefreshSchema</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Remarks</title>
                <para>You should call RefreshSchema whenever the SelectCommand value of the VirtuosoDataAdapter changes.</para>
              </section>
            </section>
          </section>
        </section>
