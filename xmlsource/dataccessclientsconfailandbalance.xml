<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="dataccessclientsconfailandbalance">
      <title>Virtuoso Data Access Clients Connection Fail over and Load Balancing Support</title>
      <para>The Virtuoso Data Access Clients ODBC, JDBC, ADO.Net, OLE DB, Sesame, Jena and Redland as of Release 6.1 and above support round
robin connections to Virtuoso server instances enabling server fail over, load balancing and fault tolerant connections to be performed
across multiple server instances configured in a cluster or as separate server instances.
  </para>
      <para>Fail over connections are enabled by specifying a comma delimited list of servers to failover to, in the "Host" or 'Server"
connect string attribute, with the list being worked through in the order presented to determine which Virtuoso Server instance is
used. A Round robin (load balanced) connection can be configured by adding the connect string attribute "RoundRobin" = [True | Yes |
False | No], in which case the server for the connection is chosen at random from the comma delimited provided as for a Failover
connection above.
  </para>
      <para>Example connect strings for Virtuoso ODBC, JDBC, ADO.Net and OLE DB driver/providers are provided below. The Virtuoso Sesame
and Jena providers which make use of the JDBC driver and Redland Provider which makes use of the ODBC driver, would simply make use
of a suitably configured JDBC or ODBC connect string to enable Failover or Round Robin connections to be made with them.
  </para>
      <section xml:id="dataccessclientsconfailandbalanceodbc">
        <title>ODBC</title>
        <section xml:id="dataccessclientsconfailandbalanceodbcf">
          <title>Failover Connect String format</title>
          <programlisting>
Driver={OpenLink Virtuoso};Host=server1:port1,server2:port2,server3:port3;UID=dba;PWD=dba;
</programlisting>
        </section>
        <section xml:id="dataccessclientsconfailandbalanceodbcr">
          <title>Round Robin Connect String format</title>
          <programlisting>
Driver={OpenLink Virtuoso};Host=server1:port1,server2:port2,server3:port3;UID=dba;PWD=dba;RoundRobin=Yes"
</programlisting>
          <para>Or alternatively ensure the "use Round Robin for failover connection" check box in the setup dialog.</para>
          <figure xml:id="adf1" floatstyle="1">
            <title>ODBC Round Robin Connect String format</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/adf1.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
      </section>
      <section xml:id="dataccessclientsconfailandbalanceado">
        <title>ADO.Net</title>
        <section xml:id="dataccessclientsconfailandbalanceadof">
          <title>Failover Connect String format</title>
          <programlisting>
Server=server1:port1,server2:port2,server3;UserId=dba;Password=dba;
</programlisting>
        </section>
        <section xml:id="dataccessclientsconfailandbalanceador">
          <title>Round Robin Connect String format</title>
          <programlisting>
Server=server1:port1,server2:port2,server3;UserId=dba;Password=dba;Round Robin=true;Pooling=false;
</programlisting>
        </section>
      </section>
      <section xml:id="dataccessclientsconfailandbalancejdbc">
        <title>JDBC</title>
        <section xml:id="dataccessclientsconfailandbalancejdbcf">
          <title>Failover Connect String format</title>
          <programlisting>
jdbc:virtuoso://server1:port1,server2:port2,server3/UID=dba/PWD=dba/;
</programlisting>
        </section>
        <section xml:id="dataccessclientsconfailandbalancejdbcr">
          <title>Round Robin Connect String format</title>
          <programlisting>
jdbc:virtuoso://server1:port1,server2:port2,server3:1111/UID=dba/PWD=dba/ROUNDROBIN=yes;
</programlisting>
        </section>
      </section>
      <section xml:id="dataccessclientsconfailandbalanceole">
        <title>OLE DB</title>
        <section xml:id="dataccessclientsconfailandbalanceolef">
          <title>Failover Connect String format</title>
          <programlisting>
Provider=VIRTOLEDB;Data Source=server1:port1,server2:port2,server3;User Id=dba;Password=dba;Initial Catalog=Demo;Prompt=NoPrompt;
</programlisting>
        </section>
        <section xml:id="dataccessclientsconfailandbalanceoler">
          <title>Round Robin Connect String format</title>
          <programlisting>
  Provider=VIRTOLEDB;Data Source=server1:port1,server2:port2,server3;User Id=dba;
Password=dba;Initial Catalog=Demo;Prompt=NoPrompt;Round Robin=true
</programlisting>
        </section>
      </section>
      <section xml:id="dataccessclientsconfailandbalancesesm">
        <title>Sesame</title>
        <section xml:id="dataccessclientsconfailandbalancesesmf">
          <title>Failover Connect String format</title>
          <programlisting>
VirtuosoRepository("server1:port1,server2:port2,server3", "uid", "pwd");
</programlisting>
        </section>
        <section xml:id="dataccessclientsconfailandbalancesesmr">
          <title>Round Robin Connect String format</title>
          <programlisting>
VirtuosoRepository("server1:port1,server2:port2,server3", "uid", "pwd");
((VirtuosoRepository)repository).setRoundrobin(true);
</programlisting>
        </section>
        <section xml:id="dataccessclientsconfailandbalancesesms">
          <title>Sample program</title>
          <programlisting>
/*
 *  $Id$
 *
 *  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 *  project.
 *
 *  Copyright (C) 1998-2018 OpenLink Software
 *
 *  This project is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; only version 2 of the License, dated June 1991.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

import java.sql.*;
import java.util.*;
import java.lang.*;

import org.openrdf.model.*;
import org.openrdf.query.*;
import org.openrdf.repository.*;
import org.openrdf.rio.*;
import virtuoso.jdbc4.*;

import virtuoso.sesame2.driver.*;

public class TestSesame2 {

  public static void main(String[] args) {

      Repository repository = new
	VirtuosoRepository("localhost:1111,localhost:1311,localhost:1312,localhost:1313", "dba", "dba");
      ((VirtuosoRepository)repository).setRoundrobin(true);

      RepositoryConnection con = null;
      Random rnd = new Random();
      for (int i = 0; i &lt; 1000000; ) {
	  try {
	      if (null == con) {
		  System.out.println("New connection");
		  con = repository.getConnection();
	      }

	      TupleQuery query = con.prepareTupleQuery(
		      QueryLanguage.SPARQL, "INSERT INTO &lt;test_g&gt; { &lt;sub" + i + "&gt; &lt;pred&gt; &lt;obj" + i+ "&gt; . " +
		      " &lt;r" + Math.abs (rnd.nextInt()) + "&gt; &lt;rndpred&gt; &lt;r" + Math.abs (rnd.nextInt ()) + "&gt; . }");
	      TupleQueryResult queryResult = query.evaluate();
	      /*long count = 0;
	      while (queryResult.hasNext())
	      {
		  queryResult.next();
		  count++;
		  if (count % 1000 == 0)
		  {
		      System.out.println("Passed " + count + " results...");
		  }
	      }
	      */
	      queryResult.close();
	      i++;
	      try { Thread.sleep(100); } catch (InterruptedException ie) { }

	  } catch (Exception e) {
	      String state = "";
	      if (e.getCause() instanceof SQLException) {
		  state = ((SQLException)e.getCause()).getSQLState();
	      }
	      System.out.println("ERROR:" + state + " " + e.getCause());
	      try { Thread.sleep(2000); } catch (InterruptedException ie) { }
	      System.out.println("ERROR:" + e.toString ());
	      if (state == "")
	        e.printStackTrace();
	      try {
		  if (con != null /*&amp;&amp; (state == "08U01" || state == "S2801")*/) {
		      System.out.println("Closing Connection.");
		      con.close();
		      con = null;
		  }
	      } catch (RepositoryException re) {
		  System.out.println("Test Failed.");
		  re.printStackTrace();
		  System.exit (1);
	      }
	  } finally {
	  }
      }
  }
}
</programlisting>
        </section>
      </section>
    </section>
