<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="ch-sampleapps">
    <info>
      <title>Sample ODBC &amp; JDBC Applications</title>
      <abstract>
        <para>This chapter applies exclusively to the various commercial releases of Virtuoso.  If you are working with the open source version, please refer to the instructions on the web site where you obtained it.  
</para>
        <para>The OpenLink Virtuoso Installation provides sample applications to help you get quick and easy results from you installation.  This chapter explains how to use these applications.
</para>
      </abstract>
    </info>
    <para>A number of sample applications are bundled
    with your Virtuoso installation for the following purposes:</para>
    <simplelist type="vert">
      <member>
			  To simplifying the process of getting
        Virtuoso up and running
		</member>
      <member>
			To accelerate the support case creation and
        resolution process
		</member>
      <member>
			To demonstrate Virtuoso's unique product
        features highlighting the benefits it brings to your organization
		</member>
      <member>
			To demonstrate application programming
        techniques that can used to aid and assist your ODBC and JDBC programmers
		</member>
    </simplelist>
    <para>Virtuoso's services are consumed primarily via
    ODBC and JDBC applications (OLE-DB applications connect to Virtuoso via ODBC Data
    Providers for OLE-DB), thus separate ODBC &amp; JDBC sample applications (including source
    code) have been packaged and integrated into the Virtuoso installer. The current list of
    sample applications include:</para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>C++ Demo</title>
          <para>an ODBC
        based Interactive SQL processor written in C++. </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>ODBC Bench Test</title>
          <para>a 32 Bit C++ program based on the industry standard TPC-A benchmark (we will be extending
        this program to include the TPC-C and TPC-D benchmarks also). This program helps you
        compare the performance of Virtuoso against other backend database engines as well as
        compare the performance of various ODBC Drivers connecting to any ODBC compliant backend
        database.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>ODBCTEST</title>
          <para>ODBC based Interactive SQL processor written in 'C' for Linux &amp; UNIX</para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>JDBCDemo</title>
          <para>a JDBC sample application that demonstrates Virtuoso's SQL query.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>ScrollDemo2</title>
          <para>a JDBC 2.0 sample application that demonstrates Virtuoso's support of
		Scrollable Cursors and its ability to perform scrollable cursor operations across heterogeneous
		databases.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>JBench</title>
          <para>a Java and JDBC based adaptations of the industry standard TPC-A and TPC-C benchmarks.
		This program helps you compare the performance of Virtuoso against other backend database
        engines, it also helps you to compare the performance of various JDBC Drivers connecting
        to any JDBC compliant backend database.</para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>JTADemo</title>
          <para>a sample based on the TPC-A benchmark as
well but implemented as a J2EE application which shows the use of XA distributed
transactions as defined in JDBC 3.0 and JTA 1.0 specifications.</para>
        </formalpara>
      </listitem>
    </itemizedlist>
    <section xml:id="binsrcloc">
      <title>Binary &amp; Source File Locations</title>
      <section xml:id="odbcdemos">
        <title>ODBC Demonstration Applications</title>
        <para>Windows 95/98/NT/2000, Linux &amp; UNIX:</para>
        <para>The binary executables of these sample applications reside
    under the following directory structure:</para>
        <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc</programlisting>
        <para>The source code of some of these sample applications, when
    available, reside under the following directory structure, for example:</para>
        <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc\cppdemo</programlisting>
      </section>
      <section xml:id="sampjdbcdemos">
        <title>JDBC Demonstration Applications</title>
        <para>Windows 95/98/NT/2000, Linux &amp; UNIX:</para>
        <para>The binary executables (Java class files), and sources for
    these sample applications reside under the following directory structure:</para>
        <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\jdbc\&lt;JDK_Version&gt;\&lt;Demo_name&gt;</programlisting>
      </section>
    </section>
    <section xml:id="sampleodbcapps">
      <title>Sample ODBC Applications</title>
      <section xml:id="macosxsamples">
        <title>Mac OS X</title>
        <section xml:id="odbctestmac">
          <title>ODBCTEST:</title>
          <para>This is a simple 'C' based and ODBC compliant Interactive SQL processor. </para>
          <orderedlist>
            <listitem>
              <para>Open a Terminal session, and start ODBCTEST by executing the following command:</para>
              <programlisting>/Library/iodbc/bin/odbctest</programlisting>
            </listitem>
            <listitem>
              <para>At the SQL command prompt enter "?" for a list of ODBC
        DSNs on your machine or enter a valid ODBC Connect String.
					If you have a DSN named "Marketing" you would enter:</para>
              <programlisting>DSN=Marketing;UID=username;PWD=password</programlisting>
              <para>Note: If there is no password, you must include a semicolon at the end:</para>
              <programlisting>DSN=Marketing;UID=sa;PWD=;</programlisting>
            </listitem>
            <listitem>
              <para>Any valid SQL or ODBC command may be executed through this interface. The following example
					shows a connection to Microsoft SQL Server 2000, making a simple query against the sample Northwind database:</para>
              <programlisting>
[localhost:~] openlink% /Library/iodbc/bin/odbctest
iODBC Demonstration program
This program shows an interactive SQL processor

Enter ODBC connect string (? shows list, or DSN=...): DSN=user_tthib_sql2k

SQL&gt;select au_lname, au_fname, state from authors where au_id &lt; '333-33-3333'
au_lname                                |au_fname            |state
----------------------------------------+--------------------+-----
White                                   |Johnson             |CA
Green                                   |Marjorie            |CA
Carson                                  |Cheryl              |CA
O'Leary                                 |Michael             |CA
Straight                                |Dean                |CA
 5 row(s) fetched.

SQL&gt;quit
Again (y/n) ? n

Have a nice day.
[localhost:~] openlink%
</programlisting>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="winodbcsamples">
        <title>Windows 95/98/NT/2000</title>
        <section xml:id="cppdemo32">
          <title>C++ Demo</title>
          <orderedlist>
            <listitem>
              <para>Go to the Virtuoso "Start Menu" item, then click on
        the "C++ Demo 32 Bit" menu item.</para>
              <figure xml:id="sample001" floatstyle="1">
                <title>C++ Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl001.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Follow the Environment-&gt;Open Connection menu path. Selecting the
        "Open Connection" menu item results in the ODBC Driver Manager presenting you
        with a list of ODBC DSNs on your machine as depicted by the screen capture below:</para>
              <figure xml:id="sample002" floatstyle="1">
                <title>C++ Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl004.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Select the ODBC DSN that you want to be connecting to, in this case
        "Local Virtuoso Demo" has been chosen since this will connect you to a sample
        Virtuoso database that has been populated with data. </para>
            </listitem>
            <listitem>
              <para>You are then presented with a Login Dialog by the Virtuoso driver
        for ODBC, enter a valid user name and password (default being user: demo and password:
        demo) into the appropriate fields.</para>
              <figure xml:id="sample003" floatstyle="1">
                <title>C++ Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl003.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>At this point you will be connected to the Virtuoso demonstration
        database, you can now use the SQL--&gt;Execute SQL menu path to open up the Interactive
        SQL input dialog. Enter a valid SQL statement (see example in screen shot) and then click
        on the "OK" button.</para>
              <figure xml:id="sample004" floatstyle="1">
                <title>C++ Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl006.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You will be presented with the results of your query.</para>
              <figure xml:id="sample004_01" floatstyle="1">
                <title>C++ Demo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl007.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You exit this demo by following the Environment--&gt;Close Connection menu path.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="odbcbench32">
          <title>ODBC Bench Test 32</title>
          <orderedlist>
            <listitem>
              <para>Go to the Virtuoso "Start Menu" item, then click on the "ODBC Bench
        Test 32 Bit" menu item. You will be presented with the "Bench Test"
        interface.</para>
              <figure xml:id="sample005" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl008.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Follow the File-Connect menu path which initializes the ODBC Driver Manager which in
        turn presents you with a list of ODBC DSN's installed on your machine. Select the DSN that
        you want to benchmark, remember that by benchmarking a DSN you are benchmarking the ODBC
        Driver that serves the DSN in question and the backend database engine that serves the
        ODBC Driver. Choose the "Local Virtuoso Demo" DSN if you want to benchmark
        Virtuoso.</para>
              <figure xml:id="sample006" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl009.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>You will then be presented with a Login Dialog by the Virtuoso driver for ODBC, enter a
        valid user name and password (default being user: demo and password: demo for the Demo
        database) into the appropriate fields.</para>
              <figure xml:id="sample007" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl010.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Now follow the Bench--&gt;Load Tables menu path and you will be presented with a dialog
        that enables you to configure key elements of your benchmark. Click the
        "Execute" button to commence the process of setting up your database for the
        benchmark tests.</para>
              <figure xml:id="sample008" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl011.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>As the process of loading data occurs, all the way up to completion, the benchmark
        program will provide status information into the benchmark output pane as shown below:</para>
              <figure xml:id="sample010" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl012.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Now that all the benchmark data has been loaded into your database, follow the
        Bench--&gt;Run Benchmark menu path and then configure your actual benchmark session
        parameters:</para>
              <para>These benchmark parameters fall into 3 categories, Timing Options, SQL Options, and
        Execution Options.</para>
              <figure xml:id="sample011" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl013.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <para><emphasis>Timing Options:</emphasis>

						These setting allow you to configure the duration related aspects of this benchmark
        program</para>
              <para>
        Minutes - this is the duration of each benchmark run</para>
              <para>
        Runs - this controls how many iterations of the benchmarks you actually run (the default
        is one benchmark iteration with a duration of 5 minutes)</para>
              <para><emphasis>SQL Options:</emphasis>

        These setting allow you to configure how your benchmark's SQL instructions are actually
        handled.</para>
              <para>ExecDirect with SQL Text - this means that no form of repetitive SQL execution
        optimization is being applied (SQL statements are prepared and executed repetitively)</para>
              <para>Prepare/Execute Bound Params - this means that the Parameter Binding SQL execution
        optimization is being applied (SQL is prepared once but executed many times without the
        overhead of re-preparing statements prior to execution)</para>
              <para>Use Stored Procedures - this means that the Stored Procedure SQL optimization is being
        applied (benchmark instructions are stored within database being benchmarked)</para>
              <para><emphasis>Execution Options:</emphasis>

						These setting allow you to configure the tone of your benchmark, for instance it could
        have Transaction scoping and a mix of record retrieval queries, or it could simply be
        input and update intensive with a minimal amount of record retrieval queries (the case
        when the 100 row query checkbox is unchecked a typical OLTP scenario) </para>
              <para>Asynchronous - execute the benchmark instructions asynchronously</para>
              <para>Use Transactions - make the benchmark use transaction control (instructions are scoped to
        transaction blocks)</para>
              <para>Do 100 row Query - perform a simulation of a 100 record retrieval as part of the benchmark
        activity.</para>
            </listitem>
          </orderedlist>
          <orderedlist>
            <listitem>
              <para>Click on the "Run All" button if you would like all the different benchmark
        type combinations to be performed.</para>
            </listitem>
            <listitem>
              <para>When benchmark run complete benchmark data is written to the benchmark program's output
        pane.</para>
              <figure xml:id="sample012" floatstyle="1">
                <title>ODBC Bench</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="sampl014.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <para>The key pieces of benchmark data that you need to look out for are:</para>
              <para><emphasis>Total Transactions: </emphasis>

   total number of transactions completed during the
        benchmark run</para>
              <para><emphasis>Transactions Per Second</emphasis>

            number of transaction completed per second for
            the benchmark run</para>
              <para>Information from this benchmark is automatically written to an Excel format CSV
		(the file odbcbnch.csv) which makes it easy for you to graph
        and pivot data collated from several benchmark runs. A later version of this demo will
        actually write the benchmark data into an ODBC DSN that you provide thereby offering even
        more flexibility and accessibility to benchmark data.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="unixodbcsamp">
        <title>Linux &amp; UNIX</title>
        <section xml:id="odbctestnix">
          <title>ODBCTEST:</title>
          <para>This is a simple 'C' based and ODBC compliant Interactive SQL processor. </para>
          <orderedlist>
            <listitem>
              <para>Run the script virtuoso-enterprise.sh to set up your environment:</para>
              <programlisting>. virtuoso-enterprise.sh</programlisting>
            </listitem>
            <listitem>
              <para>Start ODBCTEST by executing the following command:</para>
              <programlisting>odbctest</programlisting>
            </listitem>
            <listitem>
              <para>At the SQL command prompt enter "?" for a list of ODBC
        DSNs on your machine or enter a valid ODBC Connect String.
					If you have a DSN named "Marketing" you would enter:</para>
              <programlisting>DSN=Marketing;UID=username;PWD=password</programlisting>
              <para>Note: If there is no password, you must include a semicolon at the end:</para>
              <programlisting>DSN=Marketing;UID=sa;PWD=;</programlisting>
            </listitem>
            <listitem>
              <para>Any valid SQL or ODBC command may be executed through this interface. The following example
					shows a connection to Microsoft SQL Server 2000, making a simple query against the sample Northwind database:</para>
              <programlisting>
[localhost:~] openlink% odbctest
iODBC Demonstration program
This program shows an interactive SQL processor

Enter ODBC connect string (? shows list, or DSN=...): DSN=test_sql2k

SQL&gt;select au_lname, au_fname, state from authors where au_id &lt; '333-33-3333'
au_lname                                |au_fname            |state
----------------------------------------+--------------------+-----
White                                   |Johnson             |CA
Green                                   |Marjorie            |CA
Carson                                  |Cheryl              |CA
O'Leary                                 |Michael             |CA
Straight                                |Dean                |CA
 5 row(s) fetched.

SQL&gt;quit
Again (y/n) ? n

Have a nice day.
[localhost:~] openlink%
</programlisting>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="msdtcsample">
        <title>MS DTC ODBC Sample Application</title>
        <para>The MS DTC demo is located in the 
	        <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc\MSDTCdemo1</programlisting>
	        folder. This demo shows usage of  distributed transactions driven by MS DTC through the ODBC API.</para>
        <section xml:id="msdtcdemo1setup">
          <title>Setup</title>
          <para> The sample works with two instances of Virtuoso server. The running MS DTC service is needed. 
	             The servers must be started with MS DTC support (see Virtuoso documentation). </para>
          <para> 
	             First of all, edit the virt.odbc file. By default this file contains two connection strings of local Virtuoso servers running on port 1111 and port 1112,
	             Each line begins with connection string to appropriate Virtuoso server. 
	             Initially this file contains the following lines: </para>
          <programlisting>
1111 dba dba 00.sql
1112 dba dba 01.sql 
	             </programlisting>
          <para> where 1111, 1112 are ports of two Virtuoso servers. "dba dba" - user and password. </para>
        </section>
        <section xml:id="msdtcdemo1init">
          <title>Initialization</title>
          <para> Start <programlisting> mtstest.exe +load </programlisting> in the <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc\MSDTCdemo1</programlisting>
	        folder. This must check whether all needed servers are running, create and initialize  tables, procedures, etc.</para>
        </section>
        <section xml:id="msdtcdemo1start">
          <title>Test</title>
          <para> Run the command in the demo's working directory: </para>
          <programlisting> 
mtstest.exe   +exec N
mtstest.exe   +exec 0
	         </programlisting>
          <para> where N - is a number of test iterations. The second command checks logical consistency of the tables.</para>
        </section>
        <section xml:id="msdtcdemo1description">
          <title>Description</title>
          <para> The demo source is <programlisting>start.c</programlisting> file in the <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc\MSDTCdemo1</programlisting>
	         directory. Several highlights of the most significant
	         parts of code are presented  below: </para>
          <programlisting>
  ITransactionDispenser *disp;
  ITransaction *transaction;

  ...
  HRESULT hr =
      DtcGetTransactionManagerC (0, 0, &amp;IID_ITransactionDispenser, 0, 0, 0,
      &amp;, disp);
	         </programlisting>
          <para>
	             The code above creates Dispenser object which represents the local instance of MS DTC. If MS DTC is not available 
	             <programlisting>DtcGetTransactionManagerC</programlisting> 
	            fails. The Dispenser is needed to create distributed transaction objects later.
	         </para>
          <para>
	             Begin new distributed transaction: </para>
          <programlisting>
disp-&gt;lpVtbl-&gt;BeginTransaction (disp, 0, ISOLATIONLEVEL_ISOLATED,
      0, 0, &amp;transaction);	             
	         </programlisting>
          <para> Enlist connection in the transaction: </para>
          <programlisting>
SQLSetConnectOption (hdbc, SQL_COPT_SS_ENLIST_IN_DTC,
      (DWORD) transaction);
	         </programlisting>
          <para> And, finally, commit the transaction: </para>
          <programlisting>
transaction-&gt;lpVtbl-&gt;Commit (tran, 0, 0, 0);
	         </programlisting>
        </section>
      </section>
      <section xml:id="msdtcsample2">
        <title>MS DTC OLE DB Sample Application</title>
        <para>The MS DTC OLE DB demo is located in the 
	        <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc\MSDTCdemo2</programlisting>
	        folder. This demo shows usage of  distributed transactions driven by MS DTC through OLE DB.</para>
        <section xml:id="msdtcdemo2setup">
          <title>Setup</title>
          <para> The sample works with two instances of Virtuoso server. Running MS DTC service is needed. 
	             The servers must be started with MS DTC support (see Virtuoso documentation). </para>
          <para> 
	             The test needs two Virtuoso server instances running on ports 1111 and 1112
	         </para>
        </section>
        <section xml:id="msdtcdemostart">
          <title>Run</title>
          <para> Run the command in the demo's working directory: </para>
          <programlisting> 
voledbtest.exe
	         </programlisting>
        </section>
        <section xml:id="msdtcdemodescription">
          <title>Description</title>
          <para> The demo source is <programlisting>voledbtest.cs</programlisting> file in the <programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\odbc\MSDTCdemo</programlisting>
	         directory. Several highlights of the most significant
	         parts of code are presented  below: </para>
          <programlisting>
[TransactionAttribute(TransactionOption.Required)]	             
  	         </programlisting>
          <para>
	             It is significant to set this attribute of class to enable automatic transaction initialization.
	         </para>
          <para> Create connections to appropriate servers: </para>
          <programlisting>
string strConn = "Provider=VIRTOLEDB;Data Source=" + dsn1 
    + ";User Id=dba;Password=dba;Initial Catalog=Demo;Prompt=NoPrompt;";
string strConn2 = "Provider=VIRTOLEDB;Data Source=" + dsn2 + 
    ";User Id=dba;Password=dba;Initial Catalog=Demo;Prompt=NoPrompt;";
obj_conn = new OleDbConnection(strConn);
obj_conn2 = new OleDbConnection(strConn2);
	         </programlisting>
          <para> And, finally, execute the SQL code in the context of distributed transaction: </para>
          <programlisting>
OleDbCommand sqlc = new OleDbCommand ("ODBC_BENCHMARK(" + idx + ",1,1,12.00,\'noone\')");
sqlc.Connection = obj_conn;
sqlc.ExecuteNonQuery();
sqlc = new OleDbCommand ("ODBC_BENCHMARK(" + idx + ",1,1,-12.00,\'noone\')");
sqlc.Connection = obj_conn2;
sqlc.ExecuteNonQuery();
	         </programlisting>
        </section>
      </section>
    </section>
    <section xml:id="jdbcdemos">
      <title>Sample JDBC Applications &amp; Applets</title>
      <section xml:id="jdbcdemo">
        <title>JDBCDemo Java Application</title>
        <orderedlist>
          <listitem>
            <para>Go to the Virtuoso "Start Menu" program group and then follow the JDBC
        Samples--&gt;JDBCDemo (JDK1.1&amp;1.2) menu path, this will execute a DOS batch program that
        initializes the Java demo application. </para>
            <figure xml:id="vjdemo1" floatstyle="1">
              <title>JDBC Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="vjdemo1.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Set the JDBC Driver Name and URL settings for your connection to the Virtuoso
        demonstration database. The "Driver Name" field identifies the Virtuoso Driver.
        If it is left blank, then it defaults to "virtuoso.jdbc.Driver", which is the
        Virtuoso Driver for JDBC 1.0.  The "Connection URL" field requires a valid
        Virtuoso JDBC URL.</para>
            <figure xml:id="vjdemo2" floatstyle="1">
              <title>JDBC Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="vjdemo2.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a valid SQL statement and then click the "Query" button, the example
        below uses a fully qualified Virtuoso SQL statement requesting all records from the
        "Demo" database table "Customers" owned by the Virtuoso user
        "DBA".</para>
            <figure xml:id="vjdemo3" floatstyle="1">
              <title>JDBC Demo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="vjdemo3.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="scrolldemo2">
        <title>ScrollDemo2 Java Application</title>
        <orderedlist>
          <listitem>
            <para>Go to the Virtuoso Lite "Start Menu" program group and then follow the JDBC
        Samples--&gt;ScrollDemo2 (JDK1.2) menu path, this will execute a DOS batch program that
        initializes the Java demo application. </para>
            <figure xml:id="sample013" floatstyle="1">
              <title>Scroll Demo 2</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl015.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Set the JDBC Driver Name and URL settings for your connection to the Virtuoso
        demonstration database. The "Driver Name" field identifies the Virtuoso Driver.
        If it is left blank, then it defaults to "virtuoso.jdbc2.Driver", which is the
        Virtuoso Driver for JDBC 2.0.  The "Connection URL" field requires a valid
        Virtuoso JDBC URL.</para>
            <figure xml:id="sample014" floatstyle="1">
              <title>Scroll Demo 2</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl016.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter a valid SQL statement and then click the "Query" button, the example
        below uses a fully qualified Virtuoso SQL statement requesting all records from the
        "Demo" database table "Customers" owned by the Virtuoso user
        "DBA".</para>
            <figure xml:id="sample015" floatstyle="1">
              <title>Scroll Demo 2</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl017.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>You can now use the navigational buttons to Scroll backwards and forwards, each of these
        navigational buttons highlights Virtuoso's full implementation of the JDBC 2.0 Scrollable
        Cursors specifications.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="scrolldemo2applet">
        <title>ScrollDemo2 Java Applet</title>
        <orderedlist>
          <listitem>
            <para>Start the Virtuoso Admin Assistant and then follow the Sample Applications--&gt;JDBC
        Applet Demos menu path.</para>
            <figure xml:id="sample016" floatstyle="1">
              <title>Scroll Demo 2</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl018.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click on the "ScrollDemo2" hyperlink which initializes the ScrollDemo2 applet,
        if you do not have a Java 1.2 or Java 2.0 compliant browser you will not be able to run
        this Applet demo. The other way to experience this demo is to run the Application version
        which uses your operating systems Java Virtual Machine (JVM) instead of a JVM inherently
        linked to a Web Browser.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="jbenchapplication">
        <title>JBench Application</title>
        <orderedlist>
          <listitem>
            <para>Go to the Virtuoso "Start Menu" program group and then follow the JDBC
        Samples--&gt;Jbench (JDK1.1) or Jbench (JDK1.2) menu path, depending on the JVM you have
        installed. This will execute a DOS batch program that initializes the JBench application. </para>
            <figure xml:id="sample017" floatstyle="1">
              <title>JBench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl019.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>The follow the File--&gt;Connect menu path to make your initial connection. You will
        need to identify your JDBC Driver (by providing appropriate Driver Name values in the JDBC
        Driver field) and then provide a valid JDBC URL for your specific JDBC Driver (Jbench uses
        a valid Virtuoso Driver for JDBC URL that points to the demonstration database listening
        at port 1112 as its default).</para>
            <figure xml:id="sample018" floatstyle="1">
              <title>JBench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl020.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Follow the Results--&gt;Table URL menu path, this is how you identify (using a JDBC URL)
        the location of the "Results" tables into which you will be storing your
        benchmark data. The default URL is the current JDBC URL (the one used to establish your
        initial connection), but this can be a totally different database to the one being
        benchmarked.</para>
          </listitem>
          <listitem>
            <para>Follow the Results--&gt;Create menu path, this is how you actually perform the
        "Results" table creation in the database identified by the URL in the previous
        step.</para>
          </listitem>
          <listitem>
            <para>Follow the TPC-A--&gt;Load Tables menu path to prepare your database for the TPC-A
        benchmark, select a database schema type that matches the database engine that you are
        benchmarking. If your database is not listed ANSI should suffice (as long as this is an
        ANSI SQL compliant database).</para>
            <figure xml:id="sample019" floatstyle="1">
              <title>JBench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl021.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Follow the TPC-A--&gt;Load Procedures menu path to Load the Virtuoso TPC-A stored
        procedures.</para>
          </listitem>
          <listitem>
            <para>Now that all the benchmark data and stored procedures have been loaded into your
        database, follow the TPC-A--&gt;Run Benchmark menu path and then configure your actual
        benchmark session parameters:</para>
            <para>The benchmark parameters fall into 4 categories, Bench execution mode, Run Options, SQL
        Options, and Execution Options.</para>
            <figure xml:id="sample020" floatstyle="1">
              <title>JBench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="sampl022.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para><emphasis>Bench execution mode:</emphasis>

						These setting allow you to configure the threads used for the benchmark.</para>
            <para>Decide on a single or multiple threads test.</para>
            <para>No. Threads - this is the number of concurrent threads to be used during the benchmark.</para>
            <para><emphasis>Run Options:</emphasis>

						These setting allow you to configure the duration related aspects of this benchmark program.</para>
            <para>No. runs - this controls how many iterations of the benchmarks you actually run (the
        default is 100 benchmark iterations).</para>
            <para>Duration (mins.) - this is the duration in minutes of each benchmark run.</para>
            <para><emphasis>SQL Options:</emphasis>

						These setting allow you to configure how your benchmark's SQL instructions are actually handled.</para>
            <para>ExecDirect with SQL Text - this means that no form of repetitive SQL execution
        optimization is being applied (SQL statements are prepared and executed repetitively)</para>
            <para>Prepare/Execute Bound Params - this means that the Parameter Binding SQL execution
        optimization is being applied (SQL is prepared once but executed many times without the
        overhead of re-preparing statements prior to execution)</para>
            <para>Use Stored Procedures - this means that the Stored Procedure SQL optimization is being
        applied (benchmark instructions are stored within database being benchmarked)</para>
            <para>Run All - this implies you want to perform all of the above benchmarks</para>
            <para><emphasis>Execution Options: </emphasis>

						These setting allow you to configure the tone of your benchmark, for instance it could
        have Transaction scoping and a mix of record retrieval queries, or it could simply be
        input and update intensive with a minimal amount of record retrieval queries (the case
        when the 100 row query checkbox is unchecked a typical OLTP scenario) </para>
            <para>Use Transactions - make the benchmark use transaction control (instructions are scoped to
        transaction blocks)</para>
            <para>Do 100 row Query - perform a simulation of a 100 record retrieval as
            part of the benchmark activity.</para>
          </listitem>
          <listitem>
            <para>Run your TPC-A benchmark.</para>
          </listitem>
          <listitem>
            <para>Follow the TPC-A--&gt;Cleanup menu path to clean up your database so that you can then
        run other benchmarks (TPC-C like benchmark).</para>
          </listitem>
          <listitem>
            <para>To run the TPC-C  benchmark simply follow the appropriate menu path, create the
        benchmark tables &amp; stored procedures, load the benchmark data and then run the TPC-C
        benchmark.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="jtademo">
        <title>JTA Demo Application</title>
        <para>The JTA demo is located in the
<programlisting>&lt;VIRTUOSO_INSTALLATION_DIRECTORY&gt;\samples\jdbc\JTADemo</programlisting>
folder.</para>
        <section xml:id="jtademosetup">
          <title>Software Setup</title>
          <orderedlist>
            <listitem>
              <para>The sample requires
2 or 3 Virtuoso instances and an instance of a J2EE 1.3.1 server properly
set up and running on the same computer or on the network. To build the sample
it's also necessary to have a J2SE 1.4 SDK installed.</para>
            </listitem>
            <listitem>
              <para>The JAVA_HOME and
J2EE_HOME environment variables must be set to the J2SE SDK and J2EE
installation path respectively.</para>
            </listitem>
            <listitem>
              <para>The virtjdbc3.jar file
must be in the classpath of the J2EE server. The setting of the classpath
differs across different J2EE servers. For J2EE Reference Implementation (RI)
the J2EE_CLASSPATH variable might be set in %J2EE_HOME%\bin\userconfig.bat
on Windows or $(J2EE_HOME)/bin/userconfig.sh on Unix.</para>
              <programlisting>
    set J2EE_CLASSPATH=C:/Virtuoso/lib/virtjdbc3.jar
</programlisting>
              <para>
or
</para>
              <programlisting>
    J2EE_CLASSPATH=/home/login/virtuoso/lib/virtjdbc3.jar
    export J2EE_CLASSPATH
</programlisting>
            </listitem>
            <listitem>
              <para>Add the Virtuoso
XA datasources to J2EE server. For J2EE RI this is done like this:</para>
              <programlisting>
    j2eeadmin -addJdbcXADatasource jdbc/Virtuoso1 virtuoso.jdbc3.VirtuosoXADataSource dba dba -props serverName=localhost portNumber=1111
    j2eeadmin -addJdbcXADatasource jdbc/Virtuoso2 virtuoso.jdbc3.VirtuosoXADataSource dba dba -props serverName=localhost portNumber=2222
    j2eeadmin -addJdbcXADatasource jdbc/Virtuoso3 virtuoso.jdbc3.VirtuosoXADataSource dba dba -props serverName=localhost portNumber=3333
</programlisting>
              <para>Please note that the
newly added datasources take effect only after restart of the J2EE server.</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="jtademoconfig">
          <title>Configuration</title>
          <para>The sample folder contains the
jtademo.properties file which can be used to configure the sample application.
The configuration options are described within the file.</para>
        </section>
        <section xml:id="jtademo_deploy">
          <title>Building and Deployment</title>
          <para>The sample folder contains
build and deploy scripts (build.sh and deploy.sh for Linux and Unix and
build.bat and deploy.bat for Windows).</para>
          <para>Use the build script to build the
sample application from the source files.</para>
          <para>Deploy the application to the J2EE
server. The deploy script performs this task for J2EE RI. Other J2EE application
servers might provide different ways for application deployment.</para>
        </section>
        <section xml:id="jtademorun">
          <title>Running the Sample</title>
          <para>The sample folder contains
the run scripts for Linux/Unix and Windows.</para>
          <para>The run script accepts the
following commands:</para>
          <variablelist>
            <varlistentry>
              <term>create</term>
              <listitem>
                <para>Creates and populates
the necessary tables.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>check</term>
              <listitem>
                <para>Verifies data
consistency.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>drop</term>
              <listitem>
                <para>Removes data and
tables from the databases.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>run</term>
              <listitem>
                <para>Executes a number of
transactions over database tables.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>The first action to do is to initialize
the data with the create command. After this the command might be used
one or more times. This executes a series of concurrent updates on the
distributed data. The check command verifies that this updates left
databases in the consistent state.</para>
          <para>For instance, for Unix:</para>
          <programlisting>
    run.sh create
    run.sh run
    run.sh check
</programlisting>
          <para>And for Windows:</para>
          <programlisting>
    run.bat create
    run.bat run
    run.bat check
</programlisting>
        </section>
      </section>
    </section>
  </chapter>
