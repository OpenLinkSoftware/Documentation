<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_java_vm_attach">
      <refmeta>
        <refentrytitle>java_vm_attach
</refentrytitle>
        <refmiscinfo>jvmpl
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>java_vm_attach
</refname>
        <refpurpose/>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_java_vm_attach">
          <funcprototype xml:id="fprot_java_vm_attach">
            <funcdef>
              <function>java_vm_attach
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>classpath
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>vm_options
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_java_vm_attach">
        <title>Description
</title>
        <para>Ensures that the current working thread is attached to the Java VM. 
    It operates as follows:</para>
        <itemizedlist>
          <listitem>
            <para>if the Java VM is not created it creates it.</para>
          </listitem>
          <listitem>
            <para>if the java VM is running, but the current working thread is 
      not attached as a Java VM thread it attaches it.</para>
          </listitem>
          <listitem>
            <para>if none of the above it returns.</para>
          </listitem>
        </itemizedlist>
        <para>The <function>java_vm_attach()</function>

   function is called implicitly 
    in each of the other VSEs, and also when allocating, copying or deleting a 
    Virtuoso/PL reference to a Java VM object values.</para>
        <para>If the Java VM is already initialized and the classpath is supplied 
    it will throw a SQL error.  If the Java VM is not initialized, but it is 
    required to execute a statement the server will implicitly call 
    <computeroutput>java_vm_attach (NULL);</computeroutput>

  .  The Virtuoso Java 
    VM integration binary works with JDK 1.2 and later.
</para>
      </refsect1>
      <refsect1 xml:id="params_java_vm_attach">
        <title>Parameters
</title>
        <refsect2>
          <title>classpath
</title>
          <para>The classpath string to be supplied to the Java VM.  If classpath is 
      NULL the server OS environment variable CLASSPATH will be used instead.
</para>
        </refsect2>
        <refsect2>
          <title>vm_options
</title>
          <para>A vector of name/value pairs for the Java VM initialization 
      parameters.  The format and values of the parameters is described in 
      the JNI Enhancements Introduced in version 1.2 of the JavaTM 2 SDK document -
      the description of JNI_CreateJavaVM Invocation API function.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="examples_java_vm_attach">
        <title>Examples
</title>
        <example xml:id="ex_java_vm_attach">
          <title>Initializing the Java VM
</title>
          <para>This example initializes the Java VM by supplying a classpath of: 
      <computeroutput>CLASSPATH=/usr/local/virtuoso/classes:/usr/local/jakarta-tomcat-3.3.1/lib/tomcat.jar</computeroutput>

      and sets the <computeroutput>tomcat.home</computeroutput>

   Java system 
      property to <computeroutput>/usr/local/jakarta-tomcat-3.3.1</computeroutput>

      It is the equivalent of executing JDK/JRE 1.2 unix java tool using:
      <computeroutput>java -cp /usr/local/virtuoso/classes:/usr/local/jakarta-tomcat-3.3.1/lib/tomcat.jar 
      -Dtomcat.home=/usr/local/jakarta-tomcat-3.3.1</computeroutput>

  </para>
          <screen>
java_vm_attach ('/usr/local/virtuoso/classes:/usr/local/jakarta-tomcat-3.3.1/lib/tomcat.jar', 
  vector ('-Dtomcat.home=/usr/local/jakarta-tomcat-3.3.1, 0);
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_java_vm_attach">
        <title>See Also
</title>
        <para>
          <link linkend="fn_java_call_method">
            <function>java_call_method()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_set_property">
            <function>java_set_property()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_get_property">
            <function>java_get_property()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_load_class">
            <function>java_load_class()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_new_object">
            <function>java_new_object()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_vm_detach">
            <function>java_vm_detach()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
