<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmlreplace">
      <refmeta>
        <refentrytitle>XMLReplace
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLReplace
</refname>
        <refpurpose>Modify a given XML document by replacing some nodes.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmlreplace">
          <funcprototype xml:id="fproto_xmlreplace">
            <funcdef>any 
<function>XMLReplace
</function>

</funcdef>
            <paramdef choice="opt">inout 
<parameter>source
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>location1
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>replacement1
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>location2
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>replacement2
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>...
</parameter>

</paramdef>
            <paramdef choice="opt">in 
<parameter>locationN
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>replacementN
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmlreplace">
        <title>Description
</title>
        <para>The function takes of the XML document referenced by
<parameter>source</parameter>

   XML tree entity and modifies it by replacing nodes specified by
<parameter>location1</parameter>

  , <parameter>location2</parameter>

  , ..., <parameter>locationN</parameter>

   with
values specified by <parameter>replacement1</parameter>

  , <parameter>replacement2</parameter>

  , ...,<parameter>replacementN</parameter>

  .
At the end of function call, the <parameter>source</parameter>

   points to the root of a modified entity.
</para>
        <para>The <parameter>source</parameter>

   parameter should be an XML tree entity whose document is not locked (see
<link linkend="xmldom">Changing XML Entities in DOM Style</link>

   for details).
</para>
        <para>Every <parameter>replacementI</parameter>

   may be an XML tree entity, a NULL or a value of some other type that will be converted to varchar before use.
</para>
        <para>For simplicity, consider the case when there is only one <parameter>location1</parameter>

   XML entity and only one
<parameter>replacement1</parameter>

  . If the <parameter>location1</parameter>

   is an XML entity that is not in the source document
then no modifications is made in <parameter>source</parameter>

  . If <parameter>replacement1</parameter>

   is an entity that 
is in the source document then a temporary "cut" of <parameter>replacement1</parameter>

   is created, like
<function>xml_cut</function>

   is called).
</para>
        <para>
If the <parameter>location1</parameter>

   is an attribute entity then the value of the attribute is changed.
If <parameter>replacement1</parameter>

   is NULL then the attribute is removed at all, otherwise its value is set to the string value of
the <parameter>replacement1</parameter>

  .
</para>
        <para>
If the <parameter>location1</parameter>

   is not an attribute entity but a entity then <parameter>location1</parameter>

   is replaced with the value of <parameter>replacement1</parameter>

  .
The method of  replacement depends on the type of the replacement value.
If <parameter>replacement1</parameter>

   is NULL then the <parameter>location1</parameter>

   node is simply removed from the result; if the node is the root or a
single child of the root then function immediately returns NULL (because XML document can not be totally empty),
otherwise the parent of the <parameter>location1</parameter>

   will simply have one child less.
If <parameter>replacement1</parameter>

   is an non-empty string then <parameter>location1</parameter>

   is
replaced with a new text node whose string value is equal to <parameter>replacement1</parameter>

  .
If <parameter>replacement1</parameter>

   is an empty string then the effect is exactly the same as in case of NULL because the string value of a text node can not be empty.
If <parameter>replacement1</parameter>

   is an XML entity that is a root entity of some document then the highlighted node is replaced with a sequence of copies of all children of that root.
If <parameter>replacement1</parameter>

   is an XML entity of some other sort (XML element, text, comment etc.) then the that is not a root entity of some document then the highlighted node is replaced with a sequence of copies of all children of that root.
</para>
        <para>
After changing the <parameter>source</parameter>

  , some normalization may happen. The modified document may contain adjacent text nodes; every sequence of such nodes
is replaced with one text node whose string value is a concatenation of string values of that nodes. E.g. if the <parameter>location1</parameter>

   is an element &lt;a/&gt;
that resides between two text nodes "text1" and "text2" and it is removed (by replacing with NULL) then these text nodes become neighbors;
normalization will replace them with a single text node "text1text2"
</para>
        <para>
Now consider the case of more than one replacement made in one function call. If more than one pair of location and replacement is given then
the function first finds all locations, then it performs all replacements, then it performs an normalization.
It is very important to understand that the order of making replacements has nothing to do with the order of pairs of parameters in the function call.
If some location node is an ancestor of some other location node then the effect of the replacement of the descendant location node is void:
the descendant is replaced first; then the ancestor is replaced as a whole, no matter if some of its descendants are modified.
The order of parameters in the function call
is used to resolve ambiguity If two locations are equal: the last pair of parameters will have a higher priority.
</para>
        <para>
If the <parameter>source</parameter>

   is an instance of XMLType then its inner XML document is changed and "is validated" flag is reset to
0 indicating that there is no warranty that the modified version of document matches the declared schema even if the original document matched.

</para>
      </refsect1>
      <refsect1 xml:id="params_xmlreplace">
        <title>Parameters
</title>
        <refsect2>
          <title>source
</title>
          <para>A source XML tree entity. It is an error to pass persistent XML entity as an argument.
</para>
        </refsect2>
        <refsect2>
          <title>locationI
</title>
          <para>An XML entity that points to the node to replace. For compatibility with other implementations, it can be NULL, a pair of arguments is silently ignored in this case.
</para>
        </refsect2>
        <refsect2>
          <title>replacementI
</title>
          <para>A replacement value for XML node pointed by 
<parameter>locationI
</parameter>

  ; it may be NULL or XML tree entity or a string or anything else but not an persistent XML entity.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_xmlreplace">
        <title>Return Types
</title>
        <para>The function returns NULL.
</para>
      </refsect1>
      <refsect1 xml:id="examples_xmlreplace">
        <title>Examples
</title>
        <example xml:id="ex_xmlreplace_1">
          <title>XMLReplace in a Virtuoso/PL procedure
</title>
          <para>The sample procedure contains two calls of 
<function>XMLReplace
</function>

  .
First call replaces element 'c' with a copy of element 'replacement'.
Second call demonstrates two replacements in parallel: elements titled 'c1' and 'c3' are replaced with text nodes.
</para>
          <screen>
create procedure XMLReplace_demo ()
{
  declare DESCRIPTION varchar(42);
  declare XMLENTITY, ent, ent2, ent_to_corrupt any;
  result_names (DESCRIPTION, XMLENTITY);
  ent := xtree_doc('&lt;a&gt;&lt;b&gt;&lt;q/&gt;-&lt;c&gt;Hello&lt;/c&gt;-&lt;/b&gt;&lt;/a&gt;');
  result ('EXAMPLE 1', 'A simple replacement of one element with other');
  result ('The document to modify:', ent);
  ent_to_corrupt := xquery_eval ('//c', ent);
  result ('Node to be replaced:', ent_to_corrupt);
  XMLReplace (ent, ent_to_corrupt, xtree_doc('&lt;replacement/&gt;'));
  result ('The document after modification:', ent);
  result ('Node to be replaced is outdated:', ent_to_corrupt);
  result ('...e.g. it'' not a descendant of its root:', xpath_eval('/', ent_to_corrupt));
  result ('EXAMPLE 2', 'Two replacements in parallel');
  ent2 := xtree_doc('&lt;a&gt;&lt;b&gt;&lt;c1&gt;Hello1&lt;/c1&gt;&lt;c2&gt;Hello2&lt;/c2&gt;&lt;c3&gt;Hello3&lt;/c3&gt;&lt;/b&gt;&lt;/a&gt;');
  result ('The document to modify:', ent2);
  XMLReplace (ent2, xquery_eval('//c1', ent2), 'world1', xquery_eval('//c3', ent2), 'world3');
  result ('The document after modification:', ent2);
}

Done. -- 00000 msec.

XMLReplace_demo()
DESCRIPTION                                XMLENTITY
VARCHAR                                    VARCHAR
_______________________________________________________________________________

EXAMPLE 1                                  A simple replacement of one element with other
The document to modify:                    &lt;a&gt;&lt;b&gt;&lt;q /&gt;-&lt;c&gt;Hello&lt;/c&gt;-&lt;/b&gt;&lt;/a&gt;
Node to be replaced:                       &lt;c&gt;Hello&lt;/c&gt;
The document after modification:           &lt;a&gt;&lt;b&gt;&lt;q /&gt;-&lt;replacement /&gt;-&lt;/b&gt;&lt;/a&gt;
Node to be replaced is outdated:           &lt;c&gt;Hello&lt;/c&gt;
...e.g. it' not a descendant of its root:  &lt;a&gt;&lt;b&gt;&lt;q /&gt;-&lt;replacement /&gt;-&lt;/b&gt;&lt;/a&gt;
EXAMPLE 2                                  Two replacements in parallel
The document to modify:                    &lt;a&gt;&lt;b&gt;&lt;c1&gt;Hello1&lt;/c1&gt;&lt;c2&gt;Hello2&lt;/c2&gt;&lt;c3&gt;Hello3&lt;/c3&gt;&lt;/b&gt;&lt;/a&gt;
The document after modification:           &lt;a&gt;&lt;b&gt;world1&lt;c2&gt;Hello2&lt;/c2&gt;world3&lt;/b&gt;&lt;/a&gt;

9 Rows. -- 00000 msec.</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmlreplace">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmlupdate">
            <function>XMLUpdate
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xmladdattribute">
            <function>XMLAddAttribute
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xmlappendchildren">
            <function>XMLAppendChildren
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xmlinsertbefore">
            <function>XMLInsertBefore
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xmlinsertafter">
            <function>XMLInsertAfter
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xslt">
            <function>xslt
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
