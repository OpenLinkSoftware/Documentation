<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmltype.extract">
      <refmeta>
        <refentrytitle>XMLType.extract
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLType.extract
</refname>
        <refpurpose>Evaluates given XPATH expression.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmltype.extract">
          <funcprototype xml:id="fproto_xmltype.extract">
            <funcdef>
              <function>XMLType.extract
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>xpath_expn
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>namespace_map
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmltype.extract">
        <title>Description
</title>
        <para>The member function calculates the given XPATH expression 
<parameter>xpath_expn
</parameter>

   using
    the XML entity of the instance as a context node. If a <parameter>namespace_map</parameter>

   parameter
    is given then the function adds namespace declarations from this parameter into the beginning of
    <parameter>xpath_expn</parameter>

   before the evaluation.
    The function returns the first result of the XPATH evaluation or NULL if there are no results.
    If the result is an XML entity then it is converted into a non-schema based instance of XMLType.
</para>
      </refsect1>
      <refsect1 xml:id="params_xmltype.extract">
        <title>Parameters
</title>
        <refsect2>
          <title>xpath_expn
</title>
          <para>A text of XPATH expression to evaluate.
</para>
        </refsect2>
        <refsect2>
          <title>namespace_map
</title>
          <para>A string that is a list of namespace prefix declarations delimited by whitespace characters.
If the <parameter>xpath_expn</parameter>

   expression also contains a list of declarations then these two
lists are concatenated.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_xmltype.extract">
        <title>Return Types
</title>
        <para>The function returns a non-schema based XMLType instance, NULL or a value of any other type
</para>
      </refsect1>
      <refsect1 xml:id="examples_xmltype.extract">
        <title>Examples
</title>
        <example xml:id="ex_xmltype.extract">
          <title>A table with an XMLType column
</title>
          <para>This populates a table with XML data and then selects 'ename' element from the appropriate record.
</para>
          <screen>
create table TEST_XMLS  (I integer primary key, XMLVAL XMLType);
insert into TEST_XMLS  values (1, XMLType('&lt;emp&gt;&lt;empno&gt;221&lt;/empno&gt;&lt;ename&gt;John&lt;/ename&gt;&lt;/emp&gt;'));
insert into TEST_XMLS  values (2, XMLType('&lt;po&gt;&lt;pono&gt;331&lt;/pono&gt;&lt;poname&gt;PO_1&lt;/poname&gt;&lt;/po&gt;'));
insert into TEST_XMLS  values (3, XMLType('&lt;oil-rig
xml:id="14a_01" water="0.413"/&gt;&lt;oil-rig
xml:id="14b_01" water="0.402"/&gt;'));
select e.XMLVAL.extract ('//ename').getCLobVal() as ENAME
  from TEST_XMLS  as e
  where e.XMLVAL.existsNode('/emp/empno')
ENAME
NVARCHAR
_______________________________________________________________________________

&lt;ename&gt;John&lt;/ename&gt;

1 Rows. -- 00000 msec.
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmltype.extract">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmltype.existsnode">
            <function>XMLType.existsNode()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
