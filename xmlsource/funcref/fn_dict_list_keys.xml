<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_dict_list_keys">
      <refmeta>
        <refentrytitle>dict_list_keys
</refentrytitle>
        <refmiscinfo>dict
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>dict_list_keys
</refname>
        <refpurpose>Returns an array of all keys stored in the given dictionary.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_dict_list_keys">
          <funcprototype xml:id="fproto_dict_list_keys">
            <funcdef>vector 
<function>dict_list_keys
</function>

</funcdef>
            <paramdef choice="opt">inout 
<parameter>dict
</parameter>

   dictionary
</paramdef>
            <paramdef choice="opt">in 
<parameter>destructive
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_dict_list_keys">
        <title>Description
</title>
        <para>The function returns an array of all keys stored in the given dictionary, ignoring dependent parts of key-value pairs.
This is especially useful when dictionary is used to form a set of distinct keys, when dependent parts are fake (typically zeroes).
If the <parameter>destructive</parameter>

   parameter is 1 or 2 then the function may avoid copying of keys to the resulting array
by moving them out from the dictionary. This is faster but the dictionary will become empty at the end of operation.
The <parameter>destructive</parameter>

   parameter equal to 1 does not have any effect if the dictionary is used as a value of more than one variable.
Thus it is safe to make this parameter equal to 1 as soon as the variable passed to the function as <parameter>dict</parameter>

   is no longer in use after
the function call and there's no need to inspect the whole program to check if other variables may be affected.
The parameter equal to 2 ignores the presence of multiple variables so the operation may cause unexpected results in other fragments of code that share the dictionary.
</para>
        <para>
The created array can not be longer than the system limit and even if it is below limit but longer than hundreds of thousands items then memory allocation can be inefficient.
If the dictionary can be large and it is possible to process the content of the dictionary in parts, consider using
<link linkend="fn_dict_destructive_list_rnd_keys"><function>dict_destructive_list_rnd_keys</function></link>

  () instead.

</para>
      </refsect1>
      <refsect1 xml:id="params_dict_list_keys">
        <title>Parameters
</title>
        <refsect2>
          <title>dict
</title>
          <para>The dictionary to scan
</para>
        </refsect2>
        <refsect2>
          <title>destructive
</title>
          <para>Flag that indicates whether the dictionary can be cleaned during the operation (0 = never clean, 1 = only if there is no other variables, 2 = clean unconditionally).
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_dict_list_keys">
        <title>Return Types
</title>
        <para>The function returns a vector.
</para>
      </refsect1>
      <!--  
<refsect1
xml:id="examples_dict_list_keys">
    <title>Examples</title>
    <example
xml:id="ex_dict_list_keys"><title></title>
      <para></para>
      <screen><![CDATA[
]]>
</screen>
    </example>
  </refsect1> -->

      <refsect1 xml:id="seealso_dict_list_keys">
        <title>See Also
</title>
        <para>
          <link linkend="fn_dict_new">
            <function>dict_new()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_zap">
            <function>dict_zap()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_put">
            <function>dict_put()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_get">
            <function>dict_get()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_remove">
            <function>dict_remove()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_inc_or_put">
            <function>dict_inc_or_put()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_dec_or_remove">
            <function>dict_dec_or_remove()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_size">
            <function>dict_size()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_duplicate">
            <function>dict_duplicate()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_to_vector">
            <function>dict_to_vector()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_destructive_list_rnd_keys">
            <function>dict_destructive_list_rnd_keys()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_iter_rewind">
            <function>dict_iter_rewind()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_dict_iter_next">
            <function>dict_iter_next()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
