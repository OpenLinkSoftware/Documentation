<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_get_certificate_info">
      <refmeta>
        <refentrytitle>get_certificate_info
</refentrytitle>
        <refmiscinfo>ws
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>get_certificate_info
</refname>
        <refpurpose>Returns information about the current client X509 certificate
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_get_certificate_info">
          <funcprototype xml:id="fproto_get_certificate_info">
            <funcdef>integer or string
<function>get_certificate_info
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>type
</parameter>

  integer
</paramdef>
            <paramdef choice="opt">in 
<parameter>cert_or_key_name
</parameter>

  varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>in_format
</parameter>

  int
</paramdef>
            <paramdef choice="opt">in 
<parameter>passwd
</parameter>

  varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>ext_oid
</parameter>

  varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_get_certificate_info">
        <title>Description
</title>
        <para>
This function will return information about the current client X509 certificate
(if successfully verified).  If there is no valid X509 certificate or the requested
information is not available it will return NULL.
</para>
        <para>
If the optional <parameter>cert_or_key_name</parameter>

   is supplied it should contain
a encoded certificate (by default format is PEM). The certificate info is read from the first certificate in
that string.
</para>
        <para>
    If the optional <parameter>cert_or_key_name</parameter>

   is supplied and <parameter>in_format</parameter>

    is equal to 3 (integer) the function will try to retrieve the certificate registered in the current user's 
    key store by name contained in <parameter>cert_or_key_name</parameter>

  .

</para>
      </refsect1>
      <refsect1 xml:id="params_get_certificate_info">
        <title>Parameters
</title>
        <refsect2>
          <title>type
</title>
          <para>type must be an integer.  It can be one of the following values:
</para>
          <simplelist type="vert">
            <member>1 - return the certificate serial number as an integer
</member>
            <member>2 - return the certificate subject name as a string
</member>
            <member>3 - return the certificate issuer name as a string
</member>
            <member>4 - return the certificate validity period start date as a string
</member>
            <member>5 - return the certificate validity period end date as a string
</member>
            <member>6 - return the certificate fingerprint
</member>
            <member>7 - return the certificate extension value by OID
</member>
            <member>8 - return the certificate name of the key from current user store
</member>
            <member>9 - return a vector of three elements: the certificate's public key type, exponent and modulus
</member>
            <member>10 - return attribute value for given attribute name
</member>
            <member>12 - return certificate's signature
</member>
          </simplelist>
        </refsect2>
        <refsect2>
          <title>cert_or_key_name
</title>
          <para>A string containing an encoded X.509 certificate or name of a key from 
	  current user store.

</para>
        </refsect2>
        <refsect2>
          <title>in_format
</title>
          <para>This is to designate encoding type of the value 'cert_or_key_name'
</para>
          <simplelist type="vert">
            <member>0 (default) - PEM
</member>
            <member>1 - DER (raw)
</member>
            <member>2 - PKCS#12
</member>
            <member>3 - the 'cert_or_key_name' is a name of a key from user's key store
</member>
          </simplelist>
        </refsect2>
        <refsect2>
          <title>passwd
</title>
          <para>Password to unlock PKCS#12 encoded certificate
</para>
        </refsect2>
        <refsect2>
          <title>ext_oid
</title>
          <para>X.509 extension object identifier
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_get_certificate_info">
        <title>Return Types
</title>
        <para>The requested information or NULL if the certificate is found to be invalid.
</para>
      </refsect1>
      <!--
  <refsect1
xml:id="errors_get_certificate_info"><title>Errors</title>
    <table><title>Errors signalled by</title>
      <tgroup cols="4">

<thead>
<row>
<entry>SQLState
</entry>
<entry>Error Code
</entry>
<entry>Error Text
</entry>
<entry>Description
</entry>
</row>
</thead>
	<tbody>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode></errorcode></entry>
	    <entry><errortext></errortext></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
  <refsect1
xml:id="seealso_get_certificate_info"><title>See Also</title>
    <para><link linkend="ch-overview"></link></para>
  </refsect1>
-->

      <refsect1 xml:id="examples_get_certificate_info">
        <title>Examples
</title>
        <example xml:id="ex_get_certificate_info">
          <title>Simple examples
</title>
          <programlisting>
CREATE PROCEDURE get_mail_example (in cert any := null, in cert_type int := 0)
{
  declare alts, mail any;
  mail := get_certificate_info (10, cert, cert_type, '', 'emailAddress');
  if (mail is null)
    {
      alts := get_certificate_info (7, cert, cert_type, '', '1.10.16.25');
      if (alts is not null)
	{
	  alts := regexp_replace (alts, ',[ ]*', ',', 1, null);
	  alts := split_and_decode (alts, 0, '\0\0,:');
	  mail := get_keyword ('email', alts);
	}
    }
  return mail;
}
;
</programlisting>
        </example>
      </refsect1>
    </refentry>
