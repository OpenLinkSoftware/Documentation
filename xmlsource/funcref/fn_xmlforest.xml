<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmlforest">
      <refmeta>
        <refentrytitle>XMLFOREST
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLFOREST
</refname>
        <refpurpose>Produces a forest of XML elements
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmlforest">
          <funcprototype xml:id="fproto_xmlforest">
            <funcdef>
              <function>XMLFOREST
</function>
            </funcdef>
            <paramdef choice="opt"><parameter>string_expr1 [AS alias1]
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt"><parameter>string_expr2 [AS alias2]
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">
              <parameter>...
</parameter>
            </paramdef>
            <paramdef choice="opt"><parameter>string_exprN [AS aliasN]
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmlforest">
        <title>Description
</title>
        <para><function>XMLFOREST
</function>

   produces a forest of XML elements from the given list of arguments. 
   The arguments may be string expressions with optional aliases. If string expression is a column name, 
   then you can omit the AS clause, and Virtuoso uses the partially escaped form of 
   the column name as the name of the enclosing tag. If the expression evaluates to NULL, then no element is 
   created for that expression. If none of the element is created, then the function returns NULL.

</para>
      </refsect1>
      <refsect1 xml:id="xmlforest">
        <title>Parameters
</title>
        <refsect2>
          <title>string_exprI [AS aliasI]
</title>
          <para>string value; AS clause is mandatory if the argument is not a column name but an expression of some other sort.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="errors_xmlforest">
        <title>Errors
</title>
        <table>
          <title>Errors signalled by 
<function>XMLFOREST
</function>

</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>SQLState
</entry>
                <entry>Error Code
</entry>
                <entry>Error Text
</entry>
                <entry>Description
</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <errorcode>37000
</errorcode>
                </entry>
                <entry>
                  <errorcode>SQ074
</errorcode>
                </entry>
                <entry>
                  <errortext>The special SQL function has invalid argument
</errortext>
                </entry>
                <entry>An argument is neither a column name nor an expression with an alias.
</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para> 
  </para>
      </refsect1>
      <refsect1 xml:id="xmlforest_01">
        <title>Examples
</title>
        <example xml:id="ex_xmlforest">
          <title>XMLFOREST() with five parameters.
</title>
          <para>
The following example produces five (or four) elements ('FName', 'LName', 'str', 'Title', and 'Region' - if there is a value) 
from the string expressions 'FirstName', 'LastName', 'string', 'Title', and 'Region',
 concatenates the elements produced for each 
employee, and produces one row for each employee in the result set. 
</para>
          <screen>
select XMLFOREST (
  "FirstName" as "FName", "LastName" as "LName",
  'string' as "str", "Title", "Region" )
from "Demo"."demo"."Employees";
callret
VARCHAR
_______________________________________________________________________________

&lt;FName&gt;Nancy&lt;/FName&gt;
&lt;LName&gt;Davolio&lt;/LName&gt;
&lt;str&gt;string&lt;/str&gt;
&lt;Title&gt;Sales Representative&lt;/Title&gt;
&lt;Region&gt;WA&lt;/Region&gt;

. . .

&lt;FName&gt;Anne&lt;/FName&gt;
&lt;LName&gt;Dodsworth&lt;/LName&gt;
&lt;str&gt;string&lt;/str&gt;
&lt;Title&gt;Sales Representative&lt;/Title&gt;

9 Rows.
       </screen>
          <para>
The following example always produces five elements: empty 'Region' element is created for NULL values.
Note the difference in the last rows of this and the previous query results:
</para>
          <screen>
select XMLFOREST (
  "FirstName" as "FName", "LastName" as "LName",
  'string' as "str", "Title", coalesce ("Region", '') as "Region")
from "Demo"."demo"."Employees";
callret
VARCHAR
_______________________________________________________________________________

&lt;FName&gt;Nancy&lt;/FName&gt;
&lt;LName&gt;Davolio&lt;/LName&gt;
&lt;str&gt;string&lt;/str&gt;
&lt;Title&gt;Sales Representative&lt;/Title&gt;
&lt;Region&gt;WA&lt;/Region&gt;

. . .

&lt;FName&gt;Anne&lt;/FName&gt;
&lt;LName&gt;Dodsworth&lt;/LName&gt;
&lt;str&gt;string&lt;/str&gt;
&lt;Title&gt;Sales Representative&lt;/Title&gt;
&lt;Region&gt;&lt;/Region&gt;

9 Rows.

</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmlforest">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmlelement">XMLELEMENT()
</link>
        </para>
        <para>
          <link linkend="fn_xmlattributes">XMLATTRIBUTES()
</link>
        </para>
        <para>
          <link linkend="fn_xmlagg">XMLAGG()
</link>
        </para>
        <para>
          <link linkend="fn_xmlconcat">XMLCONCAT()
</link>
        </para>
      </refsect1>
    </refentry>
