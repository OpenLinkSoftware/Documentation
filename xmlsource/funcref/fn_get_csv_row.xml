<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_get_csv_row">
      <refmeta>
        <refentrytitle>get_csv_row
</refentrytitle>
        <refmiscinfo>file
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>get_csv_row
</refname>
        <refpurpose>This function takes a string_session containing CSV data, parses a row
and returns a vector with field values.

</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_get_csv_row">
          <funcprototype xml:id="fproto_get_csv_row">
            <funcdef>
              <function>get_csv_row
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>ses
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>delim
</parameter>

   char
</paramdef>
            <paramdef choice="opt">in 
<parameter>quote
</parameter>

   char
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_get_csv_row">
        <title>Description
</title>
        <para>This function takes a string_session containing CSV data, parses a row
and returns a vector with field values.</para>
        <para>Calling the function in a loop with same input will parse file line by line.</para>
        <para>The function is also making a basic prediction of field types for varchar,
integer and float values, so the result data may have one of these. If come other datatype is need to be produced the caller can convert
the string using the BIF like cast sprintf_inverse and so on.
</para>
      </refsect1>
      <refsect1 xml:id="params_get_csv_row">
        <title>Parameters
</title>
        <refsect2>
          <title>ses
</title>
          <para>string_session containing CSV data
</para>
        </refsect2>
        <refsect2>
          <title>delim
</title>
          <para>Optional argument to handle tab, space delimited etc. formats.
</para>
        </refsect2>
        <refsect2>
          <title>quote
</title>
          <para>Optional argument to handle tab, space delimited etc. formats.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_get_csv_row">
        <title>Return Types
</title>
        <para>Returns a vector with field values.
</para>
      </refsect1>
      <!--  
<refsect1
xml:id="errors_get_csv_row">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
-->

      <refsect1 xml:id="examples_get_csv_row">
        <title>Examples
</title>
        <example xml:id="ex_get_csv_row">
          <title>Simple Use
</title>
          <para>The following example prints on the Virtuoso Server console the CSV columns names:
</para>
          <programlisting>
SQL&gt;create procedure my_csv (in file_name varchar)
{
   dbg_obj_print(get_csv_row(file_open('tmp/MyContacts.csv')));
}
;

Done. -- 10 msec.

SQL&gt;select my_csv('tmp/MyContacts.csv');
callret
VARCHAR
______________________

0

1 Rows. -- 10 msec.

-- and on the Virtuoso Server console will be shown:

('First Name;Last Name;Middle Name;Name;Nickname;E-mail Address;Home Street;Home City;Home Postal Code;Home State;Home Country/Region;Home Phone;Home
Fax;Mobile Phone;Personal Web Page;Business Street;Business City;Business Postal Code;Business State;Business Country/Region;Business Web Page;Busines
s Phone;Business Fax;Pager;Company;Job Title;Department;Office Location;Notes' )

</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_get_csv_row">
        <title>See Also
</title>
        <para>
          <link linkend="fn_csv_load_file">
            <function>csv_load_file()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_load">
            <function>csv_load()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_parse">
            <function>csv_parse()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_cols_def">
            <function>csv_cols_def()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_table_def">
            <function>csv_table_def()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
