<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_regexp_parse">
      <refmeta>
        <refentrytitle>regexp_parse
</refentrytitle>
        <refmiscinfo>string
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>regexp_parse
</refname>
        <refpurpose>returns substrings that match the regular expression
	in supplied string after an offset
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_regexp_parse">
          <funcprototype xml:id="fproto_regexp_parse">
            <funcdef>index_vector 
<function>regexp_parse
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>pattern
</parameter>

   string
</paramdef>
            <paramdef choice="opt">in 
<parameter>target_string
</parameter>

   string
</paramdef>
            <paramdef choice="opt">in 
<parameter>offset
</parameter>

   integer
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_regexp_parse">
        <title>Description
</title>
        <para>
It applies regular expression to target_str with offset. This function returns a
vector containing 2 elements for first match of the pattern and if there a sub expressions : 
2 elements for each of subexpression match. 
The first (even numbered) element of each pair is the start index and the second 
(odd numbered) is the end index of the match.
The regexp_parse function is more efficient than regexp_match and regexp_substr,
because it doesn't allocate strings.
      </para>
        <programlisting>
	  SQL&gt; select regexp_parse('(2[34]).*(2[35])','22232225222323', 0);
	  callret
	  VARCHAR
	  _______________________________________________________________________________

	  lvector(2,14,2,4,12,14)

	  1 Rows. -- 10 msec.</programlisting>
        <para>
	  Where: 2-14 is a range matched by whole expression,
	  2-4 is a range where '(2[34])' is matched , and 12-14 
	  is a range where '(2[35])' subexpression matched.
      </para>
        <example xml:id="ex_regexp_parse">
          <title>Examples</title>
          <programlisting>
CREATE PROCEDURE all_tokens2 (IN pattern VARCHAR,IN str VARCHAR, IN offs INTEGER)
{

	DECLARE vec ANY;
	DECLARE i INTEGER;
	DECLARE out_str VARCHAR;

	vec:=regexp_parse(pattern,str,offs);
	IF ((vec IS NOT NULL) AND (length(vec)&gt;1))
	{
		out_str:='';
		i:=0;
		WHILE ( (length(vec)/2) &gt; i )
		{
			out_str:=concat(out_str,'/',
				subseq(str,aref(vec,(i)*2),
				aref(vec,(i)*2+1)));
			i:=i+1;
		};
		RETURN concat(out_str,test_parsing(pattern,str,aref(vec,1)+1));
	}
	return NULL;
};

</programlisting>
        </example>

        <note><title>Compatibility:</title>
        <para>The regular expressions supported here follow version 7.9 of the Perl
        Compatible Regular Expression (PCRE) syntax.
        </para>
        <orderedlist>
          <listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions">Wikipedia</link></para></listitem>
          <listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pcre.org/">PCRE.org</link></para></listitem>
        </orderedlist>
        </note>
        
      </refsect1>
      <refsect1 xml:id="seealso_regexp_parse">
        <title>See Also
</title>
        <para>
          <link linkend="fn_regexp_match">
            <function>regexp_match()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_like">
            <function>regexp_like()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_instr">
            <function>regexp_instr()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_replace">
            <function>regexp_replace()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_substr">
            <function>regexp_substr()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
