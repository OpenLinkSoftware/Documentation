<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="maildelivstore">
      <title>Mail Delivery &amp; Storage</title>
      <section xml:id="smtpclient">
        <title>The SMTP Client</title>
        <!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2020 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->

        <refentry xml:id="fn_smtp_send">
          <refmeta>
            <refentrytitle>smtp_send</refentrytitle>
            <refmiscinfo>mail</refmiscinfo>
          </refmeta>
          <refnamediv>
            <refname>smtp_send</refname>
            <refpurpose>send message to SMTP server</refpurpose>
          </refnamediv>
          <refsynopsisdiv>
            <funcsynopsis xml:id="fsyn_smtp_send">
              <funcprototype xml:id="fproto_smtp_send">
                <funcdef>
                  <function>smtp_send</function>
                </funcdef>
                <paramdef choice="opt">in <parameter>server</parameter>

   string</paramdef>
                <paramdef choice="opt">in <parameter>sender</parameter>

   string</paramdef>
                <paramdef choice="opt">in <parameter>recipient</parameter>

   string</paramdef>
                <paramdef choice="opt">in <parameter>body</parameter>

   string</paramdef>
              </funcprototype>
            </funcsynopsis>
          </refsynopsisdiv>
          <refsect1 xml:id="desc_smtp_send">
            <title>Description</title>
            <para>Virtuoso can act as an SMTP client. This means that Virtuoso is able to send emails directly
to a mail SMTP server. Virtuoso has a simple function to facilitate this. This can be called from
stored procedures, VSP pages, triggers etc.
</para>
            <para>
The sender and recipient email addresses must be enclosed with &lt;..&gt; and separated by commas
i.e. string '&lt;support@openlinksw.co.uk&gt;,&lt;sales@openlinksw.co.uk&gt;'
</para>
            <para>
The message Body contains headers such as Subject, From, To, Cc, Bcc and then continues with
the actual message text itself. New lines can be added using '\r\n'
</para>
            <example xml:id="examples_smtp_send">
              <title>Example:</title>
              <programlisting>
'Subject: subject message\r\nFrom: sender\r\nTo: recipient\r\nCc:
copy\r\nBcc: copy\n\n body of message'
</programlisting>
              <para>
Virtuoso will pick up Subject and other headers from the body content. Note
that the RFC insists there should be a NULL line between body headers and the
message body text.
</para>
            </example>
            <example xml:id="examples_smtp_send_01">
              <title>Example:</title>
              <programlisting>
smtp_send(
		'mail.example.com:25',
		'&lt;sender@example.com&gt;',
		'&lt;receiver@example.com&gt;',
		concat(
		  'X-Mailer: Virtuoso Universal Server\r\n',
			'Date: ', soap_print_box (now (), '', 1), '\r\n',
			'Message-ID: &lt;', regexp_replace(cast(now() as varchar), '[- :.]', '', 1, null), '#some.vsp@example.com&gt;\r\n',
			'Subject: This is a test mail...\r\n',
			'From: &lt;sender@example.com&gt;\r\n',
			'To: &lt;receiver@example.com&gt;\r\n',
			'\n',
			'Hi Receiver, this is a test message from Virtuoso')
	);
</programlisting>
              <para>
A more involved example. It is the responsibility of the developer to ensure
that the message is correctly formed, complete with all necessary headers. This
example shows a complete use of the function.
</para>
            </example>
          </refsect1>
        </refentry>
        <!--

<section
xml:id="smtpcommands">
			<title>Commands</title>
			<programlisting>
 - HELO - get information of client connection (client host name)
 - MAIL FROM - sender&apos;s e-mail address
 - RCPT TO - receiver&apos;s e-mail address
 - DATA - begin of data block end with (.)
 - QUIT - connection end
</programlisting>
		</section>

<section
xml:id="smtptables">
			<title>Tables</title>
			<programlisting>
 - Message queue
 - Messages
 - Local mail users
 - Allowed relay domains
</programlisting>
		</section>
<tip><title>See Also:</title>
<para><link linkend="smtptabledesc">Mail system tables </para></tip>

<section
xml:id="smtpparams">
			<title>Parameters</title>
			<programlisting>
- Port number
- Pooling interval (for mail queue)
- Connection timeout
</programlisting>
		</section>
-->

      </section>
      <section xml:id="pop3server">
        <title>POP3 Server</title>
        <para>The Virtuoso POP3 Server implementation supports the following commands
as defined in RFC - 1939:</para>
        <simplelist type="vert">
          <member>DELE</member>
          <member>LIST</member>
          <member>NOOP</member>
          <member>PASS</member>
          <member>QUIT</member>
          <member>RETR</member>
          <member>RSET</member>
          <member>STAT</member>
          <member>TOP</member>
          <member>UIDL</member>
          <member>USER</member>
        </simplelist>
        <para>The POP3 Server listening port is configured in the HTTP section of the virtuoso.ini.</para>
        <para>
POP3Port = xxx, in HTTP section.
</para>
        <para>
If the port is not defined in the configuration file then the POP3 server subsystem will be disabled.
</para>
        <para>
Users and passwords of the POP3 Server are described in the system view
WS.WS.SYS_DAV_USER over SYS_USERS. These users can be administered from the users section of the
Virtuoso Administration User Interface.
</para>
        <para>
The system table DB.DBA.MAIL_MESSAGE is used to stored the messages.
</para>
      </section>
      <section xml:id="smtpreceipt">
        <title>Storing Email in Virtuoso</title>
        <para>
A generic mail delivery driver enables SMTP servers to deliver email to be stored in either
Virtuoso or non Virtuoso SQL database.
</para>
        <para>
Mail storage can occur in a number of ways:</para>
        <orderedlist>
          <listitem>
            <para>Replacing the default generic SMTP mail handler ( the program  "procmail")</para>
          </listitem>
          <listitem>
            <para>Replacing the mail storage settings for individual users
Replacing Default SMTP Mail Handler Sendmail</para>
          </listitem>
        </orderedlist>
        <section xml:id="unixsendmailinstall">
          <title>Replacing procmail As Default Mail Handler In Sendmail Configurations</title>
          <para>
When this configuration is in use, the mails for all of your
"sendmail" mail recipients are written to a SQL Database table.
</para>
          <orderedlist>
            <listitem>
              <para>Copy the file "odbc_mail.default.ini" to "/etc/odbc_mail.ini"</para>
              <important>
                <para>Make sure that /etc/odbc_mail.ini is NOT GROUP/WORLD writable.  virt_mail
will fail to run if it is.</para>
              </important>
            </listitem>
            <listitem>
              <para>Copy or symbolically link the file "virt_mail" to "/usr/bin/virt_mail"</para>
            </listitem>
            <listitem>
              <para>Edit /etc/odbc_mail.ini and change the login settings to match your current database installation.</para>
              <para>Note: If you don't have or want to use procmail, comment out the "Fallback" setting in the "[Deliver]" section.</para>
            </listitem>
            <listitem>
              <para>Edit the file "/etc/sendmail.cf" as described below:</para>
              <para>Change</para>
              <programlisting>
Mlocal, P=/usr/bin/procmail, F=lsDFMAw5:/|@qSPfhn9, S=10/30,
  R=20/40,T=DNS/RFC822/X-Unix, A=procmail -Y -a $h -d $u
</programlisting>
              <para>
To:
</para>
              <programlisting>
Mlocal, P=/usr/bin/virt_mail, F=lsDFMA5:/|@qSPhn9, S=10/30,
  R=20/40, T=DNS/RFC822/X-Unix, A=virt_mail -c /etc/odbc_mail.ini -l $u -s $g
</programlisting>
              <para>
NOTE: The changes to the F= setting involves removing both the 'w' and 'f' flags.
</para>
              <para>
The removal of the 'w' flag affects lookups in /etc/passwd, which are no
longer required if all mail delivery goes into a SQL Database.  The default
ini file is set up to maildrop via procmail, which will perform the check correctly.
</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="replacingmailsettings">
          <title>Replacing The Mail Storage Settings For Individual Users</title>
          <section xml:id="sendmail">
            <title>Using Sendmail</title>
            <orderedlist>
              <listitem>
                <para>Copy odbc_mail.default.ini to ~the_user_name/odbc_mail.ini</para>
                <important>
                  <para>Make sure that /etc/odbc_mail.ini is NOT GROUP/WORLD writable.  virt_mail
will fail to run if it is.</para>
                </important>
              </listitem>
              <listitem>
                <para>At the end of the file ~the_user_name/.procmailrc put something like:
</para>
                <programlisting>
:0:
| /usr/bin/virt_mail -c .odbc_mail.ini -l the_user_name
</programlisting>
                <para>
replacing the_user_name with the user you are setting up.
</para>
                <para>
Note: the '-l ..' parameter is used to relate the local recipient to
the database user for which the maildrop is done.  See the remarks in
the odbc_mail.default.ini file.
</para>
              </listitem>
              <listitem>
                <para>Adjust the parameters in .odbc_mail.ini to match your configuration</para>
                <important>
                  <para>disable Fallback delivery in the .odbc_mail.ini file.</para>
                </important>
                <para>
Comment out the "Fallback =" entry in the .odbc_mail.ini
or set it to something that does not involve procmail.  This may lead to drop loops, otherwise.
</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="qmail">
            <title>Using Qmail</title>
            <orderedlist>
              <listitem>
                <para>Copy odbc_mail.default.ini to ~the_user_name/.odbc_mail.ini
</para>
                <important>
                  <para>Make sure that the .odbc_mail.ini file is NOT GROUP/WORLD writable.
virt_mail will fail to run if it is.</para>
                </important>
              </listitem>
              <listitem>
                <para>If you are setting up a .qmail, you can simply do the following:
</para>
                <programlisting>
| /usr/bin/virt_mail -m qmail -c .odbc_mail.ini
</programlisting>
                <para>
If you are setting up .qmail-default or .qmail-&lt;some_alias_name&gt;,
make sure you adjust the RemovePrefix accordingly in the odbc_mail.ini.
</para>
                <para>
This also works if a single user is receiving mail for an entire
(virtual) domain.
</para>
                <para>
If you want to configure qmail so that user 'db' gets all mail for
example.com, do the following:
</para>
                <orderedlist>
                  <listitem>
                    <para>create a new user db in /etc/passwd etc.</para>
                  </listitem>
                  <listitem>
                    <para>remove example.com from /var/qmail/control/locals</para>
                  </listitem>
                  <listitem>
                    <para>add to /var/qmail/controls/virtualdomains: </para>
                    <programlisting>
example.com:db
</programlisting>
                  </listitem>
                  <listitem>
                    <para>adjust /var/qmail/users/assign accordingly:</para>
                    <programlisting>
=db:db:&lt;uid&gt;:&lt;gid&gt;:&lt;home&gt;:::
</programlisting>
                    <programlisting>
+db-:db:&lt;uid&gt;:&lt;gid&gt;:&lt;home&gt;:-::
</programlisting>
                    <para>or run qmail-pw2u &lt; /etc/passwd &gt; /var/qmail/users/assign
  then run qmail-newu and restart qmail</para>
                  </listitem>
                  <listitem>
                    <para>in ~db/.qmail-default, put:</para>
                    <programlisting>
| /usr/bin/virt_mail -m qmail -c .odbc_mail.ini
</programlisting>
                  </listitem>
                  <listitem>
                    <para>in .odbc_mail.ini, set:</para>
                    <programlisting>
RemovePrefix=db-
</programlisting>
                    <para>
Now, mail to info@example.com will be delivered to the qmail alias
db-info@example.com and is stored into the database for user 'info'.
</para>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>Adjust the parameters in .odbc_mail.ini to match your configuration</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="courier">
            <title>Using Courier</title>
            <orderedlist>
              <listitem>
                <para>Copy odbc_mail.default.ini to ~the_user_name/.odbc_mail.ini
</para>
                <important>
                  <para>Make sure that the .odbc_mail.ini file is NOT GROUP/WORLD writable.
virt_mail will fail to run if it is.</para>
                </important>
              </listitem>
              <listitem>
                <para>If you are setting up a .courier, you can simply do the following:
</para>
                <programlisting>| /usr/bin/virt_mail -mcourier -c .odbc_mail.ini</programlisting>
                <para>
If you are setting up .courier-default or .courier-&lt;some_alias_name&gt;,
make sure you adjust the RemovePrefix accordingly in the .odbc_mail.ini.
</para>
                <para>Note: although courier is very similar to qmail in this respect,
it is different from qmail in how it handles exit codes.
If you use -mqmail while running under courier, you'll get the wrong
exit codes, so mail is bounced instead of retried.
</para>
                <para>Note also that if delivering to multiple recipients in a .courier file,
make sure the virt_mail is specified first.  This is because if the
virt_mail fails with a temporary error, the other recipients will
get another drop when courier re-attempts to deliver the mail.
</para>
                <para>
Right:
</para>
                <para>
\w</para>
                <programlisting>
| /usr/bin/virt_mail -mcourier -c .odbc_mail.ini
./Maildir
</programlisting>
                <para>Wrong:</para>
                <programlisting>
./Maildir
| /usr/bin/virt_mail -mcourier -c .odbc_mail.ini
</programlisting>
              </listitem>
              <listitem>
                <para>
Adjust the parameters in .odbc_mail.ini to match your configuration
</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="exim">
            <title>Using EXIM</title>
            <para>
Here are code snippets for Exim that perform maildrops into the odbc database.
</para>
            <programlisting>
## IN TRANSPORT SECTION

# Delivers into the database
odbc:
  driver = pipe
  command = /usr/bin/virt_mail \
	-c /etc/odbc_mail.ini \
	-s "${if def:return_path{$return_path}{MAILER-DAEMON}}" \
	-l "$local_part"
  user = USERNAME
  return_path_add
  delivery_date_add
  prefix =
  suffix =
  temp_errors = 73 : 74 : 75
  return_fail_output

# NOTE: Make sure the USERNAME in the 'user = USERNAME' setting matches
# the owner of /etc/odbc_mail.ini, because this file must have mode 0600.
# Consider creating a new user account for this delivery only.
# You should specify 'user = root' here only if Fallback delivery is
# configured in /etc/odbc_mail.ini (for procmail fallback delivery
# for instance)

## IN DIRECTORS SECTION

# Attempts delivery of all mail into the database
to_db:
  driver = smartuser
  transport = odbc
  require_files = /etc/odbc_mail.ini
  #
  # uncomment line below to deliver all mail to db-XXX into the database, for any
  # value of XXX. For this to work, set "RemovePrefix = db-" in
  # the [Translate] section in /etc/odbc_mail.ini
  #prefix = db-
</programlisting>
          </section>
        </section>
        <section xml:id="mailsystables">
          <title>Mail System Tables</title>
          <para>
The electronic mail accounts are regular SQL accounts.
</para>
          <para>
Id (MM_ID) of the message is unique per account/folder (folder can be 'Inbox' etc.)
</para>
          <tip>
            <title>See Also:</title>
            <para>
              <link linkend="smtptabledesc">Mail system tables</link>
            </para>
          </tip>
        </section>
        <section xml:id="pop3client">
          <title>Pop3 Client</title>
          <para>The Virtuoso POP3 Client implementation can retrieve messages from any POP3 server.</para>
          <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

          <refentry xml:id="fn_pop3_get">
            <refmeta>
              <refentrytitle>pop3_get</refentrytitle>
              <refmiscinfo>mail</refmiscinfo>
            </refmeta>
            <refnamediv>
              <refname>pop3_get</refname>
              <refpurpose>get messages from a POP3 server</refpurpose>
            </refnamediv>
            <refsynopsisdiv>
              <funcsynopsis xml:id="fsyn_pop3_get">
                <funcprototype xml:id="fproto_pop3_get">
                  <funcdef>array <function>pop3_get</function>

  </funcdef>
                  <paramdef choice="opt">in <parameter>host</parameter>

   varchar</paramdef>
                  <paramdef choice="opt">in <parameter>user</parameter>

   varchar</paramdef>
                  <paramdef choice="opt">in <parameter>password</parameter>

   varchar</paramdef>
                  <paramdef choice="opt">in <parameter>buffer_size</parameter>

   integer</paramdef>
                  <paramdef choice="opt">
                    in <parameter>command</parameter>

   varchar
                  </paramdef>
                  <paramdef choice="opt">
                    in <parameter>exclude_uidl_list</parameter>

   vector
                  </paramdef>
                </funcprototype>
              </funcsynopsis>
            </refsynopsisdiv>
            <refsect1 xml:id="desc_pop3_get">
              <title>Description</title>
              <para><function>Pop3_get</function>

   is used to retrieve and delete messages from a server
    running the Post Office Protocol version 3 as defined in rfc1725. In its default form it
    returns a vector of vectors containing messages retrieved from the POP3 server.
    Each vector within the vector contains a pair of <type>VARCHAR</type>

   UIDL and
    <type>VARCHAR</type>

   Message body, i.e. to get the message body of the second message retrieved,
    one would use <computeroutput>aref (aref (msg_vec, 1), 1)</computeroutput>

  .
    Total length of messages retrieved will not exceed the value of <parameter>buffer_size</parameter>

    parameter in bytes.</para>
              <para>The optional parameter <parameter>command</parameter>

   can be used to control output
    or delete messages. When <parameter>command</parameter>

    is passed a <type>VARCHAR</type>

   'uidl', <function>pop3_get</function>

   outputs single
    vector containing <type>VARCHAR</type>

   UIDLs. The <parameter>buffer_size</parameter>

   constraint
    is effective here. Thus, the vector will only contain UIDLs of messages whose total message text
    length does not exceed <parameter>buffer_size</parameter>

   bytes. These message lengths are
    accumulated in the order returned by the POP3 server.</para>
              <para>Command 'delete' will cause retrieved messages to be deleted from the server
    after retrieval.</para>
            </refsect1>
            <refsect1 xml:id="params_pop3_get">
              <title>Parameters</title>
              <refsect2>
                <title>host</title>
                <para>The host to connect with. IP address or hostname:port. There is no default for port, so to connect to the standard port for POP3, use &lt;hostname/IP address&gt;:110</para>
              </refsect2>
              <refsect2>
                <title>user</title>
                <para><type>string</type>

   user id in remote host.</para>
              </refsect2>
              <refsect2>
                <title>password</title>
                <para><type>string</type>

   password in remote host.</para>
              </refsect2>
              <refsect2>
                <title>buffer_size</title>
                <para><type>integer</type>

   maximum total length of message text for
      messages/uidls to be retrieved.</para>
              </refsect2>
              <refsect2>
                <title>command</title>
                <para>Command <type>string</type>

  . Valid values are empty, 'uidl'
      or 'delete'</para>
              </refsect2>
              <refsect2>
                <title>exclude_uidl_list</title>
                <para>A <type>vector</type>

   containing UIDLs. A message whose UIDL appears in this
      list will not be retrieved or deleted.</para>
              </refsect2>
            </refsect1>
            <refsect1 xml:id="ret">
              <title>Return Types</title>
              <para>A vector of vectors containing UIDL/Message text <type>strings</type>

   or
     a 'flat' vector containing UIDL <type>strings</type>

  .</para>
            </refsect1>
            <refsect1 xml:id="errors_pop3_get">
              <title>Errors</title>
              <table>
                <title>Errors signalled by</title>
                <tgroup cols="4">
                  <thead>
                    <row>
                      <entry>SQLState</entry>
                      <entry>Error Code</entry>
                      <entry>Error Text</entry>
                      <entry>Description</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>
                        <errorcode>2E000</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO001</errorcode>
                      </entry>
                      <entry>
                        <errortext>Cannot resolve host in pop3_get</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08001</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO002</errorcode>
                      </entry>
                      <entry>
                        <errortext>Cannot connect in pop3_get</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO003</errorcode>
                      </entry>
                      <entry>
                        <errortext>No response from remote POP3 server</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO004</errorcode>
                      </entry>
                      <entry>
                        <errortext>Not valid user in remote POP3 server</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO005</errorcode>
                      </entry>
                      <entry>
                        <errortext>UIDL command to remote POP3 server failed</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO006</errorcode>
                      </entry>
                      <entry>
                        <errortext>Could not get output of UIDL from remote POP3 server.</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO007</errorcode>
                      </entry>
                      <entry>
                        <errortext>LIST command to remote POP3 server failed.</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO008</errorcode>
                      </entry>
                      <entry>
                        <errortext>Could not get output of LIST from remote POP3 server.</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode/>
                      </entry>
                      <entry>
                        <errorcode>PO009</errorcode>
                      </entry>
                      <entry>
                        <errortext/>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO010</errorcode>
                      </entry>
                      <entry>
                        <errortext>Failed reading output of LIST command on remote POP3 server</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO011</errorcode>
                      </entry>
                      <entry>
                        <errortext>Could not DELE messages from remote POP3 server</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO012</errorcode>
                      </entry>
                      <entry>
                        <errortext>Could not QUIT from remote POP3 server</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08000</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO013</errorcode>
                      </entry>
                      <entry>
                        <errortext>Argument 6 to pop3_get must be a vector</errortext>
                      </entry>
                      <entry/>
                    </row>
                    <row>
                      <entry>
                        <errorcode>08006</errorcode>
                      </entry>
                      <entry>
                        <errorcode>PO014</errorcode>
                      </entry>
                      <entry>
                        <errortext>Misc. error in connection in pop3_get</errortext>
                      </entry>
                      <entry/>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </refsect1>
            <refsect1 xml:id="examples_pop3_get">
              <title>Examples</title>
              <example xml:id="ex_pop3_get_3">
                <title>Get messages from remote POP3</title>
                <para>This example retrieves messages from a remote POP3 server and stores them in a table.</para>
                <screen>create table MY_MSGS (MSG_ID INTEGER IDENTITY,
                      MSG_HOST VARCHAR,
                      MSG_UIDL VARCHAR,
                      MSG_TEXT LONG VARCHAR,
                      primary key (MSG_ID, MSG_HOST, MSG_UIDL));

create procedure
get_msgs (in pop_host varchar, in pop_uid varchar, in pop_pwd varchar)
{
  declare msg_vec any;
  declare inx integer;

  msg_vec := pop3_get (concat (pop_host, ':110'),
			       pop_uid,
			       pop_pwd,
			       10000000,
			       'delete');

  inx := 0;

  while (inx &lt; length (msg_vec))
    {
      insert into MY_MSGS (MSG_HOST, MSG_UIDL, MSG_TEXT)
             values (pop_host,
		     aref (aref (msg_vec, inx), 0),
		     aref (aref (msg_vec, inx), 1));

      inx := inx + 1;
    }
}
</screen>
                <para>Here is a test run. Just for the fun, let's get the message subjects, too.</para>
                <screen>
SQL&gt; get_msgs('pop.xs4all.nl', 'ghard', '|_337h4x0R');

SQL&gt; select MSG_UIDL, length (MSG_TEXT), get_keyword ('Subject', aref (mime_tree (MSG_TEXT), 0)) from MY_MSGS;
MSG_UIDL          callret   callret
VARCHAR NOT NULL  INTEGER   VARCHAR
_______________________________________________________________________________

1003930514.maildrop7.14798  3482      [Fwd: Linux Expo]
1003930555.maildrop7.15349  7683      [Fwd: SOAP options example]

2 Rows. -- 8 msec.

</screen>
              </example>
            </refsect1>
            <refsect1 xml:id="seealso">
              <title>See Also</title>
              <para><link linkend="fn_mime_tree"><function>mime_tree</function></link>

  ,
    <link xlink:href="http://www.ietf.org/rfc/rfc1725">RFC1725</link>

  </para>
            </refsect1>
          </refentry>
          <!-- FIXME?? -->

        </section>
        <!-- FIXME?? -->

        <section xml:id="commands_01">
          <title>Commands</title>
          <para>UIDL - get only UIDL's of messages.</para>
          <para>DELETE - delete messages after downloading.</para>
          <example>
            <title>Examples</title>
            <para>
1. To get 10 KB. messages from the server  'openlinksw.com' POP3 port 110, user name 'user_1', password  'pass_1'
</para>
            <programlisting>
	Pop3_get ('openlinksw.com:110', 'user_1', 'pass_1', 10000);
</programlisting>
            <para>
2. To get  and delete 5 KB. messages from the server  'openlinksw.com' POP3 port 110, user name 'user_1',  password  'pass_1'
</para>
            <programlisting>
	Pop3_get ('openlinksw.com:110', 'user_1', 'pass_1', 5000, 'DELETE');
</programlisting>
            <para>
3. To get  UIDL's of 100 kb. messages from the server  'openlinksw.com' POP3 port 110, user name 'user_1',  password  'pass_1'
</para>
            <programlisting>
	Pop3_get ('openlinksw.com:110', 'user_1', 'pass_1', 100000, 'UIDL');
</programlisting>
          </example>
        </section>
      </section>
      <section xml:id="mailsink">
        <title>The Virtuoso Mail Sink</title>
        <para>The Virtuoso Sink is used to store messages received by Windows 2000 IIS SMTP Service into the MAIL_MESSAGES
table in Virtuoso.  It consists of an executable, run as a service, and a VBscript for registering a COM object with the IIS,
interfacing it with the Virtuoso Sink</para>
        <para>The User ID(s) in MAIL_MESSAGES to whom the message belongs to is determined by
parsing the <command>To:</command>

   field in the mail message into a list of recipients.  For each entry in the list,
if an @-sign is found, the user ID will consist of the characters to the left of it, otherwise the whole entry is used.</para>
        <section>
          <title>Registry Entries for the Virtuoso Sink.</title>
          <programlisting>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; VirtuosoSink.reg
REGEDIT4

[HKEY_LOCAL_MACHINE\SOFTWARE\OpenLink Software\VirtuosoSink]
"User"="dba"
"Password"="dba"
"DSN"="Virtuoso"
"ConnectionCount"=dword:00000001
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; VirtuosoSink.reg</programlisting>
          <para>These are the registry entries used by the Sink service.  ConnectionCount is the number of connections to Virtuoso to be pooled.</para>
        </section>
        <section>
          <title>Installation</title>
          <para>Use these commands to install the Virtuoso Sink:</para>
          <simplelist type="vert">
            <member><command>VirtuosoSink /RegServer</command>

   Registers the COM Object VirtuosoSink.SMTP into the registry</member>
            <member><command>VirtuosoSink /Service</command>

   Creates the Service in Manual start mode</member>
            <member><command>cscript smtpreg.vbs /add 1 OnArrival Virtuoso_SMTP_Sink VirtuosoSink.SMTP "mail from=*"</command>

   - Registers the COM Object as a mail sink with the IIS SMTP service.</member>
          </simplelist>
          <tip>
            <title>See Also:</title>
            <para><link xlink:href="http://msdn.microsoft.com/library/psdk/cdosys/_cdosys_implementing_sinks_with_scripting_languages.htm">The MSDN page</link>

   for more information about registering sinks.</para>
          </tip>
        </section>
        <section>
          <title>Sink Operation</title>
          <para>When the service starts it opens a pool of connections to Virtuoso and
      waits for a COM event. When the COM callback gets called, the service
      invokes a stored procedure and passes the message text to it. The procedure
      then stores the message into the database. In event of lost connection to
      the database, the service would try once to re-establish it and re-execute
      the stored procedure call. Errors and successful message routings are
      entered into the Windows 2000 Application Log.</para>
        </section>
      </section>
    </section>
