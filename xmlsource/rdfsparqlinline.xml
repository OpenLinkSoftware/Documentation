<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="rdfsparqlinline">
        <title>SPARQL Inline in SQL</title>
        <para>Virtuoso extends the SQL 92 syntax with SPARQL queries and subqueries. Instead of writing a SQL SELECT query or subquery, one can write the SPARQL keyword and a SPARQL query after the keyword.</para>
        <programlisting>
SQL&gt;SPARQL SELECT DISTINCT ?p WHERE { graph ?g { ?s ?p ?o } };
p
varchar
----------
http://example.org/ns#b
http://example.org/ns#d
http://xmlns.com/foaf/0.1/name
http://xmlns.com/foaf/0.1/mbox
...

SQL&gt;SELECT distinct subseq ("p", strchr ("p", '#')) as fragment
  FROM (SPARQL SELECT DISTINCT ?p WHERE { graph ?g { ?s ?p ?o } } ) as all_predicates
  WHERE "p" like '%#%';
fragment
varchar
----------
#query
#data
#name
#comment
...
</programlisting>
        <para>Note that names of variables returned from SPARQL are always case-sensitive and no case mode rules apply to them.
Depending on the CaseMode parameter in the Virtuoso configuration file, double quotes should be used if necessary to refer to them in surrounding SQL code.
</para>
        <para>
It is possible to pass parameters to a SPARQL query via a Virtuoso-specific syntax extension.
<emphasis>??</emphasis>

   or <emphasis>$?</emphasis>

   indicates a positional parameter similar to <emphasis>?</emphasis>

   in plain SQL. <emphasis>??</emphasis>

   can be used in graph patterns or anywhere in place of a SPARQL variable.
The value of a parameter should be passed in SQL form, i.e. this should be a number or a untyped string.
An IRI ID can be passed in all cases where an absolute IRI can, except the obvious case of when the variable is an argument of a function that requires string.
If the parameter is used in the 'graph', 'subject' or 'object' position of the SPARQL pattern, the string parameter is converted into an IRI automatically. In other cases an IRI string is indistinguishable from a string literal, so it is necessary to call the built-in SPARQL function <emphasis>iri()</emphasis>

   , e.g. <emphasis>iri (??)</emphasis>

  .
Using this notation, any dynamic SQL client (whether ODBC, JDBC or some other) can execute parameterized SPARQL queries, binding parameters just as with dynamic SQL.
</para>
        <programlisting>
SQL&gt; create function param_passing_demo ()
{
  declare stat, msg varchar;
  declare mdata, rset any;
  exec ('SPARQL SELECT ?s WHERE { graph ?g { ?s ?? ?? }}',
    stat, msg,
    vector ( /* Vector of two parameters */
      'http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#int1',
      4 ),
    10, /* Max no of rows */
    mdata, /* Variable to get metadata */
    rset ); /* Variable to get result-set */
  if (length (rset) = 0)
    signal ('23000',
      'No data found, try demo database with installed Virtuoso tutorials');
  return rset[0][0];
}

SQL&gt; SELECT param_passing_demo ();
callret
VARCHAR
_______________________________________________________________________________

http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#four

1 Rows. -- 00000 msec.
</programlisting>
        <para>Another example:</para>
        <programlisting>
INSERT INTO GRAPH &lt;http://example.com/Northwind&gt;
{ `iri($?)` &lt;http://example.com/schemas/northwind#has_province&gt; "Valencia" };
</programlisting>
        <para>An inline SPARQL query can refer to SQL variables that are in scope in the SQL query or stored procedure containing it.
Virtuoso extends the SPARQL syntax with a special notation to this effect. A reference to SQL variable X can be written as <emphasis>?:X</emphasis>

   or <emphasis>$:X</emphasis>

  .
A reference to column <emphasis>C</emphasis>

   of a table or a sub-select with alias <emphasis>T</emphasis>

   can be written as <emphasis>?:T.C</emphasis>

   or <emphasis>$:T.C</emphasis>

  .
Both notations can be used in any place where a variable name is allowed, except the 'AS' clause described below.
</para>
        <para>A column of a result set of a SPARQL SELECT can be used in SQL code inside a for statement just like any column from a SQL select.
</para>
        <para>SQL rules about double-quoted names are applicable to variables that are passed to a SPARQL query or selected from one.
If a variable name contains unusual characters or should not be normalized according to SQL conventions then the
name should use double quotes for escaping. e.g., the notation <emphasis>?:"OrderLine"</emphasis>

   will always refer to variable or column
titled <emphasis>OrderLine</emphasis>

   whereas <emphasis>?:OrderLine</emphasis>

   can be converted to <emphasis>ORDERLINE</emphasis>

   or <emphasis>orderline</emphasis>

  .
</para>
        <para>It is safer to avoid using variable names that conflict with column names of RDF system tables, esp. <emphasis>G</emphasis>

  , <emphasis>S</emphasis>

  , <emphasis>P</emphasis>

   and <emphasis>O</emphasis>

  .
These names are not reserved now but they may cause subtle bugs when an incorrect SPARQL subquery is compiled into SQL code that refers to identically named table columns.
Some of these names may be rejected as syntax errors by future Virtuoso versions.
</para>
        <programlisting>
SQL&gt; create procedure sql_vars_demo ()
{
#pragma prefix sort0: &lt;http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#&gt;
  declare RES varchar;
  declare obj integer;
  result_names (RES);
  obj := 4;
  for (SPARQL SELECT ?subj WHERE { graph ?g { ?subj sort0:int1 ?:obj } } ) do
    result ("subj");
}

SQL&gt; sql_vars_demo ();
RES
VARCHAR
_______________________________________________________________________________

http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#four

1 Rows. -- 00000 msec.
</programlisting>
        <para>The example also demonstrates the Virtuoso/PL pragma line for procedure-wide declarations of namespace prefixes.
This makes the code more readable and eliminates duplicate declarations of namespace prefixes when the procedure
contains many SPARQL fragments that refer to a common set of namespaces.
</para>
        <para>A SPARQL ASK query can be used as an argument of the SQL EXISTS predicate.
</para>
        <programlisting>
create function sparql_ask_demo () returns varchar
{
  if (exists (sparql ask where { graph ?g { ?s ?p 4}}))
    return 'YES';
  else
    return 'NO';
}

SQL&gt; SELECT sparql_ask_demo ();
_______________________________________________________________________________

YES
</programlisting>
        <section xml:id="rdfcontrollingsparqloutputtypes">
          <title>Controlling SPARQL Output Data Types</title>
          <para>The compilation of a SPARQL query may depend on an environment that is usually provided by the SPARQL protocol and which includes the default graph URI. Environment settings that come from the SPARQL protocol may override settings in the text of a SPARQL query. To let an application configure the environment for a query, SPARQL's syntax has been extended with the 'define' clause:</para>
          <programlisting>
define parameter-qname parameter-value
</programlisting>
          <para>Examples of supported parameters are <emphasis>output:valmode</emphasis>

   and <emphasis>output:format</emphasis>

  </para>
          <para><emphasis>output:valmode</emphasis>

   specifies which data types (i.e. representation) should be used for values in the result set. The default is "SQLVAL",
meaning that a query returns result set values in SQL format and behaves as a typical SQL select - IRIs and string literals
are returned as strings, making the output compatible with ODBC and the standard SQL routines. To compose triple vectors in Virtuoso PL code, an
application may need data in long format. A valmode of "LONG" means that IRIs are returned as IRI_IDs and string literals may be returned as special "RDF boxes"
even if they are actually plain strings. This may cause problems if these new datatypes are not known to the data recipient or if IRIs come from RDF
Views (in which case IRI_IDs are created on the fly and 'pollute' the database), but it can result in fewer data conversions and thus better speed if used
properly. "AUTO" disables all types of conversion for the result set, so the latter can comprise a mix of values across "SQLVAL" and "LONG" value modes, as well as
some internal representations. It is better to avoid using this mode in user applications because the output may change from version to version.
</para>
          <para>If the query contains a</para>
          <programlisting>
define output:valmode 'LONG'
</programlisting>
          <para>clause then all returned values are in long format. e.g., the following query returns IRI_ID's instead of IRI strings.</para>
          <programlisting>
SQL&gt;SPARQL define output:valmode 'LONG' SELECT distinct ?p WHERE { graph ?g { ?s ?p ?o } };
p
----------
#i1000001
#i1000003
#i1000005
#i1000006
...
</programlisting>
          <para><emphasis>output:format</emphasis>

   instructs the SPARQL compiler that the result of the query should be serialized into an RDF document -
that document will be returned as a single column of a single row result set.
<emphasis>output:format</emphasis>

   is especially useful if a SPARQL CONSTRUCT or SPARQL DESCRIBE query is executed directly via an ODBC or JDBC database connection
and the client cannot receive the resulting dictionary of triples (there's no way to transfer such an object via ODBC).
Using this option, the client can receive the document that contains the whole result set of a SELECT or the dictionary of triples of a CONSTRUCT/DESCRIBE, and parse it locally.
</para>
          <para>
Supported values for <emphasis>output:format</emphasis>

   are <emphasis>RDF/XML</emphasis>

   and <emphasis>TURTLE</emphasis>

   (or <emphasis>TTL</emphasis>

  ).
If both <emphasis>output:valmode</emphasis>

   and <emphasis>output:format</emphasis>

   are specified, <emphasis>output:format</emphasis>

   has higher priority,
raising an error if <emphasis>output:valmode</emphasis>

   is set to a value other than <emphasis>LONG</emphasis>

  .
</para>
          <para>
When a SPARQL query is compiled, the compiler checks whether the result set is to be sent to a remote ODBC/JDBC client or used in some other way.
The compiler will automatically set <emphasis>output:format</emphasis>

   to <emphasis>TURTLE</emphasis>

   if compiling for execution by an SQL client.
</para>
          <para>
The example below demonstrates how different values of <emphasis>output:format</emphasis>

   affect the result of SPARQL SELECT.
Note 10 rows and 4 columns in the first result, and single LONG VARCHAR in the others.
When using the ISQL client, use the 'set blobs on;' directive if fetching long texts to avoid receiving a 'data truncated' warning.
</para>
          <programlisting>
SQL&gt; SPARQL SELECT * WHERE {graph ?g { ?s ?p ?o }} limit 10;
g                                            s                    p                              o
VARCHAR                                      VARCHAR              VARCHAR                        VARCHAR
______________________________________________________________________

http://local.virt/DAV/bound/manifest.rdf     nodeID://1000000000 http://example.com/test#query http://local.virt/DAV/bound/bound1.rq
. . .
http://local.virt/DAV/examples/manifest.rdf nodeID://1000000019 http://example.com/test#query http://local.virt/DAV/examples/ex11.2.3.1_1.rq

10 Rows. -- 00000 msec.

SQL&gt; SPARQL define output:format "TTL" SELECT * WHERE {graph ?g { ?s ?p ?o }} limit 10;
callret-0
LONG VARCHAR
_______________________________________________________________________________

@prefix :rdf &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix :rs &lt;http://www.w3.org/2005/sparql-results#&gt; .
@prefix :xsd &lt;http://www.w3.org/2001/XMLSchema#&gt; .
[ rdf:type rs:results ;
  rs:result [
      rs:binding [ rs:name "g" ; rs:value &lt;http://local.virt/DAV/bound/manifest.rdf&gt; ] ;
      rs:binding [ rs:name "s" ; rs:value _:nodeID1000000000 ] ;
      rs:binding [ rs:name "p" ; rs:value &lt;http://example.com/test#query&gt; ] ;
      rs:binding [ rs:name "o" ; rs:value &lt;http://local.virt/DAV/bound/bound1.rq&gt; ] ;
      ] ;

. . .

  rs:result [
      rs:binding [ rs:name "g" ; rs:value &lt;http://local.virt/DAV/examples/manifest.rdf&gt; ] ;
      rs:binding [ rs:name "s" ; rs:value _:nodeID1000000019 ] ;
      rs:binding [ rs:name "p" ; rs:value &lt;http://example.com/test#query&gt; ] ;
      rs:binding [ rs:name "o" ; rs:value &lt;http://local.virt/DAV/examples/ex11.2.3.1_1.rq&gt; ] ;
      ] ;
    ] .

1 Rows. -- 00000 msec.

SQL&gt; SPARQL define output:format "RDF/XML" SELECT * WHERE {graph ?g { ?s ?p ?o }} LIMIT 10;
callret-0
LONG VARCHAR
_______________________________________________________________________________

&lt;rdf:RDF
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rs="http://www.w3.org/2005/sparql-results#"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#" &gt;
   &lt;rs:results rdf:nodeID="rset"&gt;
  &lt;rs:result rdf:nodeID="sol206"&gt;
   &lt;rs:binding rdf:nodeID="sol206-0" rs:name="g"&gt;&lt;rs:value rdf:resource="http://local.virt/DAV/bound/manifest.rdf"/&gt;&lt;/rs:binding&gt;
   &lt;rs:binding rdf:nodeID="sol206-1" rs:name="s"&gt;&lt;rs:value rdf:nodeID="1000000000"/&gt;&lt;/rs:binding&gt;
   &lt;rs:binding rdf:nodeID="sol206-2" rs:name="p"&gt;&lt;rs:value rdf:resource="http://example.com/test#query"/&gt;&lt;/rs:binding&gt;
   &lt;rs:binding rdf:nodeID="sol206-3" rs:name="o"&gt;&lt;rs:value rdf:resource="http://local.virt/DAV/bound/bound1.rq"/&gt;&lt;/rs:binding&gt;
  &lt;/rs:result&gt;

. . .

  &lt;rs:result rdf:nodeID="sol5737"&gt;
   &lt;rs:binding rdf:nodeID="sol5737-0" rs:name="g"&gt;&lt;rs:value rdf:resource="http://local.virt/DAV/examples/manifest.rdf"/&gt;&lt;/rs:binding&gt;
   &lt;rs:binding rdf:nodeID="sol5737-1" rs:name="s"&gt;&lt;rs:value rdf:nodeID="1000000019"/&gt;&lt;/rs:binding&gt;
   &lt;rs:binding rdf:nodeID="sol5737-2" rs:name="p"&gt;&lt;rs:value rdf:resource="http://example.com/test#query"/&gt;&lt;/rs:binding&gt;
   &lt;rs:binding rdf:nodeID="sol5737-3" rs:name="o"&gt;&lt;rs:value rdf:resource="http://local.virt/DAV/examples/ex11.2.3.1_1.rq"/&gt;&lt;/rs:binding&gt;
  &lt;/rs:result&gt;
 &lt;/rs:results&gt;
&lt;/rdf:RDF&gt;

1 Rows. -- 00000 msec.
</programlisting>
          <para>SPARQL CONSTRUCT and SPARQL DESCRIBE results are serialized as one would expect:</para>
          <programlisting>
SQL&gt; SPARQL
define output:format "TTL"
CONSTRUCT { ?s ?p "004" }
WHERE
  {
    graph ?g { ?s ?p 4 }
  };
callret-0
LONG VARCHAR
_______________________________________________________________________________

&lt;http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#four&gt; &lt;http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#int1&gt; "004" .
_:b1000000913 &lt;http://www.w3.org/2001/sw/DataAccess/tests/result-set#index&gt; "004" .

1 Rows. -- 00000 msec.

SQL&gt; SPARQL
define output:format "RDF/XML"
CONSTRUCT { ?s ?p "004" }
WHERE
  {
    graph ?g { ?s ?p 4 }
  };
callret-0
LONG VARCHAR
_______________________________________________________________________________

&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
&lt;rdf:Description about="http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#four"&gt;&lt;ns0pred:int1 xmlns:ns0pred="http://www.w3.org/2001/sw/DataAccess/tests/data/Sorting/sort-0#"&gt;004&lt;/ns0pred:int1&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:nodeID="b1000000913"&gt;&lt;ns0pred:index xmlns:ns0pred="http://www.w3.org/2001/sw/DataAccess/tests/result-set#"&gt;004&lt;/ns0pred:index&gt;&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;

1 Rows. -- 00000 msec.
</programlisting>
          <para>SPARQL ASK returns a non-empty result set if a match is found for the graph pattern, an empty result set otherwise. If <emphasis>output:format</emphasis>

   is specified then the query makes a 'boolean result' document instead:</para>
          <programlisting>
SQL&gt; SPARQL ASK WHERE {graph ?g { ?s ?p 4 }};
__ask_retval
INTEGER
_______________________________________________________________________________

1

1 Rows. -- 00000 msec.

SQL&gt; SPARQL ASK WHERE {graph ?g { ?s ?p "no such" }};
__ask_retval
INTEGER
_______________________________________________________________________________

0 Rows. -- 00000 msec.

SQL&gt; SPARQL define output:format "TTL" ASK WHERE {graph ?g { ?s ?p 4 }};
callret
VARCHAR
_______________________________________________________________________________

@prefix :rdf &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
 @prefix :rs &lt;http://www.w3.org/2005/sparql-results#&gt; .
[ rdf:type rs:results ; rs:boolean TRUE ]

1 Rows. -- 00000 msec.

SQL&gt; SPARQL define output:format "RDF/XML" ASK WHERE {graph ?g { ?s ?p 4 }};
callret
VARCHAR
_______________________________________________________________________________

&lt;rdf:RDF
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rs="http://www.w3.org/2005/sparql-results#"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#" &gt;
   &lt;rs:results rdf:nodeID="rset"&gt;
    &lt;rs:boolean rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"&gt;1&lt;/rs:boolean&gt;&lt;/results&gt;&lt;/rdf:RDF&gt;

1 Rows. -- 00000 msec.
</programlisting>
        </section>
      </section>
