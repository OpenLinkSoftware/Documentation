<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vc_text">
          <refmeta>
            <refentrytitle>text</refentrytitle>
            <refmiscinfo>vspx_control</refmiscinfo>
          </refmeta>
          <refnamediv>
            <refname>text</refname>
            <refpurpose>Scriptable, data-bindable input control.</refpurpose>
          </refnamediv>
          <refsynopsisdiv>
            <funcsynopsis xml:id="vc_syn_text">
              <funcprototype xml:id="vc_proto_text">
                <funcdef>
            &lt;<function>text</function>

 /&gt;</funcdef>
                <paramdef choice="req"><parameter>name</parameter>

   (required) </paramdef>
                <paramdef choice="opt"><parameter>annotation</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>initial-enable</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>enabled</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>instantiate</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>control-udt</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>xsd-stub-xhtml</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>width</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>height</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>column</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>null-value</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>error-glyph</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>auto-submit</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>type</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>default</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>value</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>element-value</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>element-place</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>element-path</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>element-params</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>element-update-path</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>element-update-params</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>fmt-function</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>cvt-function</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>default-value</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>default_value</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>format</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-srcfile</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-srcline</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-log</parameter>

   (optional) </paramdef>
              </funcprototype>
            </funcsynopsis>
          </refsynopsisdiv>
          <refsect1 xml:id="vc_desc_text">
            <title>Description</title>
            <para>Text input, with scripts and validation options but no implied database binding. String input of the HTML form.</para>
          </refsect1>
          <refsect1 xml:id="vc_attrs_text">
            <title>Attributes</title>
            <formalpara>
              <title>name = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>A page level unique name identifying a control.</para>
            </formalpara>
            <formalpara>
              <title>annotation</title>
              <para>A human readable comment.</para>
            </formalpara>
            <formalpara>
              <title>initial-enable = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines  whether  a control is initially visible. True by default. Could be data-bound to an SQL expression.</para>
            </formalpara>
            <formalpara>
              <title>enabled = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines  whether  a control is visible. True by default. Could be data-bound to an SQL expression.</para>
            </formalpara>
            <formalpara>
              <title>instantiate = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines whether a control instantiate its children. It is true by default. It could be data-bound to an SQL expression. Unlike most of calcucateable attributes, the value of this attribute for a control is calcluated before calling 'on-init' event handler of the control; other values are calculated before calling 'before-data-bind' event handler.</para>
            </formalpara>
            <formalpara>
              <title>control-udt = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>At run time every control is represented as an instance of some user-defined type (UDT). VSPX compiles selects the UDT to use depending on name of the XML element that represents the control and maybe some of its attributes. In some specific cases the application developer may instruct VSPX compiler to use some other UDT, e.g. an application-specific UDT that is derived from the preset one. If specified, the value of 'control-udt' attribute should be equal to the name of the desired target UDT.</para>
            </formalpara>
            <formalpara>
              <title>xsd-stub-xhtml</title>
              <para>This attribute is for internal use only. It has no effect if added to the source VSPX file.</para>
            </formalpara>
            <formalpara>
              <title>width</title>
              <para>Visible width of the control when it is displayed in WYSIWYG tools when the source VSPX text is edited.
The value of this attribute will not be used when the resulting HTML is rendered.</para>
            </formalpara>
            <formalpara>
              <title>height</title>
              <para>Visible width of the control when it is displayed in WYSIWYG tools when the source VSPX text is edited.
The value of this attribute will not be used when the resulting HTML is rendered.</para>
            </formalpara>
            <formalpara>
              <title>column = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>The name of the column bound.
If nothing else is specified, the column meta data from the containing update form sets the field's attributes.
</para>
            </formalpara>
            <formalpara>
              <title>null-value</title>
              <para>This value will be shown if value of the column is NULL, also
	      value of the control will be set to null if this value is passed upon POST request.
	  </para>
            </formalpara>
            <formalpara>
              <title>error-glyph</title>
              <para>The character to be displayed near the resulting HTML input element if the test of v:validator of the element detects an error in the current value of the element.</para>
            </formalpara>
            <formalpara>
              <title>auto-submit</title>
              <para>Flag to auto submit the parent form if value of the control is changed.</para>
            </formalpara>
            <formalpara>
              <title>type</title>
              <para>
                <table>
                  <title>Allowed values of the 'type' attribute</title>
                  <tgroup cols="2">
                    <tbody>
                      <row>
                        <entry>plain</entry>
                        <entry>
                          <para>The value is displayed in a usual way and user can edit it. This is the default value.</para>
                        </entry>
                      </row>
                      <row>
                        <entry>password</entry>
                        <entry>
                          <para>The value is not shown on the screen to prevent occasional reading, only astericks are shown in the input field.</para>
                        </entry>
                      </row>
                      <row>
                        <entry>hidden</entry>
                        <entry>
                          <para>The text is passed to the target page without displaying it to the user.</para>
                        </entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
              </para>
            </formalpara>
            <formalpara>
              <title>default = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>The default value of input field.</para>
            </formalpara>
            <formalpara>
              <title>value = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Data bindable value of control, represents value of HTML control to be drawn.
The calculated value of this attribute is stored in the control in ufl_value field.
</para>
            </formalpara>
            <formalpara>
              <title>element-value = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>An XML entity that contains a value to be displayed by an HTML control.
The calculated value is stored in ufl_element_value field of the control.
This value is used only if ufl_value is null (e.g. if the 'value' attribute is not set at all), and the method vc_get_value_from_element() will be used to calculate ufl_value based on ufl_element_value, ufl_element_path and ufl_element_place.
</para>
            </formalpara>
            <formalpara>
              <title>element-place = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>The place of actual data inside an XML element. The calculated value of this attribute is stored in ufl_element_place field of the control. This is to process XMLSchema-compatible data without writing extra code for handling NULL values. The XML element can contain the value to be bound in either attribute or in an inner text node. XMLSchema treats missing attributes as NULL values. missing text node as an empty string value and if 'xsi:nil' attribute is 'true' then inner text value is NULL no matter if there are any text nodes. These self-evident rules are convenient for XQuery data retrieval but not for data update: an result of some XQuery expression can point to data but not to a place where data should occur in the future.
The use of 'element-place' allows to eliminate the problem. Attributes 'element-value', 'element-path' and 'element-update-path' may locate an element that is always present whereas 'element-place' describes where the desired datum will occur in the element.
The value of this attribute should be a string of syntax '@attributename' or 'text()'. If this is '@attributename' then the effective bound value is a value of the specified attribute or NULL if the specified attribute is missing. On update, either the attribute is created/edited in order to set non-NULL value or the attribute is deleted in order to set NULL.
If text() is specified then both text value of the element and the value of its 'xsi:nil' are properly handled on both data bind and update.</para>
            </formalpara>
            <formalpara>
              <title>element-path = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is the path inside the entity that comes from 'element-value' attribute. The default path is 'self::node()'. This path is used to point precisely to an subentity that should actually be used for data binding. The calculated value of this attribute should be a string in XQuery syntax, and it is saved in ufl_element_path member of the control.</para>
            </formalpara>
            <formalpara>
              <title>element-params = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is the vector of parameter values of the path specified by 'element-path' attribute. The default is NULL indicating no parameters. The attribute is calculated but not used if 'element-path' attribute is missing. The calculated value of this attribute should be either NULL or a vector of even length whose items are parameter names and parameter values; refer to the description of xquery_eval() function for more details. The value of the attribute is saved in ufl_element_params member of the control.</para>
            </formalpara>
            <formalpara>
              <title>element-update-path = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Like the value of 'element-path', this is the path inside the entity that comes from 'element-value' attribute. The difference is that 'element-path' is used inside 'vc_get_value_from_element() during data-bind to set ufl_value based on ufl_element_value whereas 'element-update-path' is used during data update inside 'vc_put_value_to_element() in order to save data inside the document that is referenced by ufl_element_value. The default path for update is equal to the path for data bind, i.e. it is the value of the calculated 'element-path' attribute or 'self::node()'. The calculated value of 'element-update-path' should be a string in XQuery syntax, and it is saved in ufl_element_update_path member of the control.</para>
            </formalpara>
            <formalpara>
              <title>element-update-params = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is the vector of parameter values of the path specified by 'element-update-path' attribute. The default is NULL indicating no parameters. The attribute is calculated but not used if 'element-update-path' attribute is missing (e.g. you should not try to specify 'element-path' without 'element-update-path' and both 'element-params' and 'element-update-params' in hope that values from 'element-update-params' will be passed to 'element-path' on update). The calculated value of this attribute should be either NULL or a vector of even length whose items are parameter names and parameter values; refer to the description of xquery_eval() function for more details. The value of the attribute is saved in ufl_element_update_params member of the control.</para>
            </formalpara>
            <formalpara>
              <title>fmt-function = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is to convert the value that is bound to the control into a string to use during the rendering. The value of this attribute should be a name of function that takes a single argument of the type that matches the type of ufl_value and returns a string. If this is used then the value of 'cvt-function' should probably be a name of function that converts the string back to the desired data type.
If a control supports 'format' attribute then the format is applied to the result of 'fmt-function', so the value returned by fmt-function may be e.g. an integer to be formatted by '%d' format.
The calculated value of this attribute is stored in ufl_fmt_fn field of the control.</para>
            </formalpara>
            <formalpara>
              <title>cvt-function = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is to convert a user input of type varchar into a value that should be stored in ufl_value (and e.g. placed into some database column by an update).
The calculated value of this attribute is stored in ufl_cvt_fn field of the control.
For more details, see the description of 'fmt_function' attribute above.</para>
            </formalpara>
            <formalpara>
              <title>default-value = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is an expression for setting the default value of the text.</para>
            </formalpara>
            <formalpara>
              <title>default_value = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is deprecated alias for 'default-value' attribute (note the difference between minus sign and underscore).</para>
            </formalpara>
            <bridgehead>format = 

   </bridgehead>
            <formalpara>
              <title>debug-srcfile</title>
              <para>URI of the source document where the tag comes from.</para>
            </formalpara>
            <formalpara>
              <title>debug-srcline</title>
              <para>Line number in the source document where the tag comes from.</para>
            </formalpara>
            <formalpara>
              <title>debug-log</title>
              <para>This defines what sort of data are saved to the debugging log.
</para>
            </formalpara>
          </refsect1>
          <refsect1 xml:id="vc_udt_text">
            <title>Declaration of type vspx_text</title>
            <para> 
  </para>
            <screen>
create type vspx_text under vspx_field
as
 (
   tf_default varchar default '',
   tf_style any default 0 -- 0 is text, 1 is password, 2 is hidden
 )
 temporary self as ref
  overriding method vc_render () returns any,
  overriding method vc_set_view_state (e vspx_event) returns any,
  overriding method vc_view_state (stream any, n int) returns any,
  overriding method vc_set_model () returns any,
  overriding method vc_xrender () returns any,
  constructor method vspx_text (name varchar, parent vspx_control)
</screen>
          </refsect1>
          <refsect1 xml:id="vc_ex_text">
            <title>Examples</title>
            <example xml:id="vc_ex_text__0">
              <title>
  Simple text input
</title>
              <para>The form contains text input control with 'Hello' string inside. User can edit the string and submit the changed value:</para>
              <screen>
&lt;v:page name="text__0" xmlns:v="http://http://example.com/vspx/"&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;VSPX samples | v:text&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;v:form name="form1" type="simple" action="" method="POST"&gt;
        &lt;v:text name="txt01" default="Hello"/&gt;
        &lt;v:button name="submit1" action="simple" value="OK"/&gt;
      &lt;/v:form&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/v:page&gt;
</screen>
            </example>
          </refsect1>
        </refentry>
