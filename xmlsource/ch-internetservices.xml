<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="ch-internetservices">
    <info>
      <title>Internet Services</title>
      <abstract>
        <para>This section discusses Virtuoso's support for DAV, email, usenet news, mime and other internet standards.</para>
        <para>The WebDAV repository lets Virtuoso store and index
    content within the database.  This can then be accessible directly
    via the HTTP protocol.</para>
        <para>This chapter describes the MIME extensions that have been implemented
    in Virtuoso.</para>
        <para>This covers examples of use of MIME for composition of MIME messages
    and content for mail transit of HTTP output.</para>
      </abstract>
    </info>
    <!-- ################### ~~~~~~~~~~ ################### -->

    <!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2020 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->

    <section xml:id="webdavserver">
      <title>WebDAV Server</title>
      <para>Virtuoso supports the WebDAV protocol, which is an extension of HTTP for
cooperative work on the Internet.  DAV resources can be of any mime type,
including binary types.
The DAV resources are stored in the Virtuoso database
as large objects, they are not in the file system and can only be accessed
through the DAV protocol.  Direct SQL access to the DAV tables is also possible, so
there's a set of Virtuoso/PL procedures that acts as DAV API to let server-side applications access DAV.
Virtuoso DAV can be extended by virtual collections. Instead of accessing DAV tables,
DAV server can retrieve data from applications,
thus an application can generate documents on demand and these documents will be available  via DAV
as well as plain DAV resources. Moreover, resources can be submitted directly to the application via DAV.
Virtuoso DAV provides settable access rights and ownership of resources.
Access rights as such are not covered by the DAV specification but Virtuoso implements both ACLs (access control lists) and a Unix
file system like scheme for ownership and permissions.
SQL accounts enabled for DAV are valid owners of DAV resources.  A resource has both a user owner and a group owner, plus an optional access control list that can grant privileges to users and roles alike.
A user can have DAV-only access, SQL/ODBC-only access, both of them or neither.
User account information is stored in relational tables and can be manipulated from SQL or
through a Web UI.</para>
      <para>
Virtuoso DAV can store metadata about resources. These metadata are extracted from resources automatically,
and can be edited by users. In addition, users can place public and personal 'tags' on resources to
categorize data according for personal needs without interference between users.
Virtuoso DAV has a powerful and scalable search engine that let application locate resources that match given list of criteria.
The search can process both plain DAV resources and data published by applications in virtual collections.
Search criteria can check for resource properties, content, metadata and tags.
</para>
      <para>Certain special processing is provided for the following types
of DAV resources:</para>
      <simplelist type="vert">
        <member>Any textual content types are automatically indexed in a free text index.</member>
        <member>Any XML content types are indexed in the same free text index as other
  text plus can be queried  with the <emphasis>xcontains</emphasis>

  SQL predicate.</member>
        <member>Some well-known types of documents are parsed in order to extract metadata,
such as author of MS Office document or musical genre of MP3 audio file or resolution of an image.</member>
        <member>VSP/VSPX pages - DAV resources can be dynamic web pages written in VSP
  or VSPX. Requesting such a page with GET or POST will execute the logic on
  the page. This is very convenient way of building web applications.
  </member>
      </simplelist>
      <para>DAV resources are stored in an ordinary relational table.  The text and
XML query features used with DAV are separately usable from SQL on any table
with the appropriate indexes and are thus not intrinsically related to DAV.</para>
      <para>WebDAV (Web Distributed Authoring and Versioning) is a communication
protocol for the Internet implemented as an extension to HTTP 1.1.  The WebDAV
specification was published by the Internet Engineering Task Force (IETF) in
February 1999.</para>
      <para>Most operating systems have support for accessing data hosted on DAV servers.</para>
      <para>DAV was designed to provide more methods for handling server resources.
In addition to the usual HTTP methods such as GET, POST, HEAD, PUT, DELETE,
OPTIONS are methods for making directories (or collections), a lock mechanism, copying of
resources and  collections, predefined and userd-defined properties of resources and collections.</para>
      <para>DAV consists of HTTP extensions, often with a message body containing XML.
DAV also provides a basic schema for resource metadata by allowing arbitrary XML properties to  be attached to resources.
</para>
      <para>
Virtuoso supports the following HTTP methods:
</para>
      <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
        <title>Features List - Virtuoso Web DAV HTTP Method Support</title>
        <tgroup align="char" charoff="50" char="." cols="2">
          <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
          <thead>
            <row>
              <entry>HTTP Method</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>HEAD</entry>
              <entry>Meta method for examining server properties or network behavior.</entry>
            </row>
            <row>
              <entry>GET</entry>
              <entry>Retrieves documents from the server</entry>
            </row>
            <row>
              <entry>POST, PUT</entry>
              <entry>Posts or puts documents on the server</entry>
            </row>
            <row>
              <entry>MKCOL</entry>
              <entry>Creates a collection</entry>
            </row>
            <row>
              <entry>MOVE</entry>
              <entry>For moving resources and/or collections within the server</entry>
            </row>
            <row>
              <entry>DELETE</entry>
              <entry>Removes resources or collections of resources from the server</entry>
            </row>
            <row>
              <entry>LOCK, UNLOCK</entry>
              <entry>Locks or unlocks a resource or collection to protect from modification by others</entry>
            </row>
            <row>
              <entry>PROPFIND, PROPPATCH</entry>
              <entry>Retrieves and sets properties for collections and/or resources.  In addition to arbitrary user-defined properties,
Virtuoso supports two sets of predefined properties: standard DAV properties (type, creation time, modification time, size etc.) and
Virtuoso-specific DAV properties (access control, tags, extensions for virtual collections.)</entry>
            </row>
            <row>
              <entry>MGET (experimental)</entry>
              <entry>Retrieves RDF metadata of a document according to URIQA rules</entry>
            </row>
            <row>
              <entry>MPUT/MDELETE (experimental)</entry>
              <entry>Updates RDF metadata of a document according to URIQA rules and appropriate RDF Schemas</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <tip>
        <title>See Also: External References</title>
        <para>
          <link xlink:href="http://www.rfc-editor.org/rfc/rfc2616.txt">IETF RFC 2616 regarding HTTP 1.1</link>
        </para>
        <para>
          <link xlink:href="http://www.rfc-editor.org/rfc/rfc2518.txt">IETF RFC 2518 regarding WebDAV Specification</link>
        </para>
      </tip>
      <section xml:id="davaccountsforwebuser">
        <title>DAV User Accounts</title>
        <para>Any non-disabled SQL account with the U_DAV_ENABLE column set to non-zero is a valid DAV account.
The administration user interface provides a check box for enabling DAV access and will make a default home collection etc.
Alternately, regular SQL can be used for setting the DAV flag on.  The DAV API or protocol requests can be used for
creating collections and resources for the user.
</para>
        <para>
Any non-disabled SQL account with the U_DAV_ENABLE column set to non-zero is a valid DAV account.
The administration user interface provides a check box for enabling DAV access and will make a default home collection etc.
Alternately, regular SQL can be used for setting the DAV flag on.  The DAV API or protocol requests can be used for
creating collections and resources for the user.
</para>
        <para>There is an automatically created initial DAV enabled account called "dav".  This has general administration privileges over all DAV.</para>
        <para>There are four predefined DAV accounts.</para>
        <simplelist type="vert">
          <member>User "dav" is the most powerful DAV account.</member>
          <member>
DAV group "administrators" usually consists of "dav" only; membership in this group does not give any special privileges
but this group is assigned by default to resources that are owned by "dav".
Thus group access rights to resources owned by "dav" can be used solely by
users that are added to "administrators".</member>
          <member>User "nobody" is a special account that acts as owner of all resources that have no real owner person or owner application.
It is impossible to log on as "nobody" so it's impossible to use owner permissions of the resource.
</member>
          <member>
Group account "nogroup" always consists of only one user "nobody";
User "nobody" can not become a member of any other group.
It is impossible to add other users to "nogroup" or add "nogroup" to some role.
</member>
        </simplelist>
        <note>
          <title>Note:</title>
          <para>The WebDAV admin user "dav" can be deleted. However, after a server restart
  the initial setting of this account will be added again.</para>
        </note>
        <important>
          <para>It is strongly recommended that the Virtuoso administrator
  change the default account password of the DAV administrative user after
  installation.</para>
        </important>
        <example xml:id="davusrsbyhand">
          <title>Manipulating WebDAV Users By Hand</title>
          <programlisting>
USER_CREATE ('user', 'userpassword',
  vector ('SQL_ENABLE', 0, 'DAV_ENABLE', 1, 'PERMISSIONS', '110100000RR', 'DISABLED', 0));
</programlisting>
          <para>This will create a new account named 'user' with password 'upwd', default
  permissions for new resources and collections created by the account will be '110100000RR'
  (equivalent of UNIX 'rw-r----' permissions, recursive free-text indexing and metadata extraction)
  and the account is enabled and ready to use.</para>
          <programlisting>
DAV_ADD_USER ('user', 'userpassword', '110100000RR', 0, '/DAV/home/user/',
  'Full User Name', 'user@example.com', 'dav', 'davpassword');
</programlisting>
          <para>this will do almost the same but it will describe the user in more details and require no
DBA privileges -- only DAV password. In addition, DAV_ADD_USER () can both create a new user and
grant DAV permissions to an already existing SQL user.</para>
          <para>The following statement is used to grant role 'administrators' to the 'user' account.</para>
          <programlisting>
      GRANT ADMINISTRATORS TO "user";
</programlisting>
          <para>or</para>
          <programlisting>
      USER_GRANT_ROLE ('user', 'administrators');
</programlisting>
          <para>The following will disable the account 'user' until 'DISABLED' option is returned
  to zero.</para>
          <programlisting>
    USER_SET_OPTION ('user', 'DISABLED', 1);
</programlisting>
          <para>DAV access permissions can be revoked permanently:</para>
          <programlisting>
    DAV_DELETE_USER ('user' , 'dav', 'davpassword');
</programlisting>
        </example>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="davsystables">WS &amp; DAV System Tables</link>
          </para>
        </tip>
      </section>
      <!-- This is obsolete

<section
xml:id="davquota"><title>WebDav Quota</title>

  <para>The Virtuoso administrator can enforce a quota on all DAV accounts, apart
  from the "dav" administration user, using the <computeroutput>DAVQuotaEnabled</computeroutput>
  parameter set in the <computeroutput>HTTPServer</computeroutput> section of
  the Virtuoso INI file.  This can be used restricts the amount of space a DAV
  user can consume in their DAV home directory.
  When the <computeroutput>DAVQuotaEnabled</computeroutput> parameter is set
  to one (1) quotas are enabled, when this parameter is set to zero (0), they
  are disabled.  The default quota value is five Megabytes (5MB) but can be
  defined for each user.  Every user has a quota except "dav", which is unlimited.
  Dav quotas are disabled by default if the <computeroutput>DAVQuotaEnabled</computeroutput>
  parameter is not specified for backwards compatibility.</para>

  <para>For existing users there are two functions for setting and retrieving
  user options, these are:</para>
  <para><link linkend="fn_user_set_option"><function>user_set_option()</function></link></para>
  <para><link linkend="fn_user_get_option"><function>user_get_option()</function></link></para>

  <para>respectively.  The option name to set is "<computeroutput>DAVQuota</computeroutput>"
  which takes an integer value corresponding to the size limit in bytes.</para>
<programlisting><![CDATA[
SQL> db..user_set_option ('myuser', 'DAVQuota', 5242880);
]]></programlisting>
<para>Would enforce a quota limit of 5meg on the 'myuser' user.</para>

 </section>
-->

      <section xml:id="davauth">
        <title>WebDAV Authentication</title>
        <para>Virtuoso WebDAV offers two types of authentication dependent on the
 connecting clients abilities.  These are:</para>
        <simplelist type="vert">
          <member><emphasis>Basic (Clear Text) Authentication</emphasis>

   - sends
	 passwords over the connection in clear text. Clear text passwords can be
	 intercepted and read so should be avoided or used only if you encrypt
	 passwords through SSL.</member>
          <member><emphasis>Digest Authentication</emphasis>

   - passwords are always transmitted in an MD5 hash.</member>
        </simplelist>
        <section xml:id="davbasicauth">
          <title>Basic Authentication</title>
          <para>Basic Authentication is a widely used, industry-standard method for
 collecting user name and password information.  The following steps outline
 how a client is authenticated using Basic authentication:</para>
          <orderedlist>
            <listitem>
              <para>The client browser displays a dialog box for a user to enter
  a user name and password (his/her credentials).</para>
            </listitem>
            <listitem>
              <para>The client browser then attempts to establish a connection to
  the server using the user's credentials. The clear text password is
  Base64-encoded before it is sent over the network.</para>
            </listitem>
            <listitem>
              <para>If a user's credentials are rejected, the client may re-display
  the authentication dialog box to re-enter the user's credentials.  Failing
  to supply correct details will terminate the connection, reporting an
  error to the user. </para>
            </listitem>
            <listitem>
              <para>When Virtuoso verifies that the user name and password are
  valid, a connection is established.</para>
            </listitem>
          </orderedlist>
          <para>The advantage of Basic authentication is that most clients support it.
 The disadvantage is that it transmits passwords in an unencrypted form.
 Simple network monitoring can easily reveal your password.  Basic
 authentication is not recommended unless you are confident that the
 connection between the user and Virtuoso is secure. </para>
          <note>
            <title>Note:</title>
            <para>Base64 encoding is not encryption.  A Base64-encoded password can be
	easily intercepted by a network sniffer and easily decoded.</para>
          </note>
        </section>
        <section xml:id="davdigestauth">
          <title>Digest Authentication</title>
          <para>Digest authentication provides a security improvement over Basic
 authentication in how a user's credentials are sent across the network.
 Digest authentication transmits credentials across the network as an MD5 hash,
 or message digest, where the original username and password cannot be
 deciphered from the hash.  Digest authentication relies on the HTTP 1.1
 protocol as defined in RFC 2617, which not all browsers support.</para>
          <para>The following steps outline how a client is authenticated using Digest authentication:</para>
          <figure xml:id="figdavdigestauth" floatstyle="1">
            <title>Digest Authentication</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="digestauth.jpg"/>
              </imageobject>
            </mediaobject>
          </figure>
          <orderedlist>
            <listitem>
              <para>The client requests a file or connection from Virtuoso.</para>
            </listitem>
            <listitem>
              <para>Virtuoso challenges the request, informing that client: Digest is in use, what the realm name is.</para>
            </listitem>
            <listitem>
              <para>The client prompts the user for credentials.  The client creates an MD5 hash of the credentials and the realm name and resubmits the request, this time supplying the MD5 hash.</para>
            </listitem>
            <listitem>
              <para>If Virtuoso approves the credentials then the resource or connection is granted to the client, and the data is returned.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="davsymboliclinks">
        <title>WebDAV Symbolic Links</title>
        <para>Virtuoso supports a special type of WebDAV resources, a redirect
  reference resource, named WebDAV links.  This is to extend the WebDAV service
  to allow multiple access paths to existing resources.</para>
        <para>As with conventional HTTP, the redirect reference simply responds to the client
  with an HTTP/1.1 302 (Found) status code, redirecting the client to a different
  resource, the target specified in the redirect resource, using the
  <computeroutput>Location:</computeroutput>

   header.  This behavior is equivalent
  to UNIX symbolic links.  A redirect reference makes it possible to
  access the target resource indirectly through any URI mapped to the redirect
  reference resource.  The integrity is not guaranteed for associated redirect
  reference resources.</para>
        <para>WebDAV links do not provide a way to circumvent WebDAV security or
  virtual directories.  The target resource must be directly available to the
  client being redirected.</para>
        <para>WebDAV links are achieved by adding a special WebDAV property,
  '<computeroutput>redirectref</computeroutput>

  ', whose value
  must contain the reference target URL.</para>
        <para>WebDAV link targets are not limited to the WebDAV repository, and may
  target any HTTP accessible resource.</para>
        <para>The WebDAV links can be made with DAV API function
  <link linkend="fn_dav_api_change"><function>DAV_PROP_SET()</function></link>

  ,
  or can be done via the <link linkend="contentmanagement">Content Management</link>

  interface of the Admin UI.  In the admin UI select
  WebDAV/WebDAV Services/Content Management and press on the
  <emphasis>Create Link</emphasis>

   button to create a link.  In the form choose
  the target, permissions, owner and enter the name of the link.  Pressing
  the <emphasis>Add</emphasis>

   button will create the new link in the current
  WebDAV folder.</para>
        <example xml:id="ex_create_webdav_link">
          <title>WebDAV Links Programmatically</title>
          <para>Assuming that we are creating the link as the administrator
  using the default WebDAV administrator username and password, creating a link
  from <computeroutput>/a/b.html</computeroutput>

   to <computeroutput>/c/d/f.html</computeroutput>

  could be as follows:</para>
          <programlisting>
SQL&gt; select DAV_RES_UPLOAD ('/DAV/a/b.html','','','110100000NN', 'dav', 'nobody', 'dav', 'dav');

SQL&gt; DAV_PROP_SET ('/DAV/a/b.html', 'redirectref', '/c/d/f.html', 'dav', 'dav');
</programlisting>
          <para>The target, '<computeroutput>/c/d/f.html</computeroutput>

  ' could be
  any HTTP URL.  In this case it will be a resource on the same HTTP server.</para>
        </example>
        <tip>
          <title>See Also:</title>
          <para><link linkend="fn_dav_api_add">DAV Add and Update functions</link>

   and
  <link linkend="fn_dav_api_change">DAV Manipulation functions</link>

  .</para>
        </tip>
        <formalpara>
          <title>WebDAV links behaviour in resource manipulation requests</title>
          <para>When some
  link is moved the target will have the same properties as source, ie. it will
  be a link.  When a copy operation is made the target will have content of
  the reference i.e. it will be a resource, not a link.  Delete operation on
  link will remove only the redirect reference resource, not the referenced
  target itself.  Content upload requests will change the content of the
  referenced target.</para>
        </formalpara>
      </section>
      <section xml:id="accesspermofwebres">
        <title>Access Right Permissions of Web Resources</title>
        <para>
The WebDAV resources have two sorts of access right permissions.
'Classical' UNIX filesystem style permissions let assign different permissions for owner user, owner group and public access.
Access Control Lists (ACLs) let assign permissions in more flexible Windows style but they are less convenient for simple tasks.
Both set of permissions can be applied to the same resource or collection.
In any case, each resource or collection (directory/folder) can have defined Read, Write and Execute permissions.
The write permission applies to operations which perform content or property
change or locking as PUT, PROPPATCH, MOVE, destination URI in COPY, LOCK, UNLOCK, DELETE, MPUT and MUPDATE.
The read permission applies to read operations as GET, POST, PROPFIND, HEAD, source URI in COPY and MGET;
read permission is also required for any write operation.
</para>
        <tip>
          <title>See Also</title>
          <para><link xlink:href="http://www.rfc-editor.org/rfc/rfc2518.txt">RFC2518</link>

for more details of methods/operations</para>
        </tip>
        <para>
The execute permission applies only to the active content stored in the WebDAV
domain. If a VSP or VSPX page stored in a WebDAV domain has execute permissions
then retrieval of that page will perform execution of active content.  Note also a
special flag to the virtual directory which can override the execution flags for
active pages. (for the details how this flag can be set see 'options' in
VHOST_DEFINE() function). If such a flag is set to the virtual directory, then
all active pages under that directory (direct and indirect children) will be treated
as execution flag of the resource is set. In almost any case, user should have both read
and execute permissions to access active content.
</para>
        <para>
Resources with the following extensions are treated as executable content: .vsp, .vspx, .xml  if this has the XML template properties set.
Any other extension is also considered executable if there is a corresponding WS.WS."__http_handler_&lt;extension&gt;" PL procedure.
</para>
        <para>
The UNIX style permissions can be set for user, group or public access.
ACL consists of records called Access Control Entries (ACEs). Every ACE allow or deny some sorts of access to an individual user or to a group.
Resource owner or administrator can add an "explicit" ACE to the ACL of particular resource or "recursively"
add "implicit" ACEs to every resource and subcollection of some collection.
The server checks permissions in the following order:
</para>
        <orderedlist>
          <listitem>
            <para>match the user part of UNIX-style permissions to the specific operation, if user is the
owner of the resource.</para>
          </listitem>
          <listitem>
            <para>match the user group part of UNIX-style permissions to the specific operation, if user
belongs to a group which owns the  resource.</para>
          </listitem>
          <listitem>
            <para>match the public part of UNIX-style permissions to the specific operation.</para>
          </listitem>
          <listitem>
            <para>If Access Control List is not empty, scan ACEs from the beginning of the list to the end.
The loop stops at the first ACE that mentions either the user in question or one of the roles granted to it.
Depending on the type of the ACE, the access is either granted or denied and the rest of list has no effect.</para>
          </listitem>
          <listitem>
            <para>If ACL contains no appropriate ACE then the access is denied.</para>
          </listitem>
        </orderedlist>
        <para>
According to these rules, the order of records in ACL is important. ACEs are ordered following two rules:
"deny" ACEs has higher priority than "allow" ACEs; "local" rules has higher
priority that "global":
</para>
        <orderedlist>
          <listitem>
            <para>All explicit ACEs are placed in a group before any inherited ACEs.</para>
          </listitem>
          <listitem>
            <para>Within the group of explicit ACEs, access-denied ACEs are placed before access-allowed ACEs.</para>
          </listitem>
          <listitem>
            <para>Inherited ACEs are placed in the order in which they are inherited. ACEs inherited from the child object's parent come first, then ACEs inherited from the grandparent, and so on up the tree of objects.</para>
          </listitem>
          <listitem>
            <para>For each level of inherited ACEs, access-denied ACEs are placed before access-allowed ACEs.</para>
          </listitem>
        </orderedlist>
        <para>
New resources and collections take their initial permissions from the user default permissions mask, U_DEFAULT_PERMS of SYS_USERS.
(see: WebDAV Users Administration

  ).
In the case of a resource created as public or a collection mask of '110110110' (equivalent of UNIX 'rw-rw-rw'),
then everybody can read and write it.
</para>
        <example>
          <title>WebDAV Permissions</title>
          <para>
Consider a resource with the following permissions:
</para>
          <screen>
'111110100'
</screen>
          <para>
This permission string is equivalent to UNIX 'rwxrw-r--'.
The resource can be executed, read and written to by the owner, group members can read
and write to it, and non authenticated (public) users or users not belonging to
the group group can only read it.
</para>
        </example>
        <para>
Every resource or collection has two additional flags in permissions, that instruct the server whether resources should
be indexed for free-text search and whether resources should be parsed to extract metadata:
</para>
        <para>
Free-text indexing flag can take one of three values: "N", "R" and "T".
If a resource has this flag set to R or T then the resource will be free-text indexed.
If a collection has this flag set to T then resources directly contained within the collection will be free-text indexed.
If a collection has this flag set to R then resources contained within the
collection will be free-text indexed, and the setting will be applied to all
members and collections underneath recursively.  New resources and collections
acquire this setting from their parent collection.
</para>
        <para>
Similarly, metadata extraction flag can take one of three values: "N", "R" and "M".
If a resource has this flag set to R or M then its metadata are extracted.
If a collection has this flag set to T then metadata are extracted from resources directly contained within the collection.
If a collection has this flag set to R then metadata are extracted from resources contained within the
collection, and the setting will be applied to all
members and collections underneath recursively.  New resources and collections
acquire this setting from its parent collection.
</para>
      </section>
      <section xml:id="davrdfmetadata">
        <title>DAV and RDF Metadata</title>
        <para>
When a Virtuoso server has a URIQA default host setting, it will make
metadata extracted from DAV resources available for querying via
SPARQL.  All metadata for public readable DAV resources are stored in
a system graph.  The graph IRI is composed from the DAV path of the
resource and the URIQA default host name.</para>
        <para>

see DefaultHost in the URIQA section of the virtuoso.ini file,
described in the URIQA section of the documentation for details on
configuration.</para>
        <para>
The automatic maintenance of the SPARQL queryable metadata can be
disabled and enable using the function
DB.DBA.DAV_REPLICATE_ALL_TO_RDF_QUAD.  An argument of 1 enables this
and a 0 disables this. The setting stays in effect until it is changed
with the same function.  For new database, the feature is on by
default.  Old databases are by default upgraded to have a SPARQL
queryable DAV metadata graph upon startup if the URIQA default host
name is defined.</para>
        <para>
If the URIQA default host name changes, the RDF graph can be updated
by simply re-enabling the feature.  This will adjust the graph and
resource IRI's.</para>
        <para>
If the URIQA default name of the host is example.com, then, the
graph will be http://example.com/DAV .</para>
        <para>
The IRI's of DAV resources will be  like http://example.com/DAV/docsrc/XMLDOM.xml , meaning that these are directly usable from a user agent for accessing the resource.</para>
        <para> 
  </para>
        <para>
          <programlisting>
SQL&gt; sparql select ?s ?o from &lt;http://example.com/DAV&gt; where {?s &lt;http://www.openlinksw.com/schemas/DAV#ownerUser&gt; ?o};
s                                                                                 o
VARCHAR                                                                           VARCHAR
_______________________________________________________________________________

http://example.com/DAV/docsrc/2pc.xml                                          mailto:somebody@example.domain
http://example.com/DAV/docsrc/Virtdocs.spp                                     mailto:somebody@example.domain

SQL&gt; sparql select ?p ?o from &lt;http://example.com/DAV&gt; where {&lt;http://example.com/DAV/docsrc/2pc.xml&gt; ?p ?o};
p                                                                                 o
VARCHAR                                                                           VARCHAR
_______________________________________________________________________________

http://purl.org/dc/terms/created                                                  2006-05-23 15:10:32
http://purl.org/dc/terms/modified                                                 2006-05-23 15:10:32
http://www.openlinksw.com/schemas/DAV#ownerUser                                   mailto:somebody@example.domain
http://purl.org/dc/terms/extent                                                   7850
</programlisting>
        </para>
        <para>
The examples above show how simple SPARQL queries can be used to retrieve information about DAV resources.</para>
        <para> 
  </para>
        <para>
The properties supported for all public readable resources are:</para>
        <para>
http://purl.org/dc/terms/created  - The creation date as SQL datetime.</para>
        <para>
http://purl.org/dc/terms/modified  - Modification time as SQL datetime.</para>
        <para>
http://www.openlinksw.com/schemas/DAV#ownerUser  - The contents of u_e_mail  in sys_users for the SQL account owning the resource.  This has the protocol prefix mailto:, as in mailto:somebody@example.com.</para>
        <para>
http://purl.org/dc/terms/extent                                                    The size of the resource in bytes as a SQL integer.</para>
        <para>
http://www.openlinksw.com/schemas/DAV#tag - There is one triple  for each  public tag of the DAV resource.  The value is the string of the tag as a SQL string.</para>
        <para>
http://www.w3.org/1999/02/22-rdf-syntax-ns#type - The RDF schema for MIME-type of of the DAV resource.  If the resource is not recognized as one of the below, this predicate will be omitted.</para>
        <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
          <title>RDF Schema by  MIME-type</title>
          <tgroup align="char" charoff="50" char="." cols="2">
            <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
            <thead>
              <row>
                <entry>MIME- ype</entry>
                <entry>RDF Schema</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>application/bpel+xml</entry>
                <entry>http://www.openlinksw.com/schemas/WSDL#</entry>
              </row>
              <row>
                <entry>application/doap+rdf</entry>
                <entry>http://www.openlinksw.com/schemas/doap#</entry>
              </row>
              <row>
                <entry>application/foaf+xml</entry>
                <entry>http://xmlns.com/foaf/0.1/</entry>
              </row>
              <row>
                <entry>application/google-kinds+xml</entry>
                <entry>http://www.openlinksw.com/schemas/google-kinds#</entry>
              </row>
              <row>
                <entry>application/license</entry>
                <entry>http://www.openlinksw.com/schemas/OplLic#</entry>
              </row>
              <row>
                <entry>application/mods+xml</entry>
                <entry>http://www.openlinksw.com/schemas/MODS#</entry>
              </row>
              <row>
                <entry>application/msexcel</entry>
                <entry>http://www.openlinksw.com/schemas/Office#</entry>
              </row>
              <row>
                <entry>application/mspowerpoint</entry>
                <entry>http://www.openlinksw.com/schemas/Office#</entry>
              </row>
              <row>
                <entry>application/msproject</entry>
                <entry>http://www.openlinksw.com/schemas/Office#</entry>
              </row>
              <row>
                <entry>application/msword</entry>
                <entry>http://www.openlinksw.com/schemas/Office#</entry>
              </row>
              <row>
                <entry>application/msword+xml</entry>
                <entry>http://www.openlinksw.com/schemas/Office#</entry>
              </row>
              <row>
                <entry>application/opml+xml</entry>
                <entry>http://www.openlinksw.com/schemas/OPML#</entry>
              </row>
              <row>
                <entry>application/pdf</entry>
                <entry>http://www.openlinksw.com/schemas/Office#</entry>
              </row>
              <row>
                <entry>application/rdf+xml</entry>
                <entry>http://www.openlinksw.com/schemas/RDF#</entry>
              </row>
              <row>
                <entry>application/rss+xml</entry>
                <entry>http://purl.org/rss/1.0/</entry>
              </row>
              <row>
                <entry>application/wsdl+xml</entry>
                <entry>http://www.openlinksw.com/schemas/WSDL#</entry>
              </row>
              <row>
                <entry>application/x-openlink-image</entry>
                <entry>http://www.openlinksw.com/schemas/Image#</entry>
              </row>
              <row>
                <entry>application/x-openlink-photo</entry>
                <entry>http://www.openlinksw.com/schemas/Photo#</entry>
              </row>
              <row>
                <entry>application/x-openlinksw-vad</entry>
                <entry>http://www.openlinksw.com/schemas/VAD#</entry>
              </row>
              <row>
                <entry>application/x-openlinksw-vsp</entry>
                <entry>http://www.openlinksw.com/schemas/VSPX#</entry>
              </row>
              <row>
                <entry>application/x-openlinksw-vspx+xml</entry>
                <entry>http://www.openlinksw.com/schemas/VSPX#</entry>
              </row>
              <row>
                <entry>application/xbel+xml</entry>
                <entry>http://www.python.org/topics/xml/xbel</entry>
              </row>
              <row>
                <entry>application/xbrl+xml</entry>
                <entry>http://www.openlinksw.com/schemas/xbrl#</entry>
              </row>
              <row>
                <entry>application/xddl+xml</entry>
                <entry>http://www.openlinksw.com/schemas/XDDL#</entry>
              </row>
              <row>
                <entry>application/zip</entry>
                <entry>http://www.openlinksw.com/schemas/Archive#</entry>
              </row>
              <row>
                <entry>text/directory</entry>
                <entry>http://www.w3.org/2001/vcard-rdf/3.0#</entry>
              </row>
              <row>
                <entry>text/eml</entry>
                <entry>http://www.openlinksw.com/schemas/Email#</entry>
              </row>
              <row>
                <entry>text/html</entry>
                <entry>http://www.openlinksw.com/schemas/XHTML#</entry>
              </row>
              <row>
                <entry>text/wiki </entry>
                <entry>http://www.openlinksw.com/schemas/Wiki#</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
Additional predicates may  exist as a result of resource type specific metadata extraction. </para>
      </section>
      <section xml:id="customattofwebres">
        <title>Special Attributes of Web Resources</title>
        <para>The Virtuoso WebDAV implementation provides a set of special attributes (properties)
  for the resources to manipulate the retrieval of XML documents.  Properties can be
  set generate dynamic content based on XML/SQL queries.   Special properties
  can also be applied to WebDAV folders for storing XML data in a special pre-parsed persistent XML format. </para>
        <para>The following special properties are supported:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <formalpara>
              <title>xml-stylesheet</title>
              <para>must contain a valid URL to an XSLT
  style sheet.  Upon request of an XML document with this property set,
  the WebDAV server will automatically perform the transformation of the XML document and will
  send the result of transformation to the user-agent instead of the original XML source.  This
  property is only settable for documents having MIME type text/xml.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>xml-sql</title>
              <para>must contain a valid
  XML/SQL query (see also: <link linkend="forxmlforsql">FOR XML statements</link>

  ).  When this
  property is set the server will execute the query and the XML result will be sent to
  the client.  Note that if xml-stylesheet is also supplied for this resource the
  result will be transformed and then sent to the client.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>xml-sql-root</title>
              <para>specifies the root element
  name of automatically generated XML resources when xml-sql is specified.  Otherwise
  it has no effect.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>xml-sql-dtd</title>
              <para>can be specified as a string
  value 'on' or valid URL.  When the value is 'on' the DTD declaration will be implied
  in the automatically generated XML resource. Otherwise when the URL is supplied
  this URL will be included in the DTD declaration of the automatically generated XML
  resource.  If xml-sql is not specified this property has no effect.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>xml-sql-schema</title>
              <para>specifies the URI for the
  XML Schema.  This schema URI will be included in the XML header, to allow
  client-side schema validation.  If xml-sql is not specified this property has no effect.</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>xper</title>
              <para>can be specified for a collection (folder).
  When this property is set on a WebDAV collection, the direct resource members will be
  stored and updated as persistent XML.  Note that existing resources will not be changed
  until they are  updated.  The reversal of this property for collections will not change
  the resources at the same time, they will be reverted to the text/xml storage on first
  update operation.  Resources already stored as XML persistent documents also have the
  xper property set, but manipulation  of this property must not be used to revert the storage.</para>
            </formalpara>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

    <section xml:id="uriqa">
      <title>URIQA Semantic Web Enabler</title>
      <para>
Virtuoso supports the URIQA (URI Query Agent) extension of HTTP WebDAV protocol.
URIQA adds three new methods to HTTP in order to retrieve, add and remove RDF metadata about a given subject.
The subject is identified by its URI. If the subject is a DAV resource then URIQA will usually reuse the DAV URI of the resource.
If the subject is not a resource but something else (physical entity, imaginary thing or vocabulary item) then URIQA can
be used to process metadata about the subject even if the subject itself can not be accessed via HTTP.</para>
      <para>
URIQA-specific HTTP methods are called MGET (to retrieve existing metadata), MPUT (to add or update RDF triples) and
MDELETE (to remove some or all triples). A single URIQA request usually deals with a single subject that is specified by request URI.
The MGET response, however, can return metadata about more than one RDF subject, e.g., the request about a book can return both
data about the book itself plus some data about persons who are known as authors of the book.</para>
      <para>
In addition to URIQA-specific HTTP methods, Virtuoso implements a semantic web service interface that allows  plain HTTP clients to access metadata using
traditional GET or POST HTTP methods.
</para>
      <para>
The Virtuoso URIQA implementation allows flexible configuration using an ordered list of request handlers. Every handler has a pattern for URIs;
if the URI in the request does not match the pattern then the handler is ignored, otherwise a callback function of the handler is called to
process the request. The default configuration of Virtuoso server will try three sorts of actions.
</para>
      <simplelist type="vert">
        <member>If the URI points to a resource located at the server then the first handler returns DAV metadata of the resource.</member>
        <member>If the URI points to a resource that is outside the server, and URI is of sort 'http://...' then Virtuoso will send a URIQA web service
request to the remote server specified in URI in hope that it will return at least something, the response is passed to the client unchange.</member>
        <member>Any other URI results in an error.</member>
      </simplelist>
      <note>
        <title>Note:</title>
        <para>URIQA is not yet a stable standard. Virtuoso implements draft of URIQA proposal from Nokia, dated 2004.
As URIQA will evolve, future versions of Virtuoso will implement updated versions of the specification.
There is no warranty that future implementations will be compatible with the current one.</para>
      </note>
      <tip>
        <title>See Also: External References</title>
        <para>
          <link xlink:href="http://sw.nokia.com/uriqa/URIQA.html">The Nokia URI Query Agent Model</link>
        </para>
      </tip>
      <section xml:id="uriqamethods">
        <title>URIQA HTTP Methods</title>
        <para>
All three methods have a set of HTTP header parameters to specify the precise URI of the subject. HTTP does not require that every resource
is accessible via a single valid URI, so many equivalent URLs can point to same resource and the result of typical HTTP request does not change
if one of equivalent URLs is replaces with some other. Unlike HTTP GET, HTTP PUT etc., metadata methods may return different results for
different URLs even if these URLs are equivalent for other methods. URIQA rules are very simple.
</para>
        <simplelist type="vert">
          <member>If the URIQA request header contains 'URIQA-uri' parameter line then the value of this parameter is used and any other URI data are ignored.</member>
          <member>If the URIQA request header contains 'Host' parameter line then the URL from the first line of the request is patched to contain host name specified by 'Host' parameter, no matter whether the
original URL contains host or what host name or network interface or port is user by client to connect to the server.</member>
          <member>If the URIQA request header does not contain 'URIQA-uri' or 'Host' line then the URL from the first line of the request is used 'as is',
extended by host name from 'DefaultHost' URIQA configuration parameter if needed.
</member>
        </simplelist>
        <example xml:id="uriqamethodsuri">
          <title>Examples of MGET Requests</title>
          <para>The following requests are all equivalent:</para>
          <para>Request 1. 'URIQA-uri' is used, the rest does not matter.</para>
          <programlisting>
MGET /foo HTTP/1.1
Host: example.com
URIQA-uri: http://example.com/foo
</programlisting>
          <para>Request 2. 'URIQA-uri' is missing, 'Host' is used, the host name www.example.com is ignored.</para>
          <programlisting>
MGET http://www.example.com/foo HTTP/1.1
Host: example.com
</programlisting>
          <para>Request 3. The URI from the first line is used verbatim. This is unsafe, because proxy servers can alter the URI, e.g. by adding port number.</para>
          <programlisting>
MGET http://example.com/foo HTTP/1.1
</programlisting>
          <para>Request 4. The URI from the first line is used, but host name is retrieved from 'DefaultHost' URIQA configuration parameter.
If the parameter is set to example.com then the request is equivalent to previous.</para>
          <programlisting>
MGET /foo HTTP/1.1
</programlisting>
        </example>
        <section xml:id="uriqamget">
          <title>MGET Method</title>
          <para>
MGET request contains a subject URI and the response consists of RDF/XML representation of an RDF graph with metadata about the subject.
In many cases, the returned graph is a Concise Bounded Description of the resource or something similar, but it can be of any sort.
</para>
          <para>
There are  no integrity rules. E.g., if a response for request about subject A contains some data about B
then the request about B may return same or different data, or even report that B does not exists.
If URI refers to non-existing resource or even to a non-existing server or protocol then the response can be an 'not found' error or
an empty graph or even a non-empty graph, depending on the handler that processed the request.
</para>
          <para>
Usually MGET request consists of only subject URI specification, but it can contain any other parameters such as an authentication
or even the HTTP request body with extra data for some particular handler.
For Virtuoso DAV resources, MGET will need read permission on the subject resource, because the resulting RDF is retrieved from
'http://local.virt/DAV-RDF' property of the resource.
</para>
        </section>
        <section xml:id="uriqamput">
          <title>MPUT Method</title>
          <para>
MPUT request contains an HTTP header that describe a subject URI and contains Content-Length,
and the body must be an RDF/XML that consist of triples that should be added.
The server will try to add new RDF triples from the body to the description of the subject.
In some cases, the server will replace obsolete triples with triples from the body,
e.g., if some RDF Schema is in use that states for a predicate that it can not have more than one value for any given subject.
</para>
          <para>
There are  no integrity rules. If MPUT request with subject A submits data about resource B then the updated data may become visible
via MGET request with subject A and stay unchanged if retrieved directly by MGET with subject B. For instance, the default request handler for DAV
will update only 'http://local.virt/DAV-RDF' DAV property of the subject resource not touching any DAV properties of resources named in the request.
</para>
          <para>
A client application can not use MPUT with subject URI that refers to a non-DAV Virtuoso resource, because disk-resident resources do not have
DAV properties, including DAV metadata properties. MPUT can refer to nonexisting Virtuoso DAV resource only if the name
of this resource has been already locked for uploading of the resource. The most reliable way, however, is to
upload the resource first and update metadata only after the uploading. There are two reasons to do operations in this sequence.
First of all, Virtuoso can automatically extract some metadata from the content of uploaded resource and if MPUT happens after the upload then
MPUT data can properly overwrite automatically extracted values. An additional reason is that resource uploading will set the MIME-type of the resource
and may associate some RDF Schemas with the resource; hence MPUT can properly update some triples instead of storing multiple values for some
predicate that should have only one value according to RDF Schema.
</para>
          <para>
For Virtuoso DAV resources, MPUT will need both read and write permissions on the subject resource,
because 'http://local.virt/DAV-RDF' property of the resource is first retrieved and then updated.
</para>
        </section>
        <section xml:id="uriqamdelete">
          <title>MDELETE Method</title>
          <para>
MDELETE request contains an HTTP header that describe a subject URI and may contain the body. If present then the body must be an RDF/XML that consist of triples that should be deleted.
If the body is totally missing then MDELETE removes all metadata associated with the subject URI.
</para>
          <para>
There are  no integrity rules. If MDELETE request with subject A removes triples about resource B then these triples may stay visible
if retrieved directly by MGET with subject B. For instance, the default request handler for DAV
will update only 'http://local.virt/DAV-RDF' DAV property of the subject resource not touching any DAV properties of resources named in the request.
</para>
          <para>
For Virtuoso DAV resources, MPUT will need both read and write permissions on the subject resource,
because 'http://local.virt/DAV-RDF' property of the resource is first retrieved and then updated.
</para>
        </section>
      </section>
      <section xml:id="uriqaws">
        <title>URIQA Web Service</title>
        <para>
Virtuoso provides the '/uriqa/' web service for clients that do not support URIQA-specific methods.
Instead of passing URI and method name in HTTP parameter lines, web service calls pass them as
part of web service URI. The beginning of the path can be any, starting from '/uriqa/' or '/URIQA/'.
The following two requests are to retrieve metadata about 'http://example.com/foo'.

</para>
        <programlisting>GET /uriqa?uri=http%3a%2f%2fexample%2ecom%2ffoo HTTP/1.1</programlisting>
        <programlisting>GET /uriqa?uri=http%3a%2f%2fexample%2ecom%2ffoo&amp;method=MGET HTTP/1.1</programlisting>
        <para>
The following request header is for MPUT</para>
        <programlisting>GET /uriqa?uri=http%3a%2f%2fexample%2ecom%2ffoo&amp;method=MPUT HTTP/1.1</programlisting>
        <para>
The URIQA web service does not need complicated rules for URI passing because the request can not be significantly changed by any proxy.
The value of the 'uri' parameter should be an absolute URI.
</para>
      </section>
      <section xml:id="uriqainifile">
        <title>URIQA Section in Virtuoso Configuration File</title>
        <para>
By default,the  Virtuoso server acts only as URIQA proxy, i.e. it redirects incoming requests to other servers without trying to return metadata about
DAV resources or other data stored on the server itself.
To let URIQA retrieve local metadata, the Virtuoso server should know names that can be used by clients to access it.
Virtuoso configuration file, e.g., virtuoso.ini, can contain these names as parameters in "[URIQA]" section
</para>
        <simplelist type="vert">
          <member>"DefaultHost" is the "canonical" server name that is used to identify the service.
It should be either server name including domain name, or an IP address in standard notation, if the server does not have any name.
If Virtuoso default HTTP port is not equal to 80 then the port should be mentioned, e.g. "www.example.com:8088".</member>
          <member>"LocalHostNames" lists all names that can be used to access the server, such as server names with and without domain name,
IP addresses in Internet and intranets etc. The list is comma-delimited string of names. If an URIQA client can reside on server's box,
e.g. for debugging purposes, then it may be worth to add names "localhost, localhost.localdomain, 127.0.0.1" to this list.
</member>
          <member>"LocalHostMasks" is similar to "LocalHostNames" but it lists patterns for names in SQL "like" operator style.
If Virtuoso listens at multiple ports and it is the only URIQA enabled service on the machine then it can be convenient to specify
"LocalHostMasks = www.example.com:%" instead of "LocalHostNames = www.example.com:8088, www.example.com:8089, www.example.com:8090 ...".
</member>
          <member>
"Fingerprint" is a string that identifies a group of servers that shares same metadata, such as servers that replicate each other.
It is an error if two servers have the same fingerprint string and one of them tries to redirect a URIQA request to another instead of prepare an
response locally. Such behavior indicates configuration error, and the use of fingerprints help administrator to get a meaningful diagnostics,
because suspicious URIQA requests become signed by all intermediate Virtuoso proxies. If this parameter is not specified then a random unique
string is created and stored in the database, so you don't have to specify this parameter for typical installations.
</member>
          <member>
    "DynamicLocal" is a flag (1 or 0), when it is on and the host part of the IRI matches the Host header of the HTTP request in context or the DefaultHost if outside of HTTP context, then this is replaced with local: before looking up the IRI ID.  Even if DynamicLocal is not on and the <computeroutput>local:</computeroutput>

   prefix occurs in the IRI string being translated to IRI_ID, the translating the IRI_ID back to the IRI name will depend on the context as described as follows: When returning IRI's from id's, this prefix is replaced by the Host header of the HTTP request 
    and if not running with HTTP, with the DefaultHost from this section.
    The effects of DynamicLocal = 1 can be very confusing since many names can refer to the exact same thing.  For example, if the DefaultHost is http://dbpedia.org, <computeroutput>iri_to_id ('http://dbpedia.org/resource/Paris') = iri_to_id ('local:///resource/Paris) </computeroutput>

   is true and so is  <computeroutput>'http://dbpedia.org/resource/Paris' = id_to_iri (iri_to_id ('local:///resource/Paris'))</computeroutput>

   These hold in a SQL client context, i.e. also when connected through RDF frameworks like Jena or Sesame.  When running a SPARQL protocol request, the Host: header influences the behavior, likewise when using web interactive SQL in Conductor.
</member>
        </simplelist>
        <para>
These configuration parameters are "sticky". If they're found in configuration file then they are preserved in the database registry.
If configuration file has changed then new values will be used after server restart. If database dump is replayed on a server whose configuration file does
not contain these parameters then values from dump will stay in the registry. If database dump is replayed on a server whose configuration file contains
other values then values from dump will stay in the registry till server restart.
</para>
      </section>
      <section xml:id="uriqamatching">
        <title>URI Matching Rules</title>
        <para>
A simple installation does not require any special configuration of URIQA except specifying server names in the [URIQA] section of configuration file (virtuoso.ini).
However complex applications may need from URIQA more than simple retrieval of metadata of DAV resources.
Like HTTP virtual hosts, URIQA may require different processing for different URIs, so Virtuoso offers appropriate tools.
</para>
        <para>
When the URIQA server gets an URI to process, it reads the system table WS.WS.URIQA_HANDLER to find out the procedure that can access metadata about some range of URIs.
This table is defined as follows:
</para>
        <programlisting>
create table WS.WS.URIQA_HANDLER
(
  UH_ID integer not null primary key,
  UH_ORDER integer not null,
  UH_NAME varchar not null unique,
  UH_MATCH_COND varchar not null,
  UH_MATCH_ENV any,
  UH_HANDLER varchar not null,
  UH_HANDLER_ENV any
)
create index URIQA_HANDLER_ORDER_NAME on WS.WS.URIQA_HANDLER (UH_ORDER, UH_NAME)
;
</programlisting>
        <para>
The server scans the table in order of ascending values in UH_ORDER column,
and checks whether the request URI matches the condition specified by UH_MATCH_COND and UH_MATCH_ENV.
As soon as an appropriate row is found, a function with name specified by UH_HANDLER is called with parameters that describe the request plus any
extra application-specific data as stored in UH_HANDLER_ENV. The function should either compose a response and set a flag to 1 or do nothing and set a flag to 0.
If 1 is set then the processing of the request is complete, otherwise the server resumes table scan.
</para>
        <para>
At server startup, up to three records are automatically added into WS.WS.URIQA_HANDLER.
</para>
        <simplelist type="vert">
          <member>First record has UH_ORDER equal to 100.
It tells the server that if an URI has server name equal to one of names listed in "LocalHostNames" configuration parameter
then metadata should be retrieved from local DAV of the server.</member>
          <member>
Second record is very similar, it also has UH_ORDER equal to 100, but uses SQL 'like' operator instead of '='.
It tells the server that if an URI has server name like one of masks listed in "LocalHostMasks" configuration parameter
then metadata should be retrieved from local DAV of the server.</member>
          <member>
The third record has UH_ORDER equal to 999, and tells the server to act as URIQA proxy if the requested URI starts with "http" protocol name.
</member>
        </simplelist>
        <para>
Applications can add more lines to the table to handle different sorts of URIs via different application specific functions. The name of function
should begin with "WS.WS.URIQA_HANDLER_", the rest is as specified by UH_HANDLER of the row. The signature of function should be
</para>
        <programlisting>
function WS.WS.URIQA_HANDLER_myexample (
  inout op varchar,   -- operation name, 'MGET', 'MPUT' or 'MDELETE';
  inout uri varchar,  -- request URI;
  inout split any,    -- request URI split by WS.WS.PARSE_URI into parts;
  inout body any,     -- the body of the request;
  inout params any,   -- get_keyword style vector of parameters of the request;
  inout lines any,    -- vector of lines of HTTP request header;
  inout app_env any,  -- any application-specific data from UH_HANDLER_ENV;
  inout is_final integer -- status flag. Function sets the flag to 1 to report that the request response is prepared.
  ) re0turns any	      -- returns a status vector, see below.
</programlisting>
        <para>
Status vector describes either the reason why the request has failed, or the success status. It consists of four elements:
</para>
        <simplelist type="vert">
          <member>SQL_STATE as five-char string, "00000" if success;</member>
          <member>DAV error code as an integer, if the operation has failed due to DAV error, 0 if success or an error other than DAV;</member>
          <member>HTTP status as three-digit string, such as "200" for "OK" or "404" for "not found";</member>
          <member>Brief description of an error, such as HTTP response status ("OK", "not found" etc.) or SQL_MESSAGE, "OK" if success;</member>
        </simplelist>
        <para>
In case of DAV error, elements 3 and 4 can be set to NULL to generate proper values automatically.
</para>
        <para>
Examples are:
</para>
        <programlisting>
vector ('00000', 0, '200', 'OK');
vector ('URIQA', 0, '500', 'The remote URIQA server returned an invalid header');
vector ('URIQA', -1, '404', 'Invalid URI; Ill formed or missing path to the resource');
vector ('URIQA', -12, null, null);
</programlisting>
        <para>
The current version of Virtuoso supports the following names of matching operations for use in UH_MATCH_COND:
</para>
        <simplelist type="vert">
          <member>"schema =" -- URI schema name should be equal to UH_MATCH_ENV;</member>
          <member>"server =" -- URI server name (including port, if specified) should be equal to UH_MATCH_ENV;</member>
          <member>"server like" -- URI server name (including port, if specified) should be "like" to UH_MATCH_ENV;</member>
          <member>"server in" -- URI server name (including port, if specified) should be member of UH_MATCH_ENV vector of strings;</member>
          <member>"server like in" -- URI server name (including port, if specified) should be "like" to one of members of UH_MATCH_ENV vector of strings;</member>
          <member>"default" -- Any URI will match so any request is passed to the handler if not handled before.</member>
        </simplelist>
      </section>
    </section>
    <!-- ################### ~~~~~~~~~~ ################### -->

    <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

    <section xml:id="maildelivstore">
      <title>Mail Delivery &amp; Storage</title>
      <section xml:id="smtpclient">
        <title>The SMTP Client</title>
        <!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2020 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->

        <section xml:id="fn_smtp_send_dedup">
<title>smtp_send_dedup</title>

          <para>For detailed description and example use of the function, see
      <link linkend="fn_smtp_send">smtp_send</link>
      in the <link linkend="ch-functions">Functions Reference Guide</link>.
      </para>
        </section>
        <!--

<section
xml:id="smtpcommands">
			<title>Commands</title>
			<programlisting>
 - HELO - get information of client connection (client host name)
 - MAIL FROM - sender&apos;s e-mail address
 - RCPT TO - receiver&apos;s e-mail address
 - DATA - begin of data block end with (.)
 - QUIT - connection end
</programlisting>
		</section>

<section
xml:id="smtptables">
			<title>Tables</title>
			<programlisting>
 - Message queue
 - Messages
 - Local mail users
 - Allowed relay domains
</programlisting>
		</section>
<tip><title>See Also:</title>
<para><link linkend="smtptabledesc">Mail system tables </para></tip>

<section
xml:id="smtpparams">
			<title>Parameters</title>
			<programlisting>
- Port number
- Pooling interval (for mail queue)
- Connection timeout
</programlisting>
		</section>
-->

      </section>
      <section xml:id="pop3server">
        <title>POP3 Server</title>
        <para>The Virtuoso POP3 Server implementation supports the following commands
as defined in RFC - 1939:</para>
        <simplelist type="vert">
          <member>DELE</member>
          <member>LIST</member>
          <member>NOOP</member>
          <member>PASS</member>
          <member>QUIT</member>
          <member>RETR</member>
          <member>RSET</member>
          <member>STAT</member>
          <member>TOP</member>
          <member>UIDL</member>
          <member>USER</member>
        </simplelist>
        <para>The POP3 Server listening port is configured in the HTTP section of the virtuoso.ini.</para>
        <para>
POP3Port = xxx, in HTTP section.
</para>
        <para>
If the port is not defined in the configuration file then the POP3 server subsystem will be disabled.
</para>
        <para>
Users and passwords of the POP3 Server are described in the system view
WS.WS.SYS_DAV_USER over SYS_USERS. These users can be administered from the users section of the
Virtuoso Administration User Interface.
</para>
        <para>
The system table DB.DBA.MAIL_MESSAGE is used to stored the messages.
</para>
      </section>
      <section xml:id="smtpreceipt">
        <title>Storing Email in Virtuoso</title>
        <para>
A generic mail delivery driver enables SMTP servers to deliver email to be stored in either
Virtuoso or non Virtuoso SQL database.
</para>
        <para>
Mail storage can occur in a number of ways:</para>
        <orderedlist>
          <listitem>
            <para>Replacing the default generic SMTP mail handler ( the program  "procmail")</para>
          </listitem>
          <listitem>
            <para>Replacing the mail storage settings for individual users
Replacing Default SMTP Mail Handler Sendmail</para>
          </listitem>
        </orderedlist>
        <section xml:id="unixsendmailinstall">
          <title>Replacing procmail As Default Mail Handler In Sendmail Configurations</title>
          <para>
When this configuration is in use, the mails for all of your
"sendmail" mail recipients are written to a SQL Database table.
</para>
          <orderedlist>
            <listitem>
              <para>Copy the file "odbc_mail.default.ini" to "/etc/odbc_mail.ini"</para>
              <important>
                <para>Make sure that /etc/odbc_mail.ini is NOT GROUP/WORLD writable.  virt_mail
will fail to run if it is.</para>
              </important>
            </listitem>
            <listitem>
              <para>Copy or symbolically link the file "virt_mail" to "/usr/bin/virt_mail"</para>
            </listitem>
            <listitem>
              <para>Edit /etc/odbc_mail.ini and change the login settings to match your current database installation.</para>
              <para>Note: If you don't have or want to use procmail, comment out the "Fallback" setting in the "[Deliver]" section.</para>
            </listitem>
            <listitem>
              <para>Edit the file "/etc/sendmail.cf" as described below:</para>
              <para>Change</para>
              <programlisting>
Mlocal, P=/usr/bin/procmail, F=lsDFMAw5:/|@qSPfhn9, S=10/30,
  R=20/40,T=DNS/RFC822/X-Unix, A=procmail -Y -a $h -d $u
</programlisting>
              <para>
To:
</para>
              <programlisting>
Mlocal, P=/usr/bin/virt_mail, F=lsDFMA5:/|@qSPhn9, S=10/30,
  R=20/40, T=DNS/RFC822/X-Unix, A=virt_mail -c /etc/odbc_mail.ini -l $u -s $g
</programlisting>
              <para>
NOTE: The changes to the F= setting involves removing both the 'w' and 'f' flags.
</para>
              <para>
The removal of the 'w' flag affects lookups in /etc/passwd, which are no
longer required if all mail delivery goes into a SQL Database.  The default
ini file is set up to maildrop via procmail, which will perform the check correctly.
</para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="replacingmailsettings">
          <title>Replacing The Mail Storage Settings For Individual Users</title>
          <section xml:id="sendmail">
            <title>Using Sendmail</title>
            <orderedlist>
              <listitem>
                <para>Copy odbc_mail.default.ini to ~the_user_name/odbc_mail.ini</para>
                <important>
                  <para>Make sure that /etc/odbc_mail.ini is NOT GROUP/WORLD writable.  virt_mail
will fail to run if it is.</para>
                </important>
              </listitem>
              <listitem>
                <para>At the end of the file ~the_user_name/.procmailrc put something like:
</para>
                <programlisting>
:0:
| /usr/bin/virt_mail -c .odbc_mail.ini -l the_user_name
</programlisting>
                <para>
replacing the_user_name with the user you are setting up.
</para>
                <para>
Note: the '-l ..' parameter is used to relate the local recipient to
the database user for which the maildrop is done.  See the remarks in
the odbc_mail.default.ini file.
</para>
              </listitem>
              <listitem>
                <para>Adjust the parameters in .odbc_mail.ini to match your configuration</para>
                <important>
                  <para>disable Fallback delivery in the .odbc_mail.ini file.</para>
                </important>
                <para>
Comment out the "Fallback =" entry in the .odbc_mail.ini
or set it to something that does not involve procmail.  This may lead to drop loops, otherwise.
</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="qmail">
            <title>Using Qmail</title>
            <orderedlist>
              <listitem>
                <para>Copy odbc_mail.default.ini to ~the_user_name/.odbc_mail.ini
</para>
                <important>
                  <para>Make sure that the .odbc_mail.ini file is NOT GROUP/WORLD writable.
virt_mail will fail to run if it is.</para>
                </important>
              </listitem>
              <listitem>
                <para>If you are setting up a .qmail, you can simply do the following:
</para>
                <programlisting>
| /usr/bin/virt_mail -m qmail -c .odbc_mail.ini
</programlisting>
                <para>
If you are setting up .qmail-default or .qmail-&lt;some_alias_name&gt;,
make sure you adjust the RemovePrefix accordingly in the odbc_mail.ini.
</para>
                <para>
This also works if a single user is receiving mail for an entire
(virtual) domain.
</para>
                <para>
If you want to configure qmail so that user 'db' gets all mail for
example.com, do the following:
</para>
                <orderedlist>
                  <listitem>
                    <para>create a new user db in /etc/passwd etc.</para>
                  </listitem>
                  <listitem>
                    <para>remove example.com from /var/qmail/control/locals</para>
                  </listitem>
                  <listitem>
                    <para>add to /var/qmail/controls/virtualdomains: </para>
                    <programlisting>
example.com:db
</programlisting>
                  </listitem>
                  <listitem>
                    <para>adjust /var/qmail/users/assign accordingly:</para>
                    <programlisting>
=db:db:&lt;uid&gt;:&lt;gid&gt;:&lt;home&gt;:::
</programlisting>
                    <programlisting>
+db-:db:&lt;uid&gt;:&lt;gid&gt;:&lt;home&gt;:-::
</programlisting>
                    <para>or run qmail-pw2u &lt; /etc/passwd &gt; /var/qmail/users/assign
  then run qmail-newu and restart qmail</para>
                  </listitem>
                  <listitem>
                    <para>in ~db/.qmail-default, put:</para>
                    <programlisting>
| /usr/bin/virt_mail -m qmail -c .odbc_mail.ini
</programlisting>
                  </listitem>
                  <listitem>
                    <para>in .odbc_mail.ini, set:</para>
                    <programlisting>
RemovePrefix=db-
</programlisting>
                    <para>
Now, mail to info@example.com will be delivered to the qmail alias
db-info@example.com and is stored into the database for user 'info'.
</para>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>Adjust the parameters in .odbc_mail.ini to match your configuration</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="courier">
            <title>Using Courier</title>
            <orderedlist>
              <listitem>
                <para>Copy odbc_mail.default.ini to ~the_user_name/.odbc_mail.ini
</para>
                <important>
                  <para>Make sure that the .odbc_mail.ini file is NOT GROUP/WORLD writable.
virt_mail will fail to run if it is.</para>
                </important>
              </listitem>
              <listitem>
                <para>If you are setting up a .courier, you can simply do the following:
</para>
                <programlisting>| /usr/bin/virt_mail -mcourier -c .odbc_mail.ini</programlisting>
                <para>
If you are setting up .courier-default or .courier-&lt;some_alias_name&gt;,
make sure you adjust the RemovePrefix accordingly in the .odbc_mail.ini.
</para>
                <para>Note: although courier is very similar to qmail in this respect,
it is different from qmail in how it handles exit codes.
If you use -mqmail while running under courier, you'll get the wrong
exit codes, so mail is bounced instead of retried.
</para>
                <para>Note also that if delivering to multiple recipients in a .courier file,
make sure the virt_mail is specified first.  This is because if the
virt_mail fails with a temporary error, the other recipients will
get another drop when courier re-attempts to deliver the mail.
</para>
                <para>
Right:
</para>
                <para>
\w</para>
                <programlisting>
| /usr/bin/virt_mail -mcourier -c .odbc_mail.ini
./Maildir
</programlisting>
                <para>Wrong:</para>
                <programlisting>
./Maildir
| /usr/bin/virt_mail -mcourier -c .odbc_mail.ini
</programlisting>
              </listitem>
              <listitem>
                <para>
Adjust the parameters in .odbc_mail.ini to match your configuration
</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="exim">
            <title>Using EXIM</title>
            <para>
Here are code snippets for Exim that perform maildrops into the odbc database.
</para>
            <programlisting>
## IN TRANSPORT SECTION

# Delivers into the database
odbc:
  driver = pipe
  command = /usr/bin/virt_mail \
	-c /etc/odbc_mail.ini \
	-s "${if def:return_path{$return_path}{MAILER-DAEMON}}" \
	-l "$local_part"
  user = USERNAME
  return_path_add
  delivery_date_add
  prefix =
  suffix =
  temp_errors = 73 : 74 : 75
  return_fail_output

# NOTE: Make sure the USERNAME in the 'user = USERNAME' setting matches
# the owner of /etc/odbc_mail.ini, because this file must have mode 0600.
# Consider creating a new user account for this delivery only.
# You should specify 'user = root' here only if Fallback delivery is
# configured in /etc/odbc_mail.ini (for procmail fallback delivery
# for instance)

## IN DIRECTORS SECTION

# Attempts delivery of all mail into the database
to_db:
  driver = smartuser
  transport = odbc
  require_files = /etc/odbc_mail.ini
  #
  # uncomment line below to deliver all mail to db-XXX into the database, for any
  # value of XXX. For this to work, set "RemovePrefix = db-" in
  # the [Translate] section in /etc/odbc_mail.ini
  #prefix = db-
</programlisting>
          </section>
        </section>
        <section xml:id="mailsystables">
          <title>Mail System Tables</title>
          <para>
The electronic mail accounts are regular SQL accounts.
</para>
          <para>
Id (MM_ID) of the message is unique per account/folder (folder can be 'Inbox' etc.)
</para>
          <tip>
            <title>See Also:</title>
            <para>
              <link linkend="smtptabledesc">Mail system tables</link>
            </para>
          </tip>
        </section>
        <section xml:id="pop3client">
          <title>Pop3 Client</title>
          <para>The Virtuoso POP3 Client implementation can retrieve messages from any POP3 server.</para>
          <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

          <section xml:id="fn_pop3_get_dedup">
<title>pop3_get_dedup</title>

            <para>For detailed description and example use of the function, see
      <link linkend="fn_pop3_get">pop3_get</link>
      in the <link linkend="ch-functions">Functions Reference Guide</link>.
      </para>
          </section>
          <!-- FIXME?? -->

        </section>
        <!-- FIXME?? -->

        <section xml:id="commands_01">
          <title>Commands</title>
          <para>UIDL - get only UIDL's of messages.</para>
          <para>DELETE - delete messages after downloading.</para>
          <example>
            <title>Examples</title>
            <para>
1. To get 10 KB. messages from the server  'openlinksw.com' POP3 port 110, user name 'user_1', password  'pass_1'
</para>
            <programlisting>
	Pop3_get ('openlinksw.com:110', 'user_1', 'pass_1', 10000);
</programlisting>
            <para>
2. To get  and delete 5 KB. messages from the server  'openlinksw.com' POP3 port 110, user name 'user_1',  password  'pass_1'
</para>
            <programlisting>
	Pop3_get ('openlinksw.com:110', 'user_1', 'pass_1', 5000, 'DELETE');
</programlisting>
            <para>
3. To get  UIDL's of 100 kb. messages from the server  'openlinksw.com' POP3 port 110, user name 'user_1',  password  'pass_1'
</para>
            <programlisting>
	Pop3_get ('openlinksw.com:110', 'user_1', 'pass_1', 100000, 'UIDL');
</programlisting>
          </example>
        </section>
      </section>
      <section xml:id="mailsink">
        <title>The Virtuoso Mail Sink</title>
        <para>The Virtuoso Sink is used to store messages received by Windows 2000 IIS SMTP Service into the MAIL_MESSAGES
table in Virtuoso.  It consists of an executable, run as a service, and a VBscript for registering a COM object with the IIS,
interfacing it with the Virtuoso Sink</para>
        <para>The User ID(s) in MAIL_MESSAGES to whom the message belongs to is determined by
parsing the <command>To:</command>

   field in the mail message into a list of recipients.  For each entry in the list,
if an @-sign is found, the user ID will consist of the characters to the left of it, otherwise the whole entry is used.</para>
        <section>
          <title>Registry Entries for the Virtuoso Sink.</title>
          <programlisting>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; VirtuosoSink.reg
REGEDIT4

[HKEY_LOCAL_MACHINE\SOFTWARE\OpenLink Software\VirtuosoSink]
"User"="dba"
"Password"="dba"
"DSN"="Virtuoso"
"ConnectionCount"=dword:00000001
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; VirtuosoSink.reg</programlisting>
          <para>These are the registry entries used by the Sink service.  ConnectionCount is the number of connections to Virtuoso to be pooled.</para>
        </section>
        <section>
          <title>Installation</title>
          <para>Use these commands to install the Virtuoso Sink:</para>
          <simplelist type="vert">
            <member><command>VirtuosoSink /RegServer</command>

   Registers the COM Object VirtuosoSink.SMTP into the registry</member>
            <member><command>VirtuosoSink /Service</command>

   Creates the Service in Manual start mode</member>
            <member><command>cscript smtpreg.vbs /add 1 OnArrival Virtuoso_SMTP_Sink VirtuosoSink.SMTP "mail from=*"</command>

   - Registers the COM Object as a mail sink with the IIS SMTP service.</member>
          </simplelist>
          <tip>
            <title>See Also:</title>
            <para><link xlink:href="http://msdn.microsoft.com/library/psdk/cdosys/_cdosys_implementing_sinks_with_scripting_languages.htm">The MSDN page</link>

   for more information about registering sinks.</para>
          </tip>
        </section>
        <section>
          <title>Sink Operation</title>
          <para>When the service starts it opens a pool of connections to Virtuoso and
      waits for a COM event. When the COM callback gets called, the service
      invokes a stored procedure and passes the message text to it. The procedure
      then stores the message into the database. In event of lost connection to
      the database, the service would try once to re-establish it and re-execute
      the stored procedure call. Errors and successful message routings are
      entered into the Windows 2000 Application Log.</para>
        </section>
      </section>
    </section>
    <!-- /FIXME? -->

    <!-- ############################################################# -->

    <section xml:id="nntpnewsgroups">
      <title>NNTP Newsgroups</title>
      <section xml:id="nntpclient">
        <title>NNTP Client</title>
        <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

        <section xml:id="fn_nntp_get_dedup">
<title>nntp_get_dedup</title>

          <para>For detailed description and example use of the function, see
      <link linkend="fn_nntp_get">nntp_get</link>
      in the <link linkend="ch-functions">Functions Reference Guide</link>.
      </para>
        </section>
        <!-- FIXME? -->

      </section>
      <section xml:id="commandsandexamples">
        <title>Commands and Examples</title>
        <para>
If the requested messages don't exist, <function>nttp_get()</function>

returns NULL.
</para>
        <para>
Get a list of all groups from the server 'news.openlinksw.com', port 119:
</para>
        <example>
          <title>nntp_get()</title>
          <programlisting>
nntp_get ('news.openlinksw.com:119', 'list');
</programlisting>
          <para>
This call returns an array of the form
Array ((&lt;group 1&gt; varchar, &lt;last message&gt; integer, &lt;first message&gt; integer,
	&lt;posting allowed&gt; varchar ) (&lt;group 2&gt; . . . . ) . . . )
</para>
          <para>
ARTICLE, HEAD, BODY, STAT
To get the bodies of all messages in the group 'openlink.public.virtuoso':
</para>
          <programlisting>
nntp_get ('news.openlinksw.com:119', 'body', 'openlink.public.virtuoso');
</programlisting>
          <para>
This call returns an array of the form
Array ((&lt;message number&gt; integer, &lt;body of message&gt; blob) . . . )
</para>
          <para>
To get the article (head + body) of messages numbered from 5 to 10 in the group 'openlink.public.virtuoso':
</para>
          <programlisting>
nntp_get ('news.openlinksw.com:119', 'article', 'openlink.public.virtuoso', 5, 10);
</programlisting>
          <para>
This call returns an array of the form
Array ((&lt;message number&gt; integer, &lt;body of message&gt; blob) . . . )
</para>
          <para>
To get the headers of messages numbered from 7 to the end of the 'openlink.public.virtuoso' group:
</para>
          <programlisting>
nntp_get ('news.openlinksw.com:119', 'head', 'openlink.public.virtuoso', 7);
</programlisting>
          <para>
To get the status of all messages in the group 'openlink.public.virtuoso':
</para>
          <programlisting>
nntp_get ('news.openlinksw.com:119', 'stat', 'openlink.public.virtuoso',);
</programlisting>
          <para>
This call returns an array of the form
Array ((&lt;message number&gt; integer, &lt;message ID&gt; varchar) . . . )
</para>
          <para>
To get the status of the 'openlink.public.virtuoso' group:
</para>
          <programlisting>
nntp_get ('news.openlinksw.com:119', 'group', 'openlink.public.virtuoso');
</programlisting>
          <para>
This call returns an array of the form
Array (&lt;number of messages&gt; integer, &lt;first message&gt; integer, &lt;last message&gt; integer)
</para>
          <!--
<programlisting>
nntp_post (in server varchar, in message blob)
</programlisting>
<para>
The structure of the <parameter>message</parameter> must comply with RFC850 (Standard for Interchange of USENET Messages).
</para>
-->

        </example>
      </section>
    </section>
    <section xml:id="newsserver">
      <title>NNTP Server</title>
      <section xml:id="newssrvenable">
        <title>Enabling the NNTP Server</title>
        <para>The Virtuoso News Server listening port is configured in the HTTP section
    of the virtuoso.ini file.</para>
        <screen>[HTTPServer]
NewsServerPort   = 119</screen>
        <para>If the port is not defined Virtuoso will disable the News Server subsystem.</para>
      </section>
      <section xml:id="newssrvcmds">
        <title>NNTP Server Commands</title>
        <para>The server supports the following commands:</para>
        <simplelist type="vert">
          <member>article [MessageID|Number]</member>
          <member>body [Number]</member>
          <member>group newsgroup</member>
          <member>head [Number]</member>
          <member>help</member>
          <member>last</member>
          <member>list</member>
          <member>mode reader</member>
          <member>newgroups yymmdd hhmmss</member>
          <member>next</member>
          <member>post</member>
          <member>xover [range]</member>
          <member>stat [MessageID|Number]</member>
        </simplelist>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="newssrvtables">News System Tables</link>
          </para>
        </tip>
      </section>
      <section xml:id="newssrvadd_01">
        <title>Add Groups to NNTP Server</title>
        <para>To add a new newsgroup you must insert a row into the table
    DB.DBA.NEWS_GROUPS.  Below is an example of an insert statement that
    you could use to do this:</para>
        <programlisting>
insert into DB.DBA.NEWS_GROUPS (NG_NAME, NG_DESC, NG_UP_INT, NG_CLEAR_INT,
	NG_POST, NG_UP_TIME, NG_OUT_GROUP, NG_NUM, NG_FIRST, NG_LAST,
	NG_SERVER, NG_SERV_PORT, NG_CREAT, NG_UP_MESS, NG_PASS)
values ('openlink.public.virtuoso', 'virtuoso news group' ,
	update interval, clear interval, 1, now(), 'openlink.public.virtuoso',
	0, 0, 0, 'news.openlinksw.com', 110, now(), 0, 0);
</programlisting>
        <para>If the group you want to add is local, change
    <screen>news.openlinksw.com</screen> to <screen>localhost</screen>,
    change the port to 0, and the <screen>external name</screen> to
    <screen>''</screen> (that is, two single quotes).</para>
        <!--
    <para>To update the group use the procedure <function>new_news (in group_id integer)</function>.</para>
-->

        <para>See also the <link linkend="newsgrpsadm">
    Newsgroups Administration</link>

   section of the Visual Server
    Administration Interface.</para>
      </section>
    </section>
    <!-- /FIXME?? -->

    <!-- ################### ~~~~~~~~~~ ################### -->

    <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

    <section xml:id="mime">
      <title>MIME &amp; Internet Messages</title>
      <section xml:id="aboutinternetmsgs">
        <title>About Simple Internet (RFC 822) Messages</title>
        <para>RFC 822 messages have two major parts: </para>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>Message envelope</title>
              <para>The message envelope contains all the information needed to accomplish
    transmission and delivery of the message. This information includes the e-mail
    address of the message's creator  also known as the originator. This string
    matches the information in the Sender: header, if this header is present.
    The envelope is created by a user agent (such as MS Outlook) and is meaningful
    only to the message transfer agents (MTAs) that move the message on the path
    to its destination. </para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>Message contents</title>
              <para>The contents make up the object to be delivered to the recipient.
    Message contents consist of lines of ASCII text. This text is arranged in the
    classic "memo" format, in which the message contains one or more introductory
    headers and a body. </para>
            </formalpara>
          </listitem>
        </itemizedlist>
        <para>This structure can be seen in the following illustration:</para>
        <figure xml:id="internetmailmsg" floatstyle="1">
          <title>The structure of an Internet mail</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="internetmailmsg.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <example xml:id="ex_simplemailmsg">
          <title>Simple Internet Mail Message</title>
          <para>As you can see in the following sample of a message's contents,
the format described in RFC 822 produces messages readable with little
difficulty by humans. </para>
          <para>The first few lines, from the first instance of "Received" to "Precedence",
are headers. These lines define the recipients, the sender, the date,
and other information involved with message transmission.</para>
          <para>Following the headers is a blank line. This is marked by the consecutive
occurrence of the four characters: CR, LF, CR, LF. After this blank line
starts the body of the message. In the following example, only the final few
lines make up the message body.</para>
          <programlisting>
Received: from techsupp@openlinksw.co.uk
Message-Id: &lt;v1214040cad6a13935723@&gt;
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Date: Mon, 4 Jun 1998 09:43:14 -0800
To: customer.services@openlinksw.co.uk
From: OpenLink Technical Support &lt;techsupp@openlinksw.co.uk&gt;
Subject: Happy Reading
Precedence: bulk

Hope you are enjoying this chapter,
Technical Support
</programlisting>
        </example>
        <tip>
          <title>See Also:</title>
          <para>
            <link xlink:href="http://www.rfc-editor.org/rfc/rfc822.txt">RFC 822 at www.rfc-editor.org</link>
          </para>
        </tip>
      </section>
      <section xml:id="mimesupport">
        <title>MIME Messages - Extension to Simple Internet Messages</title>
        <para>MIME (Multipurpose Internet Mail Extensions) grew out of a need to
  encapsulate messages within messages. It includes multipart messages
  comprising a variety of file types such as images, audio, and video.
  MIME does all this while following all the standard SMTP and RFC 822 mail rules.
  MIME messages can be constructed to transport mail over any mail transport
  system that is compliant with SMTP. MIME is able to transmit objects with
  varying ranges of complexity in a way that allows any MIME-compliant user
  agent (UA) to faithfully process them  and hand them off to an appropriate
  application.  The multiple parts are arranged so that the parts requiring the
  least sophisticated UA are at the beginning of the message.  In fact, most
  MIME UAs include courtesy text when constructing messages to give users
  of non-MIME UAs an indication of the message content. This courtesy text is
  inserted ahead of any MIME parts.</para>
        <para>MIME is consistent with Internet mail protocols using headers and
  bodies.  It allows for transmission of 7-bit printable US-ASCII characters and
  maximum 1000-character lines in message bodies over all Internet mail
  transports.  It has become the most widely used extension to the simple
  e-mail standard.  It is also used as a transport mechanism in Web pages.</para>
        <para>Each content body part is made up of header fields and content.
  The headers convey specific information about the content for the message
  recipient. The content can be essentially any serialized stream of bytes, such as
  binary data or HTML.  When necessary, the content is encoded so that the
  entire body complies with RFC 822. If the content is encoded, MIME defines
  the header Content-Transfer-Encoding to specify the mechanism.  Other
  details are sometimes included, such as the Content-Disposition, which
  indicates to the recipient whether the content is to be treated simply as an
  attachment, or whether it is to be rendered inline with other content in other
  body parts.</para>
        <example xml:id="ex_mime1">
          <title>A simple MIME message sample</title>
          <para>Mime message including a picture stored as a file GIF format.
  Because .gif files use 8-bit bytes, and the RFC 822 format requires messages
  to contain only US-ASCII text, the picture data must be encoded. For the
  recipient to correctly decode and display the picture, it needs information
  about which encoding mechanism was used. The following example shows part
  of a MIME header that identifies that the content is a .gif file, that it is
  encoded using the standard base64 algorithm, and that it is to be treated by
  the e-mail client as an attachment.</para>
          <programlisting>
Content-Type: image/gif;
     name="picture.gif"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
     filename="picture.gif"

[encoded content here]
...
</programlisting>
        </example>
        <para>MIME accomplishes this simplifying and rebuilding of complex files by encoding a
  file and transporting it as a message body, or a series of messages with
  component parts of the file. A MIME-compliant
  user agent (UA) on the receiving end can decode the message, presenting it
  to the reader or providing it to another application as a file. A UA that is not
  MIME-compliant will be able to process a MIME-encoded mail message, but
  may not be able to decode the message. </para>
        <para>MIME defines a message format that allows for: </para>
        <simplelist type="vert">
          <member>Textual message bodies in character sets other than US-ASCII. </member>
          <member>Non-textual message bodies. </member>
          <member>Multipart message bodies. </member>
          <member>Textual header information in character sets other than US-ASCII. </member>
        </simplelist>
        <example xml:id="ex_samplemimemesg">
          <title>Sample MIME Message</title>
          <para>MIME uses headers and separators to tell a UA what processing is
required to re-create the message. An example with no encoded body parts is:</para>
          <programlisting>
From: OpenLink Support &lt;techsupp@openlinksw.co.uk&gt;
MIME-Version: 1.0
Content-Type: multipart/mixed;
        boundary="XXXXboundary text"

This is a multipart message in MIME format.

--XXXXboundary text
Content-Type: text/plain

here is the body text

--XXXXboundary text
Content-Type: text/plain;
Content-Disposition: attachment;
        filename="test.txt"

this is the attachment text

--XXXXboundary text--
</programlisting>
          <para>This example shows the use of a MIME message to send a text message
and an attached text file. Both are body parts of this message. </para>
          <para>The "MIME-Version:" header tells the receiving UA to treat this as a MIME message. </para>
          <para>The "Content-Type:" header specifies "multipart/mixed". This tells the
receiving UA that this message has parts separated by the string argument
defined in "boundary=".  A MIME-compliant UA will only display or otherwise process
content following the specified "boundary=" text strings. The actual
boundaries are constructed using the "boundary=" string, prepended by "--".
The final body part is followed by the "boundary=" string with the "--" both
prepended and appended.</para>
          <para>In the preceding example, the courtesy message "This is a multipart
message in MIME format." will not be displayed or otherwise processed by the
MIME UA since it does not follow a "boundary=" string. A UA that does not support
MIME will display it, and at least this part of the message will be readable
no matter what features the reader supports. If our example had encoded
parts, they would make no sense to the human reader using a
non-MIME-compliant UA, but at least the courtesy message would give the
user a hint as to why.</para>
          <para>There are two message body parts in our example.  Each body part
has headers of its own, in addition to the overall message headers.  Each
body-part begins with the boundary string.  If there were no headers in the
body parts, then the blank line that must follow headers in RFC 822 messages
would follow the boundary string. The first body part is a plain text message.
It is the message the sender might have typed into a UA. Its single
"Content-Type:" header identifies it as "text/plain", meaning US-ASCII
characters are used exclusively and any UA should be able to display this
body part. Text/plain is the default content type.</para>
          <para>The second body part in this example contains the file attachment.
Since the file attachment is an ASCII text file, it is sent with no encoding and
its content-type is given as text/plain. The "Content-Disposition: attachment"
header has an attribute, "filename=", which specifies a suggested name for the
file. This header specifies that this body part is to be treated as a file rather
than being displayed to the user and is to be saved on local storage
under the suggested file name.</para>
        </example>
        <section xml:id="mimeheaders">
          <title>MIME Headers</title>
          <para>MIME headers appear at the beginning of a MIME message as well as
within the separate body parts. Some MIME headers can be used both as
message headers and in MIME body parts. Some additional headers are defined
for use only in body parts.</para>
          <para>The following headers are defined in MIME: </para>
          <itemizedlist>
            <listitem>
              <formalpara>
                <title>MIME-Version</title>
                <para>Required header indicating that this message is to use the rules of
   MIME. "MIME-Version: 1.0" is the only currently defined MIME-Version
   header allowed. The MIME-Version header is a top-level header only and
   does not appear in body parts unless the body part is an encapsulated,
   fully formed message of content-type message/rfc822, which might
   have its own MIME-Version header.
   </para>
              </formalpara>
            </listitem>
            <listitem>
              <formalpara>
                <title>Content-Type</title>
                <para>Content-Type headers are used to specify the media type and subtype
   of data in the body of a message and to fully specify the native representation
   of such data. This header embodies much of the power of MIME. The IETF
   can add new official content types. Additionally, private content-type values
   can be defined by anyone. Such private content types have values of
   "x-something" or "X-something", where "something" can take on any value.
   </para>
              </formalpara>
            </listitem>
            <listitem>
              <formalpara>
                <title>Content-Transfer-Encoding</title>
                <para>Content-Transfer-Encoding headers can have two different meanings.
   If the value is "base64" or "quoted-printable", then the header indicates the
   encoding used for this body part. If the value is "7bit", "8bit", or "binary",
   then the header indicates that there is no encoding and that this value indicates
   only the type of content this body part contains. The default is "7bit". It should
   be noted that "8bit" and "binary" are not guaranteed to  be properly handled by all Internet (SMTP) MTAs valid in Internet mail.
   Eight bit content is not valid in Internet mail headers.
   Provision is made for private Content-Transfer-Encoding headers. These have values that
   begin with "x-" or "X-". These are for specialized cases where the users have
   the tools to decode or otherwise process a specific "x-" encoding.
   </para>
              </formalpara>
            </listitem>
            <listitem>
              <formalpara>
                <title>Content-ID</title>
                <para>Content-ID headers are world-unique values that identify body
   parts, individually or as groups. They are necessary at times to
   distinguish body parts and allow cross-referencing between body parts.
   </para>
              </formalpara>
            </listitem>
            <listitem>
              <formalpara>
                <title>Content-Description</title>
                <para>Content-Description headers are optional and are often used to
   add descriptive text to non-textual body parts.
   </para>
              </formalpara>
            </listitem>
            <listitem>
              <formalpara>
                <title>Content-Disposition</title>
                <para>Content-Disposition headers provide information about how to present
   a message or a body part. When a body part is to be treated as an attached file,
   the Content-Disposition header will include a file name attribute.
   </para>
              </formalpara>
            </listitem>
          </itemizedlist>
          <para>There are additional headers that are applied in specialized situations,
such as Content-Base and Content-Location. All of the "Content-xxx" headers
have defined sub-headers, fields, and/or attributes. Headers that begin
with "Content-" are the only headers that have defined meaning in body parts.
All other body part headers can be ignored and might actually be removed by
message transfer agents (MTAs).</para>
        </section>
        <section xml:id="mimetree">
          <title>MIME_TREE - MIME parser</title>
          <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

          <section xml:id="fn_mime_tree_dedup">
<title>mime_tree_dedup</title>

            <para>For detailed description and example use of the function, see
      <link linkend="fn_mime_tree">mime_tree</link>
      in the <link linkend="ch-functions">Functions Reference Guide</link>.
      </para>
          </section>
        </section>
        <!-- ### ~~~~ #### ~~~~ #### ~~~~ ### -->

        <section xml:id="mimemultipart">
          <title>Processing HTTP PUT of type "multipart/form-data"</title>
          <para>
When the Virtuoso server receives a PUT request of type "multipart/form-data"
from the client agent, then it passes the HTTP text to the MIME_TREE function internally
and adds any MIME subpart as an element pair ("name", "value")
of the "params" parameter of the vsp page being specified in the URI.
It also adds an additional "params" pair for each HTTP request MIME part
named "attr-name" and whose value is an array of all MIME header fields of that part.
</para>
          <example xml:id="mime002">
            <title>Example:</title>
            <para>
Consider the following HTTP request:
</para>
            <programlisting>
PUT handler.vsp
Content-Type: "multipart/form-data"; boundary="--end_part"

----end_part
Content-Type: image/gif
Content-Disposition: form-data; name=upload_control; filename="some image.gif"

GIF...
----end_part
Content-Type: text/plain
Content-Disposition: form-data; name=textarea

The description
----end_part--
</programlisting>
            <para>
Virtuoso parses that and produces the following params content when calling handler.vsp:
</para>
            <programlisting>
( "upload_control", "GIF....",
  "attr-upload_control", ( "Content-Type", "image/gif",
		"Content-Disposition", "form-data", "name",
		"upload_control", "filename", "some image.gif"),
  "textarea", "The description",
  "attr-textarea", ("Content-Type", "text/plain",
		"Content-Disposition", "form-data", "name",
		"textarea")
)
</programlisting>
          </example>
          <para>
This allows for vsp's to handle uniformly "x-www-form/url-encoded" and
"multipart/form-data" PUTS and to have full access to the MIME headers if needed.
</para>
        </section>
      </section>
      <section xml:id="smime">
        <title>S/MIME Support</title>
        <para>S/MIME is a specification for secure electronic mail. S/MIME stands for
  Secure/Multipurpose Internet Mail Extensions and was designed to add security
  to e-mail messages in MIME format. The security services offered are
  authentication (using digital signatures) and privacy (using encryption).</para>
        <para>The S/MIME specification consists of two documents:
  <link xlink:href="http://www.rfc-editor.org/rfc/rfc2311">S/MIME Message Specification (RFC 2311)</link>

   and
  <link xlink:href="http://www.rfc-editor.org/rfc/rfc2312">S/MIME Certificate Handling (RFC 2312)</link>

  .
  Both of these are Internet Drafts.  The S/MIME community has submitted these
  to the IETF.  The goal is to form a working group and produce an Internet
  standard.</para>
        <para>All certificates and private keys are read and stored as PEM encoded
  strings.  If the server is compiled without SSL support then dummy versions
  of smime_sign, smime_verify, pem_certificates_to_array and get_certificate_info
  are available so that existing SQL code would not be broken.  Currently the
  Virtuoso server supports S/MIME signing and S/MIME signature verification.
  These are done through the following 2 functions:</para>
        <para>
          <link linkend="fn_smime_verify">
            <function>smime_verify()</function>
          </link>
        </para>
        <para>
          <link linkend="fn_smime_sign">
            <function>smime_sign()</function>
          </link>
        </para>
        <para>A useful utility function for S/MIME support is:</para>
        <para>
          <link linkend="fn_pem_certificates_to_array">
            <function>pem_certificates_to_array()</function>
          </link>
        </para>
      </section>
    </section>
    <!-- ################### ~~~~~~~~~~ ################### -->

    <!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2020 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->

    <section xml:id="ftpservices">
      <title>FTP Services</title>
      <para>Virtuoso provides both FTP client and server functionality.  The Virtuoso FTP
client functions allow for programmatic access to ftp servers from Virtuoso/ PL to list, submit and
retrieve files from an FTP server.  The Virtuoso FTP server provides FTP access
to the Virtuoso WebDAV repository using the same authentication
and permissions system as WebDAV, and an configurable anonymous
user access.</para>
      <section xml:id="ftpservicesclient">
        <title>FTP Client</title>
        <para>Virtuoso provides three functions that mimic their FTP command
  counterparts.  These are:</para>
        <simplelist type="vert">
          <member><link linkend="fn_ftp_get"><function>ftp_get()</function></link>

   - to retrieve a file from an FTP server.</member>
          <member><link linkend="fn_ftp_put"><function>ftp_put()</function></link>

   - to submit a file to an FTP server.</member>
          <member><link linkend="fn_ftp_ls"><function>ftp_ls()</function></link>

   - list the contents of a directory on an FTP server.</member>
        </simplelist>
        <para>The Virtuoso client uses free ports within the range 20000 - 30000 for
active mode connections.  This is configurable using the parameters:
<computeroutput>FTPServerMinFreePort</computeroutput>

   and
<computeroutput>FTPServerMaxFreePort</computeroutput>

   in the
<computeroutput>HTTPServer</computeroutput>

   section of the
Virtuoso INI file.</para>
      </section>
      <section xml:id="ftpservicesserver">
        <title>FTP Server</title>
        <para>Virtuoso can provide FTP access to its WebDAV repository. This
  FTP server functionality relies on the same credentials and permissions that
  WebDAV uses.  The server is enabled by listing the
  <computeroutput>FTPServerPort</computeroutput>

   parameter in the
  <computeroutput>HTTPServer</computeroutput>

   section of the Virtuoso INI
  file.  This parameter must be accompanied by a port number to listen at.</para>
        <programlisting>
[HTTPServer]
FTPServerPort = 21
</programlisting>
        <para>Will instruct Virtuoso to listen for FTP requests on the default FTP
  port of 21.</para>
        <programlisting>
[HTTPServer]
...
FTPServerTimeout = 600
...
</programlisting>
        <para>To control timeout of connections use "FTPServerTimeout" ini parameter.
The default time out is 600 sec. This is only for command connection.</para>
        <para>The Virtuoso FTP server can be instructed to create a session log file
  using the parameter:</para>
        <programlisting>
[HTTPServer]
...
FTPServerLogFile = ftpserver
...
</programlisting>
        <para>If specified Virtuoso will produce an FTP server log file with the date
appended to the name given in the parameter and the files extension as ".log".
The log file is rotated daily.  It will contain the following information:</para>
        <para><computeroutput>ftpserverDDMMYYYY.log</computeroutput>

   :-</para>
        <simplelist type="vert">
          <member>Client Host Name</member>
          <member>Authorized User</member>
          <member>Time</member>
          <member>User Command</member>
          <member>Server Response Code</member>
          <member>Bytes Transferred</member>
        </simplelist>
        <para>An example of which is:</para>
        <programlisting>
hostname anonymous [22/Oct/2003:15:21:43 +0300] "PASS user@domain.com" 230 0
hostname anonymous [22/Oct/2003:15:23:11 +0300] "LIST" 226 162
hostname dav [22/Oct/2003:15:25:00 +0300] "PASS &lt;hidden&gt;" 230 0
</programlisting>
        <para>Virtuoso can allow special "anonymous" user access to the FTP Server
  by supplying the following Virtuoso INI file parameter:</para>
        <programlisting>
[HTTPServer]
...
FTPServerAnonymousLogin = 0
...
</programlisting>
        <para>The anonymous user is not a real user, it has no SQL or DAV login ability.
The anonymous user can only access collections or resources that are set to public.
The password of the anonymous user is trivially checked to contain the "@" symbol
and is shown in plain-text for the "PASS" command detailed in the log file.
Valid DAV users passwords are never revealed in the FTP log file.
By default anonymous login is denied.</para>
        <programlisting>
[HTTPServer]
...
FTPServerAnonymousHome = /DAV/dir_name/
...
</programlisting>
        <para>You can control the anonymous user home dir by "FTPServerAnonymousHome" parameter in the ini fail.
By default home dir for anonymous user is DAV root dir.</para>
        <para>The Virtuoso server supports the usual variety of commands such as:</para>
        <programlisting>
USER    PASS    CWD     CDUP    HELP
QUIT    PORT    PASV    TYPE    NOOP
STOR    RNFR    RNTO    MODE    RETR
DELE    RMD     MKD     PWD     SYST
SIZE    LIST    NLST    ABOR
</programlisting>
        <para>
By default the server uses free ports within the range 20000 - 30000 for passive
mode connections.  This is configurable using the parameters:
<computeroutput>FTPServerMinFreePort</computeroutput>

   and
<computeroutput>FTPServerMaxFreePort</computeroutput>

   in the
<computeroutput>HTTPServer</computeroutput>

   section of the
Virtuoso INI file.</para>
        <para>The FTP server root directory is the home directory of the authenticated
DAV user.</para>
        <!--
 The FTP server is based on DAV api. (see dav_api.txt). The user can access all
resources (files), that DAV api allow.
-->

        <tip>
          <title>See Also:</title>
          <para>
            <link xlink:href="http://www.rfc-editor.org/rfc/rfc959.txt">RFC-959</link>
          </para>
          <para>
            <link xlink:href="http://www.rfc-editor.org/rfc/rfc2389.txt">RFC-2389</link>
          </para>
        </tip>
      </section>
    </section>
    <!-- ################### ~~~~~~~~~~ ################### -->

    <!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2020 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->

    <section xml:id="vspguide">
      <title>VSP Guide</title>
      <section xml:id="vspintro">
        <title>Introduction</title>
        <para>
Virtuoso Server Pages are the equivalent of a stored procedure
in a Web page that is compiled when it is first read by the Virtuoso
server.  Virtuoso detects when  the '.vsp' file is modified
and recompiles the procedure.
Since VSP is essentially Virtuoso PL in a Web page you can do anything
that PL can, either directly or from interaction with the user.
VSP gives you the advantage of not having to worry about making
connections to the database. You also avoid the overhead of RPCs
because the HTTP server is built into Virtuoso.  When you write a VSP page the
connection is automatic since you are already in Virtuoso.
</para>
        <para>
VSP is server script and is therefore executed in the server as it is
encountered on the page.  For this reason client (JavaScript) and server
script cannot directly interact but can supplement each other.  You can
call JavaScript inside a VSP loop, for example, to manipulate something
that already exists on the page but you cannot pass variables by reference
from VSP directly to JavaScript or vice versa.
</para>
        <para>
Page flow control can be managed using FORMs.  The state of the page is
defined in form fields such as INPUT boxes and TEXTAREA boxes and then
passed to the next form or page using POST.
</para>
      </section>
      <section xml:id="htmlusage">
        <title>Simple HTML FORM usage</title>
        <para>
We start with a small example that shows the source of a page including a
FORM with data from the user being sent when a submit button is pressed.
We then examine the elements and attributes of this simple form that are
important to us at this stage.
</para>
        <section xml:id="basicform">
          <title>Basic Forms</title>
          <example>
            <title>Simple Forms</title>
            <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Simple FORM demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;FORM METHOD="POST" ACTION="formdemo_receiver.vsp"&gt;
    &lt;P&gt;Test form, type some info and click Submit&lt;/P&gt;
    &lt;INPUT TYPE="TEXT" NAME="myInput" /&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Submit" /&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
          </example>
          <para>
The METHOD attribute of a FORM TAG in a VSP page can be either GET or POST.  The GET method allows the form submission to
be contained completely in a URL; this can be advantageous because it permits bookmarking in browsers,
but it also prevents form data from containing non

ASCII characters such as accented letters and special symbols
and restricts the amount of form data that can be handled.  The GET method is l

mited by the maximum length of the URL that the
server and browser can process. To be safe, any form whose input might contain non-ASCII
characters or more than 100 characters should use METHOD="POST".
</para>
          <para>
With the POST method, the form input is submitted as an HTTP POST request with the form data sent in the
body of the request.  Most current browsers are unable to bookmark POST requests,
but POST does not entail the character encoding and length restrictions imposed by GET.
</para>
          <para>
The ACTION attribute of FORM specifies the URI of the form handler.  This will usually be another web page that
performs some action based on the data that is sent from the originating form.  The URI could point to the same page
as the data originated and for pages that perform a well-defined small set of functions it usually does.
When a page needs to manage multiple states there needs to be some flow control that can determine how the page
was reached; for example, to differentiate whether it arrived at as a result of someone clicking on the submit button or it is the first time the page has
been visited.
</para>
        </section>
        <section xml:id="formvalues">
          <title>Exchanging Values in Forms</title>
          <para>
Now we add some VSP to check the values of the parameters in the form.  VSP markup is typically
contained in &lt;?vsp ... ?&gt; blocks.
</para>
          <example>
            <title>Forms and Values</title>
            <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Simple FORM demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;Last value sent:

  &lt;?vsp
    http(get_keyword('myInput', params, 'no value'));
   ?&gt;

&lt;/P&gt;

  &lt;FORM METHOD="POST" ACTION="formdemo.vsp"&gt;
    &lt;P&gt;Test form, type some info and click Submit&lt;/P&gt;
    &lt;INPUT TYPE="TEXT" NAME="myInput" /&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Submit" /&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
          </example>
          <para>
This is the same example as above but now it uses the same page for the
form handler and displays the parameters each time.  Clicking the Submit
button takes you to the same page and displays whatever you typed in
the field last time.
</para>
          <para>
The VSP block uses two nested functions.  The <function>http()</function>

function allows you to send data to the HTTP client, the browser.
What we send to the browser is the result of the <function>get_keyword()</function>

function, which has three parameters:
<parameter>search_for</parameter>

  , <parameter>source_array</parameter>

  ,
and <parameter>default_val</parameter>

  .  It searches
for the keyword-value pair (keyword=value) where the keyword matches
the <parameter>search_for</parameter>

   parameter (in this case 'myInput')
in the array passed in the <parameter>source_array</parameter>

   parameter.
It returns the value
if one is found; otherwise returns the <parameter>default_val</parameter>

   parameter in the
function, in this case 'no value'.
The<parameter> params</parameter>

   argument is a special array that contains
all page parameters from the previous FORM state.
</para>
        </section>
        <section xml:id="formandvspconditions">
          <title>Conditional Processing</title>
          <para>
Now we extend this further to add some conditional control so that
if a value was entered we can respond directly to it.
We will also use a variable this time, which must be declared first.
</para>
          <example>
            <title>Conditional Processing Using IF</title>
            <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Simple FORM demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;

  &lt;?vsp
	declare _myInput varchar;

	_myInput := get_keyword('myInput', params, '');

    if (_myInput &lt;&gt; '')
	{	http('&lt;P&gt;Hello, ');
		http(_myInput);
		http('&lt;/P&gt;');
	}
	else
	{	http('&lt;P&gt;Please enter your name&lt;/P&gt;');
	}
   ?&gt;

  &lt;FORM METHOD="POST" ACTION="formdemo.vsp"&gt;
    &lt;INPUT TYPE="TEXT" NAME="myInput" VALUE="" /&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Submit" /&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
          </example>
        </section>
        <section xml:id="vsppgctrl">
          <title>Further Page Control</title>
          <para>
We now extend this to control the whole content of the page.
In this example we see that VSP and HTML can be interleaved.
</para>
          <example>
            <title>Page Control</title>
            <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Simple FORM demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;

  &lt;?vsp
	declare _myInput varchar;
	declare Mode varchar;

	_myInput := get_keyword('myInput', params, '');
	Mode := get_keyword('submit', params, '');

    if (Mode = 'Submit')
	{
   ?&gt;
    &lt;P&gt;Hello, &lt;?vsp http(_myInput); ?&gt;
	&lt;/P&gt;

&lt;FORM METHOD="POST" ACTION="demo4.vsp"&gt;
&lt;INPUT TYPE="HIDDEN" NAME="myInput" VALUE="" /&gt;
&lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Again" /&gt;
&lt;/FORM&gt;

  &lt;?vsp
	}
	  else
	{
   ?&gt;

  &lt;P&gt;Please enter you name&lt;/P&gt;
  &lt;FORM METHOD="POST" ACTION="demo4.vsp"&gt;
    &lt;INPUT TYPE="TEXT" NAME="myInput" /&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Submit" /&gt;
  &lt;/FORM&gt;

  &lt;?vsp
    }
  ?&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
          </example>
          <para>We start by setting the mode based on whether the Submit
  button has been pressed.  When the mode has changed a different version of the page
  is sent to the browser.  In the new version, the Again button the appears, to return you
  to the previous state when pressed.</para>
        </section>
        <section xml:id="params">
          <title>Communicating Parameters Between Pages</title>
          <para>Now we will use two pages to do the same job as in the demo above.</para>
          <example>
            <title>Using more than one page</title>
            <para>Page 1</para>
            <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Multi Page Demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;Please enter you name&lt;/P&gt;
  &lt;FORM METHOD="POST" ACTION="demo5_2.vsp"&gt;
    &lt;INPUT TYPE="TEXT" NAME="myInput" /&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Submit" /&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
            <para>Page 2</para>
            <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Multi Page Demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;The value you entered was:
  &lt;?vsp
    http(get_keyword('submit', params, 'no data'));
  ?&gt;
  &lt;/P&gt;
  &lt;FORM METHOD="POST" ACTION="demo5_1.vsp"&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Back" /&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
          </example>
        </section>
        <section xml:id="formsandjs">
          <title>Using JavaScript to Control Forms</title>
          <para>JavaScript is a programming language that can be used in the browser
and is useful for client-side programming.   It is  useful to be able
to do some work on the
client machine before making another round trip to the server for more processing.
JavaScript is also useful for making things more appealing to the Web
page viewer. </para>
          <para>JavaScript can be made to respond to events within the browser such as
when the mouse is moved over a link, a graphic or a button or when the mouse is
clicked on some part of the page.  This can be achieved by using event
handlers within the HTML tags and placing JavaScript code in their content.
Common event handlers are <emphasis>onMouseOver</emphasis>

  , <emphasis>onMouseClick</emphasis>

  ,
<emphasis>onMouseOut</emphasis>

  , <emphasis>onChange</emphasis>

  , and the
like.</para>
          <para>A simple but useful example of this would be to simplify one of the
previous examples by placing a handler on the text box so that you do not have to
press the submit button to send the form to the server:</para>
          <programlisting>
  &lt;FORM METHOD="POST" ACTION="demo5_2.vsp" NAME="demo5_2"&gt;
    &lt;INPUT TYPE="TEXT" NAME="myInput" onChange="document.demo5_2.submit()" /&gt;
    &lt;INPUT TYPE="SUBMIT" NAME="submit" VALUE="Submit" /&gt;
  &lt;/FORM&gt;
</programlisting>
        </section>
        <!--

<section
xml:id="basicvspexamples"><title>Basic VSP Examples</title>
simple interactive forms that bounce some values around (mostly done)
</section>
-->

      </section>
      <section xml:id="dbinteraction">
        <title>Interacting with the Database</title>
        <para>This section describes manipulating data within Virtuoso
from VSP.  Unless the required tables already exist, new ones will need to be
created.  This example will involve a simple table of people and a series
of pages for adding, editing, viewing, and deleting its entries.</para>
        <section xml:id="basiccreatetable">
          <title>Creating a Table</title>
          <para>Tables should be created so that their entries can be uniquely identified.
This is very important so that if we need to edit or delete one particular entry
we can distinguish it from other entries.  A <emphasis>primary key</emphasis>

is how a database enforces unique rows, by refusing to allow
duplicate data to be inserted.  It is up to the user to choose a column in the
table to act as a primary key.  Sometimes one or more of the columns of data are naturally
unique either singularly or in composite; other times it is necessary
to add a column to contain unique codes for each row.</para>
          <tip>
            <title>See Also:</title>
            <para>
              <link linkend="pkeycons">Primary Keys</link>
            </para>
          </tip>
          <para>Here is the definition of the simple table that will be used:</para>
          <programlisting>
CREATE TABLE DB.DBA.DEMO_PEOPLE (
  EMAIL VARCHAR(255) PRIMARY KEY,
  FORENAME VARCHAR(100),
  SURNAME VARCHAR(100)
);
</programlisting>
          <para>The email address has been selected as a primary key.</para>
        </section>
        <section xml:id="insertingvalues">
          <title>Basic Form Input Page</title>
          <para>After the table has been created; for example via Virtuoso's
iSQL utility; it will need some data.
For this we create a "New Person" page.  This page uses form
inputs and some VSP code to determine whether
an insert button was pressed.  If the insert button is pressed then the
page takes submitted values from the POST and uses them to construct
an SQL statement that inserts a new row into the table.  This is
demonstrated below:</para>
          <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;New Person Page&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;?vsp

    declare _email, _forename, _surname varchar;

    _email := get_keyword('email', params, '');
    _forename := get_keyword('forename', params, '');
    _surname := get_keyword('surname', params, '');

    -- insert new person if we came from the insert button
    if ('' &lt;&gt; get_keyword('ins_button', params, ''))
    {
      INSERT INTO DB.DBA.DEMO_PEOPLE(EMAIL, FORENAME, SURNAME)
        VALUES(_email, _forename, _surname);
    }
  ?&gt;
  &lt;P&gt;Please enter the details of new person:&lt;/P&gt;

  &lt;FORM METHOD="POST" ACTION="demo_people_add.vsp"&gt;
  &lt;TABLE&gt;
    &lt;TR&gt;&lt;TH&gt;Email:&lt;/TH&gt;&lt;TD&gt;&lt;INPUT TYPE="TEXT" NAME="email" /&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;&lt;TH&gt;Forename:&lt;/TH&gt;&lt;TD&gt;&lt;INPUT TYPE="TEXT" NAME="forename" /&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;&lt;TH&gt;Surname:&lt;/TH&gt;&lt;TD&gt;&lt;INPUT TYPE="TEXT" NAME="surname" /&gt;&lt;/TD&gt;&lt;/TR&gt;
  &lt;/TABLE&gt;

  &lt;INPUT TYPE="SUBMIT" NAME="ins_button" VALUE="Insert" /&gt;
  &lt;/FORM&gt;

  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
          <para>The underscores were added to this example to keep the param
variables and page variables visibly distinguishable.</para>
        </section>
        <section xml:id="retrtabvals">
          <title>Displaying Table Data in a VSP Page</title>
          <para>Now that some data exists in the table we need a way to
display it.  The FOR ... DO construct is used to construct the insides of
an HTML table:</para>
          <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;The People Page&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;P&gt;The Peoples' Details&lt;/P&gt;

  &lt;TABLE&gt;
    &lt;TR&gt;&lt;TH&gt;Email&lt;/TH&gt;&lt;TH&gt;Forename&lt;/TH&gt;&lt;TH&gt;Surname&lt;/TH&gt;&lt;/TR&gt;
  &lt;?vsp
    FOR (SELECT EMAIL, FORENAME, SURNAME FROM DB.DBA.DEMO_PEOPLE) DO
    {
  ?&gt;
    &lt;TR&gt;&lt;TD&gt;&lt;?=EMAIL?&gt;&lt;/TD&gt;&lt;TD&gt;&lt;?=FORENAME?&gt;&lt;/TD&gt;&lt;TD&gt;&lt;?=SURNAME?&gt;&lt;/TD&gt;&lt;/TR&gt;
  &lt;?vsp
    }
  ?&gt;
  &lt;/TABLE&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
        </section>
        <section xml:id="deletevals">
          <title>Simple Form Delete Page</title>
          <para>The page above can easily be extended to allow deletion.  For each row an 'action' link is added.  The action
Remove link hardwires a form GET on the URL.  This is then
intercepted by the IF condition looking for the <parameter>remove</parameter>

   parameter. </para>
          <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;The People Page With Deletion&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;?vsp
    declare deleteme varchar;

    deleteme := get_keyword('remove', params, '');
    if ('' &lt;&gt; deleteme)
      DELETE FROM DB.DBA.DEMO_PEOPLE WHERE EMAIL = deleteme;
  ?&gt;

  &lt;FORM METHOD="POST" ACTION="demo_people_view2.vsp"&gt;
  &lt;P&gt;The Peoples' Details&lt;/P&gt;

  &lt;TABLE&gt;
    &lt;TR&gt;&lt;TH&gt;Email&lt;/TH&gt;&lt;TH&gt;Forename&lt;/TH&gt;&lt;TH&gt;Surname&lt;/TH&gt;
      &lt;TH&gt;Action&lt;/TH&gt;&lt;/TR&gt;
  &lt;?vsp
    FOR (SELECT EMAIL, FORENAME, SURNAME FROM DB.DBA.DEMO_PEOPLE) DO
    {
  ?&gt;
    &lt;TR&gt;&lt;TD&gt;&lt;?=EMAIL?&gt;&lt;/TD&gt;&lt;TD&gt;&lt;?=FORENAME?&gt;&lt;/TD&gt;&lt;TD&gt;&lt;?=SURNAME?&gt;&lt;/TD&gt;
      &lt;TD&gt;&lt;A HREF="?remove=&lt;?=EMAIL?&gt;"&gt;Remove&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
  &lt;?vsp
    }
  ?&gt;
  &lt;/TABLE&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
        </section>
        <section xml:id="editvals">
          <title>Simple Form Edit Page</title>
          <para>The last step is to have a way to edit rows of the
table.  To do this, we combine everything that we have so far
and use the SQL UPDATE statement to update the row.  The EMAIL
column is not made updateable since this is the primary key.
</para>
          <programlisting>
&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;The People Page With Deletion&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  &lt;BODY&gt;
  &lt;FORM METHOD="POST" ACTION="demo_people_view3.vsp"&gt;
  &lt;?vsp
    declare deleteme, editme, edt_email, edt_forename, edt_surname,
            save_email, save_forename, save_surname varchar;

    deleteme := get_keyword('remove', params, '');
    if ('' &lt;&gt; deleteme)
      DELETE FROM DB.DBA.DEMO_PEOPLE WHERE EMAIL = deleteme;

    if ('' &lt;&gt; get_keyword('save_button', params, ''))
    {
      save_email := get_keyword('email', params, '');
      save_forename := get_keyword('forename', params, '');
      save_surname := get_keyword('surname', params, '');

      update DB.DBA.DEMO_PEOPLE
        SET FORENAME = save_forename, SURNAME=save_surname
        WHERE EMAIL = save_email ;
    }

    editme := get_keyword('edit', params, '');
    if ('' &lt;&gt; editme)
    {
      SELECT EMAIL, FORENAME, SURNAME
        INTO edt_email, edt_forename, edt_surname
        FROM DB.DBA.DEMO_PEOPLE WHERE EMAIL = editme;
  ?&gt;
  &lt;TABLE&gt;
    &lt;TR&gt;&lt;TH&gt;Email:&lt;/TH&gt;&lt;TD&gt;&lt;INPUT DISABLED TYPE="TEXT" NAME="email" VALUE="&lt;?=edt_email?&gt;" /&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;&lt;TH&gt;Forename:&lt;/TH&gt;&lt;TD&gt;&lt;INPUT TYPE="TEXT" NAME="forename" VALUE="&lt;?=edt_forename?&gt;" /&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;&lt;TH&gt;Surname:&lt;/TH&gt;&lt;TD&gt;&lt;INPUT TYPE="TEXT" NAME="surname" VALUE="&lt;?=edt_surname?&gt;" /&gt;&lt;/TD&gt;&lt;/TR&gt;
  &lt;/TABLE&gt;
  &lt;INPUT TYPE="SUBMIT" NAME="save_button" VALUE="Save" /&gt;
  &lt;?vsp
    }
  ?&gt;

  &lt;P&gt;The Peoples' Details&lt;/P&gt;

  &lt;TABLE&gt;
    &lt;TR&gt;&lt;TH&gt;Email&lt;/TH&gt;&lt;TH&gt;Forename&lt;/TH&gt;&lt;TH&gt;Surname&lt;/TH&gt;
      &lt;TH&gt;Action&lt;/TH&gt;&lt;/TR&gt;
  &lt;?vsp
    FOR (SELECT EMAIL, FORENAME, SURNAME FROM DB.DBA.DEMO_PEOPLE) DO
    {
  ?&gt;
    &lt;TR&gt;&lt;TD&gt;&lt;?=EMAIL?&gt;&lt;/TD&gt;&lt;TD&gt;&lt;?=FORENAME?&gt;&lt;/TD&gt;&lt;TD&gt;&lt;?=SURNAME?&gt;&lt;/TD&gt;
      &lt;TD&gt;&lt;A HREF="?remove=&lt;?=EMAIL?&gt;"&gt;Remove&lt;/A&gt; &lt;A HREF="?edit=&lt;?=EMAIL?&gt;"&gt;Edit&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
  &lt;?vsp
    }
  ?&gt;
  &lt;/TABLE&gt;
  &lt;/FORM&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
        </section>
      </section>
      <!--
Data Validity
Table constraints
Trapping Errors
Datatype traps and avoidance (coalesce)

Free Text

XML

XSL
-->

      <!-- ############################################# -->

      <!--

<section
xml:id="tut_web_basic_vsp"><title>Basic VSP Programming</title>
&vs_b_1; &vs_b_2; &vs_b_3; &vs_b_4; &vs_b_5; &vs_b_6; &vs_b_7; &vs_b_8; &vs_b_9;
</section>

<section
xml:id="tut_web_special_ctrl"><title>Special Control Functions</title>
&vs_c_1;
</section>

<section
xml:id="tut_web_dav_maint"><title>DAV Maintenance</title>
&vs_d_1; &vs_d_2; &vs_d_3; &vs_d_4; &vs_d_5; &vs_d_6; &vs_d_7; &vs_d_8;
</section>
-->

      <!-- ############################################# -->

      <section xml:id="vspforumsapp">
        <title>The Forums Application</title>
        <para>
The "Forums" Application is a World Wide Web Application for posting, reading
and searching of messages developed under the Virtuoso VDBMS with a wide usage
of Virtuoso Server Pages (VSP) and server-side XSL-T transformation.
</para>
        <para>
Messages in the forums are classified to forums and sub-forums by
interest.  Posting is only allowed for registered users.  Registration is
performed via a registration form.  Every registered user can create new a
theme, post new messages to an existing theme or reply to an existing
message.  Unregistered users can only search, browse, and read existing
themes and messages.
</para>
        <section xml:id="forumsprinciples">
          <title>Principles</title>
          <para>
The application is based on VSPs, XML and XSLT transformations.  The
VSPs are used to produce XML documents that are transformed to HTML using
server side XSLT.  The design and appearance of the
application depends solely on XSLT style sheets.  This allows us to divide
the development into two distinct parts: layout and design, and
functionality of the application.
</para>
          <para>
Session management is based on URL manipulation and persistent HTTP session
variables.  The messages are stored in Database as XML documents with a free-text
index applied over them.
</para>
        </section>
        <section xml:id="forumsnav">
          <title>Navigation</title>
          <para>
The application consists of four main pages:
</para>
          <orderedlist>
            <listitem>
              <para><emphasis>home.vsp</emphasis>

   - the main page introduces the
forums with the following information:</para>
              <simplelist type="vert">
                <member>Forums: name of each forum with link to the relevant sub-forums.</member>
                <member>Total: total number of messages for this forum.</member>
                <member>New: new messages for this forum within the last day.</member>
                <member>Last: number of the last message inserted in the forum.</member>
                <member>Total users: count of registered users.</member>
                <member>Options: login if the user is already registered in the forums.</member>
                <member>Registration: add a new user.</member>
                <member>Search: search in the messages.</member>
              </simplelist>
            </listitem>
            <listitem>
              <para><emphasis>subforums.vsp</emphasis>

   - sub-forums
of the current forum with the following information:</para>
              <simplelist type="vert">
                <member>Subforum: name of each sub-forum with links to relevant themes.</member>
                <member>Total: total number of messages for this forum.</member>
                <member>New: new messages for this forum within the last day.</member>
                <member>Last: number of the last message inserted in the forum.</member>
                <member>Options: login if the user is already registered in the forums.</member>
                <member>Registration: add a new user</member>
                <member>Search: search in the messages.</member>
                <member>Forums path: links to the home page and to the forum to
	which the current sub-forums belong.</member>
              </simplelist>
            </listitem>
            <listitem>
              <para><emphasis>forum.vsp</emphasis>

   - themes of the current
	sub-forum with the following information:</para>
              <simplelist type="vert">
                <member>Theme: name of each theme with links to its messages.</member>
                <member>Total: total number of messages for this theme.</member>
                <member>New: new messages for this theme within the last day.</member>
                <member>Last: number of the last message inserted in the theme.</member>
                <member>Options: login if the user is already registered in the forums.</member>
                <member>Registration: add a new user.</member>
                <member>Search: search in the messages.</member>
                <member>Forums path: links to the home page, to the forum and to the
		sub-forum to which the current themes belong.</member>
              </simplelist>
            </listitem>
            <listitem>
              <para><emphasis>thread.vsp</emphasis>

   - messages of the current
	theme with the following information:</para>
              <simplelist type="vert">
                <member>Message: name of each message with a link to its
 properties.  When the link is activated the same page is presented, but
		with the tree of messages for which the current message is
 the parent.</member>
                <member>Author: the name of the author of the current message.</member>
                <member>Date: posting date of the message.</member>
                <member>Options: login if the user is already registered in the forums.</member>
                <member>Registration: add a new user.</member>
                <member>Search: search in the messages.</member>
                <member>Forums path: links to the home page, to the forum and to the
		sub-forum to which the current message belongs.  Also for the current
		message, the parent message's name is presented. As users
 move lower in the tree, they can go
		back using this path.</member>
              </simplelist>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="forumsremarks">
          <title>Remarks</title>
          <para>
The basic principles of the application's implementation are:
</para>
          <simplelist type="vert">
            <member>The result of a VSP execution is a well-formed XML document.</member>
            <member>Use the Virtuoso server to do server-side XSLT transformations
with appropriate style sheets whenever needed.</member>
            <member>Use URL manipulations for session management.</member>
            <member>Use post-processing functions to provide commonly used
parameters (such as user ID) as session variables.</member>
          </simplelist>
          <para>
If users are not logged in they can access all pages of the site, but if
they want to insert a new theme or create a new message, they have to log
in.  When users attempt to create or insert, they will be prompted with
the login page.  When they log in, the forums application will take them
directly to the form for inserting messages or themes.
If users are not logged in, the name 'anonymous' is displayed, instead of
the e-mail address that would be displayed if they were logged in.
</para>
        </section>
        <section xml:id="forumssrchpg">
          <title>The Search Page</title>
          <para>Users can search in three ways:</para>
          <simplelist type="vert">
            <member>Theme title: titles of message that are titles of themes.</member>
            <member>Message title: titles of message that have the current theme as parent.</member>
            <member>Message body: bodies of messages that have different themes as parents.</member>
          </simplelist>
          <para>Search results contain information about how many hits were
	found, and for each hit the following:</para>
          <simplelist type="vert">
            <member>Message title: the title of the current message.  When you search
		in message bodies, the message titles are displayed.</member>
            <member>Time: date the message or theme was inserted.</member>
            <member>Author: author of the message or theme.</member>
          </simplelist>
          <para>
	The search page provides the interface for searching contents of forums
	including messages and titles.</para>
          <programlisting>
&lt;?vsp
  declare id, acount, aresults integer;
  declare aquery, awhat, askiped, search_res, sid, uid, url, usr varchar;

  -- &gt; at this point we instruct server to do server-side XSLT transformation
	-- &gt;    over resultant document
  -- &gt; The transformation will be done before sending the document to the user-agent
  -- &gt;    and after page execution is done.
	-- &gt; To provide flexible file location we use a registry setting for XSLT
	-- &gt;    style sheets
  http_xslt(sprintf ('file:%s/search.xsl', registry_get ('app_forums_xslt_location')));

  -- &gt; because the application does URL poisoning for session management
  -- &gt; we must retrieve the request parameters:

  -- &gt; the session ID
  sid      := get_keyword('sid', params, '0');
  -- &gt; the query text
  aquery   := get_keyword('q',params,'');
  -- &gt; the query locator (for what we searching)
  awhat    := get_keyword('wh',params,'t');
  -- &gt; how many records to skip
  askiped  := atoi (get_keyword('sk',params,'0'));
  -- &gt; how many results to return
  aresults := atoi (get_keyword('rs',params,'10'));
  -- &gt; hits count
  acount   := atoi (get_keyword('c',params,'0'));

  url := 'thread.vsp';

  -- &gt; also we get the user ID from the session variables
  uid := connection_get ('pid');
  usr := connection_get ('usr');

  -- &gt; now we are ready and call the stored procedure that returns the result from search
  search_res := FORI_SEARCH_RES (aquery, awhat, askiped, aresults, acount);
?&gt;

&lt;!-- now we produce the result as well-formed XML document --&gt;

&lt;?xml version="1.0"?&gt;
&lt;page&gt;
&lt;sid&gt;&lt;?=sid?&gt;&lt;/sid&gt;
&lt;usr&gt;&lt;?=usr?&gt;&lt;/usr&gt;
&lt;url&gt;&lt;?=url?&gt;&lt;/url&gt;
&lt;nav_2&gt;&lt;?vsp http(FORI_SEARCH_FORM (sid, aquery, awhat, askiped, aresults, acount)); ?&gt;&lt;/nav_2&gt;
&lt;css_1/&gt;
&lt;squery&gt;&lt;?=aquery?&gt;&lt;/squery&gt;
&lt;swhat&gt;&lt;?=awhat?&gt;&lt;/swhat&gt;
&lt;sskiped&gt;&lt;?=askiped?&gt;&lt;/sskiped&gt;
&lt;sresults&gt;&lt;?=aresults?&gt;&lt;/sresults&gt;
&lt;scount&gt;&lt;?=acount?&gt;&lt;/scount&gt;
&lt;?vsp http (search_res); ?&gt;
&lt;?vsp http (FORI_SEARCH_NAVIGATION (
  sprintf('search.vsp?q=%s&amp;wh=%s&amp;rs=%d&amp;c=%d&amp;sid=%s&amp;', aquery, awhat, aresults, acount, sid),
	  acount, askiped, aresults)); ?&gt;
&lt;/page&gt;
</programlisting>
        </section>
        <section xml:id="forumssrchdesc">
          <title>Search Page Analysis</title>
          <para>
	First we declare the variables used inside the page.  In VSP, variables can be
	defined at any time, but it is generally good practice is to declare them
	near the top.
</para>
          <para>
	We call <function>http_xslt()</function>

   with a file URL parameter.  This instructs the Virtuoso
	server to do XSLT transformation on the server side before sending output
	to the client, and after execution of the page.  Hence we will produce
	an XML document.
</para>
          <para>
	After this we need to get the input parameters session_id, query text,
	how many records to skip, and how many records to display.  We do this
	by calling <function>get_keyword()</function>

   and passing it the 'params' array.
	Every VSP page has <parameter>params</parameter>

  ,
	<parameter>path</parameter>

  , and <parameter>lines</parameter>

   as
	input parameters.  For
	each call we supply a default value in case the variable has not been used.  For
	some of the parameters we need an integer, but varchars are always returned,
	so we use <function>atoi()</function>

   on the result to convert it to an integer.
</para>
          <para>
	Next we retrieve the persistent variables <parameter>user id</parameter>

   and <parameter>user name</parameter>

  .  We do this
	by calling <function>connection_get()</function>

   with the session variable name.
</para>
          <para>
	After this preparation, we are ready to perform the searching by calling the PL stored procedure
	<function>FORI_SEARCH_RES()</function>

  .  This procedure returns the XML entities that contain
	the results from the search.
</para>
          <para>
	Once we have results, we want to produce the XML document that will be used in the
	XSLT transformation.  We do this part of the work using the shortcuts to the
	<function>http_value()</function>

   function: '&lt;?= ?&gt;' pairs, and
	also in some places '&lt;?vsp ?&gt;' to call the <function>FORI_SEARCH_FORM()</function>

   and
	<function>FORI_SEARCH_NAVIGATION()</function>

   procedures and
	output their results.
</para>
          <para>
	The main benefits to this approach are:
	</para>
          <simplelist type="vert">
            <member>design independency of VSP content: if we need a different design
		we only need to change the XSLT style sheet;</member>
            <member>different style sheets can represent different
		themes.  If we pass an additional 'theme' parameter, for example, we can
		associate a new theme with a different style sheet.  This way we have a fast
		approach to customizing the look of the page;
		</member>
            <member>browser independence: because we do server-side XSLT transformation
		we do not need the browser to support XSLT or XML at all.</member>
          </simplelist>
          <para>
	If we comment out the line that instructs
	Virtuoso to perform the XSLT transformation (<function>http_xslt()</function>

  )
	we will get the following document:
</para>
          <programlisting>
&lt;?xml version="1.0"?&gt;
&lt;page&gt;
&lt;sid&gt;0&lt;/sid&gt;
&lt;usr&gt;anonymous&lt;/usr&gt;
&lt;url&gt;thread.vsp&lt;/url&gt;
&lt;nav_2&gt;&lt;search_form&gt;
&lt;hidden&gt;
&lt;hidden_input type="hidden" name="sid" value="0" /&gt;
&lt;hidden_input type="hidden" name="sk" value="0" /&gt;
&lt;hidden_input type="hidden" name="rs" value="10" /&gt;
&lt;hidden_input type="hidden" name="c" value="0" /&gt;
&lt;/hidden&gt;
&lt;select name="wh"&gt;
&lt;option value="t" selected="1"&gt;theme title&lt;/option&gt;
&lt;option value="mt"&gt;message title&lt;/option&gt;
&lt;option value="mb"&gt;message body&lt;/option&gt;
&lt;/select&gt;
&lt;/search_form&gt;
&lt;/nav_2&gt;
&lt;css_1/&gt;
&lt;squery&gt;&lt;/squery&gt;
&lt;swhat&gt;t&lt;/swhat&gt;
&lt;sskiped&gt;0&lt;/sskiped&gt;
&lt;sresults&gt;10&lt;/sresults&gt;
&lt;scount&gt;0&lt;/scount&gt;
&lt;search_result&gt;
&lt;no_hits/&gt;
&lt;/search_result&gt;
&lt;navigation pages="0"&gt;
&lt;/navigation&gt;
&lt;/page&gt;
</programlisting>
          <para>If we re-enable the XSLT transformation the user agent will
receive the following HTML content:
</para>
          <programlisting>
&lt;html&gt;&lt;head&gt;
&lt;style type="text/css"&gt;
a:hover{color:#a2a2a2}
.id{font-size:12px;font-family:arial,sans-serif;font-weight:bold;color:#004C87}
.ie{font-size:12px;font-family:verdana,sans-serif;color:#FFFFFF}
.ir{font-size:14px;font-weight:bold;font-family:verdana,sans-serif;color:#FFFFFF}
.if{font-size:12px;text-decoration:none;font-family:verdana,sans-serif;
   font-weight:bold;color:#E1F2FE}
.iname{font-size:12px;font-weight:bold;font-family:verdana,sans-serif;color:#FFFFFF}
.ipath{font-size:12px;text-decoration:none;font-weight:bold;
   font-family:verdana,sans-serif;color:#004C87}
.inew {font-size:12px;text-decoration:none;font-weight:bold;
   font-family:verdana,sans-serif;color:#FFC600}
.text {font-size:12px;text-decoration:none;font-family:Arial,sans-serif;color:#004C87}
&lt;/style&gt;
&lt;/head&gt;
  &lt;body&gt;
    &lt;TABLE WIDTH="100%" BGCOLOR="#004C87" CELLPADDING="0" CELLSPACING="0" BORDER="0"&gt;
     &lt;TR&gt;
      &lt;form action="search.vsp" method="post"&gt;
        &lt;TD WIDTH="20%" VALIGN="top"&gt;
          &lt;IMG SRC="i/logo_n.gif" HEIGHT="49" WIDTH="197" BORDER="0"&gt;&lt;/TD&gt;
	&lt;TD WIDTH="40%" ALIGN="center"&gt;
	  &lt;input type="text" name="q" size="36" value=""&gt;&lt;/TD&gt;
	&lt;TD WIDTH="25%" ALIGN="center"&gt;
	   &lt;select name="wh"&gt;
	      &lt;option value="t" selected&gt;theme title&lt;/option&gt;
	      &lt;option value="mt"&gt;message title&lt;/option&gt;
	      &lt;option value="mb"&gt;message body&lt;/option&gt;
	   &lt;/select&gt; &lt;input type="hidden" name="sid" value="0"&gt;
	   &lt;input type="hidden" name="sk" value="0"&gt;
	   &lt;input type="hidden" name="rs" value="10"&gt;
	   &lt;input type="hidden" name="c" value="0"&gt;
	&lt;/TD&gt;
	&lt;TD WIDTH="15%"&gt;
	&lt;input type="image" name="search" src="i/search.gif" border="0"&gt;&lt;/TD&gt;
	&lt;/form&gt;
      &lt;/TR&gt;
   &lt;/TABLE&gt;
    &lt;TABLE WIDTH="100%" BGCOLOR="#02A5E4" CELLPADDING="0" CELLSPACING="0" BORDER="0"&gt;
      &lt;TR&gt;
	&lt;TD&gt;
	    &lt;IMG SRC="i/str.gif" HEIGHT="12" WIDTH="35"&gt;
	    &lt;a class="id" href="home.vsp?sid=0"&gt;Home&lt;/a&gt;
       &lt;/TD&gt;
       &lt;TD HEIGHT="22" class="iname" ALIGN="right"&gt;anonymous &lt;/TD&gt;
      &lt;/TR&gt;
      &lt;/TABLE&gt;
      &lt;TABLE BGCOLOR="#E1F2FE" ALIGN="center" WIDTH="100%" CELLPADDING="0" CELLSPACING="0" BORDER="0"&gt;
       &lt;TR&gt;
         &lt;TD COLSPAN="3"&gt;
 	    &lt;IMG SRC="i/c.gif" HEIGHT="12" WIDTH="1"&gt;
         &lt;/TD&gt;
       &lt;/TR&gt;
       &lt;TR&gt;
        &lt;TR BGCOLOR="#0073CC"&gt;
         &lt;TD WIDTH="60%" HEIGHT="24" class="ie"&gt; message title&lt;/TD&gt;
         &lt;TD WIDTH="20%" class="ie"&gt;time&lt;/TD&gt;
         &lt;TD WIDTH="20%" class="ie"&gt;author&lt;/TD&gt;
       &lt;/TR&gt;
      &lt;TR&gt;
        &lt;TD COLSPAN="3"&gt;
          &lt;IMG SRC="i/c.gif" HEIGHT="2" WIDTH="1"&gt;
        &lt;/TD&gt;
      &lt;/TR&gt;
      &lt;TR&gt;
        &lt;TD align="left" class="id" COLSPAN="3"&gt;No hits found&lt;/TD&gt;
      &lt;/TR&gt;
      &lt;TR&gt;
       &lt;TD HEIGHT="18" colspan="3" BGCOLOR="#0073CC" class="id"&gt;
       &lt;/TD&gt;
      &lt;/TR&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
       &lt;TD COLSPAN="3"&gt;
         &lt;IMG SRC="i/c.gif" HEIGHT="2" WIDTH="1"&gt;
       &lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
      &lt;TD COLSPAN="3" BGCOLOR="#0073CC"&gt;
        &lt;IMG SRC="i/c.gif" HEIGHT="1" WIDTH="1"&gt;
      &lt;/TD&gt;
     &lt;/TR&gt;
    &lt;/TABLE&gt;
  &lt;/body&gt;
&lt;/html&gt;
</programlisting>
          <para>The page sources are available in the default distribution under the
	samples directory.</para>
          <tip>
            <title>See Also:</title>
            <para>
	For more information about the functions used see:
	<link linkend="fn_http_xslt">http_xslt()</link>

  ,
	<link linkend="fn_http">http()</link>

  ,
	<link linkend="fn_http_value">http_value()</link>

  .
  </para>
            <para>For more information about VSP in general go the
	<link linkend="vsp1">VSP Section</link>

  .</para>
          </tip>
        </section>
      </section>
      <section xml:id="corsshare">
        <title>Setting up server-side Cross-Origin Resource Sharing (CORS) with Virtuoso</title>
        <para>User agents (e.g., Web browsers) have traditionally restricted scripts within web pages by a Same Origin Policy, which allowed scripts to make requests only to resources within the same domain from which the scripts themselves originated. This restriction is meant to protect the user and their computer from "Trojan horse websites" which may appear to be safe, but which then make unsafe HTTP requests to other, invisible sites. This restriction also protects the second website from potential "Denial of Service" and other attacks, whether accidental or intentional.</para>
        <para>This policy has the unfortunate side-effect of also preventing client-side Web applications served from one website ("Origin") from retrieving data from another website ("Origin").</para>
        <para><link xlink:href="http://www.w3.org/TR/cors/">Cross-Origin Resource Sharing (CORS)</link>

   is a mechanism intended to enable safer client-side cross-origin requests, primarily focused on data.</para>
        <section xml:id="corssharewk">
          <title>How does CORS work?</title>
          <para>Authentication and session-management information methods are extended in several ways:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>Enforcement by User Agent
           </para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>A server providing a resource can include an </para>
                  <para>
                    <emphasis>Access-Control-Allow-Origin</emphasis>
                  </para>
                  <para> HTTP response header, with a value of the 
         	request's triggering script's site of origin (that is, the site which provided the script which 
         	made the request for the resource), to indicate whether access to the resource's contents may be 
         	allowed. The user agent validates that the value in this header matches the actual origin of the 
         	script which made the request.
         	   </para>
                </listitem>
                <listitem>
                  <para>User agents can use a "pre-flight request" to discover whether a cross-origin resource 
         	is prepared to accept requests from a given script origin, using a complex method (which we will 
         	not detail here). Again, the response is validated by the user agent.
         	    </para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Enforcement by Server-side Application
           </para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>Server-side applications can refer to the </para>
                  <para>
                    <emphasis>Origin</emphasis>
                  </para>
                  <para> HTTP request header 
         to discover whether the user agent deemed it a cross-origin request. Here, the server-side 
         application enforces limitations (e.g., returning nothing, partial results, or full results) on 
         the cross-origin requests that they are willing to service at all.
             </para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="corssharesetup">
          <title>CORS Setup for Virtuoso servers</title>
          <para>With Virtuoso 6 and later (specific earliest versions as noted below), CORS support may be configured at the server-level or enabled through application logic (scripting, PL, etc.).</para>
          <para>When working with older versions of Virtuoso, CORS support cannot be configured at the server-level, but it may be enabled within application logic (scripting, PL, etc.).</para>
          <section xml:id="corssharesetupapplv">
            <title>Application-level CORS Setup</title>
            <para>Any Virtuoso PL (VSP)-based application can implement CORS checking through well-known 
	  	   	HTTP functions <link linkend="fn_http_request_header"><function>http_request_header()</function></link>

   and 
	  	 	<link linkend="fn_http_header"><function>http_header()</function></link>

  . This method will 
	  	 	  work with any version of Virtuoso. For instance:</para>
            <programlisting>
&lt;?vsp 
    IF (http_request_header (lines, 'Origin', NULL) = 'http://host.org')
      {
          http_header ('Access-Control-Allow-Origin: http://host.org\r\n');
      }
   ELSE 
      {
         RETURN;
      }
-- Additional code here ---

?&gt;
</programlisting>
            <para>Applications running in other hosted environments (Perl, Python, PHP, ASP.NET, etc.) may also use their specific scripting options to add and/or check relevent headers.</para>
          </section>
          <section xml:id="corssharesetupsrvlv">
            <title>Server-level CORS Setup</title>
            <para>Note: These instance/server-level configuration instructions require 
	  	   	 <link xlink:href="http://edit-wiki.usnet.private/dataspace/dav/wiki/VOS/VOSNews">Virtuoso Open Source (VOS) 6.1.3 or later</link>

  , 
	  	   	 or <link xlink:href="http://download.openlinksw.com/virtwiz/">Virtuoso Commercial Edition 6.2.3129 or later</link>

  .</para>
            <orderedlist>
              <listitem>
                <para>In the Virtuoso Conductor, go to </para>
                <para>
                  <emphasis>Web Application Server -&gt; Virtual Directories &amp; Directories</emphasis>
                </para>
                <para>.
             </para>
                <figure xml:id="oc1" floatstyle="1">
                  <title>Server-side Cross-Origin Resource Sharing (CORS) Example Setup</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/oc1.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Expand the </para>
                <para>
                  <emphasis>Interface</emphasis>
                </para>
                <para> store. 
             </para>
                <figure xml:id="oc2" floatstyle="1">
                  <title>Server-side Cross-Origin Resource Sharing (CORS) Example Setup</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/oc2.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click </para>
                <para>
                  <emphasis>New Directory</emphasis>
                </para>
                <para>.</para>
              </listitem>
              <listitem>
                <para>Specify the desired </para>
                <para>
                  <emphasis>Virtual Directory Type</emphasis>
                </para>
                <para>, or choose an existing virtual directory to use as a template.
             </para>
                <figure xml:id="oc3" floatstyle="1">
                  <title>Server-side Cross-Origin Resource Sharing (CORS) Example Setup</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/oc3.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click </para>
                <para>
                  <emphasis>Next</emphasis>
                </para>
                <para>.</para>
              </listitem>
              <listitem>
                <para>Specify the </para>
                <para>
                  <emphasis>Directory Path</emphasis>
                </para>
                <para> value.
             </para>
                <figure xml:id="oc4" floatstyle="1">
                  <title>Server-side Cross-Origin Resource Sharing (CORS) Example Setup</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/oc4.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Set the </para>
                <para>
                  <emphasis>CORS</emphasis>
                </para>
                <para> options.
             </para>
                <figure xml:id="oc5" floatstyle="1">
                  <title>Server-side Cross-Origin Resource Sharing (CORS) Example Setup</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/oc5.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
                <itemizedlist mark="bullet">
                  <listitem>
                    <para>
                      <emphasis>Cross-Origin Resource Sharing</emphasis>
                    </para>
                    <para>: Contains a single wildcard 
                asterisk, i.e., "</para>
                    <para>
                      <emphasis>*</emphasis>
                    </para>
                    <para>", or a space-delimited list of HTTP server URIs, 
                e.g., "</para>
                    <para>
                      <emphasis>http://example.com:8080 http://blah.example.com http://foo.example.com</emphasis>
                    </para>
                    <para>". 
                Scripts originating on the listed HTTP servers are authorized to retrieve the specified 
                resource(s); the wildcard means scripts from any HTTP server will be authorized. For this 
                example, enter the following single URI:
</para>
                    <programlisting>
http://demo.openlinksw.com	
</programlisting>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis>Reject Unintended CORs
</emphasis>
                    </para>
                    <para> checkbox: When ticked (and the application does not overwrite headers), unmatched Origins will be rejected by sending an empty response. For this example, tick this box.
</para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para>Click Save changes.</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="corssharewkspcurlexmp">
            <title>Example Usage with cURL</title>
            <section xml:id="corssharewkspcurlexmp1">
              <title>Example 1</title>
              <orderedlist>
                <listitem>
                  <para>Suppose the example setup above is performed, and http://demo.openlinksw.com/ is in the CORS list.</para>
                </listitem>
                <listitem>
                  <para>In this case, the request below will return an empty response:
</para>
                  <programlisting>
$ curl -i  http://demo.openlinksw.com/mytest/test.vsp
HTTP/1.1 200 OK
Server: Virtuoso/06.02.3128 (Win32) i686-generic-win-32  VDB
Connection: Keep-Alive
Content-Type: text/html; charset=ISO-8859-1
Date: Thu, 28 Oct 2010 09:27:54 GMT
Accept-Ranges: bytes
Content-Length: 0
</programlisting>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="corssharewkspcurlexmp2">
              <title>Example 2</title>
              <orderedlist>
                <listitem>
                  <para>Suppose the example Setup above is performed, and http://demo.openlinksw.com/ is in the CORS list.</para>
                </listitem>
                <listitem>
                  <para>Also, suppose the curl command includes a proper Origin value, e.g.:
</para>
                  <programlisting>
-H "Origin: http://demo.openlinksw.com"
</programlisting>
                </listitem>
                <listitem>
                  <para>In this case, the request below will return a response including the retrieved content, etc.
</para>
                  <programlisting>
$ curl -i -H "Origin: http://demo.openlinksw.com"  http://demo.openlinksw.com/mytest/test.vsp
HTTP/1.1 200 OK
Server: Virtuoso/06.02.3128 (Win32) i686-generic-win-32  VDB
Connection: Keep-Alive
Content-Type: text/html; charset=ISO-8859-1
Date: Thu, 28 Oct 2010 09:40:21 GMT
Access-Control-Allow-Origin: http://demo.openlinksw.com
Accept-Ranges: bytes
Content-Length: 7
</programlisting>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="corssharewkspcurlexmp3">
              <title>Example 3</title>
              <orderedlist>
                <listitem>
                  <para>Suppose the Example Setup above is performed, but reject is off (i.e., "Reject Unintended CORs" check-box is not ticked).</para>
                </listitem>
                <listitem>
                  <para>In this case, the request below will return a response that lacks Access-Control-Allow-Origin:
</para>
                  <programlisting>
$ curl -i  http://demo.openlinksw.com/mytest/test.vsp
HTTP/1.1 200 OK
Server: Virtuoso/06.02.3128 (Win32) i686-generic-win-32  VDB
Connection: Keep-Alive
Content-Type: text/html; charset=ISO-8859-1
Date: Thu, 28 Oct 2010 09:45:01 GMT
Accept-Ranges: bytes
Content-Length: 7
</programlisting>
                </listitem>
              </orderedlist>
              <tip>
                <title>See Also:</title>
                <para>
                  <link xlink:href="https://wiki.mozilla.org/Security/Origin">Origin header proposal for CSRF and click-jacking mitigation</link>
                </para>
                <para>
                  <link xlink:href="http://arunranga.com/examples/access-control/">CORS In Action</link>
                </para>
                <para>
                  <link xlink:href="http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/">Cross-domain Ajax with Cross-Origin Resource Sharing</link>
                </para>
                <para>
                  <link xlink:href="http://code.google.com/p/html5security/wiki/CrossOriginRequestSecurity">Guide to Secure Implementation of Cross Origin Requests in HTML5</link>
                </para>
              </tip>
            </section>
          </section>
        </section>
      </section>
    </section>
    <!-- ################### ~~~~~~~~~~ ################### -->

    <!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2020 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->

    <section xml:id="ldap_overview_01">
      <title>LDAP</title>
      <para>The Lightweight Directory Access Protocol (LDAP) is a protocol for
  accessing online directory services. It runs directly over TCP and can be
  used to access a standalone LDAP directory service or a directory service
  maintained by X.500. A directory is type of database that stores information
  that is read more often that written to and so services are typically
  geared for high volume read access and offer simpler  transaction
  support  than general purpose databases. The LDAP directory service model is based
  on entries. An entry is a collection of attributes that has a "distinguished
  name" (DN). The DN is used to refer to the entry unambiguously. Each of the
  entry's attributes has a type and one or more values. The types are typically
  mnemonic strings, like "cn" for common name, or "mail" for email address.
  The values depend on what type of attribute it is: an email attribute might
  contain the string value "foo@bar.org". A jpegPhoto attribute would contain
  a photograph in binary JPEG format.</para>
      <para>LDAP directory entries are arranged in a hierarchical tree-like
  structure that may reflect political, geographic and/or organizational
  boundaries. Hence, entries representing countries appear at the top of
  the tree, below them are entries representing states or national
  organizations, then, entries representing people, printers, documents,
  anything else...</para>
      <para>LDAP provides methods for authentication. Directories can be made
  accessible to the general public or protected however the case may be.</para>
      <para>LDAP is made for finding people and resources on a network. It provides
  a completely different functionality from web searches such as yahoo or
  webcrawler, which work simply by text matching and often return many thousand's
  of entries. Using an LDAP directory to locate something however, if you know
  the approximate location of where it is, such as what organization and country
  it is in, then you can do a search and return much fewer entries. LDAP is
  a vendor independent open protocol. The fact that organizations can alter it
  to their own needs is key. Also, large companies can use it as the basis for
  their own more complex directory servers.</para>
      <para>There are common misconceptions about the role of LDAP.
  LDAP is not intended as a replacement for local databases. They are not
  built to be added and modified too easily and thus would not work in a
  situation such as an airline reservation system. Also, LDAP is not meant
  to be a replacement for DNS. DNS is a specialized well used service on the
  Internet for matching IP addresses to real names. However databases and DNS
  and LDAP like most Internet services work very well in collaboration.</para>
      <para>Virtuoso has the ability to act as an LDAP client, using built-in
  functions, and has been tested as a back end for the OpenLDAP server.</para>
      <section xml:id="vldapclient">
        <title>LDAP Client</title>
        <para>Virtuoso provides four functions for accessing an LDAP Directory
  Service:</para>
        <simplelist type="vert">
          <member>
            <link linkend="fn_ldap_search">
              <function>ldap_search()</function>
            </link>
          </member>
          <member>
            <link linkend="fn_ldap_delete">
              <function>ldap_delete()</function>
            </link>
          </member>
          <member>
            <link linkend="fn_ldap_add">
              <function>ldap_add()</function>
            </link>
          </member>
          <member>
            <link linkend="fn_ldap_modify">
              <function>ldap_modify()</function>
            </link>
          </member>
        </simplelist>
        <para>You can call each function independently. Each
  invocation of a function creates a separate LDAP session which is closed at
  the end of the operation.</para>
        <para>URLs beginning with <programlisting>ldaps://</programlisting> invoke a
  non-conditional SSL operation. Such URLs cannot be used with the
  <parameter>try_tls</parameter>

   flag set. If the URL does not contain a
  port number then Virtuoso will use the default port number 389 for &lt;ldap://&gt;
  and port number 636 for &lt;ldaps://&gt;.</para>
        <para>The <parameter>username</parameter>

   and <parameter>password</parameter>

  optional parameters are used to bind LDAP connections using basic authentication.
  If the operation is permitted to all users then you can leave these parameters
  out.</para>
      </section>
      <section xml:id="openldapinstall">
        <title>LDAP Server</title>
        <para>Virtuoso is not an LDAP server but can easily provide a data
  back-end to one, such as OpenLDAP. This section explains how to incorporate
  OpenLDAP with Virtuoso on the Linux platform. For other platforms the
  installation of OpenLDAP and configuration of the ODBC data source may differ.</para>
        <orderedlist>
          <listitem>
            <para>download the OpenLDAP distribution from <link xlink:href="http://www.openldap.org">OpenLDAP.org</link>

  .</para>
          </listitem>
          <listitem>
            <para>Build OpenLDAP with the --enable-sql option.</para>
          </listitem>
          <listitem>
            <para>You may need the iODBC library installed, which can be obtained from <link xlink:href="http://www.iodbc.org">iODBC.org</link>

  .</para>
          </listitem>
          <listitem>
            <para>install the LDAP server using: make install</para>
          </listitem>
          <listitem>
            <para>copy the following text into the slapd.conf</para>
            <programlisting>
&gt;&gt;&gt;&gt;
include         /usr/local/etc/openldap/schema/core.schema

pidfile         /usr/local/var/slapd.pid
argsfile        /usr/local/var/slapd.args

database        sql
suffix          "c=BG"
rootdn          "cn=root,o=opl,c=US"
rootpw          secret
dbname          1111
dbuser          dba
dbpasswd        dba
subtree_cond    "UPPER(ldap_entries.dn) LIKE CONCAT('%',UPPER(?))"
upper_func      UPPER

access to attr=userPassword
  by self write
  by anonymous auth
  by dn="cn=root,o=opl,c=BG" write
  by * none

access to *
  by self write
  by anonymous auth
  by * read
&lt;&lt;&lt;&lt;
</programlisting>
          </listitem>
          <listitem>
            <para>Configure the ODBC data source named '1111' for your running Virtuoso server.</para>
          </listitem>
          <listitem>
            <para>Apply the virt_back.sql script against a running virtuoso server, for example with isql. </para>
          </listitem>
          <listitem>
            <para>If you can also apply the virt_testdb.sql to insert some demo schema and entries into the DB.</para>
          </listitem>
          <listitem>
            <para>Export ODBCINI variable: export ODBCINI=&lt;location of your odbc.ini&gt;.</para>
          </listitem>
          <listitem>
            <para>Start the slapd executable with debug option: 'slapd -d5' to ensure that all settings are correct.</para>
          </listitem>
        </orderedlist>
        <section xml:id="virtbacksql">
          <title>The virt_back.sql Script</title>
          <programlisting>
create table ldap_oc_mappings (
	id 		integer identity primary key,
	name 		varchar (64) not null,
	keytbl 		varchar (64) not null,
	keycol 		varchar (64) not null,
	create_proc 	varchar (255),
	delete_proc 	varchar (255),
	expect_return 	integer not null
);

create unique index ldap_oc_mappings_name on ldap_oc_mappings (name);

create table ldap_attr_mappings (
	id 		integer identity primary key,
	oc_map_id 	integer not null references ldap_oc_mappings(id),
	name 		varchar (255) not null,
	sel_expr 	varchar (255) not null,
	from_tbls 	varchar (255) not null,
	join_where 	varchar (255),
	add_proc 	varchar (255),
	modify_proc 	varchar (255),
	delete_proc 	varchar (255),
	param_order 	integer not null,
	expect_return 	integer not null
);

create table ldap_entries (
	id 		integer identity primary key,
	dn 		varchar (255) not null ,
	oc_map_id 	integer not null references ldap_oc_mappings(id),
	parent 		integer not null ,
	keyval 		integer not null
);

create unique index ldap_entries_oc_map_id_keyval on ldap_entries (oc_map_id, keyval);

create unique index ldap_entries_dn on ldap_entries (dn);

create table ldap_referrals
(
	entry_id 	integer not null references ldap_entries(id),
	url 		varchar not null
);

create index entry_idx on ldap_referrals(entry_id);

create table ldap_entry_objclasses
(
	entry_id 	integer not null references ldap_entries(id),
	oc_name 	varchar(64)
);

create index entry_idx_entry_id on ldap_entry_objclasses(entry_id);
</programlisting>
        </section>
        <section xml:id="virttestdbsql">
          <title>The virt_testdb.sql Script</title>
          <programlisting>
create table authors_docs (
	pers_id integer not null ,
	doc_id integer not null,
	primary key  (pers_id, doc_id)
);

create table documents (
	id integer identity not null ,
	abstract varchar (255) null ,
	title varchar (255) null ,
	body binary (255) null,
	primary key  (id)
);

create table institutes (
	id integer identity  not null ,
	name varchar (255) not null,
	primary key  (id)
);

create table persons (
	id integer identity  not null ,
	name varchar (255) null,
	sname varchar (255) null,
	email varchar (255) null,
	passw varchar (255) null,
	primary key  (id)

);

create table phones (
	id integer identity  not null ,
	phone varchar (255) not null ,
	pers_id integer not null,
	primary key  (id)

);

insert into institutes (id,name) values (1,'');
insert into institutes (id,name) values (2,'opl');

insert into persons (id,name,sname,email,passw)
  values (1,'Mitko Iliev', 'Iliev', 'imitko@openlinksw.com', 'abc');
insert into persons (id,name,sname,email,passw)
  values (2,'George Kodinov', 'Kodinov', 'gkodinov@openlinksw.com', 'cde');
insert into persons (id,name,sname,email,passw)
  values (3,'Zdravko Tashev', 'Tashev', 'ztashev@openlinksw.com', 'efg');

insert into phones (id,phone,pers_id) values (1,'032-947020',1);
insert into phones (id,phone,pers_id) values (2,'032-633710',1);
insert into phones (id,phone,pers_id) values (3,'032-947020',2);

insert into documents (id,abstract,title) values (1,'abstract1','book1');
insert into documents (id,abstract,title) values (2,'abstract2','book2');

insert into authors_docs (pers_id,doc_id) values (1,1);
insert into authors_docs (pers_id,doc_id) values (1,2);
insert into authors_docs (pers_id,doc_id) values (2,1);

-- LDAP mappings
insert into ldap_oc_mappings (id,name,keytbl,keycol,create_proc,delete_proc,expect_return)
  values (1,'inetorgperson','persons','id','{call create_person(?)}','{call delete_person(?)}',0);

insert into ldap_oc_mappings (id,name,keytbl,keycol,create_proc,delete_proc,expect_return)
  values (2,'document','documents','id','{call create_document(?)}','{call delete_document(?)}',0);

insert into ldap_oc_mappings (id,name,keytbl,keycol,create_proc,delete_proc,expect_return)
  values (3,'organization','institutes','id','{call create_org(?)}','{call delete_org(?)}',0);

insert into ldap_attr_mappings
    (id, oc_map_id, name, sel_expr, from_tbls, join_where, add_proc,
		modify_proc, delete_proc, param_order, expect_return)
  values (1,1,'cn','persons.name','persons',NULL,'{call set_person_name(?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id, oc_map_id, name, sel_expr, from_tbls, join_where, add_proc,
    modify_proc, delete_proc, param_order, expect_return)
  values (2,1,'telephoneNumber','phones.phone','persons,phones', 'phones.pers_id=persons.id',
	  '{call add_phone(?,?)}', NULL,'{call delete_phone(?,?)}',0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (3,1,'sn','persons.sname','persons',NULL,
	  '{call set_person_sname(?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (10,1,'mail','persons.email','persons',NULL,
	  '{call set_email(?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (10,1,'userPassword','persons.passw','persons',NULL,
	  '{call set_pwd (?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (4,2,'description','documents.abstract','documents',NULL,
	  '{call set_doc_abstract(?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (5,2,'documentTitle','documents.title','documents',NULL,
	  '{call set_doc_title(?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (7,3,'o','institutes.name','institutes',NULL,
	  '{call set_org_name(?,?)}', NULL,NULL,0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (8,1,'documentDN','ldap_entries.dn','ldap_entries,documents,authors_docs,persons',
	  'ldap_entries.keyval=documents.id AND ldap_entries.oc_map_id=2 AND
		authors_docs.doc_id=documents.id AND authors_docs.pers_id=persons.id',
		'{call make_doc_link(?,?)}',NULL,'{call del_doc_link(?,?)}',0,0);

insert into ldap_attr_mappings
    (id,oc_map_id,name,sel_expr,from_tbls,join_where,add_proc,modify_proc,
    delete_proc,param_order,expect_return)
  values (9,2,'documentAuthor','ldap_entries.dn','ldap_entries,documents,
	  authors_docs,persons','ldap_entries.keyval=persons.id AND ldap_entries.oc_map_id=1
		AND authors_docs.doc_id=documents.id AND authors_docs.pers_id=persons.id',
		'{call make_author_link(?,?)}',NULL,'{call del_author_link(?,?)}',0,0);

-- entries
insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (1,'c=US',3,0,1);

insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (2,'o=opl,c=US',3,1,2);

insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (3,'cn=Mitko Iliev,o=opl,c=US',1,2,1);

insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (4,'cn=George Kodinov,o=opl,c=US',1,2,2);

insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (5,'cn=Zdravko Tashev,o=opl,c=US',1,2,3);

insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (6,'documentTitle=book1,o=opl,c=US',2,2,1);

insert into ldap_entries (id,dn,oc_map_id,parent,keyval)
values (7,'documentTitle=book2,o=opl,c=US',2,2,2);

-- testDB support procedures

CREATE PROCEDURE add_phone (in _pers_id int, in _phone varchar(255))
{
  INSERT INTO phones (pers_id,phone) VALUES (_pers_id,_phone);
};

CREATE PROCEDURE create_person (inout _keyval integer)
{
  INSERT INTO persons (name) VALUES ('');
  _keyval := (SELECT MAX(id) FROM persons);
};

CREATE PROCEDURE delete_person (in _keyval integer)
{
  DELETE FROM phones WHERE pers_id=_keyval;
  DELETE FROM authors_docs WHERE pers_id=_keyval;
  DELETE FROM persons WHERE id=_keyval;
};

CREATE PROCEDURE create_org (out _keyval integer)
{
  INSERT INTO institutes (name) VALUES ('');
  _keyval:=(SELECT MAX(id) FROM institutes);
};

CREATE PROCEDURE create_document (out _keyval integer)
{
  INSERT INTO documents (title) VALUES ('');
  _keyval:=(SELECT MAX(id) FROM documents);
};

CREATE PROCEDURE delete_org (in _keyval integer)
{
  DELETE FROM institutes WHERE id=_keyval;
};

CREATE PROCEDURE delete_document (in _keyval integer)
{
  DELETE FROM authors_docs WHERE doc_id=_keyval;
  DELETE FROM documents WHERE id=_keyval;
};

CREATE PROCEDURE delete_phone (in _keyval integer, in _phone varchar(64) )
{
  DELETE FROM phones WHERE pers_id=_keyval AND phone=_phone;
};

CREATE PROCEDURE set_person_name (in _keyval integer, in _new_name varchar(255))
{
  UPDATE persons SET name=_new_name WHERE id=_keyval;
};

CREATE PROCEDURE set_person_sname (in _keyval integer, in _new_name varchar(255))
{
  UPDATE persons SET sname=_new_name WHERE id=_keyval;
};

CREATE PROCEDURE set_email (in _keyval integer, in _mail varchar(255))
{
  UPDATE persons SET email=_mail WHERE id=_keyval;
};

CREATE PROCEDURE set_pwd (in _keyval integer, in _mail varchar(255))
{
  UPDATE persons SET passw=_mail WHERE id=_keyval;
};

CREATE PROCEDURE set_org_name (in _keyval integer, in _new_name varchar(255))
{
  UPDATE institutes SET name=_new_name WHERE id=_keyval;
};

CREATE PROCEDURE set_doc_title ( in _keyval integer, in _new_title varchar(255)  )
{
  UPDATE documents SET title=_new_title WHERE id=_keyval;
};

CREATE PROCEDURE set_doc_abstract (in _keyval integer, in _new_abstract varchar(255)  )
{
  UPDATE documents SET abstract=_new_abstract WHERE id=_keyval;
};

CREATE PROCEDURE make_author_link (in _keyval integer, in _author_dn varchar(255)  )
{
  DECLARE _per_id integer;
  _per_id := (SELECT keyval FROM ldap_entries
      WHERE oc_map_id=1 AND dn=_author_dn);
  IF (_per_id IS NOT NULL)
      INSERT INTO authors_docs (doc_id,pers_id) VALUES (_keyval,_per_id);
};

CREATE PROCEDURE make_doc_link (in _keyval integer, in _doc_dn varchar(255)  )
{
  DECLARE _doc_id integer;
  _doc_id := (SELECT keyval FROM ldap_entries
      WHERE oc_map_id=2 AND dn=_doc_dn);
  IF (_doc_id IS NOT NULL)
      INSERT INTO authors_docs (pers_id,doc_id) VALUES (_keyval,_doc_id);
};

CREATE PROCEDURE del_doc_link (in _keyval integer, in _doc_dn varchar(255)  )
{
  DECLARE _doc_id integer;
_doc_id := (SELECT keyval FROM ldap_entries
      WHERE oc_map_id=2 AND dn=_doc_dn);
  IF (_doc_id IS  NOT NULL)
      DELETE FROM authors_docs WHERE pers_id=_keyval AND doc_id=_doc_id;
};

CREATE PROCEDURE del_author_link (in _keyval integer, in _author_dn varchar(255)  )
{
  DECLARE _per_id integer;
  _per_id := (SELECT keyval FROM ldap_entries
      WHERE oc_map_id=1 AND dn=_author_dn);
  IF (_per_id IS NOT NULL)
      DELETE FROM authors_docs WHERE doc_id=_keyval AND pers_id=_per_id;
};
</programlisting>
        </section>
      </section>
    </section>
  </chapter>
