<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vcrvirtuosocommandclass">
          <title>VirtuosoCommand Class</title>
          <para>Represents an SQL statement or stored procedure to execute against a Virtuoso database.
This class cannot be inherited.</para>
          <figure xml:id="virtprovider001" floatstyle="0">
            <title>Virtuoso .Net Provider VirtuosoCommand Class</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="VirtProviderClassHier.jpg"/>
              </imageobject>
            </mediaobject>
          </figure>
          <!--simplelist type="vert">
	  <member>System.Object</member>
	  <member>&nbsp;&nbsp;&nbsp;System.MarshalByRefObject</member>
	  <member>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.ComponentModel.Component</member>
	  <member>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VirtuosoCommand</member>
	</simplelist-->

          <classsynopsis class="class">
            <ooclass>
              <modifier>public</modifier>
              <modifier>sealed</modifier>
              <modifier>class</modifier>
              <classname>VirtuosoCommand</classname>
            </ooclass>
            <ooclass>
              <classname>Component</classname>
            </ooclass>
            <oointerface>
              <interfacename>ICloneable</interfacename>
            </oointerface>
            <oointerface>
              <interfacename>IDbCommand</interfacename>
            </oointerface>
          </classsynopsis>
          <section>
            <title>Thread Safety</title>
            <para>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations.
Any instance members are not guaranteed to be thread safe.</para>
          </section>
          <section>
            <title>Remarks</title>
            <para>The VirtuosoCommand class provides the following methods for executing
commands against a Virtuoso database:</para>
            <table>
              <title/>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Item</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>ExecuteReader</entry>
                    <entry>Executes commands that return rows.</entry>
                  </row>
                  <row>
                    <entry>ExecuteNonQuery</entry>
                    <entry>Executes commands such as SQL INSERT, DELETE, UPDATE, and SET statements.</entry>
                  </row>
                  <row>
                    <entry>ExecuteScalar</entry>
                    <entry>Retrieves a single value (for example, an aggregate value) from a database.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </section>
          <section>
            <title>VirtuosoCommand Constructor</title>
            <para>Initializes a new instance of the VirtuosoCommand class.</para>
            <section>
              <title>VirtuosoCommand Constructor ()</title>
              <para>Initializes a new instance of the VirtuosoCommand class.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoCommand</methodname>
                <void/>
              </constructorsynopsis>
              <section>
                <title>Remarks</title>
                <para>The base constructor initializes all fields to their default values.
The following table shows initial property values for an instance of VirtuosoCommand.</para>
                <table>
                  <title/>
                  <tgroup cols="2">
                    <thead>
                      <row>
                        <entry>Properties</entry>
                        <entry>Initial Value</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>CommandText</entry>
                        <entry>empty string ("")</entry>
                      </row>
                      <row>
                        <entry>CommandTimeout</entry>
                        <entry>30</entry>
                      </row>
                      <row>
                        <entry>CommandType</entry>
                        <entry>CommandType.Text</entry>
                      </row>
                      <row>
                        <entry>Connection</entry>
                        <entry>null</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
                <para>You can change the value for any of these properties through a separate call to the property.</para>
              </section>
            </section>
            <section>
              <title>VirtuosoCommand Constructor (string)</title>
              <para>Initializes a new instance of the VirtuosoCommand class with the text of the query.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoCommand</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>string</type>
                  <parameter>cmdText</parameter>
                </methodparam>
              </constructorsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>cmdText</term>
                    <listitem>
                      <para>
		    The text of the query.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
            </section>
            <section>
              <title>VirtuosoCommand Constructor (string, VirtuosoConnection)</title>
              <para>Initializes a new instance of the VirtuosoCommand class with the text of the query and
an VirtuosoConnection object.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoCommand</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>string</type>
                  <parameter>cmdText</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>VirtuosoConnection</type>
                  <parameter>connection</parameter>
                </methodparam>
              </constructorsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>cmdText</term>
                    <listitem>
                      <para>
		    The text of the query.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>connection</term>
                    <listitem>
                      <para>
		    A VirtuosoConnection object that represents the connection to a Virtuoso database.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
            </section>
            <section>
              <title>ConnectionString Property</title>
              <para>The Virtuoso ADO.NET Provider ConnectionString property implements the
	    IDbConnection.ConnectionString property to get or set the string used to open a Virtuoso
	    database connection, and includes the source database name and other parameters needed to
	    establish the initial connection. The default value is an empty string.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <varname>ConnectionString</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>Includes the source database name and other parameters needed to establish the
	      initial connection. The default value is an empty string.</para>
                <para>ConnectionString has the following syntax: Each connection string is a sequence of settings
	      Individual settings are separated by semicolons. Each setting is a pair of name and value delimited
	      by the equal sign. Whitespace is ignored on either side of both names and values. Names are case
	      insensitive. The value part can be quoted by either single or double quote characters or remain
	      unquoted at all. However if it includes a semicolon, single quote, or double quote characters,
	      it must be enclosed in either type of quotes. To embed the same character that is used for
	      enclosing the value the character within the value must be doubled.</para>
                <para>The following table lists the valid names for values within the ConnectionString:</para>
                <table>
                  <title/>
                  <tgroup cols="3">
                    <thead>
                      <row>
                        <entry>Name</entry>
                        <entry>Default</entry>
                        <entry>Description</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>Connect Timeout or Connection Timeout</entry>
                        <entry>15</entry>
                        <entry>The number of seconds to wait for a connection to the server before terminating the attempt and generating an error.</entry>
                      </row>
                      <row>
                        <entry>Connection Lifetime</entry>
                        <entry>0</entry>
                        <entry>When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by connection lifetime. Useful in clustered configurations to force load balancing between a running server and a server just brought on-line.</entry>
                      </row>
                      <row>
                        <entry>Charset</entry>
                        <entry>utf-16</entry>
                        <entry>Specifies the character set to be used by the provider when passing string values to and from the database. Must be set to utf-8 to handle Unicode strings passed in SPARQL/SPASQL queries of RDF data.</entry>
                      </row>
                      <row>
                        <entry>Data Source or Server or Address or Network Address or Host</entry>
                        <entry/>
                        <entry>The name or network address of the instance of Virtuoso server to which to connect. Can take comma delimited list of instances for connection fail over.</entry>
                      </row>
                      <row>
                        <entry>Encrypt</entry>
                        <entry>false</entry>
                        <entry>Specifies if the connection must be SSL encrypted. Currently encryption only works with an ODBC-based provider.</entry>
                      </row>
                      <row>
                        <entry>Enlist</entry>
                        <entry>true</entry>
                        <entry>When true, the pooler automatically enlists the connection in the creation thread's current transaction context.</entry>
                      </row>
                      <row>
                        <entry>Initial Catalog or Database</entry>
                        <entry/>
                        <entry>The name of the database.</entry>
                      </row>
                      <row>
                        <entry>Max Pool Size</entry>
                        <entry>100</entry>
                        <entry>The maximum number of connections allowed in the pool.</entry>
                      </row>
                      <row>
                        <entry>Min Pool Size</entry>
                        <entry>0</entry>
                        <entry>The minimum number of connections allowed in the pool.</entry>
                      </row>
                      <row>
                        <entry>Password or Pwd</entry>
                        <entry/>
                        <entry>The password for the Virtuoso account logging on. </entry>
                      </row>
                      <row>
                        <entry>Persist Security Info</entry>
                        <entry>false</entry>
                        <entry>When set to 'false', security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open State. Resetting the connection string resets all connection string values including the password.</entry>
                      </row>
                      <row>
                        <entry>Pooling</entry>
                        <entry>true</entry>
                        <entry>	When true, the VirtuosoConnection object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.</entry>
                      </row>
                      <row>
                        <entry>RoundRobin</entry>
                        <entry>false</entry>
                        <entry>Enables load balancing in which case the server for the connection is chosen at random from the comma delimited provided as for a Failover connection.</entry>
                      </row>
                      <row>
                        <entry>User ID or Uid</entry>
                        <entry/>
                        <entry>The Virtuoso login name.</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.ConnectionString</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The <emphasis>ConnectionString</emphasis>

   is similar to an OLE DB connection string, but
	       is not identical. Unlike OLE DB or ADO, the connection string that is returned is the same as the
	       user set <emphasis>ConnectionString</emphasis>

   minus security information if the
	       <emphasis>Persist Security Info</emphasis>

   value is set to <emphasis>false</emphasis>

   (default).
	       The Virtuoso ADO.NET Data Provider neither persists nor returns the password in a connection
	       string unless you set <emphasis>Persist Security Info</emphasis>

   to true.</para>
                <para>The <emphasis>ConnectionString</emphasis>

   property can be set only when the connection is
	       closed. Many of the connection string values have corresponding read-only properties. When the
	       connection string is set, all of these properties are updated, except when an error is detected;
	       in this case, none of the properties are updated. <emphasis>VirtuosoConnection</emphasis>

	       properties return only those settings contained in the <emphasis>ConnectionString</emphasis>

  .</para>
                <para>Resetting the <emphasis>ConnectionString</emphasis>

   on a closed connection resets all
	       connection string values (and related properties) including the password. For example, if you set a
	       connection string that includes "<emphasis>Database=Demo</emphasis>

  ", and then reset the connection
	       string to "<emphasis>Data Source=myserver;User ID=dba;Password=dba</emphasis>

  ", the Database
	       property is no longer set to <emphasis>Demo</emphasis>

  .</para>
                <para>The connection string is parsed immediately after being set. If errors in syntax are found
	       when parsing, a runtime exception (e.g., <emphasis>ArgumentException</emphasis>

  ) is generated.
	       Other errors can be found only when an attempt is made to open the connection.</para>
              </section>
            </section>
            <section>
              <title>VirtuosoCommand Constructor (string, VirtuosoConnection, VirtuosoTransaction)</title>
              <para>Initializes a new instance of the VirtuosoCommand class with the text of the query,
an VirtuosoConnection object, and the VirtuosoTransaction.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoCommand</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>string</type>
                  <parameter>cmdText</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>VirtuosoConnection</type>
                  <parameter>connection</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>VirtuosoTransaction</type>
                  <parameter>transaction</parameter>
                </methodparam>
              </constructorsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>cmdText</term>
                    <listitem>
                      <para>
		    The text of the query.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>connection</term>
                    <listitem>
                      <para>
		    A VirtuosoConnection object that represents the connection to a Virtuoso database.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>transaction</term>
                    <listitem>
                      <para>
		    The VirtuosoTransaction in which the VirtuosoCommand executes.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
            </section>
          </section>
          <section>
            <title>Properties</title>
            <section>
              <title>CommandText Property</title>
              <para>Gets or sets the SQL statement or stored procedure to execute against the Virtuoso database.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <varname>CommandText</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The SQL statement or stored procedure to execute. The default value is an empty string ("").</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.CommandText</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>When the CommandType property is set to StoredProcedure, the CommandText property
should be set using standard ODBC stored procedure escape sequences. Setting the CommandText to the name
of the stored procedure does not function as it does for some other .NET data providers.</para>
                <para>The Virtuoso .NET Data Provider does not support named parameters for passing parameters
to a SQL statement or a stored procedure called by an OleDbCommand when CommandType is set to Text. In this case,
the question mark (?) placeholder must be used. For example:</para>
                <informalexample>
                  <programlisting>SELECT * FROM Customers WHERE CustomerID = ?</programlisting>
                </informalexample>
                <para>As a result, the order in which VirtuosoParameter objects are added to the
VirtuosoParameterCollection must directly correspond to the position of the question mark placeholder
for the parameter.</para>
              </section>
            </section>
            <section>
              <title>CommandTimeout Property</title>
              <para>Gets or sets the wait time before terminating an attempt to execute a command and generating
an error.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <varname>CommandTimeout</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The time (in seconds) to wait for the command to execute. The default is 30 seconds.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.CommandTimeout</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>A value of zero (0) specifies no limit to the wait time, rather than no wait time, and
therefore should be avoided.</para>
              </section>
            </section>
            <section>
              <title>CommandType Property</title>
              <para>Gets or sets a value indicating how the CommandText property is interpreted.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>CommandType</type>
                <varname>CommandType</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>One of the System.Data.CommandType values. The default is Text.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.CommandType</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>When the CommandType property is set to StoredProcedure, you should set the CommandText
property to the full ODBC call syntax. The command then executes this stored procedure when you call one of
the Execute methods (for example, ExecuteReader or ExecuteNonQuery).</para>
                <para>The Connection, CommandType and CommandText properties cannot be set if the current
connection is performing an execute or fetch operation.</para>
                <para>The Virtuoso .NET Data Provider does not support passing named parameters to an SQL
statement or to a stored procedure called by a VirtuosoCommand. In either of these cases, use the question
mark (?) placeholder. For example:</para>
                <informalexample>
                  <programlisting>SELECT * FROM Customers WHERE CustomerID = ?</programlisting>
                </informalexample>
                <para>The order in which VirtuosoParameter objects are added to the VirtuosoParameterCollection
must directly correspond to the position of the question mark placeholder for the parameter.</para>
              </section>
            </section>
            <section>
              <title>Connection Property</title>
              <para>Gets or sets the VirtuosoConnection used by this instance of the VirtuosoCommand.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoConnection</type>
                <varname>Connection</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The connection to a Virtuoso database. The default is a null value.</para>
              </section>
            </section>
            <section>
              <title>Parameters Property</title>
              <para>Gets the VirtuosoParameterCollection.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoParameterCollection</type>
                <varname>Connection</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The parameters of the SQL statement or stored procedure. The default is an empty collection.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>When CommandType is set to Text, the Virtuoso .NET Data Provider does not support passing named
parameters to an SQL statement or to a stored procedure called by an VirtuosoCommand. In either of these cases, use
the question mark (?) placeholder. For example:</para>
                <informalexample>
                  <programlisting>SELECT * FROM Customers WHERE CustomerID = ?</programlisting>
                </informalexample>
                <para>The order in which VirtuosoParameter objects are added to the VirtuosoParameterCollection must
directly correspond to the position of the question mark placeholder for the parameter in the command text.</para>
                <note>
                  <title>Note:</title>
                  <para>

		If the parameters in the collection do not match the requirements of the query to be executed,
		an error may result.</para>
                </note>
              </section>
            </section>
            <section>
              <title>Transaction Property</title>
              <para>Gets or sets the VirtuosoTransaction within which the VirtuosoCommand executes.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoTransaction</type>
                <varname>Transaction</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>A VirtuosoTransaction. The default is a null value.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>You cannot set the Transaction property if it is already set to a specific value,
and the command is in the process of executing. If you set the transaction property to an
VirtuosoTransaction object that is not connected to the same VirtuosoConnection as the VirtuosoCommand object,
an exception will be thrown the next time you attempt to execute a statement.</para>
              </section>
            </section>
            <section>
              <title>UpdatedRowSource Property</title>
              <para>Gets or sets how command results are applied to the DataRow when used by the Update method
of the DbDataAdapter.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>UpdateRowSource</type>
                <varname>UpdatedRowSource</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>One of the System.Data.UpdateRowSource values.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.UpdatedRowSource</para>
              </section>
            </section>
          </section>
          <section>
            <title>Methods</title>
            <section>
              <title>Cancel Method</title>
              <para>Attempts to cancel the execution of an VirtuosoCommand.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Cancel</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>Implements</title>
              <para>IDbCommand.Cancel</para>
            </section>
            <section>
              <title>Remarks</title>
              <para>If there is nothing to cancel, nothing happens. However, if there is a command in process,
and the attempt to cancel fails, no exception is generated.</para>
            </section>
            <section>
              <title>CreateParameter Method</title>
              <para>Creates a new instance of a VirtuosoParameter object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoParameter</type>
                <methodname>CreateParameter</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>A VirtuosoParameter object.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The CreateParameter method is a strongly-typed version of IDbCommand.CreateParameter.</para>
              </section>
            </section>
            <section>
              <title>ExecuteNonQuery Method</title>
              <para>Executes an SQL statement against the Connection and returns the number of rows affected.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <methodname>ExecuteNonQuery</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows
affected by the command. For all other types of statements, the return value is -1.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.ExecuteNonQuery</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>You can use ExecuteNonQuery to perform catalog operations (for example, querying the structure
of a database or creating database objects such as tables); or to change the data in a database, without using a
DataSet, by executing UPDATE, INSERT, or DELETE statements.</para>
                <para>Although ExecuteNonQuery does not return any rows, any output parameters or return values mapped
to parameters are populated with data.</para>
              </section>
            </section>
            <section>
              <title>ExecuteReader Method</title>
              <para>Sends the CommandText to the Connection and builds a VirtuosoDataReader.</para>
              <section>
                <title>ExecuteReader Method ()</title>
                <para>Sends the CommandText to the Connection and builds a VirtuosoDataReader.</para>
                <methodsynopsis>
                  <modifier>public</modifier>
                  <type>VirtuosoDataReader</type>
                  <methodname>ExecuteReader</methodname>
                  <void/>
                </methodsynopsis>
                <section>
                  <title>Return Value</title>
                  <para>A VirtuosoDataReader object.</para>
                </section>
              </section>
              <section>
                <title>ExecuteReader Method (CommandBehavior)</title>
                <para>Sends the CommandText to the Connection and builds a VirtuosoDataReader using
one of the CommandBehavior values.</para>
                <methodsynopsis>
                  <modifier>public</modifier>
                  <type>VirtuosoDataReader</type>
                  <methodname>ExecuteReader</methodname>
                  <methodparam choice="req" rep="norepeat">
                    <type>CommandBehavior</type>
                    <parameter>behavior</parameter>
                  </methodparam>
                </methodsynopsis>
                <section>
                  <title>Parameters</title>
                  <variablelist>
                    <varlistentry>
                      <term>behavior</term>
                      <listitem>
                        <para>
		      One of the System.Data.CommandBehavior values.
		    </para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </section>
                <section>
                  <title>Return Value</title>
                  <para>A VirtuosoDataReader object.</para>
                </section>
              </section>
            </section>
            <section>
              <title>ExecuteScalar Method</title>
              <para>Executes the query, and returns the first column of the first row in the resultset
returned by the query. Extra columns or rows are ignored.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>object</type>
                <methodname>ExecuteScalar</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>The first column of the first row in the resultset.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbCommand.ExecuteScalar</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value)
from a database. This requires less code than using the ExecuteReader method, and then performing the operations
necessary to generate the single value using the data returned by a VirtuosoDataReader.</para>
                <para>A typical ExecuteScalar query can be formatted as in the following C# example:</para>
                <informalexample>
                  <programlisting>
command.CommandText = "select count(*) from foobar";
int count = (int) command.ExecuteScalar();
</programlisting>
                </informalexample>
              </section>
            </section>
            <section>
              <title>ICloneable.Clone Method</title>
              <para>This member supports the .NET Framework infrastructure and is not intended to be used directly
from your code.</para>
              <methodsynopsis>
                <type>object</type>
                <methodname>ICloneable.Clone</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>IDbCommand.CreateParameter Method</title>
              <para>This member supports the .NET Framework infrastructure and is not intended to be used directly
from your code.</para>
              <methodsynopsis>
                <type>IDbDataParameter</type>
                <methodname>IDbCommand.CreateParameter</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>IDbCommand.ExecuteReader Method</title>
              <para>This member supports the .NET Framework infrastructure and is not intended to be used directly
from your code.</para>
              <section>
                <title>IDbCommand.ExecuteReader Method ()</title>
                <para>This member supports the .NET Framework infrastructure and is not intended to be used directly
from your code.</para>
                <methodsynopsis>
                  <type>IDataReader</type>
                  <methodname>IDbCommand.ExecuteReader</methodname>
                  <void/>
                </methodsynopsis>
              </section>
              <section>
                <title>IDbCommand.ExecuteReader Method (CommandBehavior)</title>
                <para>This member supports the .NET Framework infrastructure and is not intended to be used directly
from your code.</para>
                <methodsynopsis>
                  <type>IDataReader</type>
                  <methodname>IDbCommand.ExecuteReader</methodname>
                  <methodparam choice="req" rep="norepeat">
                    <type>CommandBehavior</type>
                    <parameter>behavior</parameter>
                  </methodparam>
                </methodsynopsis>
              </section>
            </section>
            <section>
              <title>Prepare Method</title>
              <para>Creates a prepared (or compiled) version of the command at the Virtuoso server.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Prepare</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDbCommand.Prepare</para>
              </section>
            </section>
          </section>
        </section>
