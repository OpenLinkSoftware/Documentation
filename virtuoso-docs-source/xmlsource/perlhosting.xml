<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="perlhosting">
      <title>Perl Hosting</title>
      <para>Virtuoso functionality can be enhanced through external libraries by
loading shared objects or DLLs.  The new functions are written in a language of the developer's
choice and compiled to produce a shared library appropriate to the operating
system.  The path to the shared library must be declared in the Virtuoso INI
file and the server restarted before it can be used.</para>
      <para>The Perl language is hosted within Virtuoso in this way.  hosting_perl.so
is the library used.</para>
      <para>The Virtuoso INI file uses a [Plugins] configuration section for listing
shared libraries for the server to load upon startup.  An example of this is:</para>
      <programlisting>
[Plugins]
LoadPath = /home/virtuoso/hosting
Load1 = Hosting, hosting_perl.so
..
</programlisting>
      <para>The "Hosting" type defines the entry points for initialization of the runtime
hosting environment, destruction of the user environment and execution of a
file or string containing commands in the hosted language.  It also returns a
list of file extensions that it is capable of processing.  Virtuoso
dynamically defines memory-resident (no disk image) HTTP server handlers for
each specified type. </para>
      <para>The Perl hosting plugin supports 'pl' extension.  Hence, upon
initialization of the hosting plugin, Virtuoso defines the
<function>__http_handler_pl(..)</function>

    function according to the API for
file type handlers in the Virtuoso HTTP server.  With this handler in place,
each hit on a .pl file (file system or WebDAV) with appropriate execute
permissions will cause the HTTP server to execute the code within it and return
the result instead of simply the file's contents.</para>
      <para>The handler will call the __hosting_http_handler VSE with a special set
of parameters to represent the HTTP environment correctly.</para>
      <para>Virtuoso will normally call the plugin to memory as required, and expel
it when finished.  This behavior can be controlled by the INI file parameter:</para>
      <programlisting>
[HTTPServer]
PersistentHostingModules = 1/0 default 0
</programlisting>
      <para>Setting <computeroutput>PersistentHostingModules</computeroutput>

   to "1"
prevents Virtuoso from removing the interpreters from the HTTP threads after
each request.</para>
      <tip>
        <title>See Also:</title>
        <para>
          <link linkend="vseplugins">VSEI Plugins</link>
        </para>
      </tip>
      <example xml:id="ex_hostingsharedobjects">
        <title>Using the Perl Plugin</title>
        <para>Executing Perl code directly:</para>
        <programlisting>
select __hosting_http_handler ('pl', 'print "hello world"; ', '', vector (), 'helloworld.pl');
</programlisting>
        <programlisting>
returns : hello world
</programlisting>
        <para>Executing a perl script file (perl/test_print.pl in the Virtuoso
working directory):</para>
        <programlisting>
/perl/test_print.pl
-------------------
#!/usr/bin/perl
print "hello world file";
</programlisting>
        <programlisting>
select __hosting_http_handler ('pl', 'perl/test_print.pl');
</programlisting>
        <programlisting>
returns : hello world file
</programlisting>
      </example>
      <note>
        <title>Note:</title>
        <para>The hosting_perl hosting module uses the perl <function>tie()</function>

  function to "tie" up the STDIN, STDOUT, STDERR, exit()  and %ENV perl objects.
  Untying any of these may lead to unpredictable results.</para>
      </note>
    </section>
