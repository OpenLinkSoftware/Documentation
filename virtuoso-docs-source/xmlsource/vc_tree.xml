<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vc_tree">
          <refmeta>
            <refentrytitle>tree</refentrytitle>
            <refmiscinfo>vspx_control</refmiscinfo>
          </refmeta>
          <refnamediv>
            <refname>tree</refname>
            <refpurpose>A container for displaying a tree of nested nodes.</refpurpose>
          </refnamediv>
          <refsynopsisdiv>
            <funcsynopsis xml:id="vc_syn_tree">
              <funcprototype xml:id="vc_proto_tree">
                <funcdef>
            &lt;<function>tree</function>

 /&gt;</funcdef>
                <paramdef choice="req"><parameter>name</parameter>

   (required) </paramdef>
                <paramdef choice="opt"><parameter>annotation</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>initial-enable</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>enabled</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>instantiate</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>control-udt</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>xsd-stub-xhtml</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>width</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>height</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>show-root</parameter>

   (optional) </paramdef>
                <paramdef choice="req"><parameter>multi-branch</parameter>

   (required) </paramdef>
                <paramdef choice="req"><parameter>orientation</parameter>

   (required) </paramdef>
                <paramdef choice="req"><parameter>root</parameter>

   (required) </paramdef>
                <paramdef choice="req"><parameter>child-function</parameter>

   (required) </paramdef>
                <paramdef choice="req"><parameter>start-path</parameter>

   (required) </paramdef>
                <paramdef choice="opt"><parameter>open-at</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-srcfile</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-srcline</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-log</parameter>

   (optional) </paramdef>
              </funcprototype>
            </funcsynopsis>
          </refsynopsisdiv>
          <refsect1 xml:id="vc_desc_tree">
            <title>Description</title>
            <para>
               This can be used for hierarchical tables of contents,
    directory browsing, hierarchical menus and such.
    The tree can have either one or more branches open at any time, up to
    the leaves.  The tree has a root, which may or may not be visible.
    The contents of the tree can either be fixed, in which case these are an
    XML tree, or dynamic, in which case these are generated level by level
    by SQL functions attached to the tree. The tree can have various external appearences. 
               The tree is represented at run time by a vspx_tree instance.
    Nodes of the tree are represented by vspx_tree_node objects,
    which are childs of the vspx_tree.  The nodes hold an identifier (vc_instance_name)
    of the corresponding tree branch, which is used to retrieve children of the node.
    These also hold a flag (tn_open member) indicating if the node is open or not. 
            </para>
          </refsect1>
          <refsect1 xml:id="vc_attrs_tree">
            <title>Attributes</title>
            <formalpara>
              <title>name = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>A page level unique name identifying a control.</para>
            </formalpara>
            <formalpara>
              <title>annotation</title>
              <para>A human readable comment.</para>
            </formalpara>
            <formalpara>
              <title>initial-enable = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines  whether  a control is initially visible. True by default. Could be data-bound to an SQL expression.</para>
            </formalpara>
            <formalpara>
              <title>enabled = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines  whether  a control is visible. True by default. Could be data-bound to an SQL expression.</para>
            </formalpara>
            <formalpara>
              <title>instantiate = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines whether a control instantiate its children. It is true by default. It could be data-bound to an SQL expression. Unlike most of calcucateable attributes, the value of this attribute for a control is calcluated before calling 'on-init' event handler of the control; other values are calculated before calling 'before-data-bind' event handler.</para>
            </formalpara>
            <formalpara>
              <title>control-udt = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>At run time every control is represented as an instance of some user-defined type (UDT). VSPX compiles selects the UDT to use depending on name of the XML element that represents the control and maybe some of its attributes. In some specific cases the application developer may instruct VSPX compiler to use some other UDT, e.g. an application-specific UDT that is derived from the preset one. If specified, the value of 'control-udt' attribute should be equal to the name of the desired target UDT.</para>
            </formalpara>
            <formalpara>
              <title>xsd-stub-xhtml</title>
              <para>This attribute is for internal use only. It has no effect if added to the source VSPX file.</para>
            </formalpara>
            <formalpara>
              <title>width</title>
              <para>Visible width of the control when it is displayed in WYSIWYG tools when the source VSPX text is edited.
The value of this attribute will not be used when the resulting HTML is rendered.</para>
            </formalpara>
            <formalpara>
              <title>height</title>
              <para>Visible width of the control when it is displayed in WYSIWYG tools when the source VSPX text is edited.
The value of this attribute will not be used when the resulting HTML is rendered.</para>
            </formalpara>
            <formalpara>
              <title>show-root</title>
              <para>This attribute is obsolete and has no effect.</para>
            </formalpara>
            <formalpara>
              <title>multi-branch</title>
              <para>
This determines whether more than one branches can be open at one time.
The values are 0 and 1 (true and false).  The default is 0 (false).
			   </para>
            </formalpara>
            <formalpara>
              <title>orientation</title>
              <para>
      This can be 'horizontal' or 'vertical', the default is 'vertical'.
      The tree can have different styles.  The default is a vertical arrangement
      with open levels indented, the children under the parent node.
      Each node template is a single line.  The horizontal style shows each level on a separate line.
      In this case it is not allowed multiple open branches.  The children of the root will be
      shown on one line.  When one is opened, its children will fill the next line.
			   </para>
            </formalpara>
            <formalpara>
              <title>root = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>
This is a SQL expression which produces the root object.
This can be of any data type, a file system path is an example.

              <programlisting>

create procedure root_node (in path varchar)
{
  declare i, l int;
  declare ret, arr any;
  arr :=
    vector_concat (sys_dirlist (path, 0), sys_dirlist (path, 1));

  return arr;
};
</programlisting>
            </para>
            </formalpara>
            <formalpara>
              <title>child-function = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>Given the result of the root expression, this must generate an array
of similar elements corresponing to the children of the node in
question.  This same function should be applicable to each element of
the array it returns.  If the array is empty then the node in question
is a leaf.
              <programlisting>

-- Example of this function

create procedure child_node (in node_name varchar, in node varchar)
{
  declare i, l int;
  declare ret, arr any;
  declare exit handler for sqlstate '*'
    {
      return vector ();
    };
  if (isstring (file_stat (node_name, 3)))
    return vector ();

  arr :=
    vector_concat (sys_dirlist (node_name, 0), sys_dirlist (node_name, 1));

  return arr;
}
;
</programlisting>
            </para>
            </formalpara>
            <formalpara>
              <title>start-path = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is an expression which will be evaluated and passed to the 'root' function as argument.
                    </para>
            </formalpara>
            <formalpara>
              <title>open-at = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>This is an expression which will be used as XPath
	    expression to designate which branches of the tree are open
	    and which are not initially.
                    </para>
            </formalpara>
            <formalpara>
              <title>debug-srcfile</title>
              <para>URI of the source document where the tag comes from.</para>
            </formalpara>
            <formalpara>
              <title>debug-srcline</title>
              <para>Line number in the source document where the tag comes from.</para>
            </formalpara>
            <formalpara>
              <title>debug-log</title>
              <para>This defines what sort of data are saved to the debugging log.
</para>
            </formalpara>
          </refsect1>
          <refsect1 xml:id="vc_udt_tree">
            <title>Declaration of type vspx_tree</title>
            <para> 
  </para>
            <screen>
create type vspx_tree under vspx_control
as
  (
    vt_current_node int default -1,
    vt_node any default null,
    vt_open_at varchar default null,
    vt_xpath_id varchar default null
  )
temporary self as ref
overriding method vc_view_state (stream any, n int) returns any,
method vc_get_state () returns any,
method vc_open_at (path varchar) returns any,
constructor method vspx_tree (name varchar, parent vspx_control)
</screen>
          </refsect1>
          <refsect1 xml:id="vc_ex_tree">
            <title>Examples</title>
            <example xml:id="vc_ex_tree__0">
              <title> 
  </title>
              <screen>
&lt;v:page name="demo_tree" xmlns:v="http://http://example.com/vspx/"&gt;
&lt;html&gt;
 &lt;body&gt;
 &lt;v:form name="f1" method="POST" type="simple"&gt;
 &lt;div&gt;
 &lt;v:tree name="tree1" multi-branch="1" orientation="vertical"
         root="root_node" start-path="." child-function="child_node" &gt;
  &lt;v:node-template name="node_tmpl"&gt;
    &lt;div STYLE="margin-left:1em;"&gt;
	&lt;v:button name="tree1_toggle" action="simple" style="image" value="--case (control.vc_parent as vspx_tree_node).tn_open when 0 then 'plus.gif' else 'minus.gif' end" /&gt;
	&lt;b&gt;&lt;v:label name="label1" value="--(control.vc_parent as vspx_tree_node).tn_value" /&gt;&lt;/b&gt;
	&lt;v:node /&gt;
    &lt;/div&gt;
  &lt;/v:node-template&gt;
  &lt;v:leaf-template name="leaf_tmpl"&gt;
    &lt;div STYLE="margin-left:1em;"&gt;
	&lt;v:label name="label2" value="--(control.vc_parent as vspx_tree_node).tn_value" /&gt;
    &lt;/div&gt;
  &lt;/v:leaf-template&gt;
 &lt;/v:tree&gt;
 &lt;/div&gt;
 &lt;/v:form&gt;
 &lt;/body&gt;
&lt;/html&gt;
&lt;/v:page&gt;
</screen>
            </example>
            <tip>
              <title>See Also: Reference Material in the Tutorial:</title>
              <para>
                <link xlink:href="http://demo.openlinksw.com/tutorial/web/vx_s_4/tree.vspx">VX-S-4</link>
              </para>
            </tip>
          </refsect1>
        </refentry>
