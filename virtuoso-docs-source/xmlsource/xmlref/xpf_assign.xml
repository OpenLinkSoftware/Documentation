<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="xpf_assign">
      <refmeta>
        <refentrytitle>assign
</refentrytitle>
        <refmiscinfo>XPATH
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>assign
</refname>
        <refpurpose>Creates a local variable and assign a value to it.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="xpf_syn_assign">
          <funcprototype xml:id="xpf_proto_assign">
            <funcdef>null 
<function>assign
</function>

</funcdef>
            <paramdef choice="opt"><parameter>var_name
</parameter>

   string
</paramdef>
            <paramdef choice="opt"><parameter>var_value
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="xpf_desc_assign">
        <title>Description
</title>
        <para>
This function calculates the first argument, <parameter>var_name</parameter>

  ,
and converts it to the string, if needed.
Then it checks if there is a local variable or parameter with such name.
If not found, it checks if there is a global variable or parameter with such name.
If nothing found in both cases, a new local variable is created with this name.
The the value of found or created variable is changed to the value of
the second argument, <parameter>var_value</parameter>

  .
</para>
        <para>
The value of the variable may be accessed like the value of any variable created
by &lt;xsl:variable&gt; XSL element or FLWR operator of XQUERY.
The same $name should be used to get the value.
</para>
        <para>
In XSLT, common rules for local variables are used for variables created by assign() function.
</para>
        <para>
This function is not a part of XPATH 1.0 or XQUERY 1.0 libraries of standard functions.
It may produce strange results if
used in XQUERY expressions in order to change the value of local variable created
by FLWR expression.
It may cause infinite loop if
used in XSLT expressions in order to change the value of a variable used in
currently executed &lt;xsl:apply-templates&gt; instruction.
For both safety and portability, it is much better to use &lt;xsl:variable&gt; and
&lt;xsl:param&gt; XSL elements in stylesheets or LET operator in XQUERY expressions.
In addition, let() function is not portable,
but it may be used in XPATH or XSLT without the risk of
undesired effects.
</para>
      </refsect1>
      <refsect1 xml:id="xpf_params_assign">
        <title>Parameters
</title>
        <refsect2>
          <title>var_name
</title>
          <para>The name of variable which must be found or created.
</para>
        </refsect2>
        <refsect2>
          <title>var_value
</title>
          <para>The value which should be assigned to the variable.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="xpf_ret_assign">
        <title>Return Types
</title>
        <para>Null
</para>
      </refsect1>
      <refsect1 xml:id="xpf_examples_assign">
        <title>Examples
</title>
        <example xml:id="xpf_ex_assign">
          <title> 
  </title>
          <para>Increment local variable $counter by 1.
</para>
          <screen>
	assign('counter', $counter+1);

</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="xpf_seealso_assign">
        <title>See Also
</title>
        <para>
          <link linkend="xpf_let">let()
</link>
        </para>
      </refsect1>
    </refentry>
