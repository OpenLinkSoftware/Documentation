<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="installcrweb">
      <title>Creating a Web Browser Application to Access RDF Data Using The Virtuoso ADO.Net Provider</title>
      <para>This section will guide you through creating first a Web Service that exposes RDF data from Virtuoso
and then a simple web browser application that consumes the Web Service and allowing you to access and
explore the RDF data by clicking on dereferenceable <link linkend="rdfiriidtype">IRIs</link>

  .
</para>
      <section xml:id="installcrwebintro">
        <title>Pre-requisites</title>
        <orderedlist>
          <listitem>
            <para>The example assumes that you have a local Virtuoso server with the Northwind demo database
installed. If the demo database is not already installed then download the 
            <link xlink:href="http://download.openlinksw.com/packages/5.0/virtuoso/demo_dav.vad">demo database VAD package</link>

(demo_dav.vad) and install it. The VAD package will create a new database in Virtuoso called demo
containing the familiar Northwind tables. It will also creates 
            <link linkend="rdfviewsrdbms">Linked Data Views</link>
             of the Northwind tables.
In the example we assume the database is accessible on a hostname of "demo.openlinksw.com" on the
default port 80, where an actually live instance of the Virtuoso Demo database is hosted. Users would
use the appropriate hostname and port number of their Virtuoso installation to create the sample
application, and would be would be example.com for a default installation or whatever the 
            <link linkend="ini_uriqa">URIQA DefaultHost</link>
Virtuoso configuration parameter is set to when the demo database VAD package is installed.
  </para>
          </listitem>
          <listitem>
            <para>The Virtuoso ADO.Net provider for .Net 3.5 and the Entity Framework.</para>
          </listitem>
          <listitem>
            <para>Microsoft Visual Studio 2008</para>
          </listitem>
          <listitem>
            <para>The Virtuoso 
            <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.3/virtuoso/cartridges_dav.vad">Cartridges VAD package</link>
            .</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="installcrwebcrserv">
        <title>Creating the Web Service</title>
        <para>
          <emphasis>Step 1 - Create a view of the RDF data</emphasis>
        </para>
        <para>To create a view of the customers in the Northwind first open the Virtuoso Conductor and log in as
dba. Then open iSQL from the menu on the left and execute the following statement.
</para>
        <programlisting>
create view Demo.demo.sparqlview as
sparql
select distinct ?s  from &lt;http://example.com/Northwind&gt;
where {?s a &lt;http://demo.openlinksw.com/schemas/northwind#Customer&gt;}
</programlisting>
        <para>Note:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>If the view is added to the Visual Studio project as user "demo" (or any other than "dba'),
then it must be ensured that the "SPARQL_SELECT" and "SPARQL_SPONGE" roles are assigned to this user, which
can be done via the Virtuoso Conductor in the "System Admin" -&gt; "User Accounts" tab. </para>
          </listitem>
          <listitem>
            <para>Execute permissions will also need to be granted to the following procedure:
</para>
            <programlisting>
grant execute on DB.DBA.RDF_MAKE_LONG_OF_SQLVAL to "demo"
</programlisting>
          </listitem>
        </itemizedlist>
        <figure xml:id="sparqlwinf25" floatstyle="1">
          <title>create a view</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/sparqlwinf25.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>
          <emphasis>Step 2 - Create the Visual Studio Project and Add the Model</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Open </para>
            <para>
              <emphasis>Visual Studio</emphasis>
            </para>
            <para> and create a new </para>
            <para>
              <emphasis>ASP .NET Web Application
</emphasis>
            </para>
            <para> called RDFWebDemo.
    </para>
            <figure xml:id="sparqlwinf26" floatstyle="1">
              <title>create new application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/sparqlwinf26.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Right click RDFWebDemo in the </para>
            <para>
              <emphasis>Solution Explorer</emphasis>
            </para>
            <para> and add a new
</para>
            <para>
              <emphasis>ADO.NET Entity Data Model</emphasis>
            </para>
            <para> called Model1.edmx.
This will open the Entity Data Model Wizard.</para>
          </listitem>
          <listitem>
            <para>Choose </para>
            <para>
              <emphasis>Generate From Database</emphasis>
            </para>
            <para> and click </para>
            <para>
              <emphasis>Next</emphasis>
            </para>
            <para>.</para>
          </listitem>
          <listitem>
            <para>Set up a connection to the Demo database on your local Virtuoso Server, select
</para>
            <para>
              <emphasis>Yes, include the sensitive data in the connection string</emphasis>
            </para>
            <para> and set the name of the
entities to DemoEntities. Click </para>
            <para>
              <emphasis>Next</emphasis>
            </para>
            <para>.</para>
          </listitem>
          <listitem>
            <para>On the </para>
            <para>
              <emphasis>Choose Your Database Objects</emphasis>
            </para>
            <para> page expand </para>
            <para>
              <emphasis>Views</emphasis>
            </para>
            <para>
and select sparqlview. Check that the Model Namespace is DemoModel and click Finish.
    </para>
            <figure xml:id="sparqlwinf27" floatstyle="1">
              <title>Model Namespace</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/sparqlwinf27.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <para> 
  </para>
        <para>
          <emphasis>Step 3 - Add the Web Service</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Right click RDFWebDemo in the </para>
            <para>
              <emphasis>Solution Explorer</emphasis>
            </para>
            <para> and add a new
</para>
            <para>
              <emphasis>ADO.NET Data Service</emphasis>
            </para>
            <para> called WebDataService1.svc. Click </para>
            <para>
              <emphasis>Add</emphasis>
            </para>
            <para>.</para>
          </listitem>
          <listitem>
            <para>In the class definition of WebDataService1 in the newly created file WebDataService1.svc.cs replace /* TODO: put your data source class name here */ with the name of our model, DemoEntities.
</para>
            <programlisting>
public class WebDataService1 : DataService&lt;DemoEntities&gt;
</programlisting>
          </listitem>
          <listitem>
            <para>In the InitializeService method add the line:
</para>
            <programlisting>
config.SetEntitySetAccessRule("*", EntitySetRights.All);
</programlisting>
            <para>The method should look like this:
</para>
            <programlisting>
 public static void InitializeService(IDataServiceConfiguration config)
   {
       // TODO: set rules to indicate which entity sets and service operations are visible, updatable, etc.
       // Examples:
       // config.SetEntitySetAccessRule("MyEntityset", EntitySetRights.AllRead);
       // config.SetServiceOperationAccessRule("MyServiceOperation", ServiceOperationRights.All);

       config.SetEntitySetAccessRule("*", EntitySetRights.All);
   }
</programlisting>
          </listitem>
        </orderedlist>
        <para>
          <emphasis>Step 4 - Compile and Run</emphasis>
        </para>
        <para>Hit <emphasis>F5</emphasis>

   to compile and run the service. Select <emphasis>OK</emphasis>

   when
prompted to enable debugging. The default browser will be launched showing a page like:
</para>
        <programlisting>
  &lt;?xml version="1.0" encoding="utf-8" standalone="yes" ?&gt;
- &lt;service xml:base="http://example.com/WebDataService1.svc/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:app="http://www.w3.org/2007/app" xmlns="http://www.w3.org/2007/app"&gt;
- &lt;workspace&gt;
  &lt;atom:title&gt;Default&lt;/atom:title&gt;
- &lt;collection href="sparqlview"&gt;
  &lt;atom:title&gt;sparqlview&lt;/atom:title&gt;
  &lt;/collection&gt;
  &lt;/workspace&gt;
  &lt;/service&gt;
</programlisting>
        <para>The service is now running.
</para>
        <para>Note the address on which the service is made available. You will need to know this when creating
the app to consume the service. Look in the Address Bar of the browser. It will be something like:
http://example.com/WebDataService1.svc/
</para>
      </section>
      <section xml:id="installcrbrappl">
        <title>Creating the Browser Application</title>
        <para>
          <emphasis>Step 1 - Create the Visual Studio Project.</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Open </para>
            <para>
              <emphasis>Visual Studio</emphasis>
            </para>
            <para> and create a new
</para>
            <para>
              <emphasis>ASP.NET Web Application</emphasis>
            </para>
            <para> called RDFWebApp.
    </para>
            <figure xml:id="sparqlwinf28" floatstyle="1">
              <title>New Web Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/sparqlwinf28.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Create client side entities with datasvcutil.exe
</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Open a command prompt.</para>
              </listitem>
              <listitem>
                <para>Navigate to *C:\WINDOWS\Microsoft.NET\Framework\v3.5*.</para>
              </listitem>
              <listitem>
                <para>Generate the client classes using the following command:
</para>
                <programlisting>
datasvcutil.exe /uri:http://example.com/WebDataService1.svc /out:DemoEntities.cs
</programlisting>
                <para>Note the address of the service - you may need to change the port number to
match the one seen in the address at the end of Step 4 in Creating the Web Service.
</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Add the classes to RDFWebApp.
</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Right click RDFWebApp</para>
              </listitem>
              <listitem>
                <para>Choose to add an existing item and add c:\WINDOWS\Microsoft.NET\Framework\v3.5\DemoEntities.cs.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Add a reference to System.Data.Services.Client to the project.</para>
          </listitem>
        </orderedlist>
        <para> 
  </para>
        <para>
          <emphasis>Step 2 - Display the contents of sparqlview as a table on the page</emphasis>
        </para>
        <para>To display the RDF data on the web page we create a table with a row for each item in sparqlview.
We then use each IRI from sparqlview to create a hyperlink. The hyperlinks are displayed in the table
cells. To do this add the following block of code to the page_load method in Default.aspx.cs.
</para>
        <programlisting>
 DemoModel.DemoEntities svc = new DemoModel.DemoEntities(new Uri("http://example.com/WebDataService1.svc"));

  var query = svc.sparqlview;
  Table iriTable = new Table();
  this.Controls.Add(iriTable);

  foreach (DemoModel.sparqlview sv in query)
  {
      TableRow tRow = new TableRow();
      iriTable.Rows.Add(tRow);
      TableCell tCell = new TableCell();
      tRow.Cells.Add(tCell);
      HyperLink h = new HyperLink();
      h.Text = sv.s;
      h.NavigateUrl = sv.s;
      tCell.Controls.Add(h);
  }
</programlisting>
        <para>Note the address of the service in the first line - you may need to change the port number to match
the one seen in the address at the end of Step 4 in Creating the Web Service.
</para>
        <para>Compile and run RDFWebApp (ensuring that the service created above is still running). This will
launch a browser and display the IRIs from sparqlview as a list of hyperlinks.
</para>
        <figure xml:id="sparqlwinf29" floatstyle="1">
          <title>list of hyperlinks</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/sparqlwinf29.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>With the <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.3/virtuoso/cartridges_dav.vad">Cartridges VAD package</link>

   installed in Virtuoso, clicking on these
links will take you to a description page of the referenced resource. The description page is created
using <link xlink:href="http://virtuoso.openlinksw.com/Whitepapers/html/vdld_html/VirtDeployingLinkedDataGuide_Glossary.html#mozTocId13075">description.vsp</link>

  .
</para>
        <figure xml:id="sparqlwinf30" floatstyle="1">
          <title>Description page</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/sparqlwinf30.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="installcrwebiis">
        <title>Deploy With IIS</title>
        <para>To create and test this simple Web Service we have used the Visual Studio Development Server. This
section describes how to deploy the service using IIS.
</para>
        <section xml:id="installcrwebiiswebs">
          <title>Web Service</title>
          <para>To deploy the service using IIS:
</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>Open the RDFWebDemo project in Visual Studio, go to the </para>
              <para>
                <emphasis>Project</emphasis>
              </para>
              <para> menu
and select RDFWebDemo </para>
              <para>
                <emphasis>Properties</emphasis>
              </para>
              <para>.</para>
            </listitem>
            <listitem>
              <para>Select the </para>
              <para>
                <emphasis>Web</emphasis>
              </para>
              <para> tab and scroll down to the </para>
              <para>
                <emphasis>Servers</emphasis>
              </para>
              <para>
section. Select </para>
              <para>
                <emphasis>Use local IIS Server</emphasis>
              </para>
              <para>. The project URL defaults to using localhost.</para>
            </listitem>
            <listitem>
              <para>Click the </para>
              <para>
                <emphasis>Create Virtual Directory</emphasis>
              </para>
              <para> button then check that the Service works on localhost.</para>
            </listitem>
            <listitem>
              <para>Build the project then start without debugging (ctrl F5).</para>
            </listitem>
          </itemizedlist>
          <para>The start page that you see when you test the service will look the same as before but the address
in the browser bar will be something like http://example.com/RDFWebDemo1/WebDataService1.svc/. You can now
access your service remotely using the hostname or IP address of your server.
</para>
          <para>If at this point you get an Access is denied error, 401.3, then you will need to add the Internet
Guest Account (IUSR_XXX where XXX is your computer name) to the users allowed to access the folder
containing the RDFWebDemo project.
</para>
        </section>
        <section xml:id="installcrwebiisweba">
          <title>Web Application</title>
          <para>You will now need to modify RDFWebApp to access the service at the new address. At the same time
we will also change RDFWebApp so that it too is deployed using IIS
</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>Open The RDFWebApp project in Visual Studio.</para>
            </listitem>
            <listitem>
              <para>Go to the </para>
              <para>
                <emphasis>Project</emphasis>
              </para>
              <para> menu and select RDFWebApp </para>
              <para>
                <emphasis>Properties</emphasis>
              </para>
              <para>.</para>
            </listitem>
            <listitem>
              <para>Select the </para>
              <para>
                <emphasis>Web</emphasis>
              </para>
              <para> tab and scroll down to the </para>
              <para>
                <emphasis>Servers</emphasis>
              </para>
              <para>
section. Select </para>
              <para>
                <emphasis>Use local IIS Server</emphasis>
              </para>
              <para>. The project URL defaults to using localhost.</para>
            </listitem>
            <listitem>
              <para>Click the </para>
              <para>
                <emphasis>Create Virtual Directory</emphasis>
              </para>
              <para> button. The web application will then run on the local IIS.
</para>
              <programlisting>
DemoModel.DemoEntities svc = new DemoModel.DemoEntities(new Uri("http://example.com/WebDataService1.svc"));
</programlisting>
              <para>to
</para>
              <programlisting>
DemoModel.DemoEntities svc = new DemoModel.DemoEntities(new Uri("http://example.com/RDFWebDemo/WebDataService1.svc/"));
</programlisting>
            </listitem>
            <listitem>
              <para>To reference the web service running on IIS you will need to edit Default.aspx.cs. Change </para>
            </listitem>
            <listitem>
              <para>Build the project then start without debugging (ctrl F5).</para>
            </listitem>
          </itemizedlist>
          <para>
The web application is accessible on http://example.com/RDFWebApp/Default.aspx and can also be accessed using
the hostname or IP address of you server e.g. http://192.168.7.129/RDFWebApp/Default.aspx
</para>
          <figure xml:id="sparqlwinf31" floatstyle="1">
            <title>Default.aspx</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/sparqlwinf31.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section>
          <title>Next Steps</title>
          <para>The next example shows you how to quickly create an ADO.Net Data Service that exposes RDF data in
Virtuoso and how to create a basic Web application to consume that service. The next step is to
<link linkend="installsilver">create a Silverlight Application to consume the same service</link>
  .
</para>
        </section>
      </section>
    </section>
