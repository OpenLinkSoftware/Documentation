<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="virtuosotipsandtricks">
      <title>Tips and Tricks</title>
      <section xml:id="virtuosotipsandtricksgeotr">
        <title>How Can I convert triples with geo properties to geometries to use spartial query?
</title>
        <para>Assuming a Named Graph with the following triples:
</para>
        <programlisting>
...
&lt;http://linkedgeodata.org/triplify/node454640663&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://linkedgeodata.org/ontology/hostel&gt; .
&lt;http://linkedgeodata.org/triplify/node454640663&gt; &lt;http://www.georss.org/georss/point&gt; "53.2752338 -9.0443748" .
&lt;http://linkedgeodata.org/triplify/node454640663&gt; &lt;http://www.w3.org/2003/01/geo/wgs84_pos#long&gt; "-9.0443748"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; .
&lt;http://linkedgeodata.org/triplify/node454640663&gt; &lt;http://www.w3.org/2003/01/geo/wgs84_pos#lat&gt; "53.2752338"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; .

&lt;http://linkedgeodata.org/triplify/node280886720&gt; &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; "Abbey House" .
&lt;http://linkedgeodata.org/triplify/node280886720&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://linkedgeodata.org/ontology/bed_and_breakfast&gt; .
&lt;http://linkedgeodata.org/triplify/node280886720&gt; &lt;http://www.georss.org/georss/point&gt; "53.2874983 -9.0702631" .
&lt;http://linkedgeodata.org/triplify/node280886720&gt; &lt;http://www.w3.org/2003/01/geo/wgs84_pos#long&gt; "-9.0702631"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; .
&lt;http://linkedgeodata.org/triplify/node280886720&gt; &lt;http://www.w3.org/2003/01/geo/wgs84_pos#lat&gt; "53.2874983"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; .
...
</programlisting>
        <para>In order to convert these triples ( with geo properties ) to geometries to use spartial query,
	you need to run the <function>DB.DBA.RDF_GEO_FILL ()</function>

	function to populate the special RDF_GEO table with the point information as detailed at
	<link linkend="rdfsparqlgeospatcrg">Creating Geometries From RDF Data</link>

   documentation section.</para>
        <para>Then the geo-spatail information will be available and can be queried.</para>
        <para>Note: RDF_GEO and associated indexes are created when the database is first created and
	thus just needs to be populated with the geometry data in the RDF triples, which is what
	the <function>DB.DBA.RDF_GEO_FILL ()</function>

   function does.</para>
        <tip>
          <title>See Also:
</title>
          <itemizedlist mark="bullet">
            <listitem>
              <para>
                <link linkend="rdfsparqlgeospatprog">Programmatic Manipulation of Geometries in RDF
</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="rdfsparqlgeospatexmp">GEO Spatial Examples
</link>
              </para>
            </listitem>
            <listitem>
              <para>GEO Spatial Tutorials:

</para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(26)">ROUND
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(27)">DESCRIBE
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(28)">CONSTRUCT
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(29)">ASK
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(30)">UNION
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(31)">COUNT
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(32)">FILTER
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(33)">Find Distance Variant I
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(34)">Find Distance Variant II
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(35)">Querying Time and Space Variant I
</link>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_2/SPARQL_Tutorials_Part_2.html#(36)">Querying Time and Space Variant II
</link>
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtricksspchar">
        <title>How Can I execute SPARQL queries containing '$' character using ISQL?</title>
        <para>Assuming a SPARQL query should filter on the length of labels:</para>
        <programlisting>
SELECT ?label
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?s ?p ?label
    FILTER(regex(str(?label), "^.{1,256}$") )
  }
</programlisting>
        <para>ISQL uses '<emphasis>$</emphasis>

  ' character as a prefix for macro names of its preprocessor.
      When '<emphasis>$</emphasis>

  ' character is used in SPARQL query to be executed in ISQL, the character
      should be replaced with '<emphasis>$$</emphasis>

  ' notation or an escape char + numeric code:</para>
        <programlisting>
SQL&gt; SPARQL
SELECT ?label
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?s ?p ?label
    FILTER(REGEX(str(?label), "^.{1,256}$$") )
  }
</programlisting>
        <para>Note also that the FILTER written in this way, finds <emphasis>?label-s</emphasis>

   with length
      less than 256.</para>
        <para>To achieve fast results, <emphasis>REGEX</emphasis>

   should be replaced with the
      <emphasis>bif:length</emphasis>

   function:</para>
        <programlisting>
SQL&gt; SPARQL
SELECT ?label
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?s ?p ?label
    FILTER (bif:length(str(?label))&lt;= 256)
  }
</programlisting>
        <para>In this way the SPARQL query execution can work much faster if the interoperability is
      	not required and <emphasis>?label-s</emphasis>

   are numerous.</para>
      </section>
      <section xml:id="virtuosotipsandtricksfinddeadlockstables">
        <title>How can I find on which table deadlocks occur?</title>
        <para>One possible way to find on which table deadlocks occur is to execute the following statement:</para>
        <programlisting>
SELECT TOP 10 *
FROM SYS_L_STAT
ORDER BY deadlocks DESC
</programlisting>
      </section>
      <section xml:id="virtuosotipsandtricksoutotmemoryerror">
        <title>How Can I configure parameters to avoid out of memory error?</title>
        <para>In order to avoid out of memory error, you should make sure the values for the paramaters
      	<emphasis>NumberOfBuffers</emphasis>

   and <emphasis>MaxCheckpointRemap</emphasis>

   are not set with the same values.</para>
        <para>For example, the following configuration will cause an error out of memory:</para>
        <programlisting>
# virtuoso.ini

...
[Parameters]
NumberOfBuffers = 246837
MaxDirtyBuffers = 18517
MaxCheckpointRemap = 246837
...
</programlisting>
        <para>Changing the value of the parameter <emphasis>MaxCheckpointRemap</emphasis>

   with let's
       say 1/4 of the DB size will resolve the issue.</para>
      </section>
      <section xml:id="virtuosotipsandtricksrdftriggersoptions">
        <title>What are "Generate RDB2RDF triggers" and "Enable Data Syncs with Physical Quad Store" Linked Data Views options?</title>
        <para>These Linked Data Views options basically persist the triples in the transient View Graph in the Native Quad Store. The Data Sync is how you keep the transient views in sync with the persisted triples.</para>
        <para>Without this capability you cannot exploit faceted browsing without severe performance overhead when using Linked Data based conceptual views over ODBC or JDBC accessible data sources.</para>
        <para>Note: Using these options when the RFViews have already been created is not currently possible via the Conductor UI. Instead you should be able to add them manually from isql:</para>
        <orderedlist>
          <listitem>
            <para>Drop the Linked Data View graph and Quad Map.</para>
          </listitem>
          <listitem>
            <para>Create it again with the RDB2RDF Triggers options enabled.</para>
          </listitem>
        </orderedlist>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdb2rdftriggers">RDB2RDF Triggers</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtricksmanagedaterangequery">
        <title>How to Manage Date Range SPARQL queries?</title>
        <para>The following examples demonstrate how to manage date range in a SPARQL query:</para>
        <para>
          <emphasis>Example with date range</emphasis>
        </para>
        <programlisting>
SELECT ?s ?date
FROM &lt;http://dbpedia.org&gt;
WHERE
  {
    ?s ?p ?date . FILTER ( ?date &gt;= "19450101"^^xsd:date &amp;&amp; ?date &lt;= "19451231"^^xsd:date )
  }
LIMIT 100
</programlisting>
        <para>
          <emphasis>Example with bif:contains</emphasis>
        </para>
        <para>Suppose there is the following query using bif:contains for date:</para>
        <para>If ?date is of type xsd:date or xsd:dateTime and of valid syntax then
      	bif:contains(?date, '"1945*"' ) will not found it, because it will be parsed at load/create and
      	stored as SQL DATE value.
      </para>
        <para>So if data are all accurate and typed properly then the filter is:</para>
        <programlisting>
(?date &gt;= xsd:date("1945-01-01") &amp;&amp; ?date &lt; xsd:date("1946-01-01"))
</programlisting>
        <para>i.e. the query should be:</para>
        <programlisting>
SELECT DISTINCT ?s ?date
FROM &lt;http://dbpedia.org&gt;
WHERE
  {
    ?s ?p ?date . FILTER( ?date &gt;= xsd:date("1945-01-01") &amp;&amp; ?date &lt; xsd:date("1946-01-01")  &amp;&amp; (str(?p) != str(rdfs:label)) )
  }
LIMIT 10
</programlisting>
        <para>If data falls, then the free-text will be OK for tiny examples but not for "big" cases because
      	<emphasis>bif:contains(?date, '"1945*"')</emphasis>

   would require that less than 200 words in the
      	table begins with 1945. Still, some data can be of accurate type and syntax so range comparison
      	should be used for them and results aggregated via UNION.</para>
        <para>If dates mention timezones then the application can chose the beginning and the end of the
      	year in some timezones other than the default.</para>
      </section>
      <section xml:id="virtuosotipsandtricksquadstorageinternally">
        <title>How can I see which quad storages exist and in which quad storage a graph resides?</title>
        <para>Let's take for example a <link xlink:href="http://virtuoso.openlinksw.com/whitepapers/relational%20rdf%20views%20mapping.html">created Linked Data View from relational data in Virtuoso</link>

  . The RDF output therefor should have two graphs which reside in a quad storage named for ex.:
      </para>
        <programlisting>
http://example.com/rdfv_demo/quad_storage/default
</programlisting>
        <para>Also the RDF is accessible over the SPARQL endpoint with the following query:
      </para>
        <programlisting>
define input:storage &lt;http://example.com/rdfv_demo/quad_storage/default&gt;
SELECT *
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
        <para>Now one could ask is there a way to define internally (once) that the quad storage should be
      	included in queries to the SPARQL endpoint? So that the user does not have to define the
      	<emphasis>input:storage</emphasis>

   explicitly in each query, like this:</para>
        <programlisting>
http://example.com/sparql?query=select * where { ?s ?p ?o }&amp;default-graph-uri=NULL&amp;named-graph-uri=NULL
</programlisting>
        <para>All metadata about all RDF storages are kept in "system" graph
      	&lt;http://www.openlinksw.com/schemas/virtrdf#&gt; ( namespace prefix <emphasis>virtrdf:</emphasis>

   ).
      	Subjects of type <emphasis>virtrdf:QuadStorage</emphasis>

   are RDF storages. There are three of them by default:
      </para>
        <programlisting>
SQL&gt; SPARQL SELECT * FROM virtrdf: WHERE { ?s a virtrdf:QuadStorage };
s
VARCHAR
_______________________________________________________________________________

http://www.openlinksw.com/schemas/virtrdf#DefaultQuadStorage
http://www.openlinksw.com/schemas/virtrdf#DefaultServiceStorage
http://www.openlinksw.com/schemas/virtrdf#SyncToQuads

3 Rows. -- 3 msec.
</programlisting>
        <itemizedlist mark="bullet">
          <listitem>
            <para>
              <emphasis>virtrdf:DefaultQuadStorage</emphasis>
            </para>
            <para> is what's in use if no input:storage specified.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>virtrdf:DefaultServiceStorage</emphasis>
            </para>
            <para> will be used for SPARQL federation.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>virtrdf:SyncToQuads</emphasis>
            </para>
            <para> is to keep the list of Linked Data Views that are translated into RDB2RDF triggers.</para>
          </listitem>
        </itemizedlist>
        <para>There are two ways of using the Linked Data View from above in SPARQL endpoint without
      	<emphasis>define input:storage</emphasis>

  :</para>
        <orderedlist>
          <listitem>
            <para>Create Linked Data View right in </para>
            <para>
              <emphasis>virtrdf:DefaultQuadStorage</emphasis>
            </para>
            <para> or add the
        view in other storage and then copy it from there to </para>
            <para>
              <emphasis>virtrdf:DefaultQuadStorage</emphasis>
            </para>
            <para>.
          </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>In any of these two variants, use:
</para>
                <programlisting>
SPARQL ALTER QUAD STORAGE virtrdf:DefaultQuadStorage . . .
</programlisting>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Use </para>
            <para>
              <emphasis>SYS_SPARQL_HOST</emphasis>
            </para>
            <para> table as described
            <link linkend="rdfdefaultgraph">here</link>
             and set </para>
            <para>
              <emphasis>SH_DEFINES</emphasis>
            </para>
            <para> so it
        contains your favorite </para>
            <para>
              <emphasis>define input:storage</emphasis>
            </para>
            <para>.</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="virtuosotipsandtricksdroprecrdefstrg">
        <title>Can I drop and re-create the DefaultQuadStorage?</title>
        <para>Currently system metadata consist of three "levels":</para>
        <orderedlist>
          <listitem>
            <para>
              <emphasis>QuadMapFormats</emphasis>
            </para>
            <para> are used to describe transformations of individual
        SQL values (or types of SQL values),</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>QuadMaps</emphasis>
            </para>
            <para> refers to </para>
            <para>
              <emphasis>QuadMapFormats</emphasis>
            </para>
            <para> (via
        </para>
            <para>
              <emphasis>QuadMapValues</emphasis>
            </para>
            <para>) and describe some "minimal" independent RDB2RDF
        transformations,</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>QuadStorages</emphasis>
            </para>
            <para> organizes </para>
            <para>
              <emphasis>QuadMaps</emphasis>
            </para>
            <para>.</para>
          </listitem>
        </orderedlist>
        <para><emphasis>QuadStorages</emphasis>

   contains only "symlinks" to maps, if you drop a storage
      you don't drop all mappings inside. If you drop the <emphasis>DefaultQuadStorage</emphasis>

   or
      some other built-in thing, it can be safely recovered by
      <link linkend="fn_rdf_audit_metadata"><function>DB.DBA.RDF_AUDIT_METADATA</function></link>

  ,
      with first parameter set to 1. This will keep your own data intact. However we recommend to write
      a script that declares all your formats, Linked Data Views and storages, to be able to reproduce the
      configuration after any failures.</para>
      </section>
      <section xml:id="virtuosotipsandtricksgraphsecurity">
        <title>How to display only some information from RDF graph?</title>
        <para>Virtuoso supports graph-level security, as described <link linkend="rdfgraphsecurity">here</link>

      but not subject-level or predicate-level. When exposing data that needs protected access, triples
      should be confined to private  name graphs which are protected by ACLs using WebID.</para>
        <para>Note, how you can use <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLSecurityWebID">WebID to protect Virtuoso SPARQL endpoints</link>

  .</para>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdfgraphsecurity">RDF Graphs Security</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtrickssparqlcondport">
        <title>Is it possible to have the SPARQL endpoint on a different port than the Conductor?</title>
        <para>Virtuoso Web Server has the capability to create extra listeners using the <link linkend="admui.internetdomains">Conductor interface</link>

  .</para>
        <orderedlist>
          <listitem>
            <para>At install time you have your HTTP Server port in your virtuoso.ini set to 8890, which
        	you want to keep in your local network as this contains ALL the endpoints that you have
        	registered in Virtuoso. So as long as you do not open this port in your firewall, you can
        	only get at it from the local machine.</para>
          </listitem>
          <listitem>
            <para>Next you should create a new vhost entry using the EXTERNAL name of your machine and
        	use port 80 (or a higher port if you do not want to run as root) for ex.:
</para>
            <programlisting>
Interface: 0.0.0.0
Port: 8080
Http Host:  my.example.com
</programlisting>
          </listitem>
          <listitem>
            <para>Next you add a "New directory to this line", click on "Type" radio button and choose
        	"Sparql access point" from the drop-down list and press Next button. Set "Path" to /sparql
        	and press the "Save Changes" button to store.</para>
          </listitem>
          <listitem>
            <para>At this point you have created: http://my.example.com:8080/sparql which functions
        	exactly the same as your internal http://example.com/sparql. You can now open your firewall
        	and allow outside machines to connect to port 8080 so people can use your SPARQL endpoint
        	without access to any other endpoint on your Virtuoso installation.</para>
          </listitem>
          <listitem>
            <para>You should probably also change your virtuoso.ini so:
</para>
            <programlisting>
[URIQA]
DefaultHost = my.example.com:8080
</programlisting>
          </listitem>
          <listitem>
            <para>If you use port 80, you do not have to add :80 at the end of this setting, although
        	it should not make any difference.</para>
          </listitem>
          <listitem>
            <para>You can now add other directories / endpoints to the new </para>
            <para>
              <emphasis>my.example.com</emphasis>
            </para>
            <para>
          interface you just created e.g. a nice / directory that points to a index.html which describes
          your site etc.</para>
          </listitem>
        </orderedlist>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="admui.internetdomains">Internet Domains</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtricksenableadonetvs2010">
        <title>How to enable the Virtuoso Entity Framework 3.5 ADO.Net Provider in Visual Studio 2010?</title>
        <para>The Virtuoso Entity Framework 3.5 ADO.Net Provider is current only list as a Visible control
      	in the Visual Studio 2008 IDE as the current installers only create the necessary registry
      	entries for Visual Studio 2008. To make it visible in the Visual Studio 2010's IDE the
      	following registry settings need to be manually updated and manual addtions to some of
      	the VS 2010 XML configuration files:</para>
        <orderedlist>
          <listitem>
            <para>Export following registry keys to .reg files and using a text editor, such as Wordpad, edit the Visual Studio version numbers from 8.0 or 9.0 to 10.0:
</para>
            <programlisting>
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\8.0\DataProviders\{EE00F82B-C5A4-4073-8FF1-33F815C9801D}
- and -
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\8.0\DataSources\{90FBCAF2-8F42-47CD-BF1A-88FF41173060}
</programlisting>
          </listitem>
          <listitem>
            <para>Once edited, save and double click them to create the new registry entries under:
</para>
            <programlisting>
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0....
</programlisting>
          </listitem>
          <listitem>
            <para>In addition, locate the file C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config,
        locate the node, then locate the </para>
            <para>
              <emphasis>&lt;add name="VirtuosoClient3? Data Provider" ...</emphasis>
            </para>
            <para>
        node within it:
</para>
            <programlisting>
&lt;add name="VirtuosoClient3 Data Provider" invariant="OpenLink.Data.Virtuoso"
    description=".NET Framework Data Provider for Virtuoso" type="OpenLink.Data.Virtuoso.VirtuosoClientFactory, virtado3, Version=6.2.3128.2, Culture=neutral, PublicKeyToken=391bf132017ae989" /&gt;
</programlisting>
          </listitem>
        </orderedlist>
        <para>and copy is to the equivalent C:\WINDOWS\Microsoft.NET\Frameworks\v4.0.30128\CONFIG\machine.config location.</para>
        <para>Visual Studio 2010 will then have the necessary information to locate and load the Virtuoso ADO.Net provider in its IDE.</para>
        <para>The registry should typically contain the following entries for Visual Studio 2010 as a result:</para>
        <programlisting>
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}]
@=".NET Framework Data Provider for Virtuoso"
"AssociatedSource"="{4D90D7C5-69A6-43EE-83ED-59A0E442D260}"
"CodeBase"="C:\\Windows\\assembly\\GAC_MSIL\\virtado3\\6.2.3128.1__391bf132017ae989\\virtado3.dll"
"Description"="Provider_Description, OpenLink.Data.Virtuoso.DDEX.Net3.DDEXResources, virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"
"DisplayName"="Provider_DisplayName, OpenLink.Data.Virtuoso.DDEX.Net3.DDEXResources, virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"
"InvariantName"="OpenLink.Data.Virtuoso"
"PlatformVersion"="2.0"
"ShortDisplayName"="Provider_ShortDisplayName, OpenLink.Data.Virtuoso.DDEX.Net3.DDEXResources, virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"
"Technology"="{77AB9A9D-78B9-4ba7-91AC-873F5338F1D2}"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects]

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IDSRefBuilder]
@="Microsoft.VisualStudio.Data.Framework.DSRefBuilder"
"Assembly"="Microsoft.VisualStudio.Data.Framework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataAsyncCommand]

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataCommand]

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataConnectionProperties]
@="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoDataConnectionProperties"
"Assembly"="virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataConnectionSupport]
@="Microsoft.VisualStudio.Data.Framework.AdoDotNet.AdoDotNetConnectionSupport"
"Assembly"="Microsoft.VisualStudio.Data.Framework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataConnectionUIControl]
@="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoDataConnectionUIControl"
"Assembly"="virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataConnectionUIProperties]
@="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoDataConnectionProperties"
"Assembly"="virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataMappedObjectConverter]

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataObjectIdentifierResolver]
@="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoDataObjectIdentifierResolver"
"Assembly"="virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataObjectSupport]
@="Microsoft.VisualStudio.Data.Framework.DataObjectSupport"
"Assembly"="Microsoft.VisualStudio.Data.Framework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
"XmlResource"="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoObjectSupport"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataSourceInformation]
@="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoDataSourceInformation"
"Assembly"="virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataTransaction]

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}\SupportedObjects\IVsDataViewSupport]
@="Microsoft.VisualStudio.Data.Framework.DataViewSupport"
"Assembly"="Microsoft.VisualStudio.Data.Framework, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
"XmlResource"="OpenLink.Data.Virtuoso.DDEX.Net3.VirtuosoViewSupport"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataSources\{4D90D7C5-69A6-43EE-83ED-59A0E442D260}]
@="OpenLink Virtuoso Data Source"
"DefaultProvider"="{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}"

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataSources\{4D90D7C5-69A6-43EE-83ED-59A0E442D260}\SupportingProviders]

[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\DataSources\{4D90D7C5-69A6-43EE-83ED-59A0E442D260}\SupportingProviders\{0886A2BB-03D0-4E00-8A3D-F235A5DC0F6D}]
"Description"="DataSource_Description, OpenLink.Data.Virtuoso.DDEX.Net3.DDEXResources, virtado3, Version=6.2.3128.1, Culture=neutral, PublicKeyToken=391bf132017ae989"
</programlisting>
        <para>The next Virtuoso releases, 6.3+ will support this new Visual Studio 2010 release out of the box.</para>
      </section>
      <section xml:id="virtuosotipsandtrickscontrolunicode3">
        <title>How Can I Control the normalization of UNICODE3 accented chars in free-text index?</title>
        <para>
The normalization of UNICODE3 accented chars in free-text index can be controlled by setting up the
configuration parameter <emphasis>XAnyNormalization</emphasis>

   in the
virtuoso.ini config file, section [I18N]. This parameter controls whether accented
UNICODE characters should be converted to their non-accented base
variants at the very beginning of free-text indexing or parsing a
free-text query string. The parameter's value is an integer that is bitmask with
only 2 bits in use atm:
</para>
        <orderedlist>
          <listitem>
            <para>0: the default behavior, do not normalize anything, so "Jose" and
"José" are two distinct words.
</para>
          </listitem>
          <listitem>
            <para>2: Any combined char is converted to its (smallest known) base. So
"é" will lose its accent and become plain old ASCII "e".</para>
          </listitem>
          <listitem>
            <para>3: This is equl to 1|2 and when set then performs both conversions.
As a result, pair of base char and combinig char loses its second char and chars with accents will lose
accents.</para>
          </listitem>
        </orderedlist>
        <para>If the parameter is required at all, the needed value is probably 3. So
the fragment of virtuoso.ini is:</para>
        <programlisting>
[I18N]
XAnyNormalization=3
</programlisting>
        <para>In some seldom case the value of 1 can be appropriate. The parameter
should be set once before creating the database. If changed on the
existing database, all free-text indexes that may contain non-ASCII data
should be re-created. On a typical system, the parameter affects all
text columns, XML columns, RDF literals and queries.</para>
        <para>Strictly speaking, it affects not all of them but only items that use
default "x-any" language or language derived from x-any such as "en" and
"en-US" but if you haven't tried writing new C plugins for custom
languages you should not look so deep.</para>
        <para>As an example, with <emphasis>XAnyNormalization=3</emphasis>

   once can get the following:</para>
        <programlisting>
SQL&gt;SPARQL

INSERT IN &lt;http://InternationalNSMs/&gt;
   { &lt;s&gt; &lt;sp&gt; "Índio João Macapá Júnior Tôrres Luís Araújo José" ;
     &lt;ru&gt; "&amp;#1054;&amp;#1085; &amp;#1076;&amp;#1086;&amp;#1073;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1082;&amp;#1072;&amp;#1088;&amp;#1090;&amp;#1086;&amp;#1096;&amp;#1082;&amp;#1080;, &amp;#1087;&amp;#1086;&amp;#1089;&amp;#1086;&amp;#1083;&amp;#1080;&amp;#1083; &amp;#1080; &amp;#1087;&amp;#1086;&amp;#1089;&amp;#1090;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1072;&amp;#1082;&amp;#1074;&amp;#1072;&amp;#1088;&amp;#1080;&amp;#1091;&amp;#1084; &amp;#1085;&amp;#1072; &amp;#1086;&amp;#1075;&amp;#1086;&amp;#1085;&amp;#1100;" . }

INSERT INTO &lt;http://InternationalNSMs/&gt;, 2 (or less) triples -- done

SQL&gt; DB.DBA.RDF_OBJ_FT_RULE_ADD (null, null, 'InternationalNSMs.wb');

Done. -- 0 msec.

SQL&gt;vt_inc_index_db_dba_rdf_obj();

Done. -- 26 msec.

SQL&gt;SPARQL
SELECT *
FROM &lt;http://InternationalNSMs/&gt;
WHERE
  {
    ?s ?p ?o
  }
ORDER BY ASC (str(?o))

s  sp  Índio João Macapá Júnior Tôrres Luís Araújo José
s  ru  &amp;#1054;&amp;#1085; &amp;#1076;&amp;#1086;&amp;#1073;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1082;&amp;#1072;&amp;#1088;&amp;#1090;&amp;#1086;&amp;#1096;&amp;#1082;&amp;#1080;, &amp;#1087;&amp;#1086;&amp;#1089;&amp;#1086;&amp;#1083;&amp;#1080;&amp;#1083; &amp;#1080; &amp;#1087;&amp;#1086;&amp;#1089;&amp;#1090;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1072;&amp;#1082;&amp;#1074;&amp;#1072;&amp;#1088;&amp;#1080;&amp;#1091;&amp;#1084; &amp;#1085;&amp;#1072; &amp;#1086;&amp;#1075;&amp;#1086;&amp;#1085;&amp;#1100;

2 Rows. -- 2 msec.

SQL&gt; SPARQL
SELECT *
FROM &lt;http://InternationalNSMs/&gt;
WHERE
  {
    ?s ?p ?o . ?o bif:contains "'Índio João Macapá Júnior Tôrres Luís Araújo José'" .
  }

s  sp  Índio João Macapá Júnior Tôrres Luís Araújo José

1 Rows. -- 2 msec.

SQL&gt;SPARQL
SELECT *
FROM &lt;http://InternationalNSMs/&gt;
WHERE
  {
    ?s ?p ?o . ?o bif:contains "'Indio Joao Macapa Junior Torres Luis Araujo Jose'" . }

s  sp  Índio João Macapá Júnior Tôrres Luís Araújo José

1 Rows. -- 1 msec.

SQL&gt; SPARQL
SELECT *
FROM &lt;http://InternationalNSMs/&gt;
WHERE
  {
    ?s ?p ?o . ?o bif:contains "'&amp;#1087;&amp;#1086;&amp;#1089;&amp;#1090;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1072;&amp;#1082;&amp;#1074;&amp;#1072;&amp;#1088;&amp;#1080;&amp;#1091;&amp;#1084; &amp;#1085;&amp;#1072; &amp;#1086;&amp;#1075;&amp;#1086;&amp;#1085;&amp;#1100;'" . }

s  ru  &amp;#1054;&amp;#1085; &amp;#1076;&amp;#1086;&amp;#1073;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1082;&amp;#1072;&amp;#1088;&amp;#1090;&amp;#1086;&amp;#1096;&amp;#1082;&amp;#1080;, &amp;#1087;&amp;#1086;&amp;#1089;&amp;#1086;&amp;#1083;&amp;#1080;&amp;#1083; &amp;#1080; &amp;#1087;&amp;#1086;&amp;#1089;&amp;#1090;&amp;#1072;&amp;#1074;&amp;#1080;&amp;#1083; &amp;#1072;&amp;#1082;&amp;#1074;&amp;#1072;&amp;#1088;&amp;#1080;&amp;#1091;&amp;#1084; &amp;#1085;&amp;#1072; &amp;#1086;&amp;#1075;&amp;#1086;&amp;#1085;&amp;#1100;

</programlisting>
        <para>There was also request for function that normalizes characters in
strings as free-text engine will do with XAnyNormalization=3 , the function will be provided as a separate patch and depends on this
specific patch.
    </para>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="virtini">Virtuoso Configuration File</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtricksdefinegraphwithspongeroption">
        <title>How Can I define graph with virt:rdf_sponger option set to "on"?</title>
        <para>Suppose we have the following scenario:</para>
        <orderedlist>
          <listitem>
            <para>Create Virtuoso user using Conductor for ex. with name "john" and pwd 1.</para>
          </listitem>
          <listitem>
            <para>Create for the user a RDF Sink folder for ex. with name "MySinkFolder" from type
        	"RDF Upload Folder" or use the </para>
            <para>
              <emphasis>rdf_sink</emphasis>
            </para>
            <para> folder created automatically
        	for your user.</para>
          </listitem>
          <listitem>
            <para>In the properties page of the RDF sink folder add in the WebDAV section this
        	property </para>
            <para>
              <emphasis>virt:rdf_graph</emphasis>
            </para>
            <para> with value:
</para>
            <programlisting>
http://host:port/DAV/home/&lt;user-name&gt;/&lt;rdf-sink-folder&gt;/

-- So in our example it should be:
http://example.com/DAV/home/john/MySinkFolder/
</programlisting>
          </listitem>
          <listitem>
            <para>Add another property virt:rdf_sponger with value "on".
          </para>
            <figure xml:id="sink1" floatstyle="1">
              <title> 
  </title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/sink1.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Upload RDF files to the RDF Sink folder "MySinkFolder", for ex. upload file with name
        	"data.rdf":
          </para>
            <figure xml:id="sink2" floatstyle="1">
              <title> 
  </title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/sink2.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>As result the RDF data should be stored in graph depending on your folder name etc.:
</para>
            <programlisting>
http:///local.virt/DAV/home/&lt;user-name&gt;/&lt;rdf-sink-folder&gt;/&lt;resource&gt;

-- So in our example it will be:
http:///local.virt/DAV/home/john/MySinkFolder/data.rdf
</programlisting>
            <orderedlist>
              <listitem>
                <para>Go to http://host:port/sparql ; </para>
              </listitem>
              <listitem>
                <para>Execute simple query to view the graph triples:
</para>
                <programlisting>
SELECT  *
FROM &lt;http://local.virt/DAV/home/john/MySinkFolder/data.rdf&gt;
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
                <figure xml:id="sink3" floatstyle="1">
                  <title> 
  </title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/sink3.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
                <figure xml:id="sink4" floatstyle="1">
                  <title> 
  </title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/sink4.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>In order to define any graph you want with the options from above, you should execute:
</para>
            <programlisting>
SQL&gt; DAV_PROP_SET ('/DAV/home/&lt;user-name&gt;/&lt;rdf-sink-folder&gt;/',  'virt:rdf_graph', iri, &lt;user-name&gt;, &lt;password&gt;);

-- So in our example it should be:
SQL&gt; DAV_PROP_SET ('/DAV/home/john/MySinkFolder/',  'virt:rdf_graph', 'http://mydata.com', 'john', '1');
</programlisting>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Note: calling this function uses the given IRI as the graph IRI when sponging
            	stuff put in &lt;your-rdf-sink-folder&gt;.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Finally you should execute the following command to get the RDF data from the new graph:
</para>
            <programlisting>
SQL&gt; SELECT DAV_PROP_GET ('/DAV/home/&lt;user-name&gt;/&lt;your-rdf-sink-folder&gt;/', 'virt:rdf_graph',&lt;user-name&gt;, &lt;password&gt;);

-- So in our example it should be:
SQL&gt; SELECT DAV_PROP_GET ('/DAV/home/john/MySinkFolder/', 'virt:rdf_graph','john', '1');

Query result:
DAV_PROP_GET
http://example.com/DAV/home/john/MySinkFolder/

No. of rows in result: 1
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="virtuosotipsandtricksconvprstr">
        <title>How do I use SPARUL to change a selection of property values from URI References to Literals?</title>
        <para>Assume a given graph where triples are comprised of property values that are mixed across URI References and Typed Literals as exemplified by the results of the query below:</para>
        <programlisting>
SELECT DISTINCT ?sa ?oa
FROM &lt;http://ucb.com/nbeabase&gt;
WHERE
  {
    ?sa a &lt;http://ucb.com/nbeabase/resource/Batch&gt; .
    ?sa &lt;http://ucb.com/nbeabase/resource/chemAbsNo&gt; ?oa . FILTER regex(?oa, '-','i')
  }

</programlisting>
        <para>You can use the following SPARUL pattern to harmonize the property values across relevant triples in a specific graph, as shown below:</para>
        <programlisting>
SQL&gt; SPARQL
INSERT INTO GRAPH &lt;http://ucb.com/nbeabase&gt;
  {
    ?sa &lt;http://ucb.com/nbeabase/resource/sampleId&gt; `str (?oa)`
  }
WHERE
  {
    ?sa &lt;http://ucb.com/nbeabase/resource/chemAbsNo&gt; ?oa . FILTER regex(?oa, '-','i')
  }
</programlisting>
      </section>
      <section xml:id="virtuosotipsandtricksbulkloadcl">
        <title>How is a Checkpoint performed against a Virtuoso Clustered Server?</title>
        <para>The cluster <link linkend="fn_cl_exec">cl_exec()</link>

   function is
      used to perform a checkpoint across all node of a Virtuoso cluster as follows:</para>
        <programlisting>
SQL&gt;cl_exec ('checkpoint');
</programlisting>
        <para>This typically needs to be run after loading RDF datasets into a Virtuoso cluster to prevent lose of data when the cluster is restarted.</para>
      </section>
      <section xml:id="virtuosotipsandtrickconstrprst">
        <title>How can I use CONSTRUCT with PreparedStatements?</title>
        <para>Assume a given query which uses pragma <emphasis>output:format '_JAVA_'</emphasis>

   with CONSTRUCT:</para>
        <programlisting>
SPARQL DEFINE output:format '_JAVA_'
   CONSTRUCT { ?s ?p ?o }
WHERE
  {
    ?s ?p ?o .
    FILTER (?s = iri(?::0))
  }
LIMIT 1
</programlisting>
        <para>In order to work correctly, the query should be modified to:</para>
        <programlisting>
SPARQL DEFINE output:format '_JAVA_'
   CONSTRUCT { `iri(?::0)` ?p ?o }
WHERE
  {
    `iri(?::0)` ?p ?o
  }
LIMIT 1
</programlisting>
        <para>Equivalent variant of the query is also:</para>
        <programlisting>
SPARQL DEFINE output:format '_JAVA_'
  CONSTRUCT { ?s ?p ?o }
WHERE
  {
    ?s ?p ?o .
    FILTER (?s = iri(?::0))
  }
LIMIT 1
</programlisting>
      </section>
      <section xml:id="virtuosotipsandtrickssparulupdatestrl">
        <title>How can perform SPARQL Updates without transactional log size getting exceed?</title>
        <para>Since SPARUL updates are generally not meant to be transactional, it is best to run these in:</para>
        <programlisting>
SQL&gt; log_enable (2);
</programlisting>
        <para>mode, which commits every operation as it is done. This prevents one from running out of
      	rollback space. Also for bulk updates, transaction logging can be turned off. If so, one
      	should do a manual checkpoint after the operation to ensure persistence across server restart
      	since there is no roll forward log.</para>
        <para>Alternatively, the "<emphasis>TransactionAfterImageLimit</emphasis>

  " parameter can be set
      in the virtuoso.ini config file to a higher value than its 50MB default:</para>
        <programlisting>
#virtuoso.ini
...
[Parameters]
...
TransactionAfterImageLimit = N bytes default 50000000
...
</programlisting>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdfperfsparul">Using SPARUL</link>
          </para>
          <para>
            <link linkend="ini_parameters">Virtuoso INI Parameters</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtrickscrawlercustompl">
        <title>How can I write custom crawler using PL?</title>
        <para>The following code is an example of loading data via crawler with special function to generate link for downloading:</para>
        <programlisting>
create procedure EUROPEANA_STORE (
  in _host varchar,
  in _url varchar,
  in _root varchar,
  inout _content varchar,
  in _s_etag varchar,
  in _c_type varchar,
  in store_flag int := 1,
  in udata any := null,
  in lev int := 0)
{
   declare url varchar;
   declare xt, xp any;
   declare old_mode int;
   xt := xtree_doc (_content, 2);
   xp := xpath_eval ('//table//tr/td/a[@href]/text()', xt, 0);
   commit work;
   old_mode := log_enable (3,1);
   foreach (any u in xp) do
     {
       u := cast (u as varchar);
       url := sprintf ('http://semanticweb.cs.vu.nl/europeana/api/export_graph?graph=%U&amp;mimetype=default&amp;format=turtle', u);
       dbg_printf ('%s', u);
	 {
	   declare continue handler for sqlstate '*' {
	     dbg_printf ('ERROR: %s', __SQL_MESSAGE);
	   };
	   SPARQL LOAD ?:url into GRAPH ?:u;
	 }
     }
   log_enable (old_mode, 1);
   return WS.WS.LOCAL_STORE (_host, _url, _root, _content, _s_etag, _c_type, store_flag, 0);
}
</programlisting>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="contentcrawlerrdf">Set Up the Content Crawler to Gather RDF</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtrickscrawlercustomde">
        <title>How Can I Get an exact mapping for a date?</title>
        <para>Assume a given attempts to get an exact mapping for the literal "1950" using
      	<emphasis>bif:contains</emphasis>

  :</para>
        <programlisting>
SPARQL
SELECT DISTINCT ?s ?o
FROM &lt;http://dbpedia.org&gt;
WHERE
  {
    ?s ?p ?o .
   FILTER( bif:contains (?o, '"1950"')
           &amp;&amp; isLiteral(?o)
           &amp;&amp; ( str(?p) ! = rdfs:label  || str(?p) !=  foaf:name
           &amp;&amp; ( ?o='1950')
         )
  }
</programlisting>
        <para>As an integer 1950 or date 1950-01-01 are not texts, they are not in free-text index
      	and thus invisible for CONTAINS free-text predicate.</para>
        <para>A possible way to make them visible that way is to introduce an additional RDF predicate
      	that will contain objects of the triples in question, converted to strings via str() function.</para>
        <para>Thus better results will be approached: if searches about dates are frequent then a new
      	predicate can have date/datetime values extracted from texts, eliminating the need for bif:contains.</para>
        <para>Therefor, the query from above should be changed to:</para>
        <programlisting>
SPARQL
SELECT DISTINCT ?s ?o
FROM &lt;http://dbpedia.org&gt;
WHERE
  {
    ?s ?p ?o .
    FILTER (  isLiteral(?o)
              &amp;&amp; (  str(?p) != str(rdfs:label) || str(?p) !=  foaf:name )
              &amp;&amp; str(?o) in ("1950", "1950-01-01"))
  }
</programlisting>
      </section>
      <section xml:id="virtuosotipsandtricksgetcertattr">
        <title>How Can I Get certificate attributes using SPARQL?</title>
        <para>The SPARQL query should use the <emphasis>cert:hex</emphasis>

   and
      <emphasis>cert:decimal</emphasis>

   in order to get to the values, so for ex:</para>
        <programlisting>
PREFIX cert: &lt;http://www.w3.org/ns/auth/cert#&gt;
PREFIX rsa: &lt;http://www.w3.org/ns/auth/rsa#&gt;

SELECT ?webid
FROM &lt;http://webid.myxwiki.org/xwiki/bin/view/XWiki/homepw4&gt;
WHERE
  {
    [] cert:identity ?webid ;
             rsa:modulus ?m ;
     rsa:public_exponent ?e .
     ?m cert:hex "b520f38479f5803a7ab33233155eeef8ad4e1f575b603f7780f3f60ceab1\n34618fbe117539109c015c5f959b497e67c1a3b2c96e5f098bb0bf2a6597\n779d26f55fe8d320de7af0562fd2cd067dbc9d775b22fc06e63422717d00\na6801dedafd7b54a93c3f4e59538475673972e524f4ec2a3667d0e1ac856\nd532e32bf30cef8c1adc41718920568fbe9f793daeeaeeaa7e8367b7228a\n895a6cf94545a6f6286693277a1bc7750425ce6c35d570e89453117b88ce\n24206afd216a705ad08b7c59\n"^^xsd:string .
     ?e cert:decimal "65537"^^xsd:string
  }
</programlisting>
      </section>
      <section xml:id="virtuosotipsandtricksmultithreadjdbc">
        <title>How can I make Multi Thread Virtuoso connection using JDBC?</title>
        <para>See details <link linkend="jdbcdriverhibernatesetupandtestingexmp4">here</link>

  .</para>
      </section>
      <section xml:id="virtuosotipsandtricksgetcertattr_01">
        <title>How Do I Perform Bulk Loading of RDF Source Files into one or more Graph IRIs?</title>
        <para>See details <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtBulkRDFLoader">here</link>

  .</para>
      </section>
      <section xml:id="virtuosotipsandtricksrdfschowlinfrl">
        <title>How to exploit RDF Schema and OWL Inference Rules with minimal effort?</title>
        <para>When you install Virtuoso, it's reasoner and highly scalable inference capabilities may not
      	be obvious. Typical cases involve using <emphasis>rdfs:subClassOf</emphasis>

   predicates in queries
      	and wondering why reasoning hasn't occurred in line with the semantics defined in RDF Schema.</para>
        <para>The experience applies when using more sophisticated predicates from OWL such as
      	<emphasis>owl:equivalentProperty</emphasis>

  , <emphasis>owl:equivalentClass</emphasis>

  ,
      	<emphasis>owl:sameAs</emphasis>

  , <emphasis>owl:SymmetricalProperty</emphasis>

  ,
      	<emphasis>owl:inverseOf</emphasis>

   etc ...</para>
        <para>Virtuoso implemented inference rules processing in a loosely coupled manner that allow
      	users to conditionally apply inference context (via rules) to SPARQL queries. Typically, you
      	have to create these rules following steps outlined <link linkend="rdfsparqlrule">here</link>

  .</para>
        <para>This tips and tricks note provides a shortcut for setting up and exploring RDF Schema and
      	OWL reasoning once you've installed the <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/fct_dav.vad">Virtuoso Faceted Browser VAD package</link>

  .</para>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdfsparqlrule">Inference Rules and Reasoning</link>
          </para>
          <para>
            <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtFacetBrowserInstallConfig">Virtuoso Faceted Browser Installation and configuration</link>
          </para>
          <para>
            <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtuosoFacetsWebService">Virtuoso Faceted Web Service</link>
          </para>
        </tip>
      </section>
      <section xml:id="virtuosotipsandtricksdumparbqntr">
        <title>How can I dump arbitrary query result as N-Triples?</title>
        <para>Assume the following arbitrary query:</para>
        <programlisting>
SPARQL define output:format "NT"
CONSTRUCT { ?s a ?t }
FROM virtrdf:
WHERE { ?s a ?t };
</programlisting>
        <para>For iteration over result-set of an arbitrary query, use
      	<link linkend="fn_exec_next"><function>exec_next()</function></link>

   in a loop that begins with
      	<link linkend="fn_exec"><function>exec()</function></link>

   with cursor output variable as
      	an argument and ends with <link linkend="fn_exec_close"><function>exec_close()</function></link>

      	after it is out of data.</para>
      </section>
      <section xml:id="virtuosotipsandtrickbindnmgrprst">
        <title>How do I bind named graph parameter in prepared statement?</title>
        <para>Assume the following SPARQL query:</para>
        <programlisting>
CONSTRUCT
  {
    ?s ?p ?o
  }
FROM ?context
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
        <para>To bind the named graph context of the query from above, the best solution due
     	to performance implications, is to change the syntax of the query as:</para>
        <programlisting>
CONSTRUCT
  {
    ?s ?p ?o
  }
WHERE
  {
    graph `iri(??)` { ?s ?p ?o }
  }
</programlisting>
        <para>Note: In case of using "FROM clause", it needs a constant in order to check at the
     	compile time whether the IRI refers to a graph or a graph group:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Assume "FROM clause" is used as for ex:
</para>
            <programlisting>
CONSTRUCT
  {
    ?s ?p ?o
  }
FROM `iri(??)`
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
            <itemizedlist mark="bullet">
              <listitem>
                <para>In this case can be made security checks at
           	the compile time (i.e., once) and not waste time at the run time.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>Assume "FROM clause" is used as for ex:
</para>
            <programlisting>
CONSTRUCT
  {
    ?s ?p ?o
  }
FROM iri(??)
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
            <itemizedlist mark="bullet">
              <listitem>
                <para>In this case a compile-time check, a run-time check or 50/50 mix of them can
           	be performed, depending on the security policies.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>FROM without constant would mean that security rules, if they present in the storage,
       	are used at the run time, for every triple that matches every triple pattern in the default graph.
       	This issue can be reproduced if FROM is not specified at all: if security differs from default
       	then the effect is noticeably bad.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="virtuosotipsandtricksadonetinsb">
        <title>How can I insert binary data to Virtuoso RDF storage in plain queries and with parameter binding via ADO.NET calls?</title>
        <para>The following example shows different methods for insert binary data to Virtuoso RDF storage in plain queries and with parameter binding via ADO.NET calls:</para>
        <programlisting>
# Test_Bin.cs

using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Data;
using OpenLink.Data.Virtuoso;

#if ODBC_CLIENT
namespace OpenLink.Data.VirtuosoOdbcClient
#elif CLIENT
namespace OpenLink.Data.VirtuosoClient
#else
namespace OpenLink.Data.VirtuosoTest
#endif
{
    class Test_Bin
    {
        [STAThread]
        static void Main(string[] args)
        {
            IDataReader myread = null;
            IDbConnection c;

            c = new VirtuosoConnection("HOST=localhost:1111;UID=dba;PWD=dba;");

            IDbCommand cmd = c.CreateCommand();
            int ros;

            try
            {
                c.Open();

                cmd.CommandText = "sparql clear graph &lt;ado.bin&gt;";
                cmd.ExecuteNonQuery();

//insert binary as base64Binary
                cmd.CommandText = "sparql insert into graph &lt;ado.bin&gt; { &lt;res1&gt; &lt;attr&gt; \"GpM7\"^^&lt;http://www.w3.org/2001/XMLSchema#base64Binary&gt; }";
                cmd.ExecuteNonQuery();

//insert binary as hexBinary
                cmd.CommandText = "sparql insert into graph &lt;ado.bin&gt; { &lt;res2&gt; &lt;attr&gt; \"0FB7\"^^&lt;http://www.w3.org/2001/XMLSchema#hexBinary&gt; }";
                cmd.ExecuteNonQuery();

//prepare for insert with parameter binding
                cmd.CommandText = "sparql define output:format '_JAVA_' insert into graph &lt;ado.bin&gt; { `iri($?)` &lt;attr&gt; `bif:__rdf_long_from_batch_params($?,$?,$?)` }";

//bind parameters for insert binary as base64Binary
                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "p1";
                param.DbType = DbType.AnsiString;
                param.Value = "res3";
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p2";
                param.DbType = DbType.Int32;
                param.Value = 4;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p3";
                param.DbType = DbType.AnsiString;
                param.Value = "GpM7";
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p4";
                param.DbType = DbType.AnsiString;
                param.Value = "http://www.w3.org/2001/XMLSchema#base64Binary";
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cmd.Parameters.Clear();

//bind parameters for insert binary as hexBinary
                param = cmd.CreateParameter();
                param.ParameterName = "p1";
                param.DbType = DbType.AnsiString;
                param.Value = "res4";
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p2";
                param.DbType = DbType.Int32;
                param.Value = 4;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p3";
                param.DbType = DbType.AnsiString;
                param.Value = "0FB7";
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p4";
                param.DbType = DbType.AnsiString;
                param.Value = "http://www.w3.org/2001/XMLSchema#hexBinary";
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cmd.Parameters.Clear();

//bind parameters for insert binary as byte[]
                param = cmd.CreateParameter();
                param.ParameterName = "p1";
                param.DbType = DbType.AnsiString;
                param.Value = "res5";
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p2";
                param.DbType = DbType.Int32;
                param.Value = 3;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p3";
                param.DbType = DbType.Binary;
                byte[] bin_val = {0x01, 0x02, 0x03, 0x04, 0x05};
                param.Value = bin_val;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p4";
                param.DbType = DbType.AnsiString;
                param.Value = System.DBNull.Value;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();

                cmd.Parameters.Clear();

//execute select and check the results
                cmd.CommandText = "sparql SELECT ?s ?o FROM &lt;ado.bin&gt; WHERE {?s ?p ?o}"; ;
                myread = cmd.ExecuteReader();
                int r = 0;

                while (myread.Read())
                {
                    Console.WriteLine("=== ROW === "+r);
                    for (int i = 0; i &lt; myread.FieldCount; i++)
                    {
                        string s;
                        if (myread.IsDBNull(i))
                            Console.Write("N/A|\n");
                        else
                        {
                            object o = myread.GetValue(i);
                            Type t = myread.GetFieldType(i);

                            s = myread.GetString(i);
                            Console.Write(s + "[");
                            if (o is SqlExtendedString)
                            {
                                SqlExtendedString se = (SqlExtendedString)o;
                                Console.Write("IriType=" + se.IriType + ";StrType=" + se.StrType + ";Value=" + se.ToString());
                                Console.Write(";ObjectType=" + o.GetType() + "]|\n");
                            }
                            else if (o is SqlRdfBox)
                            {
                                SqlRdfBox se = (SqlRdfBox)o;
                                Console.Write("Lang=" + se.StrLang + ";Type=" + se.StrType + ";Value=" + se.Value);
                                Console.Write(";ObjectType=" + o.GetType() + "]|\n");
                                object v = se.Value;
                                if (v is System.Byte[])
                                {
                                    byte[] vb = (byte[])v;
                                    for (int z = 0; z &lt; vb.Length; z++)
                                    {
                                        Console.WriteLine(""+z+"="+vb[z]);
                                    }
                                }
                            }
                            else
                                Console.Write(o.GetType() + "]|\n");
                        }
                    }
                    r++;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("{0} Exception caught.", e);
            }
            finally
            {
                //		  if (myread != null)
                //		    myread.Close();

                if (c.State == ConnectionState.Open)
                    c.Close();

            }

        }
    }
}
</programlisting>
        <para>Output log for example is in the log.txt:</para>
        <programlisting>
# log.txt
=== ROW === 0
res1[IriType=IRI;StrType=IRI;Value=res1;ObjectType=OpenLink.Data.Virtuoso.SqlExtendedString]|
GpM7[Lang=;Type=http://www.w3.org/2001/XMLSchema#base64Binary;Value=GpM7;ObjectType=OpenLink.Data.Virtuoso.SqlRdfBox]|
=== ROW === 1
res2[IriType=IRI;StrType=IRI;Value=res2;ObjectType=OpenLink.Data.Virtuoso.SqlExtendedString]|
0FB7[Lang=;Type=http://www.w3.org/2001/XMLSchema#hexBinary;Value=0FB7;ObjectType=OpenLink.Data.Virtuoso.SqlRdfBox]|
=== ROW === 2
res3[IriType=IRI;StrType=IRI;Value=res3;ObjectType=OpenLink.Data.Virtuoso.SqlExtendedString]|
GpM7[Lang=;Type=http://www.w3.org/2001/XMLSchema#base64Binary;Value=GpM7;ObjectType=OpenLink.Data.Virtuoso.SqlRdfBox]|
=== ROW === 3
res4[IriType=IRI;StrType=IRI;Value=res4;ObjectType=OpenLink.Data.Virtuoso.SqlExtendedString]|
0FB7[Lang=;Type=http://www.w3.org/2001/XMLSchema#hexBinary;Value=0FB7;ObjectType=OpenLink.Data.Virtuoso.SqlRdfBox]|
=== ROW === 4
res5[IriType=IRI;StrType=IRI;Value=res5;ObjectType=OpenLink.Data.Virtuoso.SqlExtendedString]|
0102030405[System.Byte[]]|
</programlisting>
      </section>
      <section xml:id="instrdfvs">
        <title>How can I insert RDF data from Visual Studio to Virtuoso?</title>
        <para>The following example shows how to insert RDF Data from Visual Studio to Virtuoso:</para>
        <programlisting>
using System;
using System.Runtime.InteropServices;
using System.Text;
using System.Data;
using OpenLink.Data.Virtuoso;

#if ODBC_CLIENT
namespace OpenLink.Data.VirtuosoOdbcClient
#elif CLIENT
namespace OpenLink.Data.VirtuosoClient
#else
namespace OpenLink.Data.VirtuosoTest
#endif
{
    class Test_Insert
    {
        [STAThread]
        static void Main(string[] args)
        {
            IDataReader myread = null;
            IDbConnection c;

            c = new VirtuosoConnection("HOST=localhost:1111;UID=dba;PWD=dba;Charset=UTF-8");

            IDbCommand cmd = c.CreateCommand();
            int ros;

            try
            {
                c.Open();

                cmd.CommandText = "sparql clear graph &lt;ado.net&gt;";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P01&gt; \"131\"^^&lt;http://www.w3.org/2001/XMLSchema#short&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P02&gt; \"1234\"^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P03&gt; \"12345.12\"^^&lt;http://www.w3.org/2001/XMLSchema#float&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P04&gt; \"123456.12\"^^&lt;http://www.w3.org/2001/XMLSchema#double&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P05&gt; \"123456.12\"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P06&gt; \"01020304\"^^&lt;http://www.w3.org/2001/XMLSchema#hexBinary&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P07&gt; \"01.20.1980T04:51:13\"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P08&gt; \"01.20.1980\"^^&lt;http://www.w3.org/2001/XMLSchema#date&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P09&gt; \"01:20:19\"^^&lt;http://www.w3.org/2001/XMLSchema#time&gt; }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql insert into graph &lt;ado.net&gt; { &lt;a&gt; &lt;P10&gt; \"test\" }";
                cmd.ExecuteNonQuery();

                cmd.CommandText = "sparql define output:format '_JAVA_' insert into graph &lt;ado.net&gt; { &lt;b&gt; `iri($?)` `bif:__rdf_long_from_batch_params($?,$?,$?)` }";

//add Object URI
                add_triple(cmd, "S01", 1, "test1", null);

//add Object BNode
                add_triple(cmd, "S02", 1, "_:test2", null);

//add Literal
                add_triple(cmd, "S03", 3, "test3", null);

//add Literal with Datatype
                add_triple(cmd, "S04", 4, "1234", "http://www.w3.org/2001/XMLSchema#integer");

//add Literal with Lang
                add_triple(cmd, "S05", 5, "test5", "en");

                add_triple(cmd, "S06", 3, (short)123, null);
                add_triple(cmd, "S07", 3, 1234, null);
                add_triple(cmd, "S08", 3, (float)12345.12, null);
                add_triple(cmd, "S09", 3, 123456.12, null);
                add_triple(cmd, "S10", 3, new DateTime(2001, 02, 23, 13, 44, 51, 234), null);
                add_triple(cmd, "S11", 3, new DateTime(2001, 02, 24), null);
                add_triple(cmd, "S12", 3, new TimeSpan(19, 41, 23), null);

                add_triple(cmd, "S13", 4, "GpM7", "http://www.w3.org/2001/XMLSchema#base64Binary");
                add_triple(cmd, "S14", 4, "0FB7", "http://www.w3.org/2001/XMLSchema#hexBinary");
                byte[] bin_val = { 0x01, 0x02, 0x03, 0x04, 0x05 };
                add_triple(cmd, "S15", 3, bin_val, null);

            }
            catch (Exception e)
            {
                Console.WriteLine("{0} Exception caught.", e);
            }
            finally
            {

                if (c.State == ConnectionState.Open)
                    c.Close();

            }

        }

        static void add_triple(IDbCommand cmd, string sub, int ptype, object val, string val_add)
        {
                cmd.Parameters.Clear();

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "p1";
                param.DbType = DbType.AnsiString;
                param.Value = sub;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p2";
                param.DbType = DbType.Int32;
                param.Value = ptype;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p3";
                if (val != null &amp;&amp; val.GetType() == typeof (System.String))
                    param.DbType = DbType.AnsiString;
                param.Value = val;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "p4";
                param.DbType = DbType.AnsiString;
                param.Value = val_add;
                cmd.Parameters.Add(param);

                cmd.ExecuteNonQuery();
        }

    }
}
</programlisting>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdfinsertmethods">RDF Insert Methods in Virtuoso</link>
          </para>
        </tip>
      </section>
      <section xml:id="descrmd">
        <title>How does default describe mode work?</title>
        <para>The default describe mode works only if subject has a type/class. To get any anonymous subject described CBD mode should be used:</para>
        <programlisting>
$ curl -i -L -H "Accept: application/rdf+xml" http://lod.openlinksw.com/describe/?url=http%3A%2F%2Fwww.mpii.de%2Fyago%2Fresource%2FEddie%255FMurphy
HTTP/1.1 303 See Other
Date: Mon, 21 Mar 2011 14:24:36 GMT
Server: Virtuoso/06.02.3129 (Linux) x86_64-generic-linux-glibc25-64  VDB
Content-Type: text/html; charset=UTF-8
Accept-Ranges: bytes
TCN: choice
Vary: negotiate,accept,Accept-Encoding
Location: http://lod.openlinksw.com/sparql?query=%20DESCRIBE%20%3Chttp%3A%2F%2Fwww.mpii.de%2Fyago%2Fresource%2FEddie%255FMurphy%3E&amp;format=application%
2Frdf%2Bxml
Content-Length: 0

HTTP/1.1 200 OK
Date: Mon, 21 Mar 2011 14:24:37 GMT
Server: Virtuoso/06.02.3129 (Linux) x86_64-generic-linux-glibc25-64  VDB
Accept-Ranges: bytes
Content-Type: application/rdf+xml; charset=UTF-8
Content-Length: 467967

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"&gt;
&lt;rdf:Description rdf:about="http://www.mpii.de/yago/resource/MTV%5FMovie%5FAward%5Ffor%5FBest%5FComedic%5FPerformance"&gt;&lt;n0pred:hasInternalWikipediaLinkTo xmlns:n0pred="http://www.mpii.de/yago/resource/" rdf:resource="http://www.mpii.de/yago/resource/Eddie%5FMurphy"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.mpii.de/yago/resource/#fact_23536547421"&gt;&lt;rdf:subject rdf:resource="http://www.mpii.de/yago/resource/Eddie%5FMurphy"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.mpii.de/yago/resource/#fact_23536896725"&gt;&lt;rdf:object rdf:resource="http://www.mpii.de/yago/resource/Eddie%5FMurphy"/&gt;&lt;/rdf:Description&gt;
...
</programlisting>
      </section>
      <section xml:id="notresphttp">
        <title>What should I do if the Virtuoso Server is not responding to HTTP requests?</title>
        <para>Assume the Virtuoso server is not responding to HTTP requests although SQL connection is working. In order to determine what activity is being performed that might account for this:</para>
        <orderedlist>
          <listitem>
            <para>Check the status:
</para>
            <programlisting>
SQL&gt; status('');
REPORT
VARCHAR
_______________________________________________________________________________

OpenLink Virtuoso VDB Server
Version 06.02.3129-pthreads for Linux as of Mar 16 2011
Registered to Uriburner (Personal Edition, unlimited connections)
Started on: 2011/03/17 10:49 GMT+60

Database Status:
  File size 0, 37598208 pages, 7313125 free.
  1000000 buffers, 993399 used, 76771 dirty 0 wired down, repl age 25548714 0 w. io 0 w/crsr.
  Disk Usage: 2642884 reads avg 4 msec, 30% r 0% w last  1389 s, 1557572 writes,
    15331 read ahead, batch = 79.  Autocompact 308508 in 219226 out, 28% saved.
Gate:  71130 2nd in reads, 0 gate write waits, 0 in while read 0 busy scrap.
Log = virtuoso.trx, 14922248 bytes
VDB: 0 exec 0 fetch 0 transact 0 error
1757362 pages have been changed since last backup (in checkpoint state)
Current backup timestamp: 0x0000-0x00-0x00
Last backup date: unknown
Clients: 5 connects, max 2 concurrent
RPC: 116 calls, -1 pending, 1 max until now, 0 queued, 2 burst reads (1%), 0 second brk=9521074176
Checkpoint Remap 331113 pages, 0 mapped back. 1180 s atomic time.
    DB master 37598208 total 7313125 free 331113 remap 40593 mapped back
   temp  569856 total 569851 free

Lock Status: 52 deadlocks of which 0 2r1w, 86078 waits,
   Currently 1 threads running 0 threads waiting 0 threads in vdb.
Pending:

25 Rows. -- 1274 msec.
SQL&gt;

</programlisting>
          </listitem>
          <listitem>
            <para>Connect with the PL debugger and see what is running currently using the info threads call:
</para>
            <programlisting>
$ isql 1111 dba &lt;password&gt; -D
DEBUG&gt; info threads
</programlisting>
          </listitem>
          <listitem>
            <para>This should return the current code being executed by the Sever.</para>
          </listitem>
          <listitem>
            <para>Run 
            <link linkend="fn_txn_killall"><function>txn_killall()</function></link>
             to kill any pending transactions which may enable the server to start responding to HTTP requests again:
</para>
            <programlisting>

SQL&gt; txn_killall();

Done. -- 866 msec.
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="cxmlurlptrn">
        <title>What CXML params are supported for the SPARQL URL pattern?</title>
        <para>The following options are supported for CXML link behavior in the SPARQL URL Pattern:</para>
        <orderedlist>
          <listitem>
            <para>Local faceted navigation links:
</para>
            <programlisting>
# CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=&amp;:

http://lod.openlinksw.com/sparql?default-graph-uri=&amp;should-sponge=&amp;query=SELECT+DISTINCT+%3Fcafe+%3Flat+%3Flong+%3Fcafename+%3Fchurchname++%28+bif%3Around%28bif%3Ast_distance+%28%3Fchurchgeo%2C+%3Fcafegeo%29%29+%29++WHERE++{++++%3Fchurch+a+lgv%3Aplace_of_worship+.++++%3Fchurch+geo%3Ageometry+%3Fchurchgeo+.++++%3Fchurch+lgv%3Aname+%3Fchurchname+.++++%3Fcafe+a+lgv%3Acafe+.++++%3Fcafe+lgv%3Aname+%3Fcafename+.++++%3Fcafe+geo%3Ageometry+%3Fcafegeo+.++++%3Fcafe+geo%3Alat+%3Flat+.++++%3Fcafe+geo%3Along+%3Flong+.++++FILTER+%28+bif%3Ast_intersects+%28%3Fchurchgeo%2C+bif%3Ast_point+%282.3498%2C48.853%29%2C5%29++%26%26+bif%3Ast_intersects+%28%3Fcafegeo%2C+%3Fchurchgeo%2C+0.2%29+%29+}+LIMIT+50&amp;debug=on&amp;timeout=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=&amp;save=display&amp;fname=
</programlisting>
          </listitem>
          <listitem>
            <para>External Resource Links:
</para>
            <programlisting>
# CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=121:

http://lod.openlinksw.com/sparql?default-graph-uri=&amp;should-sponge=&amp;query=SELECT+DISTINCT+%3Fcafe+%3Flat+%3Flong+%3Fcafename+%3Fchurchname++%28+bif%3Around%28bif%3Ast_distance+%28%3Fchurchgeo%2C+%3Fcafegeo%29%29+%29++WHERE++{++++%3Fchurch+a+lgv%3Aplace_of_worship+.++++%3Fchurch+geo%3Ageometry+%3Fchurchgeo+.++++%3Fchurch+lgv%3Aname+%3Fchurchname+.++++%3Fcafe+a+lgv%3Acafe+.++++%3Fcafe+lgv%3Aname+%3Fcafename+.++++%3Fcafe+geo%3Ageometry+%3Fcafegeo+.++++%3Fcafe+geo%3Alat+%3Flat+.++++%3Fcafe+geo%3Along+%3Flong+.++++FILTER+%28+bif%3Ast_intersects+%28%3Fchurchgeo%2C+bif%3Ast_point+%282.3498%2C48.853%29%2C5%29++%26%26+bif%3Ast_intersects+%28%3Fcafegeo%2C+%3Fchurchgeo%2C+0.2%29+%29+}+LIMIT+50&amp;debug=on&amp;timeout=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=121&amp;save=display&amp;fname=

</programlisting>
          </listitem>
          <listitem>
            <para>External faceted navigation links:
</para>
            <programlisting>
# CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=LOCAL_PIVOT:

http://lod.openlinksw.com/sparql?default-graph-uri=&amp;should-sponge=&amp;query=SELECT+DISTINCT+%3Fcafe+%3Flat+%3Flong+%3Fcafename+%3Fchurchname++%28+bif%3Around%28bif%3Ast_distance+%28%3Fchurchgeo%2C+%3Fcafegeo%29%29+%29++WHERE++{++++%3Fchurch+a+lgv%3Aplace_of_worship+.++++%3Fchurch+geo%3Ageometry+%3Fchurchgeo+.++++%3Fchurch+lgv%3Aname+%3Fchurchname+.++++%3Fcafe+a+lgv%3Acafe+.++++%3Fcafe+lgv%3Aname+%3Fcafename+.++++%3Fcafe+geo%3Ageometry+%3Fcafegeo+.++++%3Fcafe+geo%3Alat+%3Flat+.++++%3Fcafe+geo%3Along+%3Flong+.++++FILTER+%28+bif%3Ast_intersects+%28%3Fchurchgeo%2C+bif%3Ast_point+%282.3498%2C48.853%29%2C5%29++%26%26+bif%3Ast_intersects+%28%3Fcafegeo%2C+%3Fchurchgeo%2C+0.2%29+%29+}+LIMIT+50&amp;debug=on&amp;timeout=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=LOCAL_PIVOT&amp;save=display&amp;fname=
</programlisting>
          </listitem>
          <listitem>
            <para>External description resource(TTL):
</para>
            <programlisting>
# CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=LOCAL_TTL:

http://lod.openlinksw.com/sparql?default-graph-uri=&amp;should-sponge=&amp;query=SELECT+DISTINCT+%3Fcafe+%3Flat+%3Flong+%3Fcafename+%3Fchurchname++%28+bif%3Around%28bif%3Ast_distance+%28%3Fchurchgeo%2C+%3Fcafegeo%29%29+%29++WHERE++{++++%3Fchurch+a+lgv%3Aplace_of_worship+.++++%3Fchurch+geo%3Ageometry+%3Fchurchgeo+.++++%3Fchurch+lgv%3Aname+%3Fchurchname+.++++%3Fcafe+a+lgv%3Acafe+.++++%3Fcafe+lgv%3Aname+%3Fcafename+.++++%3Fcafe+geo%3Ageometry+%3Fcafegeo+.++++%3Fcafe+geo%3Alat+%3Flat+.++++%3Fcafe+geo%3Along+%3Flong+.++++FILTER+%28+bif%3Ast_intersects+%28%3Fchurchgeo%2C+bif%3Ast_point+%282.3498%2C48.853%29%2C5%29++%26%26+bif%3Ast_intersects+%28%3Fcafegeo%2C+%3Fchurchgeo%2C+0.2%29+%29+}+LIMIT+50&amp;debug=on&amp;timeout=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=LOCAL_TTL&amp;save=display&amp;fname=
</programlisting>
          </listitem>
          <listitem>
            <para>External description resource(CXML):
</para>
            <programlisting>
# CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=LOCAL_CXML:

http://lod.openlinksw.com/sparql?default-graph-uri=&amp;should-sponge=&amp;query=SELECT+DISTINCT+%3Fcafe+%3Flat+%3Flong+%3Fcafename+%3Fchurchname++%28+bif%3Around%28bif%3Ast_distance+%28%3Fchurchgeo%2C+%3Fcafegeo%29%29+%29++WHERE++{++++%3Fchurch+a+lgv%3Aplace_of_worship+.++++%3Fchurch+geo%3Ageometry+%3Fchurchgeo+.++++%3Fchurch+lgv%3Aname+%3Fchurchname+.++++%3Fcafe+a+lgv%3Acafe+.++++%3Fcafe+lgv%3Aname+%3Fcafename+.++++%3Fcafe+geo%3Ageometry+%3Fcafegeo+.++++%3Fcafe+geo%3Alat+%3Flat+.++++%3Fcafe+geo%3Along+%3Flong+.++++FILTER+%28+bif%3Ast_intersects+%28%3Fchurchgeo%2C+bif%3Ast_point+%282.3498%2C48.853%29%2C5%29++%26%26+bif%3Ast_intersects+%28%3Fcafegeo%2C+%3Fchurchgeo%2C+0.2%29+%29+}+LIMIT+50&amp;debug=on&amp;timeout=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=&amp;CXML_redir_for_hrefs=LOCAL_CXML&amp;save=display&amp;fname=
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="replallgr">
        <title>How can I replicate all graphs?</title>
        <para>To replicate all graphs ( except the system graph http://www.openlinksw.com/schemas/virtrdf# ),
      	one should use http://www.openlinksw.com/schemas/virtrdf#rdf_repl_all as graph IRI:</para>
        <programlisting>
SQL&gt; DB.DBA.RDF_RDF_REPL_GRAPH_INS ('http://www.openlinksw.com/schemas/virtrdf#rdf_repl_all');
</programlisting>
      </section>
      <section xml:id="rndsalltr">
        <title>What is best method to get a random sample of all triples for a subset of all the resources
      	of a SPARQL endpoint?</title>
        <para>The best method to get a random sample of all triples for a subset of all the resources of
      	a SPARQL endpoint, is decimation in its original style:</para>
        <programlisting>
SELECT ?s ?p ?o
FROM &lt;some-graph&gt;
WHERE
  {
    ?s ?p ?o .
    FILTER ( 1 &gt; bif:rnd (10, ?s, ?p, ?o) )
  }
</programlisting>
        <para>By tweaking first argument of <emphasis>bif:rnd()</emphasis>

   and the left side of the
      inequality you can tweak decimation ratio from 1/10 to the desired value. What's important is
      to know that the SQL optimizer has a right to execute <emphasis>bif:rnd (10)</emphasis>

   only once
      at the beginning of the query, so we had to pass additional three arguments that can be known only
      when a table row is fetched so <emphasis>bif:rnd (10, ?s, ?p, ?o)</emphasis>

   is calculated for every
      row and thus any given row is either returned or ignored independently from others.</para>
        <para>However, <emphasis>bif:rnd (10, ?s, ?p, ?o)</emphasis>

   contains a subtle inefficiency. In RDF
      store, graph nodes are stored as numeric IRI IDs and literal objects can be stored in a separate
      table. The call of an SQL function needs arguments of traditional SQL datatypes, so the query
      processor will extract the text of IRI for each node and the full value for each literal object.
      That is significant waste of time. The workaround is:</para>
        <programlisting>
SPARQL
SELECT ?s ?p ?o
FROM &lt;some-graph&gt;
WHERE
  {
    ?s ?p ?o .
    FILTER ( 1&gt;  &lt;SHORT_OR_LONG::bif:rnd&gt;  (10, ?s, ?p, ?o))
  }
</programlisting>
        <para>This tells the SPARQL front-end to omit redundant conversions of values.</para>
      </section>
      <section xml:id="replallgr_01">
        <title>How can I replicate all graphs?</title>
        <para>To replicate all graphs ( except the system graph http://www.openlinksw.com/schemas/virtrdf# ),
      	one should use http://www.openlinksw.com/schemas/virtrdf#rdf_repl_all as graph IRI:</para>
        <programlisting>
SQL&gt; DB.DBA.RDF_RDF_REPL_GRAPH_INS ('http://www.openlinksw.com/schemas/virtrdf#rdf_repl_all');
</programlisting>
      </section>
      <section xml:id="sparqlmkmeshup">
        <title>How can I use SPARQL to make Meshups?</title>
        <para>The following example demonstrates how to use SPARQL in order to make Meshups:</para>
        <programlisting>
PREFIX dbo: &lt;http://dbpedia.org/ontology/&gt;
PREFIX rtb: &lt;http://www.openlinksw.com/schemas/oat/rdftabs#&gt;

CONSTRUCT
  {
    ?museum geo:geometry ?museumgeo ;
             rtb:useMarker 'star' ;
             foaf:name ?musname;
             rdfs:comment ?muscomment.
    ?edu geo:geometry ?edugeo ;
          rtb:useMarker 'book' ;
          foaf:name ?eduname;
          rdfs:comment ?educomment.
    ?wh geo:geometry ?whgeo;
            rtb:useMarker '03';
            foaf:name ?whname;
            rdfs:comment ?whcomment.
  }
WHERE
  {
    {
      ?museum a dbo:Museum;
              geo:geometry ?museumgeo;
              foaf:name ?musname;
              rdfs:comment ?muscomment.
      filter (lang(?musname)='en' &amp;&amp; lang(?muscomment)='en')
    }
    UNION
    {
      ?edu a dbo:University;
           geo:geometry ?edugeo;
           foaf:name ?eduname;
           rdfs:comment ?educomment.
      filter (lang(?eduname)='en' &amp;&amp; lang(?educomment)='en')
    }
    UNION
    {
      ?wh a dbo:WorldHeritageSite;
            geo:geometry ?whgeo;
            rdfs:label ?whname;
            rdfs:comment ?whcomment.
      filter (lang(?whname)='en' &amp;&amp; lang(?whcomment)='en')
    }
  }
</programlisting>
      </section>
      <section xml:id="clusternetmeter">
        <title>How can I use the net_meter utility before starting the ingestion to a cluster?</title>
        <para>The <link linkend="ch-overview">net_meter</link>

   utility is a SQL procedure that runs a network
test procedure on every host of the cluster. The network test procedure sends a message
to every other host of the cluster and waits for the replies from each host. After the last
reply is received the action is repeated. This results in a symmetrical load of the network,
all points acting as both clients and servers to all other points.
      </para>
        <programlisting>
net_meter (
  in n_threads int,
  in n_batches int,
  in bytes int,
  in ops_per_batch int)
</programlisting>
        <para>The parameters have the following meaning:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>
              <emphasis>n_threads</emphasis>
            </para>
            <para>: The number of network test instances started on
each host. A value of 4 on a cluster of 4 hosts would result in a total of 16 network test
procedures spread over 4 processes.
        </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>n_batches</emphasis>
            </para>
            <para>: The number of message exchanges done by each network
test procedure. A message exchange consists of sending one request to every other host of the cluster
and of waiting for all to have replied.
        </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>bytes</emphasis>
            </para>
            <para>: The number of bytes sent to each host in each message
exchange. The reply from each host has the same number of bytes.
        </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>ops_per_batch</emphasis>
            </para>
            <para>: This causes each message batch to contain several
operations. In practice this is a multiplier on the number of bytes.
        </para>
          </listitem>
        </itemizedlist>
        <section xml:id="clusternetmeterex">
          <title>Example</title>
          <para>Assume anuser has run 2 sets of tests on a cluster:</para>
          <para>The first one was 1 thread, 1000 batches, 1000 bytes per exchange, 1 operation per batch:</para>
          <programlisting>
SQL&gt; net_meter (1, 1000, 1000, 1);

round_trips     MBps
REAL            REAL

_______________________________________

1245.393315542000254  2.489418401123078

1 Rows. -- 39345 msec.
</programlisting>
          <para>resulted in a measured throughput of 2.5 MBps</para>
          <para>The second one was 1 thread, 5000 batches, 10000 bytes per exchange, 1 operation per batch:</para>
          <programlisting>
SQL&gt; net_meter (1, 5000, 10000, 1);

round_trips     MBps
REAL            REAL

___________________________________________

15915.291672080031181  305.017186586494738

1 Rows. -- 15394 msec.
</programlisting>
          <para>resulted in a measured throughput of 305 MBps.</para>
          <para>This indicates that the user's network is slow when sending multiple short messages.</para>
          <para>When using the ingestion you should check the:</para>
          <programlisting>
status('cluster');
</programlisting>
          <para>command a few times and check the XX KB/s amount which should be around or above the 2500 mark.</para>
        </section>
      </section>
      <section xml:id="loadcmrdf">
        <title>How can I use the LOAD command to import RDF data?</title>
        <para>SPARQL INSERT can be done using the LOAD command:</para>
        <programlisting>
SPARQL INSERT INTO &lt;..&gt; { .... } [[FROM ...] { ... }]

SPARQL LOAD &lt;x&gt; [INTO &lt;y&gt;]

-- &lt;ResourceURL&gt; will be the Graph IRI of the loaded data:
SPARQL LOAD &lt;ResourceURL&gt;
</programlisting>
        <section xml:id="loadcmrdfex">
          <title>Examples</title>
          <section xml:id="loadcmrdfex1">
            <title>Load from Resource URL</title>
            <para>In order to load data from resource URL for ex:
http://www.w3.org/People/Berners-Lee/card#i , execute from isql the following command:</para>
            <programlisting>
SQL&gt; SPARQL LOAD &lt;http://www.w3.org/People/Berners-Lee/card#i&gt;;
callret-0
VARCHAR
_______________________________________________________________________________

Load &lt;http://www.w3.org/People/Berners-Lee/card#i&gt; into graph &lt;http://www.w3.org/People/Berners-Lee/card#i&gt; -- done

1 Rows. -- 703 msec.
SQL&gt;
</programlisting>
          </section>
          <section xml:id="loadcmrdfex2">
            <title>Load from file</title>
            <orderedlist>
              <listitem>
                <para>Create DAV collection which is visible to public, for ex: http://example.com/DAV/tmp</para>
              </listitem>
              <listitem>
                <para>Upload to the DAV collection a file for ex. with name listall.rq and with the following content:
</para>
                <programlisting>
SPARQL
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX sioc: &lt;http://rdfs.org/sioc/ns#&gt;
SELECT ?x ?p ?o
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?x rdf:type sioc:User .
    ?x ?p ?o.
    ?x sioc:id ?id .
    FILTER REGEX(str(?id), "^King")
  }
ORDER BY ?x
</programlisting>
              </listitem>
              <listitem>
                <para>Execute from ISQL the following command:
</para>
                <programlisting>
SQL&gt;SPARQL LOAD bif:concat ("http://", bif:registry_get("URIQADefaultHost"), "/DAV/tmp/listall.rq") into graph &lt;http://myNewGraph.com&gt;;
callret-0
VARCHAR
_______________________________________________________________________________

Load &lt;http://example.com/DAV/tmp/listall.rq&gt; into graph &lt;http://myNewGraph.com&gt; -- done

1 Rows. -- 321 msec.
</programlisting>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="loadcmrdfex3">
            <title>Directly LOAD triples using ISQL</title>
            <programlisting>
SQL&gt;SPARQL INSERT INTO graph &lt;http://mygraph.com&gt;
{
  &lt;http://myopenlink.net/dataspace/Kingsley#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .

  &lt;http://myopenlink.net/dataspace/Kingsley#this&gt;
  &lt;http://rdfs.org/sioc/ns#id&gt;
  &lt;Kingsley&gt; .

  &lt;http://myopenlink.net/dataspace/Caroline#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .

  &lt;http://myopenlink.net/dataspace/Caroline#this&gt;
  &lt;http://rdfs.org/sioc/ns#id&gt;
  &lt;Caroline&gt; .
};
</programlisting>
          </section>
        </section>
      </section>
      <section xml:id="degrprc">
        <title>How can I delete graphs using stored procedure?</title>
        <para>The following script demonstrates the use of custom stored procedures for deleting graph(s).
      	It first creates a table <emphasis>GRAPHS_TO_DELETE</emphasis>

  , into which the names of the graphs
      	to be deleted should be inserted, as follows:</para>
        <programlisting>
use MYUSR;

create procedure GRAPHS_TO_DELETE_SP (in gd_iris any)
{
  declare gd_iri iri_id;
  declare dp, row any;
  result_names (gd_iri);
  dp := dpipe (0, '__I2IDN');
  foreach (varchar iri in GD_IRIS) do
    {
      dpipe_input (dp, iri);
    }
  while (0 &lt;&gt; (row := dpipe_next (dp, 0)))
    {
      result (row[0]);
    }
}
;

drop view GRAPHS_TO_DELETE_VIEW;
create procedure view GRAPHS_TO_DELETE_VIEW as MYUSR.DBA.GRAPHS_TO_DELETE_SP (gd_iris) (gd_iri any);

create procedure DELETE_GRAPHS (in g_iris any)
{
  declare g_iids any;
  if (not isvector (g_iris) and g_iris is not null)
    signal ('22023', '.....', 'The input argument must be an array of strings or null');
  if (not length (g_iris))
    return 0;
  delete from DB.DBA.RDF_QUAD where G in (select * from GRAPHS_TO_DELETE_VIEW where gd_iris = g_iris) option (loop exists);
  return row_count ();
}
;
</programlisting>
        <para>Finally call the procedure DELETE_GRAPHS to perform the deletion of the specified graphs.
      	Note it does not return a result set and can be called as follows:</para>
        <programlisting>
SQL&gt; select MYUSR.DBA.DELETE_GRAPHS (vector ('g1', 'g2', 'g3'));
</programlisting>
        <para>This will return the number of triples removed from the specified graphs.</para>
        <para>Note: the procedure only applies to the cluster so to get IRI IDs via partitioned
      	pipe (DAQ). It is not usable on single.</para>
      </section>
      <section xml:id="sparulspongertut">
        <title>How can I use SPARUL to add missing triples to a Named Graph?</title>
        <section xml:id="sparulspongertutwhat">
          <title>What?</title>
          <para>Use of SPARUL to add missing triples to a Named Graph. For example, an ontology/vocabulary
        	extension.</para>
        </section>
        <section xml:id="sparulspongertutwhy">
          <title>Why?</title>
          <para>A lot of ontologies and vocabularies started life prior to emergence of the Linked Data
        	meme. As a result, many do not include rdfs:isDefinedBy relations (via triples) that associate
        	Classes and Properties in an ontology with the ontology itself, using de-referencable URIs.
        	The downside of this pattern is that Linked Data's follow-your-nose pattern isn't exploitable
        	when viewing these ontologies e.g., when using contemporary Linked Data aware browsers.</para>
        </section>
        <section xml:id="sparulspongertuthow">
          <title>How?</title>
          <para>If SPARUL privileges are assigned to SPARQL or other accounts associated with SPARQL
        	Endpoint. Or via WebID? protected SPARQL endpoint with SPARUL is granted to SPARQL or specific
        	accounts or WebIDs in a group.</para>
          <programlisting>
INSERT INTO &lt;LocalNamedGraphIRI&gt;
  { ?s rdfs:DefinedBy &lt;LocalOntologyEntityURI&gt;.
    ?o rdfs:isDefinedBy &lt;http://www.w3.org/ns/auth/acl&gt;. }
FROM &lt;ExtSourceNamedGraphIRI&gt;
WHERE
  {
    ?s a ?o
  }
</programlisting>
          <section xml:id="sparulspongertutex">
            <title>Example</title>
            <orderedlist>
              <listitem>
                <para>Load Quad Named Graph via Sponger based query:
</para>
                <programlisting>
DEFINE get:soft "replace"
SELECT DISTINCT *
FROM &lt;http://www.w3.org/ns/auth/acl#&gt;
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
              </listitem>
              <listitem>
                <para>Added Triples via SPARUL to Ontology Named Graph:
</para>
                <programlisting>
INSERT INTO &lt;http://www.w3.org/ns/auth/acl#&gt;
  {  ?s rdfs:DefinedBy &lt;http://www.w3.org/ns/auth/acl&gt;.
     ?o rdfs:DefinedBy &lt;http://www.w3.org/ns/auth/acl&gt;. }
FROM &lt;http://www.w3.org/ns/auth/acl#&gt;
WHERE
  {
    ?s a ?o
  }
</programlisting>
              </listitem>
              <listitem>
                <para>Via Conductor or Command-line iSQL courtesy of SPASQL execute the following statements:
            	</para>
                <orderedlist>
                  <listitem>
                    <para>Remove an existing graph:
</para>
                    <programlisting>
SPARQL
CLEAR GRAPH &lt;http://www.w3.org/ns/auth/acl/&gt; ;

SPARQL
CLEAR GRAPH &lt;http://www.w3.org/ns/auth/acl&gt; ;

SPARQL
CLEAR GRAPH &lt;http://www.w3.org/ns/auth/acl#&gt; ;
</programlisting>
                  </listitem>
                  <listitem>
                    <para>Load a new graph:
</para>
                    <programlisting>
SPARQL
LOAD &lt;http://www.w3.org/ns/auth/acl&gt; ;
</programlisting>
                  </listitem>
                  <listitem>
                    <para>Add missing rdfs:isDefinedBy triples via SPARUL:
</para>
                    <programlisting>
SPARQL
INSERT INTO &lt;http://www.w3.org/ns/auth/acl&gt;
  {  ?s rdfs:DefinedBy &lt;http://www.w3.org/ns/auth/acl&gt;.
     ?o rdfs:DefinedBy &lt;http://www.w3.org/ns/auth/acl&gt;. }
FROM &lt;http://www.w3.org/ns/auth/acl&gt;
WHERE
  {
    ?s a ?o
  } ;
</programlisting>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>Verification: Access the following url: </para>
                <para>
                  <emphasis>http://&lt;cname&gt;/describe/?uri=http://www.w3.org/ns/auth/acl&gt;</emphasis>
                </para>
              </listitem>
            </orderedlist>
            <tip>
              <title>See Also:</title>
              <para>
                <link linkend="rdfsparul">SPARUL -- an Update Language For RDF Graphs</link>
              </para>
              <para>
                <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSponger">Virtuoso Sponger</link>
                <link linkend="rdfsparul"/>
              </para>
            </tip>
          </section>
        </section>
      </section>
      <section xml:id="ifsparqlbi">
        <title>How can I use the SPARQL IF operator for SPARQL-BI endpoint?</title>
        <para>Assume a SPARQL query is to be executed against the Virtuoso DBpedia SPARQL endpoint
      	(<link xlink:href="http://dbpedia.org/sparql">http://dbpedia.org/sparql</link>

  ) to retrieve the
      	decimal longitude of the "NJ Devils' hometown" with cardinal direction, which determines
      	whether the decimal is positive (in the case of East) or negative (in the case of West).</para>
        <para>Virtuoso supports SPARQL-BI, an extended SPARQL 1.0 implementation from before SPARQL 1.1
      	was ratified, thus the "IF" operator is not currently supported, but an equivalent
      	<link linkend="fn_either"><function>bif:either</function></link>

   built-in SQL function does
      	exist enabling an equivalent query to be executed:</para>
        <programlisting>
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX dbo: &lt;http://dbpedia.org/ontology/&gt;
PREFIX dbp: &lt;http://dbpedia.org/property/&gt;
SELECT ?team ( (bif:either( ?ew = 'W', -1, 1)) * (?d + (((?m * 60) + ?s) / 3600.0)) as ?v)
  {
    ?team a dbo:HockeyTeam . ?team rdfs:label 'New Jersey Devils'@en .
    ?team dbp:city ?cityname . ?city rdfs:label ?cityname .
    ?city dbp:longd ?d; dbp:longm ?m; dbp:longs ?s; dbp:longew ?ew .
  }
</programlisting>
        <figure xml:id="spbi1" floatstyle="1">
          <title>SPARQL IF operator for SPARQL-BI endpoint</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/spbi1.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdfsparqlimplementatioptragmas">Supported SPARQL-BI "define" pragmas</link>
          </para>
          <para>
            <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSArticleBISPARQL2">SPARQL-BI</link>
            <link linkend="rdfsparul"/>
          </para>
        </tip>
      </section>
      <section xml:id="chpntset">
        <title>How can I handle checkpoint condition?</title>
        <para>In general, to control checkpoint in order to bypass client timeouts during long checkpoints when inserting triples into the Virtuoso server, one must disable automatic checkpoint by:</para>
        <programlisting>
SQL&gt; checkpoint_interval (0);
</programlisting>
        <para>and also to make sure the AutoCheckpointLogSize is off. Then can be performed checkpoint whenever the client wants using the 'checkpoint' command.</para>
        <para>However the need of cache check is not needed unless instance shows regular errors. By default the cache check is disabled.</para>
        <para>Virtuoso offers a new option in the Virtuoso ini file to enable the check of page maps: <emphasis>PageMapCheck</emphasis>

  , 1/0 default 0: </para>
        <programlisting>
-- Virtuoso.ini

...
[Parameters]
...
PageMapCheck  = 0
...
</programlisting>
        <para>Also customer can add <emphasis>CheckpointSyncMode = 0</emphasis>

   in order to disable sync during checkpoint to speed the operations.</para>
      </section>
      <section xml:id="inccntnegt">
        <title>How can I incorporate Content Negotiation into RDF bulk loaders?</title>
        <para>The examples from below demonstrate how to incorporate Content Negotiation into RDF bulk loaders:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Using the 
            <link linkend="fn_rdf_load_rdfxml"><function>DB.DBA.RDF_LOAD_RDFXML</function></link>
             function:
</para>
            <programlisting>
DB.DBA.RDF_LOAD_RDFXML (http_get ('http://purl.org/ontology/mo/', null, 'GET', 'Accept: application/rdf+xml', null, null, 3), 'http://purl.org/ontology/mo/', 'http://purl.org/ontology/mo/') .
</programlisting>
          </listitem>
          <listitem>
            <para>Using the 
            <link linkend="fn_ttlp"><function>DB.DBA.TTLP</function></link>
             function: The call to http client should be modified to ask for appropriate content type as for ex:
</para>
            <programlisting>
DB.DBA.TTLP (http_get ('http://purl.org/ontology/mo/', null, 'GET', 'Accept: text/n3', null, null, 3), 'http://purl.org/ontology/mo/', 'http://purl.org/ontology/mo/'), '...', '...');
</programlisting>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="linkeddata3simplesteps">
        <title>Virtuoso Linked Data Deployment In 3 Simple Steps?</title>
        <para>Injecting Linked Data into the Web has been a major pain point for those who seek personal, service, or organization-specific variants of DBpedia. Basically, the sequence goes something like this:</para>
        <orderedlist>
          <listitem>
            <para>You encounter DBpedia or the LOD Cloud Pictorial.</para>
          </listitem>
          <listitem>
            <para>You look around (typically following your nose from link to link).</para>
          </listitem>
          <listitem>
            <para>You attempt to publish your own stuff.</para>
          </listitem>
          <listitem>
            <para>You get stuck.</para>
          </listitem>
        </orderedlist>
        <para>The problems typically take the following form:</para>
        <orderedlist>
          <listitem>
            <para>Functionality confusion about the complementary Name and Address functionality of a single URI abstraction.</para>
          </listitem>
          <listitem>
            <para>Terminology confusion due to conflation and over-loading of terms such as Resource, URL, Representation, Document, etc.</para>
          </listitem>
          <listitem>
            <para>Inability to find robust tools with which to generate Linked Data from existing data sources such as relational databases, CSV files, XML, Web Services, etc.</para>
          </listitem>
        </orderedlist>
        <para>To start addressing these problems, here is a simple guide for generating and publishing Linked Data using Virtuoso.</para>
        <section xml:id="linkeddata3simplesteps1">
          <title>Step 1 - RDF Data Generation</title>
          <para>Existing RDF data can be added to the Virtuoso RDF Quad Store via a variety of built-in data loader utilities.</para>
          <para>Many options allow you to easily and quickly generate RDF data from other data sources:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>Install the Sponger Bookmarklet for the URIBurner service. Bind this to your own SPARQL-compliant backend RDF database (in this scenario, your local Virtuoso instance), and then perform Network Resource Fetch of some HTTP-accessible resources.</para>
            </listitem>
            <listitem>
              <para>Convert relational DBMS data to RDF using the Virtuoso Linked Data Views Wizard.</para>
            </listitem>
            <listitem>
              <para>Starting with CSV files, you can:
             </para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>Place them at an HTTP-accessible location, and use the Virtuoso Sponger to convert them to RDF or;</para>
                </listitem>
                <listitem>
                  <para>Use the CVS import feature to import their content into Virtuoso's relational
               	data engine; then use the built-in Linked Data Views Wizard as with other RDBMS data.</para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Starting from XML files, you can:

</para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>Use Virtuoso's inbuilt XSLT-Processor for manual XML to RDF/XML transformation or;
</para>
                </listitem>
                <listitem>
                  <para>Leverage the Sponger Cartridge for GRDDL, if there is a transformation service associated with your XML data source, or;
</para>
                </listitem>
                <listitem>
                  <para>Let the Sponger analyze the XML data source and make a best-effort transformation to RDF.
</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="linkeddata3simplesteps2">
          <title>Step 2 - Linked Data Deployment</title>
          <para>Install the Faceted Browser VAD package (fct_dav.vad) which delivers the following:</para>
          <orderedlist>
            <listitem>
              <para>Faceted Browser Engine UI</para>
            </listitem>
            <listitem>
              <para>Dynamic Hypermedia Resource Generator:
             </para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>delivers descriptor resources for every entity (data object) in the Native or Virtual Quad Stores</para>
                </listitem>
                <listitem>
                  <para>supports a broad array of output formats, including HTML+RDFa, RDF/XML, N3/Turtle, NTriples, RDF-JSON, OData+Atom, and OData+JSON.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="linkeddata3simplesteps3">
          <title>Step 3 - Linked Data Consumption &amp; Exploitation</title>
          <para>Three simple steps allow you, your enterprise, and your customers to consume and exploit your newly deployed Linked Data --</para>
          <orderedlist>
            <listitem>
              <para>Load a page like this in your browser: http://&lt;cname&gt;[:&lt;port&gt;]/describe/?uri=&lt;entity-uri&gt;
               </para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>&lt;cname&gt;[:&lt;port&gt;] gets replaced by the host and port of your Virtuoso instance </para>
                </listitem>
                <listitem>
                  <para>&lt;entity-uri&gt; gets replaced by the URI you want to see described -- for instance, the URI of one of the resources you let the Sponger handle.</para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>Follow the links presented in the descriptor page.</para>
            </listitem>
            <listitem>
              <para>If you ever see a blank page with a hyperlink subject name in the About: section at the top of the page, simply add the parameter "&amp;sp=1" to the URL in the browser's Address box, and hit [ENTER]. This will result in an "on the fly" resource retrieval, transformation, and descriptor page generation.</para>
            </listitem>
            <listitem>
              <para>Use the navigator controls to page up and down the data associated with the "in scope" resource descriptor.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="difcrdrdelgr">
        <title>What are the differences between create, drop, clear and delete Graph?</title>
        <para>In Virtuoso it does not matter whether <emphasis>CREATE GRAPH</emphasis>

   and
      <emphasis>DROP GRAPH</emphasis>

   are called or not. Their purpose is to provide compatibility with
      the original SPARUL that was designed for Jena. Some Jena triple stores require explicit creation
      of each graph (like CREATE TABLE in SQL), they report errors if one tries to create a graph twice
      and so on.</para>
        <para>For Virtuoso, a new graph is not an important system event, it has single quad store shared
      	by all graphs. When a graph is made by <emphasis>CREATE GRAPH</emphasis>

  , its name is placed in
      	an auxiliary table that is used solely to signal appropriate errors on CREATE graph that is
      	CREATE-d already or on DROP of a missing graph; this table is not used in any way in SPARQL or
      	other subsystems. In a perfect world, smart development tools will query that table to give
      	hints to a programmer regarding available graphs, but the reality is not so perfect.</para>
        <para>What's more important is a difference between
      	<emphasis>DELETE FROM g { ?s ?p ?o } FROM g WHERE { ?s ?p ?o }</emphasis>

   and
      	<emphasis>CLEAR GRAPH g</emphasis>

  , as both will delete all triples from the specified graph &lt;g&gt; with
      	equal speed, but <emphasis>CLEAR GRAPH</emphasis>

   will also delete free-text index data about
      	occurrences of literals in this specific graph. So <emphasis>CLEAR GRAPH</emphasis>

   will make
      	the database slightly more compact and the text search slightly faster. (Naturally,
      	<emphasis>DROP GRAPH</emphasis>

   makes <emphasis>CLEAR GRAPH</emphasis>

   inside, not just
      	<emphasis>DELETE FROM ...</emphasis>

   )</para>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="rdfinsertmethods">RDF Insert Methods in Virtuoso</link>
          </para>
        </tip>
      </section>
      <section xml:id="srchprd">
        <title>How can I perform search for predicate values?</title>
        <para>
          <emphasis>What?</emphasis>
        </para>
        <para>Creation of a stored procedure that enables users to find properties based on their string based token patterns.</para>
        <para>
          <emphasis>Why?</emphasis>
        </para>
        <para>When working with datasets from disparate datasources in a common named graph, there are times when you seek to scope sparql or spasql queries to specific property IRI/URI patterns without embarking upon inefficient regex heuristics.</para>
        <para>
          <emphasis>What?</emphasis>
        </para>
        <para>Make a stored procedure for querying against the main quad store table (rdf_quad). Surface the procedure as a magic predicate using "bif:" prefix. To find all the properties whose predicates start with "http://www.openlinksw.com/", a Virtuoso/PL procedure can be used as listed below:</para>
        <programlisting>
SQL&gt; create procedure PREDICATES_OF_IRI_PATH (
  in path varchar,
  in dump_iri_ids integer := 0)
{
  declare PRED_IRI varchar;
  declare PRED_IRI_ID IRI_ID;
  declare path_head_len integer;

  if (dump_iri_ids)
    result_names (PRED_IRI_ID);
  else
    result_names (PRED_IRI);

  for ( SELECT RP_NAME, RP_ID
        FROM RDF_PREFIX
        WHERE (RP_NAME &gt;= path) AND (RP_NAME &lt; path || chr(255)) ) do
    {
      declare fourbytes varchar;
      fourbytes := '----';
      fourbytes[0] := bit_shift (RP_ID, -24);
      fourbytes[1] := bit_and (bit_shift (RP_ID, -16), 255);
      fourbytes[2] := bit_and (bit_shift (RP_ID, -8), 255);
      fourbytes[3] := bit_and (RP_ID, 255);

      for ( SELECT RI_NAME, RI_ID from RDF_IRI
            WHERE (RI_NAME &gt;= fourbytes) AND (RI_NAME &lt; fourbytes || chr(255)) ) do
        {
          if (exists (SELECT TOP 1 1 FROM RDF_QUAD WHERE P=RI_ID))
            result (case when (dump_iri_ids) then RI_ID else RP_NAME || subseq (RI_NAME, 4) end);
        }
    }

  for ( path_head_len := length (path)-1; path_head_len &gt;= 0; path_head_len := path_head_len - 1)
    {
      for ( SELECT RP_NAME, RP_ID from RDF_PREFIX
            WHERE RP_NAME = subseq (path, 0, path_head_len) ) do
        {
          declare fourbytes varchar;
          fourbytes := '----';
          fourbytes[0] := bit_shift (RP_ID, -24);
          fourbytes[1] := bit_and (bit_shift (RP_ID, -16), 255);
          fourbytes[2] := bit_and (bit_shift (RP_ID, -8), 255);
          fourbytes[3] := bit_and (RP_ID, 255);

          for ( SELECT RI_NAME, RI_ID from RDF_IRI
                WHERE (RI_NAME &gt;= fourbytes || subseq (path, path_head_len))
                AND (RI_NAME &lt; fourbytes || subseq (path, path_head_len) || chr(255)) ) do
            {
              if (exists (SELECT TOP 1 1 FROM RDF_QUAD WHERE P=RI_ID))
                result (case when (dump_iri_ids) then RI_ID else RP_NAME || subseq (RI_NAME, 4) end);
            }
        }
    }
}
;

Done. -- 16 msec.
</programlisting>
        <para>
          <emphasis>Example Usage</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Execute:
</para>
            <programlisting>
set echo on;
</programlisting>
          </listitem>
          <listitem>
            <para>Collect all predicates that start with:
</para>
            <programlisting>
-- http://www.openlinksw.com/
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/', 1);
VARCHAR
_______________________________________________________________________________

#i351
#i159
#i10
#i8
...

-- http://www.openlinksw.com/schemas/virtrdf
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/schemas/virtrdf', 1);
PRED_IRI_ID
VARCHAR
_______________________________________________________________________________

#i159
#i10
#i8
#i6
#i160
#i269
#i278
#i275

-- http://www.openlinksw.com/schemas/virtrdf#
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/schemas/virtrdf#',1);
PRED_IRI_ID
VARCHAR
_______________________________________________________________________________

#i159
#i10
#i8
#i6
#i160
#i269
#i278
...

-- http://www.openlinksw.com/schemas/virtrdf#i
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/schemas/virtrdf#i',1);
PRED_IRI_ID
VARCHAR
_______________________________________________________________________________

#i159
#i10
#i8

-- other
SQL&gt;PREDICATES_OF_IRI_PATH ('no://such :)', 1);
0 Rows. -- 0 msec.

</programlisting>
          </listitem>
          <listitem>
            <para>Show all predicates that start with:
</para>
            <programlisting>
-- http://www.openlinksw.com/
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/');
PRED_IRI
VARCHAR
_______________________________________________________________________________

http://www.openlinksw.com/schemas/DAV#ownerUser
http://www.openlinksw.com/schemas/virtrdf#inheritFrom
http://www.openlinksw.com/schemas/virtrdf#isSpecialPredicate
http://www.openlinksw.com/schemas/virtrdf#item
http://www.openlinksw.com/schemas/virtrdf#loadAs
http://www.openlinksw.com/schemas/virtrdf#noInherit
http://www.openlinksw.com/schemas/virtrdf#qmGraphMap
http://www.openlinksw.com/schemas/virtrdf#qmMatchingFlags
http://www.openlinksw.com/schemas/virtrdf#qmObjectMap
http://www.openlinksw.com/schemas/virtrdf#qmPredicateMap
http://www.openlinksw.com/schemas/virtrdf#qmSubjectMap
...

-- http://www.openlinksw.com/schemas/virtrdf
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/schemas/virtrdf');
PRED_IRI
VARCHAR
_______________________________________________________________________________

http://www.openlinksw.com/schemas/virtrdf#inheritFrom
http://www.openlinksw.com/schemas/virtrdf#isSpecialPredicate
http://www.openlinksw.com/schemas/virtrdf#item
http://www.openlinksw.com/schemas/virtrdf#loadAs
http://www.openlinksw.com/schemas/virtrdf#noInherit
http://www.openlinksw.com/schemas/virtrdf#qmGraphMap
http://www.openlinksw.com/schemas/virtrdf#qmMatchingFlags
http://www.openlinksw.com/schemas/virtrdf#qmObjectMap
http://www.openlinksw.com/schemas/virtrdf#qmPredicateMap
http://www.openlinksw.com/schemas/virtrdf#qmSubjectMap
http://www.openlinksw.com/schemas/virtrdf#qmTableName
...

-- http://www.openlinksw.com/schemas/virtrdf#
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/schemas/virtrdf#');
PRED_IRI
VARCHAR
_______________________________________________________________________________

http://www.openlinksw.com/schemas/virtrdf#inheritFrom
http://www.openlinksw.com/schemas/virtrdf#isSpecialPredicate
http://www.openlinksw.com/schemas/virtrdf#item
http://www.openlinksw.com/schemas/virtrdf#loadAs
http://www.openlinksw.com/schemas/virtrdf#noInherit
http://www.openlinksw.com/schemas/virtrdf#qmGraphMap
http://www.openlinksw.com/schemas/virtrdf#qmMatchingFlags
http://www.openlinksw.com/schemas/virtrdf#qmObjectMap
http://www.openlinksw.com/schemas/virtrdf#qmPredicateMap
http://www.openlinksw.com/schemas/virtrdf#qmSubjectMap
http://www.openlinksw.com/schemas/virtrdf#qmTableName
http://www.openlinksw.com/schemas/virtrdf#qmf01blankOfShortTmpl
http://www.openlinksw.com/schemas/virtrdf#qmf01uriOfShortTmpl
http://www.openlinksw.com/schemas/virtrdf#qmfBoolOfShortTmpl
http://www.openlinksw.com/schemas/virtrdf#qmfBoolTmpl
...

-- http://www.openlinksw.com/schemas/virtrdf#i
SQL&gt;PREDICATES_OF_IRI_PATH ('http://www.openlinksw.com/schemas/virtrdf#i');
PRED_IRI
VARCHAR
_______________________________________________________________________________

http://www.openlinksw.com/schemas/virtrdf#inheritFrom
http://www.openlinksw.com/schemas/virtrdf#isSpecialPredicate
http://www.openlinksw.com/schemas/virtrdf#item

3 Rows. -- 15 msec.

-- other
SQL&gt;PREDICATES_OF_IRI_PATH ('no://such :)');
PRED_IRI
VARCHAR
_______________________________________________________________________________

0 Rows. -- 15 msec.
</programlisting>
          </listitem>
        </orderedlist>
        <para>If you want to use the procedure's output inside SPARQL queries, it can be wrapped by a procedure view and it in turn can be used in an Linked Data View but it is redundant for most applications.</para>
        <para>For typical "almost static" data, it is more practical to write a procedure that will store all found predicates in some dedicated "dictionary" graph and then use the graph as usual.</para>
      </section>
      <section xml:id="constrinserst">
        <title>How can I use INSERT via CONSTRUCT Statements?</title>
        <para>You can write an ordinary CONSTRUCT statement, ensure that it generates the triples intended to be added, and then replace the leading CONSTRUCT keyword with the INSERT INTO phrase.</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Assume new triples need to be added for the equivalentClass:
</para>
            <programlisting>
CONSTRUCT
  {
    ?s &lt;http://www.w3.org/2002/07/owl#equivalentClass&gt; `iri (bif:replace(?o,'http://schema.rdfs.org/', 'http://schema.org/'))`
   }
FROM &lt;http://www.openlinksw.com/schemas/rdfs&gt;
WHERE
  {
    ?s &lt;http://www.w3.org/2002/07/owl#equivalentClass&gt; ?o
  };
</programlisting>
          </listitem>
          <listitem>
            <para>Execute the CONSTRUCT query from the htp://cname/sparql SPARQL endpoint.</para>
          </listitem>
          <listitem>
            <para>View the generated triples to ensure they are correct.</para>
          </listitem>
          <listitem>
            <para>Replace CONSTRUCT with INSERT INTO:
</para>
            <programlisting>
SPARQL INSERT INTO &lt;http://www.openlinksw.com/schemas/rdfs&gt;
  {
    ?s &lt;http://www.w3.org/2002/07/owl#equivalentClass&gt; `iri (bif:replace(?o,'http://schema.rdfs.org/', 'http://schema.org/'))`
   }
FROM &lt;http://www.openlinksw.com/schemas/rdfs&gt;
WHERE
  {
    ?s &lt;http://www.w3.org/2002/07/owl#equivalentClass&gt; ?o
  } ;
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="cleargraphrelemtgr">
        <title>How to clear graphs which are related to empty graphs?</title>
        <para>The following example demonstrates how to remove graphs which are related to empty graphs:</para>
        <programlisting>
PREFIX nrl:&lt;http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#&gt;
SELECT ( bif:exec(bif:sprintf("SPARQL CLEAR GRAPH&lt;%s&gt;", str(?mg))))
WHERE
  {
    ?mg nrl:coreGraphMetadataFor ?g .
    FILTER(?g in ( &lt;urn:nepomuk:local:8a9e692a&gt; )) .
    FILTER ( !bif:exists((SELECT (1) WHERE { GRAPH ?g { ?s ?p ?o . } . })) ) .
  }
</programlisting>
      </section>
      <section xml:id="subqrbl">
        <title>How can I use sub-queries to enable literal values based joins?</title>
        <section xml:id="subqrblwhat">
          <title>What?</title>
          <para>Use of subqueries to enable literal values based joins.</para>
        </section>
        <section xml:id="subqrblwhy">
          <title>Why?</title>
          <para>Sophisticated access to literal values via subqueries provides powerful mechanism for enhancing sparql graph patterns via dynamic literal value generation.</para>
        </section>
        <section xml:id="subqrblhow">
          <title>How?</title>
          <para>Use select list variables from subqueries to produce literal object values in sparql graph patterns.</para>
          <section xml:id="subqrblhowex">
            <title>Example</title>
            <para>Assume in the following query, where should be used a sub-query to replace ?app:</para>
            <programlisting>
SELECT DISTINCT ?r
WHERE
  {
    graph ?g
      {
        ?r nie:url ?url .
      }  .
      ?g nao:maintainedBy ?app .
      ?app nao:identifier "nepomukindexer" .
  }
</programlisting>
            <para>If it is not sure that ?app is the only, for e.g., the triple ?app nao:identifier "nepomukindexer" can appear in more than one graph, then the query should be changed to:</para>
            <programlisting>
SELECT DISTINCT ?r
WHERE
  {
    graph ?g
      {
        ?r nie:url ?url .
      }  .
      ?g nao:maintainedBy ?app .
      FILTER (?app = (SELECT ?a WHERE { ?a nao:identifier "nepomukindexer" }))
}
</programlisting>
            <para>or even shorter:</para>
            <programlisting>
SELECT DISTINCT ?r
WHERE
  {
   graph ?g
     {
       ?r nie:url ?url .
     }  .
   ?g nao:maintainedBy `(SELECT ?a WHERE { ?a nao:identifier "nepomukindexer" })` .
 }
</programlisting>
          </section>
        </section>
      </section>
      <section xml:id="sparqlpreforder">
        <title>How can I execute query with labels preference order?</title>
        <para>The way to prefer one label to the other can be done as follows:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>Have a procedure which returns preference order:
</para>
            <programlisting>
create procedure lbl_order (in p any)
{
  declare r int;
  r := vector (
  'http://www.w3.org/2000/01/rdf-schema#label',
  'http://xmlns.com/foaf/0.1/name',
  'http://purl.org/dc/elements/1.1/title',
  'http://purl.org/dc/terms/title',
  'http://xmlns.com/foaf/0.1/nick',
  'http://usefulinc.com/ns/doap#name',
  'http://rdf.data-vocabulary.org/name',
  'http://www.w3.org/2002/12/cal/ical#summary',
  'http://aims.fao.org/aos/geopolitical.owl#nameListEN',
  'http://s.opencalais.com/1/pred/name',
  'http://www.crunchbase.com/source_description',
  'http://dbpedia.org/property/name',
  'http://www.geonames.org/ontology#name',
  'http://purl.org/ontology/bibo/shortTitle',
  'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  'http://xmlns.com/foaf/0.1/accountName',
  'http://www.w3.org/2004/02/skos/core#prefLabel',
  'http://rdf.freebase.com/ns/type.object.name',
  'http://s.opencalais.com/1/pred/name',
  'http://www.w3.org/2008/05/skos#prefLabel',
  'http://www.w3.org/2002/12/cal/icaltzd#summary',
  'http://rdf.data-vocabulary.org/name',
  'http://rdf.freebase.com/ns/common.topic.alias',
  'http://opengraphprotocol.org/schema/title',
  'http://rdf.alchemyapi.com/rdf/v1/s/aapi-schema.rdf#Name',
  'http://poolparty.punkt.at/demozone/ont#title'
   );
  if (isiri_id (p))
    p := id_to_iri (p);
  r := position (p, r);
  if (r = 0)
    return 100;
  return r;
}
;
</programlisting>
          </listitem>
          <listitem>
            <para>Execute the following query:
</para>
            <programlisting>
SPARQL
DEFINE input:inference "facets"
SELECT ?o
WHERE
  {
    &lt;http://uriburner.com/about/id/entity/http/www.linkedin.com/in/kidehen#CV_mfrTl4s6Jy&gt; virtrdf:label ?o ;
       ?p ?o .
  }
ORDER BY (sql:lbl_order (?p));
</programlisting>
          </listitem>
          <listitem>
            <para>Or execute the following query using sql:
</para>
            <programlisting>

SELECT __ro2sq (O), lbl_order (P)
FROM RDF_QUAD table option (with ''facets'')
WHERE G = __i2id (?)
  AND S = __i2id (?)
  AND P = __i2id (''http://www.openlinksw.com/schemas/virtrdf#label'', 0)
ORDER BY 2
</programlisting>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="getobjdtype">
        <title>How can I get object datatype?</title>
        <para>To get object datatype should be used the internal Virtuoso/PL function
      	<link linkend="fn_rdf_datatype_of_obj"><function>DB.DBA.RDF_DATATYPE_OF_OBJ</function></link>

  , visible in SPARQL as sql:RDF_DATATYPE_OF_OBJ.
      </para>
        <para>Suppose the following scenario:</para>
        <programlisting>
# Explicit typecast (insert)
SQL&gt; sparql insert into &lt;test_datatype&gt; { &lt;a&gt; &lt;string&gt; "string 1"^^xsd:string . };
callret-0
VARCHAR
_______________________________________________________________________________

Insert into &lt;test_datatype&gt;, 1 (or less) triples -- done

1 Rows. -- 94 msec.

#Not explicit typecast (insert)
SQL&gt; sparql insert into &lt;test_datatype&gt; { &lt;a&gt; &lt;string&gt; "string 2". };
callret-0
VARCHAR
_______________________________________________________________________________

Insert into &lt;test_datatype&gt;, 1 (or less) triples -- done

1 Rows. -- 16 msec.

SQL&gt; SPARQL
SELECT ?o (iri(sql:RDF_DATATYPE_OF_OBJ(?o, 'untyped!')))
FROM &lt;test_datatype&gt; { &lt;a&gt; &lt;string&gt; ?o} ;
o                       callret-1
VARCHAR                 VARCHAR
_______________________________________________________________________________

string 1                http://www.w3.org/2001/XMLSchema#string
string 2                untyped!

2 Rows. -- 16 msec.
SQL&gt;
</programlisting>
      </section>
      <section xml:id="howbackuprestoreind">
        <title>How Can I Backup and Restore individual table(s) and individual index(s)?</title>
        <para>See more details <link linkend="procindexrecov">here</link>

  .</para>
      </section>
      <section xml:id="bifcontainsoptions">
        <title>What bif:contains free-text options can I use?</title>
        <para>Virtuoso supports the following free-text options for bif:contains:</para>
        <orderedlist>
          <listitem>
            <para>
              <emphasis>OFFBAND</emphasis>
            </para>
            <para>: See description for this free-text option in

            <link linkend="offbanddata">this section</link>
            .
          </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Note: it is useful only if data comers via an Linked Data View and the source
            	relational table uses this trick;</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <emphasis>SCORE</emphasis>
            </para>
            <para>: This free-text option is calculated as described in

            <link linkend="hitscores">this section</link>
            :
</para>
            <programlisting>
SQL&gt;SPARQL
SELECT ?s1 as ?c1, ?sc, ?rank
WHERE
  {
    {
      {
        SELECT ?s1, (?sc * 3e-1) as ?sc, ?o1,
          (sql:rnk_scale (&lt;LONG::IRI_RANK&gt; (?s1))) as ?rank
        WHERE
          {
            ?s1 ?s1textp ?o1 .
            ?o1 bif:contains  '"CNET"'  option (score ?sc)  .
          }
        ORDER BY DESC (?sc * 3e-1 + sql:rnk_scale (&lt;LONG::IRI_RANK&gt; (?s1)))
        LIMIT 20
        OFFSET 0
      }
    }
  };

c1                                              sc      rank
_________________________________________________________________________
http://www.mixx.com/stories/45003360/justi...   3 	    5.881291583872891e-14
http://www.mixx.com/stories/45099313/bing_...   2.7     5.881291583872891e-14
http://dbpedia.org/resource/CBS_Interactive 	  1.5 	  5.881291583872891e-14
http://dbpedia.org/resource/CBS_Interactive 	  1.5 	  5.881291583872891e-14

4 Rows. -- 1 msec.
</programlisting>
          </listitem>
          <listitem>
            <para>
              <emphasis>SCORE_LIMIT</emphasis>
            </para>
            <para>: This free-text option works as it is in plain
      SQL free-text. 
            <link linkend="queryingftcols">See more details</link>
             :
</para>
            <programlisting>
SQL&gt; SPARQL
SELECT ?s ?sc
WHERE
  {
    ?s ?p ?o .
    ?o bif:contains "tree" OPTION (score ?sc , score_limit 20)
  };

s                                                                      sc
VARCHAR                                                                INTEGER
________________________________________________________________________________

http://www.openlinksw.com/virtrdf-data-formats#default                 24
http://www.openlinksw.com/virtrdf-data-formats#default                 24
http://www.openlinksw.com/virtrdf-data-formats#sql-longvarbinary       21
http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-dt          20
http://www.openlinksw.com/virtrdf-data-formats#sql-nvarchar-dt         20
http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-lang        20
http://www.openlinksw.com/virtrdf-data-formats#sql-nvarchar-lang       20

7 Rows. -- 2 msec.
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="sparqlendpointprotection">
        <title>What SPARQL Endpoint Protection Methods can I use?</title>
        <para>Virtuoso supports the following SPARQL Endpoint protection methods:</para>
        <orderedlist>
          <listitem>
            <para>
              <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLSecurityWebID">Secure SPARQL Endpoint Guide using WebID Protocol</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtOAuthSPARQL">Secure SPARQL Endpoint Guide via OAuth</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLProtectSQLDigestAuthentication">Secure SPARQL Endpoint Guide via SQL Accounts -- usage path digest authentication</link>
            </para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="sparqlassignrole">
        <title>How do I assign SPARQL role to SQL user?</title>
        <para>This section a sample scenario how to assign SPARQL ( for ex. SPARQL_SELECT ) role to
    		Virtuoso SQL user:</para>
        <orderedlist>
          <listitem>
            <para>Go to 
            <link xlink:href="http://cname/conductor">http://cname/conductor</link>
            .</para>
          </listitem>
          <listitem>
            <para>Enter dba credentials.</para>
          </listitem>
          <listitem>
            <para>Go to System Admin -&gt; User Accounts:
          </para>
            <figure xml:id="role1" floatstyle="1">
              <title>Assign SPARQL Role to SQL User</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ag1.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click "Edit" for a given user from the very last right column:
          </para>
            <figure xml:id="role2" floatstyle="1">
              <title>Assign SPARQL Role to SQL User</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ag2.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>From "Accounts Roles" drop-down list select a SPARQL Role, for ex.
        	</para>
            <para>
              <emphasis>SPARQL_SELECT</emphasis>
            </para>
            <para> and click the "&gt;&gt;" button:
          </para>
            <figure xml:id="role1_01" floatstyle="1">
              <title>Assign SPARQL Role to SQL User</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ag3.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click "Save". </para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="gecodedata">
        <title>How Do I Gecode Data?</title>
        <para>
          <emphasis>What?</emphasis>
        </para>
        <para>Automatic geocoding of data in quad store.</para>
        <para>
          <emphasis>Why?</emphasis>
        </para>
        <para>Enable exploitation of SPARQL-GEO for geospatial oriented queries.</para>
        <para>
          <emphasis>How?</emphasis>
        </para>
        <para>To gecode data one should call the <link linkend="fn_rdf_geo_fill"><function>rdf_geo_fill</function></link>

   API from Conductor or iSQL:</para>
        <programlisting>
SQL&gt; rdf_geo_fill ();

Done. -- 282 msec.
</programlisting>
        <section xml:id="gecodedata_01">
          <title>SPARQL-GEO sample queries</title>
          <itemizedlist mark="bullet">
            <listitem>
              <para><link xlink:href="http://lod.openlinksw.com/b3s/search.vsp?q=20&amp;sc=http%3A%2F%2Fdbpedia.org%2Fresource%2FOxford&amp;sc2=5&amp;sc3=http%3A%2F%2Fdbpedia.org%2Fproperty%2Festablished&amp;sc4=en&amp;fa=Execute">All Educational Institutions within 10km of Oxford, UK</link>
:
</para>
              <programlisting>
SELECT DISTINCT ?thing AS ?uri ?thingLabel AS ?name ?date AS ?established ?lat ?long WHERE
  {
    &lt;http://dbpedia.org/resource/Oxford&gt; geo:geometry ?sourcegeo .
    ?resource geo:geometry ?matchgeo .
    ?resource geo:lat ?lat .
    ?resource geo:long ?long .
    FILTER ( bif:st_intersects ( ?matchgeo, ?sourcegeo, 5 ) ) .
    ?thing ?somelink ?resource .
    ?thing &lt;http://dbpedia.org/property/established&gt; ?date .
    ?thing rdfs:label ?thingLabel .
    FILTER ( lang ( ?thingLabel ) = "en" )
  }
</programlisting>
            </listitem>
            <listitem>
              <para><link xlink:href="http://lod.openlinksw.com/b3s/search.vsp?q=18&amp;sc=http%3A%2F%2Fdbpedia.org%2Fresource%2FLondon&amp;sc2=20&amp;sc3=en&amp;fa=Execute">Things within close proximity of London</link>:

</para>
              <programlisting>
SELECT DISTINCT ?resource ?label ?location WHERE
  {
    &lt;http://dbpedia.org/resource/London&gt; geo:geometry ?sourcegeo .
    ?resource geo:geometry ?location ; rdfs:label ?label .
    FILTER ( bif:st_intersects ( ?location, ?sourcegeo, 20 ) ) .
    FILTER ( lang ( ?label ) = "en" )
  }
</programlisting>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>See Also:</title>
          <tip>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  <link linkend="fn_rdf_geo_fill">
                    <function>rdf_geo_fill</function>
                  </link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link linkend="rdfsparqlgeospatcrg">Creating Geometries From RDF Data</link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link linkend="rdfsparqlgeospatprog">Programmatic Manipulation of Geometries in RDF</link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link linkend="rdfsparqlgeospatusg">Using Geometries With Existing Databases</link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link xlink:href="http://lod.openlinksw.com/b3s/">OpenLink Billion Triple Demo queries</link>
                </para>
              </listitem>
            </itemizedlist>
          </tip>
        </section>
      </section>
      <section xml:id="delsptriple">
        <title>How Can I Delete a Specific Triple Across Graphs?</title>
        <para>Suppose the following situation:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>There is a specific triple somewhere in a massive dataset in a Virtuoso DBMS.</para>
          </listitem>
          <listitem>
            <para>There are too many possible named graphs associated with the pattern so
        	</para>
            <para>
              <emphasis>SPARQL DELETE</emphasis>
            </para>
            <para> (which requires </para>
            <para>
              <emphasis>FROM</emphasis>
            </para>
            <para> i.e., Named
        	Graph scoping) isn't adequate</para>
          </listitem>
        </itemizedlist>
        <para>What is the solution?</para>
        <para>Using SQL you can execute the following:</para>
        <programlisting>
SQL&gt; SPARQL
DELETE FROM rdf_quad
WHERE s = iri_to_id ('http://linkeddata.uriburner.com/about/id/entity/http/twitter.com/kidehen')
  AND o = iri_to_id ('http://purl.org/ontology/bibo/Document')
  AND p = iri_to_id ('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');
</programlisting>
      </section>
      <section xml:id="sparqlnotexists">
        <title>How Do I Use NOT EXISTS in SPARQL Query?</title>
        <para>Virtuoso supports "NOT EXISTS" SPARQL 1.1 feature. For example:</para>
        <programlisting>
SQL&gt; SPARQL
SELECT COUNT(*)
WHERE
  {
    ?s ?p "Novosibirsk"  FILTER NOT EXISTS { ?s ?p "&amp;#1053;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1089;&amp;#1080;&amp;#1073;&amp;#1080;&amp;#1088;&amp;#1089;&amp;#1082;" }
  }

callret-0
INTEGER
313
No. of rows in result: 1
</programlisting>
        <para>This query is equivalent to the following query:</para>
        <programlisting>
SQL&gt; SPARQL
SELECT COUNT(*)
WHERE
  {
    { ?s ?p "Novosibirsk" } MINUS { ?s ?p "&amp;#1053;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1089;&amp;#1080;&amp;#1073;&amp;#1080;&amp;#1088;&amp;#1089;&amp;#1082;" } }

callret-0
INTEGER
 313
No. of rows in result: 1
</programlisting>
      </section>
      <section xml:id="sparqlminus">
        <title>How Do I Use MINUS in SPARQL Query?</title>
        <para>Virtuoso supports "MINUS" SPARQL 1.1 feature. For example:</para>
        <programlisting>

SQL&gt; SPARQL
SELECT COUNT(*)
WHERE
  {
    { ?s ?p "Novosibirsk" } MINUS { ?s ?p "&amp;#1053;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1089;&amp;#1080;&amp;#1073;&amp;#1080;&amp;#1088;&amp;#1089;&amp;#1082;" } }

callret-0
INTEGER
 313
No. of rows in result: 1
</programlisting>
        <para>This query is equivalent to the following query:</para>
        <programlisting>
SQL&gt; SPARQL
SELECT COUNT(*)
WHERE
  {
    ?s ?p "Novosibirsk"  FILTER NOT EXISTS { ?s ?p "&amp;#1053;&amp;#1086;&amp;#1074;&amp;#1086;&amp;#1089;&amp;#1080;&amp;#1073;&amp;#1080;&amp;#1088;&amp;#1089;&amp;#1082;" }
  }

callret-0
INTEGER
313
No. of rows in result: 1
</programlisting>
      </section>
      <section xml:id="subclassofinferenceoptions">
        <title>How Do I Use Transitive SPARQL Query Options and Exploit Inference Rules?</title>
        <para>This section contains subClassOf oriented subsumption examples and examples for
    		Transitive Options e.g., Scope the reasoning to layers in the hierarchy.</para>
        <section xml:id="subclassofinferenceoptionstranexmp">
          <title>Transitive query options examples usage</title>
          <itemizedlist mark="bullet">
            <listitem>
              <para>
                <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_5/SPARQL_Tutorials_Part_5.html#%2849%29">Transitivity with sameAs and graph</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_5/SPARQL_Tutorials_Part_5.html#%2850%29">Transitive Closure via Graph Path Expressions: TBox</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link xlink:href="http://virtuoso.openlinksw.com/presentations/SPARQL_Tutorials/SPARQL_Tutorials_Part_5/SPARQL_Tutorials_Part_5.html#%2851%29">Transitive Closure via Graph Path Expressions: ABox</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="rdfsparqlimplementatiotransexamples7">Inference Rule using transitive properties from SKOS vocabulary</link>
              </para>
            </listitem>
          </itemizedlist>
        </section>
        <section xml:id="subclassofinferenceoptionsinferexmp">
          <title>subClassOf examples usage</title>
          <itemizedlist mark="bullet">
            <listitem>
              <para>
                <link linkend="rdfiridereferencingfacetprlh">Processing Large Hierarchies in SPARQL</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="rdfsparqlimplementatiotransexamples5">Example for TBox Subsumption</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="rdfsparqlimplementatiotransexamples6">Example for Receptors</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtTipsAndTricksGuideRDFSchemaOWLInferenceRules">Inference Rule using transitive properties from SKOS vocabulary</link>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section xml:id="samplegroupconcatdigest">
        <title>What is the difference between the functions SAMPLE, GROUP_CONCAT and GROUP_DIGEST?</title>
        <para>This section demonstrates the differences between the functions
    		<link linkend="fn_sample"><function>SAMPLE</function></link>

  ,
    		<link linkend="fn_group_concat"><function>GROUP_CONCAT</function></link>

   and
    		<link linkend="fn_group_digest"><function>GROUP_DIGEST</function></link>

  .
      </para>
        <para>Assume the following query that should get all ?assets as a list with delimiters:</para>
        <programlisting>
SPARQL SELECT ?view ?path (sql:GROUP_CONCAT (?asset, ' ')) as ?asset_list
FROM &lt;http://mygraph.com&gt;
WHERE
 {
   ?view &lt;viewPath&gt; ?path ;
     &lt;viewContent&gt; ?asset ;
     &lt;viewType&gt;  'phyview'.
 }
;
</programlisting>
        <para>This method is not universal, because conversion to strings will eliminate the difference
      	between strings and IRIs and there should be some delimiter that never appears in values of
      	?asset. In addition, the query may fail with "row too long" error if values of ?asset are
      	lengthy and/or numerous enough. It is also possible the query not work completely free from
      	duplicates if more than one list is desired. E.g.:</para>
        <programlisting>
SPARQL
SELECT ?view (sql:GROUP_CONCAT (?path, ' ')) as ?path_list
  (sql:GROUP_CONCAT (?asset, ' ')) as ?asset_list
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?view &lt;viewPath&gt; ?path ;
      &lt;viewContent&gt; ?asset ;
      &lt;viewType&gt; 'phyview' .
  }
</programlisting>
        <para>will not contain duplicates in lists only if either ?path or ?asset is unique for every
      	found ?view; but if it's so unique then there's no need in the corresponding
      	sql:GROUP_CONCAT().</para>
        <para>If there are many values per property but it's enough to return any single value and ignore
      	the rest then use sql:<link linkend="fn_sample"><function>SAMPLE ()</function></link>

      	function instead of sql:<link linkend="fn_group_concat"><function>GROUP_CONCAT ()</function></link>

  .
      </para>
        <para>If there are many values per property and it's better to show more than one value but "row
      	too long" error happens, then the sql:<link linkend="fn_group_digest"><function>GROUP_DIGEST ()</function></link>

      	function can be used:</para>
        <programlisting>
SPARQL
SELECT ?view (sql:GROUP_DIGEST (?path, ' ', 1000, 1)) as ?path_list
  (sql:GROUP_DIGEST (?asset, ' ', 1000, 1)) as ?asset_list
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?view &lt;viewPath&gt; ?path ;
      &lt;viewContent&gt; ?asset ;
      &lt;viewType&gt; 'phyview' .
  }
</programlisting>
      </section>
      <section xml:id="constructaggfunc">
        <title>How Do I use CONSTRUCT with objects which are value of aggregate function?</title>
        <para>The following section demonstrates usage example of CONSTRUCT Query with object which is
    		a value of the aggregate function COUNT:</para>
        <orderedlist>
          <listitem>
            <para>Assume following SPARQL SELECT Query:
</para>
            <programlisting>
SELECT DISTINCT ?category COUNT(?category) AS ?count
WHERE
  {
    ?s&lt;http://purl.org/dc/terms/subject&gt; ?category
    FILTER(?s =&lt;http://dbpedia.org/resource/Higgs_boson&gt; || ?s =&lt;http://dbpedia.org/resource/Gluon&gt;)
  }
</programlisting>
          </listitem>
          <listitem>
            <para>To present it as CONSTRUCT Query, one should put "SELECT DISTINCT" into the
        	CONSTRUCT's WHERE clause as a subquery. So for example it could be:
</para>
            <programlisting>

CONSTRUCT
  {
    ?category a&lt;http://www.w3.org/2004/02/skos/core#Concept&gt; .
    ?category&lt;http://www.turnguard.com/virtuoso/aggregates#count&gt;  ?count
  }
WHERE
  {
    {
      SELECT DISTINCT ?category COUNT(?category) AS ?count
      WHERE
        {
          ?s &lt;http://purl.org/dc/terms/subject&gt; ?category
          FILTER(?s =&lt;http://dbpedia.org/resource/Higgs_boson&gt; || ?s =&lt;http://dbpedia.org/resource/Gluon&gt;)
        }
    }
  }
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="sparqlcleanerrantdata">
        <title>How Do I Clean Up Errant Data using SPARQL Update Language?</title>
        <section xml:id="sparqlcleanerrantdatawhat">
          <title>What?</title>
          <para>Cleaning up errant data using SPARQL Update Language.</para>
        </section>
        <section xml:id="sparqlcleanerrantdatawhy">
          <title>Why?</title>
          <para>All data endeavors involve varying degrees of prospective and retrospective error
        correction.</para>
        </section>
        <section xml:id="sparqlcleanerrantdatahow">
          <title>How?</title>
          <para>Given a triple in a Virtuoso Quad store that contains an errant URI e.g. one that
        accidentally contains spaces, here is a SPARQL example that showcases how to delete said
        triple using a built-in function:</para>
          <programlisting>
DELETE FROM &lt;your_graph&gt;
  {
    `iri("http://isbsg.clearbluewater.com.au/wsf/datasets/378/Capers Jones_107_12122011081257")`
     a &lt;http://isbsg.org/ontology/data/Dataset&gt;
  };
</programlisting>
        </section>
      </section>
      <section xml:id="sparqladdmissingtriples">
        <title>How to Use SPARQL to add missing isDefinedBy relations to an Ontology?</title>
        <section xml:id="sparqladdmissingtripleswhat">
          <title>What?</title>
          <para>Using SPARQL to add missing isDefinedBy relations to an Ontology.</para>
        </section>
        <section xml:id="sparqladdmissingtripleswhy">
          <title>Why?</title>
          <para>isDefinedBy relations make Ontologies (TBox) more navigable using follow-your-nose
      		pattern. This also makes ABox instance data more discoverable.</para>
        </section>
        <section xml:id="sparqladdmissingtripleshow">
          <title>How?</title>
          <para>Use SPARQL to generate relations that associate Classes and Properties the Ontology
      		that describes them.</para>
          <section xml:id="sparqladdmissingtriplesvcard">
            <title>Example Using the Ontology for vCards</title>
            <para>In this example we will use:</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Ontology Document URL: http://www.w3.org/2006/vcard/ns ;</para>
              </listitem>
              <listitem>
                <para>Ontology URI: http://www.w3.org/2006/vcard/ns# ;</para>
              </listitem>
              <listitem>
                <para>A local Named Graph IRI to host SPARQL Update (SPARUL) the new relations.</para>
              </listitem>
            </itemizedlist>
            <programlisting>
## Uncomment line below if using Virtuoso and executing SPARQL via iSQL
## or via an ODBC, JDBC, ADO.NET connection

## SPARQL

## Uncomment line (a SPARQL pragma) below if using Virtuoso and there
## isn't a local Named Graph holding triples retrieved from the Ontology URL

## DEFINE get:soft "add"

INSERT INTO &lt;urn:data:qos:vcard&gt;
  { ?s rdfs:isDefinedBy &lt;http://www.w3.org/2006/vcard/ns#&gt; }
FROM &lt;http://www.w3.org/2006/vcard/ns&gt;
WHERE
  {
    ?s a ?o
  }
</programlisting>
          </section>
          <section xml:id="sparqladdmissingtripleshowrmedia">
            <title>Example Using the Recorded Media Ontology</title>
            <para>In this example we will use:</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Ontology Document URL: http://www.w3.org/ns/ma-ont ;</para>
              </listitem>
              <listitem>
                <para>Ontology URI: http://www.w3.org/ns/ma-ont# ;</para>
              </listitem>
              <listitem>
                <para>A local Named Graph IRI to host SPARQL Update (SPARUL) the new relations.</para>
              </listitem>
            </itemizedlist>
            <programlisting>
SPARQL
INSERT INTO &lt;urn:data:qos:ma-ont&gt;
  { ?s rdfs:isDefinedBy &lt;http://www.w3.org/ns/ma-ont#&gt; }
FROM &lt;http://www.w3.org/ns/ma-ont&gt;
WHERE
  {
    ?s a ?o
  }
</programlisting>
          </section>
        </section>
      </section>
      <section xml:id="loadsqldjdbc">
        <title>How Can I execute load of sql dump from jdbc?</title>
        <para>LOAD" is not a Virtuoso SQL command, it's an ISQL one. The ISQL checks the command to
      	be executed, whether it's of special "isql"-ish syntax or not, it executes commands it
      	understand and send the rest to the server, unchanged.</para>
        <para>There's no way to mimic ISQL's behavior right on the server, without ISQL. However
      	some files can be loaded via the
      	<link linkend="fn_vad_load_sql_file"><function>DB.DBA.VAD_LOAD_SQL_FILE</function></link>

      	function.
      </para>
      </section>
      <section xml:id="usemodifyasinsert">
        <title>How Can I Use MODIFY to update triples?</title>
        <para>The following queries are equivalent:</para>
        <programlisting>
MODIFY &lt;http://test.com/&gt;
DELETE {?s ?p ?o}
INSERT {?s_new ?p ?o}
FROM &lt;http://test.com/&gt;
WHERE
{
  {
    SELECT iri(bif:replace(str(?s),"http://test.com/link","http://test.com/extra/link" ) )
      AS ?s_new ?s ?p ?o
    WHERE
      {
        ?s ?p ?o FILTER (regex (str(?s), "http://test.com/link"))
      }
  }
}
</programlisting>
        <programlisting>
MODIFY &lt;http://test.com/&gt;
DELETE {?s ?p ?o}
INSERT {`iri(?s_new)` ?p ?o}
FROM &lt;http://test.com/&gt;
WHERE
  {
    {
      SELECT bif:replace(str(?s),"http://test.com/link","http://test.com/extra/link" )
        AS ?s_new ?s ?p ?o
      WHERE
        {
          ?s ?p ?o FILTER (regex (str(?s), "http://test.com/link"))
        }
    }
  }
</programlisting>
        <programlisting>
MODIFY &lt;http://test.com/&gt;
DELETE {?s ?p ?o}
INSERT
  { `iri(bif:replace(str(?s),"http://test.com/link","http://test.com/extra/link" ))`  ?p ?o }
FROM &lt;http://test.com/&gt;
WHERE
  {
    {
      ?s ?p ?o FILTER (regex (str(?s), "http://test.com/link"))
    }
  }
}
</programlisting>
      </section>
      <section xml:id="exectinsdelsparqilwebid">
        <title>How Can I execute INSERT/DELETE (SPARUL) statements against a WebID? protected SPARQL endpoint?</title>
        <para>View our <link linkend="rdfsparulexamples22">sample scenario</link>

  .</para>
      </section>
      <section xml:id="loggingandrecording">
        <title>How can I make HTTP Logging and Recording in Virtuoso?</title>
        <section xml:id="loggingandrecordinglg">
          <title>HTTP Logging</title>
          <para>Virtuoso can keep http log with all the requests that are made to the HTTP endpoint. Here
        	are the steps:</para>
          <orderedlist>
            <listitem>
              <para>Edit your virtuoso.ini and add the following setting:
</para>
              <programlisting>
[HTTPServer]
HTTPLogFile                = logs/http15022012.log
</programlisting>
            </listitem>
            <listitem>
              <para>Restart Virtuoso.</para>
            </listitem>
            <listitem>
              <para>Virtuoso will now maintain a http log in the logs
          	subdirectory, with one line per request as in:
</para>
              <programlisting>
180.76.5.87 - - [15/Feb/2012:21:50:44 +0100] "GET /data/Wilton_power_stations.json HTTP/1.0" 200 8014 ""
  "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)"
180.76.5.87 - - [15/Feb/2012:21:50:45 +0100] "POST /sparql HTTP/1.0" 200 3012 "" ""
</programlisting>
            </listitem>
            <listitem>
              <para>The first request after midnight will open a new logfile, to make sure the logfile does not keep growing.
Old logfiles can be gzipped or removed by hand to conserve disk space.</para>
            </listitem>
          </orderedlist>
          <para>The HTTP log files that Virtuoso produces can be processed by programs like
        	<link xlink:href="http://www.webalizer.org/">Webalizer</link>

   or
        	<link xlink:href="http://awstats.sourceforge.net/">AWstats</link>

   to accurately measure
        	site usage.
        </para>
        </section>
        <section xml:id="loggingandrecordingfr">
          <title>HTTP Logging Format</title>
          <para>Virtuoso supports HTTP Logging format string like
        	<link xlink:href="http://httpd.apache.org/docs/2.2/mod/mod_log_config.html">Apache Module mod_log_config</link>

  .
        	That string can be set in the "HTTPLogFormat" INI file param which works in conjunction with the "HTTPLogFile" INI
        	file param. For example:</para>
          <programlisting>
...
[HTTPServer]
...
HTTPLogFormat = %h %u %t "%r" %s %b "%{Referer}i" "%{User-agent}i" "%{NetId}e"
</programlisting>
          <para>In this example we have %{User-Agent}i which means to log the HTTP header for user-agent. In similar way can
        	log other input headers, "e" modifier is for environment variable NetId in this case.
        </para>
          <para>Note that not all escapes from
        	<link xlink:href="http://httpd.apache.org/docs/2.2/mod/mod_log_config.html">Apache Module mod_log_config</link>

   are supported.
        </para>
        </section>
        <section xml:id="loggingandrecordingrc">
          <title>HTTP Recording</title>
          <para>Virtuoso can also record the complete HTTP request for both GET and POST requests,
        	including all incoming headers, POST parameters etc. This is a very useful tool for debugging,
        	but it will cost performance and disk space, so it should not be left on for long periods of
        	time. Each request will be written to a separate file.
        </para>
          <para><emphasis>Note</emphasis>

  : Some filesystem types like ext2 and earlier versions of ext3
        on Linux cannot handle huge amounts of files in a single directory without slowing down the whole
        system.</para>
        </section>
        <section xml:id="loggingandrecordingrcexget">
          <title>Example of a GET request</title>
          <programlisting>
GET /sparql?query=DESCRIBE%20%3CnodeID%3A%2F%2Fb15481%3E&amp;output=text%2Fcxml     HTTP/1.1
Host: example.com
Connection: Keep-alive
Accept: */*
From: googlebot(at)googlebot.com
User-Agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
Accept-Encoding: gzip,deflate
</programlisting>
        </section>
        <section xml:id="loggingandrecordingrcexpost">
          <title>Example of a POST request</title>
          <programlisting>
POST /ods_services/Http/usersGetInfo HTTP/1.1
User-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.5.8; U; en) Presto/2.9.168 Version/11.51
Host: example.com
Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif,
  image/x-xbitmap, */*;q=0.1
Accept-Language: en,en-US;q=0.9,ja;q=0.8,fr;q=0.7,de;q=0.6,es;q=0.5,it;q=0.4,pt;q=0.3,pt-
  PT;q=0.2,nl;q=0.1,sv;q=0.1,nb;q=0.1,da;q=0.1,fi;q=0.1,ru;q=0.1,pl;q=0.1,zh-CN;q=0.1,zh-TW;q=0.1,ko;q=0.1
Accept-Encoding: gzip, deflate
Referer: https://example.com/ods/
Cookie: interface=js; oatSecurityCookie=0123456878794576; sid=b3fae40reb78bc4babab3cb2a70fb111
Connection: Keep-Alive
Content-Length: 77
Content-Type: application/x-www-form-urlencoded
Authorization: Basic bnQacPPuhhxs
Content-Transfer-Encoding: binary
</programlisting>
        </section>
        <section xml:id="loggingandrecordingrcexenbr">
          <title>Example Enabling recording</title>
          <orderedlist>
            <listitem>
              <para>Go to the directory where the database is started from:
</para>
              <programlisting>
mkdir sys_http_recording
chmod 777 sys_http_recording
</programlisting>
            </listitem>
            <listitem>
              <para>Edit virtuoso.ini and set:
</para>
              <programlisting>
[HTTPServer]
EnableRequestTrap          = 1
</programlisting>
            </listitem>
            <listitem>
              <para>Next connect with isql to your database and run the following commands:
</para>
              <programlisting>
registry_set ('__save_http_history_on_disk', '1');
registry_set ('__save_http_history', '/');
</programlisting>
            </listitem>
            <listitem>
              <para>Finally restart Virtuoso.</para>
            </listitem>
            <listitem>
              <para>As result at this point every HTTP GET and POST request will be logged with
            	all the parameters, headers and settings.
            </para>
            </listitem>
          </orderedlist>
        </section>
        <section xml:id="loggingandrecordingrcexdsbr">
          <title>Example Disabling recording</title>
          <orderedlist>
            <listitem>
              <para>To temporary disable the recordings, edit virtuoso.ini and set:
</para>
              <programlisting>
[HTTPServer]
EnableRequestTrap          = 0
</programlisting>
            </listitem>
            <listitem>
              <para>Next you should remove the two registry items:
</para>
              <programlisting>
registry_remove ('__save_http_history_on_disk');
registry_remove ('__save_http_history');
</programlisting>
            </listitem>
            <listitem>
              <para>Finally restart Virtuoso.</para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="rdfinsertcrawlingmethods">
        <title>Quad Store Data Loading via Virtuoso's In-built Content Crawler?</title>
        <para>This section covers the use of Virtuoso's in-built content crawler as a mechanism for
    		scheduled of one-off data loading operations for its native quad store.</para>
        <para>
          <emphasis>Why is this important?</emphasis>
        </para>
        <para>Transforming external data sources into Linked Data "on the fly" (e.g., via the 'Sponger')
    		is sufficient for many use cases, but there are times when the volume or sheer nature of a
    		data source makes batch-loading necessary. For example, Freebase offers RDF representations
    		of its data, but it doesn't publish RDF dumps; even if it did, such dumps would usually be
    		outdated by the time they were loaded. Thus, a scheduled crawl of that resource collection
    		offers a viable alternative.</para>
        <para>
          <emphasis>How to Set Up the Content Crawler for Linked Data generation and import</emphasis>
        </para>
        <para>The Virtuoso Conductor can be used to set up various Content Crawler Jobs:</para>
        <itemizedlist mark="bullet">
          <listitem>
            <para>
              <link linkend="rdfinsertmethodvirtuosocrawler">Setting up a Content Crawler Job to Import Linked Data into the Virtuoso Quad Store</link>
            </para>
          </listitem>
          <listitem>
            <para><link linkend="contentcrawlerrdfsm">Setting up a Content Crawler Job to Retrieve Sitemaps</link>
            (when the source includes RDFa) </para>
          </listitem>
          <listitem>
            <para><link linkend="contentcrawlerrdfssm">Setting up a Content Crawler Job to Retrieve Semantic Sitemaps</link>
            (a variation of the standard sitemap)</para>
          </listitem>
          <listitem>
            <para>
              <link linkend="contentcrawlerrdfsd">Setting up a Content Crawler Job to Retrieve Content from Specific Directories</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="contentcrawleratom">Setting up a Content Crawler Job to Retrieve Content from ATOM feed</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="contentcrawlersparqlendp">Setting up a Content Crawler Job to Retrieve Content from SPARQL endpoint</link>
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section xml:id="setshortenlongurisparam">
        <title>What is the ShortenLongURIs Virtuoso configuration parameter?</title>
        <para>The ShortenLongURIs parameter is a Virtuoso configuration setting to shorten extremely long
    		URIs in datasets when loading with the RDF Bulk Loader.</para>
        <para>Some RDF datasets have long URIs that exceed the Virtuoso internal maximum size of 1900 bytes
      	and thus need to be shortened to avoid errors like:</para>
        <programlisting>
"SR133: Can not set NULL to not nullable column 'DB.DBA.RDF_QUAD.S' (or .O, or .P)"
</programlisting>
        <para>which has been seen loading some of the DBpedia 3.7 datasets, for example.</para>
        <para>The Virtuoso ShortenLongURIs parameter needs to be set in the
      	<link linkend="ini_sparql">[SPARQL]</link>

   section of the Virtuoso configuration file
      	(virtuoso.ini by default) and restart the Virtuoso Server.
      </para>
        <programlisting>
[SPARQL]
.
.
.
ShortenLongURIs = 1
.
.
.
</programlisting>
        <para><emphasis>Note</emphasis>

  : This parameter is only in the Virtuoso 06.03.3131+ commercial builds,
  	at the time of writing it is not included in the open source 6.1.4 archives but will be in the
  	next 6.1.5 release. A patch to enable this feature is however available from the
  	<link xlink:href="http://sourceforge.net/tracker/?func=detail&amp;aid=3496331&amp;group_id=161622&amp;tid=820576">Virtuso patches page on source forge</link>

  , which can be applied to a 6.1.4 archive from source forge and the Virtuoso
  	server binary rebuilt.</para>
      </section>
      <section xml:id="soaprequestoversparqlendpoint">
        <title>How Can I send SOAP requests to Virtuoso SPARQL Endpoint?</title>
        <para>This section presents sample scenario how to execute SPARQL query in SOAP request over
      	Virtuoso SPARQL Endpoint.</para>
        <orderedlist>
          <listitem>
            <para>Assume the following sample SOAP request containing simple SPARQL query:
</para>
            <programlisting>
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
   &lt;soapenv:Body&gt;
      &lt;query-request xmlns="http://www.w3.org/2005/09/sparql-protocol-types/#"&gt;
         &lt;query xmlns=""&gt;SELECT DISTINCT ?z FROM virtrdf: {?x ?y ?z .} LIMIT 10&lt;/query&gt;
      &lt;/query-request&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
</programlisting>
          </listitem>
          <listitem>
            <para>Save locally the content from above for ex. to file with name "soap.xml".</para>
          </listitem>
          <listitem>
            <para>To pass the SOAP request to a Virtuoso SPARQL Endpoint, execute the following curl command:
</para>
            <programlisting>
$ curl -d@soap.xml -H "Content-Type:text/xml" -H "SOAPAction: ''" http://example.com/sparql
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
  &lt;soapenv:Body&gt;
    &lt;query-result xmlns="http://www.w3.org/2005/09/sparql-protocol-types/#"&gt;
      &lt;sparql xmlns="http://www.w3.org/2005/sparql-results#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/sw/DataAccess/rf1/result2.xsd"&gt;
        &lt;head&gt;
         &lt;variable name="z"/&gt;
        &lt;/head&gt;
        &lt;results distinct="false" ordered="true"&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadStorage&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMap&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapValue&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapColumn&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapColumn&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapATable&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapATable&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
          &lt;result&gt;
            &lt;binding name="z"&gt;
             &lt;uri&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFText&lt;/uri&gt;
            &lt;/binding&gt;
          &lt;/result&gt;
        &lt;/results&gt;
      &lt;/sparql&gt;
    &lt;/query-result&gt;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="howtodeleteblanknodes">
        <title>How Can I Delete Triples containing blank nodes?</title>
        <para>Please see details and sample scenario <link linkend="rdfsparulexamples24">here</link>

  .</para>
      </section>
      <section xml:id="howtogetfullexplainplanforsparqlquery">
        <title>How Can I Get a full explain plan for a simple SPARQL query?</title>
        <para>Please see details and sample scenario <link linkend="rdfperfcosttransanalyze">here</link>

  .</para>
      </section>
      <section xml:id="expressionsusage">
        <title>How Can I Use Expressions inside CONSTRUCT, INSERT and DELETE {...} Templates?</title>
        <para>Please examples <link linkend="rdfsparulexamples25">here</link>

  .</para>
      </section>
      <section xml:id="sparqldatediffindexfriendly">
        <title>How to optimize bif:dateadd in SPARQL query using selective index-friendly filter?</title>
        <section xml:id="sparqldatediffindexfriendlywhat">
          <title>What?</title>
          <para>Index-friendly filter for Date range ( bif:dateadd ) optimization within SPARQL query.</para>
        </section>
        <section xml:id="sparqldatediffindexfriendlywhy">
          <title>Why?</title>
          <para>Achieve fast results and better performance.</para>
        </section>
        <section xml:id="sparqldatediffindexfriendlyhow">
          <title>How?</title>
          <para>Assume the following SPARQL query:</para>
          <programlisting>
SELECT ?wiki,
       ?dbp,
       bif:datediff('second',  xsd:DateTime(?extracted), now()) AS ?secondsAgo
 FROM &lt;http://nl.dbpedia.org&gt;
WHERE
  {
    ?wiki foaf:primaryTopic ?dbp .
    ?dbp dcterms:modified ?extracted .
    FILTER ( bif:datediff('minute', now(), xsd:DateTime(?extracted)) &lt;= 10 )
  }
ORDER BY DESC(?extracted)
LIMIT 30
</programlisting>
          <para>Let's take a look at the calculation of:</para>
          <programlisting>
FILTER ( bif:datediff('minute', now(),  xsd:DateTime(?extracted)) &lt;= 10 ) .
</programlisting>
          <para>For each "is modified" triple we:</para>
          <orderedlist>
            <listitem>
              <para>Convert ?extracted to xsd:dateTime;</para>
            </listitem>
            <listitem>
              <para>Calculate datediff;</para>
            </listitem>
            <listitem>
              <para>Make a comparison and know whether we hit or miss 10 minutes interval</para>
            </listitem>
          </orderedlist>
          <para>Written so, this will lead to a potentially long loop, because even if the optimizer will realize
        that the filter is selective, it can't discover why is it so selective.</para>
          <para>Now let's change the filter to: </para>
          <programlisting>
FILTER ( ?extracted &gt; bif:dateadd('minute', -10, now())) .
</programlisting>
          <para><code>now()</code>

   can be calculated once at the very beginning of the query execution because it
        does not depend on any rows in a given table. Then <code>bif:dateadd</code>

   has all arguments known and
        thus the whole <code>bif:dateadd('minute', -10, now())</code>

   can be calculated only once and produce
        some value. Therefor <code>FILTER ( ?extracted &gt; some_known_value )</code>

   can be represented as a
        single search step: look at index and get triples with known P, known G, O greater than the given one
        and any S. That's pretty fast and predictable step, good for both optimizer and the runtime.</para>
          <para>We can rephrase the query to filter index-friendly:</para>
          <programlisting>
SELECT ?wiki,
       ?dbp,
        bif:datediff('second',  xsd:DateTime(?extracted) ,
        now()) AS ?secondsAgo
 FROM &lt;http://nl.dbpedia.org&gt;
WHERE
  {
    ?wiki foaf:primaryTopic ?dbp .
    ?dbp dcterms:modified ?extracted .
     FILTER ( ?extracted &gt; bif:dateadd('minute', -10, now()))
  }
ORDER BY DESC (?extracted)
LIMIT 30
</programlisting>
          <para>In this case the presence or the absence of the order by does not matter too much, because the query
        is way more straightforward: selective index-friendly filter first, and the selection could be ordered
        naturally via hot index used by the filter.</para>
          <para>Note also that if you know the datatype of an object literal, there's no need to write a cast like
        xsd:dateTime --- it can make an expression index-unfriendly even if it will always return the argument
        unchanged on your specific data.</para>
          <orderedlist>
            <listitem>
              <para>
                <link xlink:href="http://bit.ly/13xefMl">View the SPARQL Query Definition via SPARQL Protocol URL</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link xlink:href="http://bit.ly/18rI9VA">View the SPARQL Query Results via SPARQL Protocol URL</link>
              </para>
            </listitem>
          </orderedlist>
        </section>
      </section>
      <section xml:id="determinedatausagetip">
        <title>How can I Determine the data usage across a Virtuoso instance?</title>
        <section xml:id="determinedatausagetipwhat">
          <title>What?</title>
          <para>How to determine the data usage across a Virtuoso instance.</para>
        </section>
        <section xml:id="determinedatausagetipwhy">
          <title>Why?</title>
          <para>There are times when a variety of DBMS activities (e.g., automated content crawling) can lead to
    			increase in database size, without the instance operator being fully aware of such activities and
    			their consequences.</para>
        </section>
        <section xml:id="determinedatausagetiphow">
          <title>How?</title>
          <para>Run the following statement:</para>
          <programlisting>
	SELECT TOP 20 * FROM sys_index_space_stats ORDER BY iss_pages DESC;

Query result:
ISS_KEY_TABLE ISS_KEY_NAME ISS_KEY_ID            ISS_NROWS       ISS_ROW_BYTES ISS_BLOB_PAGES ISS_ROW_PAGES ISS_PAGES
 WS.WS.SYS_DAV_RES         WS.WS.SYS_DAV_RE..    492   630627	   437635794     501049         57521         558570
 DB.DBA.RDF_QUAD           DB.DBA.RDF_QUAD       487   25134153  321502272     0	            49779         49779
 DB.DBA.RDF_QUAD           RDF_QUAD_POGS         489   14749814  307163163     0	            47191         47191
 WS.WS.SYS_DAV_RES....     DB.DBA.RDF_OBJ        501   1139934   160445830     10748          21478         32226
 WS.WS.SYS_DAV_RES         WS.WS.SYS_DAV_RE..    729   432       307124	       28840          97            28937
 DB.DBA.RDF_IRI            DB.DBA.RDF_IRI        485   4378779   138542078     0	            22479         22479
 DB.DBA.RDF_IRI            DB_DBA_RDF_IRI_UN..   486   4259557   139496730     0	            20187         20187
......
</programlisting>
        </section>
      </section>
      <section xml:id="discoversparqlfedcapabtip">
        <title>How to discover the capabilities of a SPARQL endpoint to enhancing SPARQL-FED usage from Virtuoso instances?</title>
        <section xml:id="discoversparqlfedcapabtipwhat">
          <title>What?</title>
          <para>How to discover the capabilities of a SPARQL endpoint en route to enhancing SPARQL-FED usage from Virtuoso instances.</para>
        </section>
        <section xml:id="discoversparqlfedcapabtipwhy">
          <title>Why?</title>
          <para>There are features supported in Virtuoso SPARQL that aren't supported by other SPARQL engines.
    			There are also a lot of Virtuoso instances behind bubbles in the LOD cloud. Net effect, a Virtuoso
    			instance operator is faced with varied behavior when attempting to use SPARQL-FED functionality.</para>
        </section>
        <section xml:id="discoversparqlfedcapabtiphow">
          <title>How?</title>
          <para>Run this command to load metadata (or lack thereof) from an external SPARQL endpoint:</para>
          <programlisting>
SPARQL LOAD SERVICE &lt;{sparql-endpoint-iri&gt; DATA
</programlisting>
          <section xml:id="discoversparqlfedcapabtiphowex">
            <title>Example</title>
            <orderedlist>
              <listitem>
                <para>Run:
</para>
                <programlisting>
Query result:
ANY
 Load service &lt;http://lod.openlinksw.com/sparql&gt; data -- done.
 Trying to query &lt;http://lod.openlinksw.com/sparql&gt; as SPARQL web service endpoint, POST mode...
</programlisting>
              </listitem>
              <listitem>
                <para>Check the retrieved data:
</para>
                <programlisting>
SPARQL
SELECT *
  FROM virtrdf:
 WHERE
     {
       &lt;http://lod.openlinksw.com/sparql&gt; ?p ?o
     }
 LIMIT 10

Query result:
p                                                                o
ANY                                                              ANY
http://www.openlinksw.com/schemas/virtrdf#isEndpointOfService	   http://lod.openlinksw.com/sparql-sd
http://www.openlinksw.com/schemas/virtrdf#dialect                000037ff
</programlisting>
              </listitem>
            </orderedlist>
          </section>
        </section>
      </section>
      <section xml:id="howtospliturlencodedlist">
        <title>How to split a urlencoded ";-" separated list of urls in a SPARQL query?</title>
        <orderedlist>
          <listitem>
            <para>Assume the following string: "http://example.org/test1;http://example.org/test2".</para>
          </listitem>
          <listitem>
            <para>In order to split the given string into two values i.e. http://example.org/test1 and
        	http://example.org/test2 , one should use
            <link linkend="fn_split_and_decode"><function>split_and_decode()</function></link>
            which returns an
        	array. Thus the 
            <link linkend="fn_aref"><function>aref()</function></link>
            also needs to be used for
        	loading the elements.</para>
          </listitem>
          <listitem>
            <para>Example:
</para>
            <programlisting>
SELECT bif:aref (bif:split_and_decode('http%3A%2F%2Fexample.org%2Ftest1%3Bhttp%3A%2F%2Fexample.org%2Ftest2',0), 0)
{ ?S ?P ?O }
LIMIT 1
</programlisting>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  <link xlink:href="http://bit.ly/19eOiDE">View the SPARQL Query Definition via SPARQL Protocol URL
</link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link xlink:href="http://bit.ly/18AgJS6">View the SPARQL Query Results via SPARQL Protocol URL
</link>
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="howtoloadlargedatanocheckpointabort">
        <title>How to Update Large SPARQL Data avoiding due to database checkpoint abortion?</title>
        <para>Assume while performing large SPARQL update, for example of triples around 80 millions in total,
    		one gets the following error which aborts the update:
    	</para>
        <programlisting>
"Transaction aborted due to a database checkpoint or database-wide
atomic operation. Please retry transaction" .
</programlisting>
        <para>The error means that the SPARQL update has possibly encountered a database checkpoint during the
      	load. Thus one should check the CheckpointInterval in the INI file and possible increase its value:
      </para>
        <programlisting>
;
;  Server parameters
;
[Parameters]
...
CheckpointInterval       = 60
...
</programlisting>
        <para>Note: The <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtBulkRDFLoader">RDF Bulk loader</link>

      can be used for loading large datasets, and it will handle the checkpoint matter automatically.
      </para>
      </section>
      <section xml:id="howtomanagesslprotocolsandciphers">
        <title>How to Manage SSL Protocols and Ciphers used with Virtuoso?</title>
        <section xml:id="howtomanagesslprotocolsandcipherswhat">
          <title>What?</title>
          <para>As of Virtuoso 7.2, SSL protocol and cipher support is now configurable for connections from all HTTP, ODBC,
        JDBC, ADO.NET, and OLE-DB clients.</para>
        </section>
        <section xml:id="howtomanagesslprotocolsandcipherswhy">
          <title>Why?</title>
          <para>Default binding to OpenSSL can expose Virtuoso instances to version- and cipher-specific SSL vulnerabilities
        (e.g., recent <link xlink:href="http://security.stackexchange.com/questions/70719/ssl3-poodle-vulnerability">Poodle exploit</link>

  ).
        Being able to scope Virtuoso's use of SSL to one or more specific versions provides instance administrators better protection
        against a moving target.</para>
        </section>
        <section xml:id="howtomanagesslprotocolsandciphershow">
          <title>How?</title>
          <section xml:id="howtomanagesslprotocolsandciphershowbasicc">
            <title>Basic SSL Protocol Configuration</title>
            <para>Basic configuration is through the <code>SSL_Protocols</code>

   values in the <code>[Parameters]</code>

   and
      	  <code>[HTTP]</code>

   sections of the Virtuoso INI file. These are comma+space-separated (", ") value lists. Including a
      	  protocol name explicitly enables it; preceding the protocol name with an exclamation point ("<code>!</code>

  ")
      	  explicitly disables it.</para>
            <section xml:id="howtomanagesslprotocolsandciphershowbasiccss">
              <title>Basic SSL Protocol Configuration</title>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>Supported SSL Protocols and INI keyword values List</title>
                <tgroup align="char" charoff="50" char="." cols="3">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>SSL/TLS Version</entry>
                      <entry>Value for INI file</entry>
                      <entry>Notes</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>SSLv2</entry>
                      <entry>-</entry>
                      <entry>Permanently disabled.</entry>
                    </row>
                    <row>
                      <entry>SSLv3</entry>
                      <entry>
                        <code>SSLv3</code>
                      </entry>
                      <entry>Disabled by default. To our knowledge, only required by IE6/Windows XP clients.</entry>
                    </row>
                    <row>
                      <entry>TLSv1</entry>
                      <entry>
                        <code>TLSv1</code>
                      </entry>
                      <entry>Enabled by default.</entry>
                    </row>
                    <row>
                      <entry>TLSv1.1</entry>
                      <entry>
                        <code>TLSv1.1</code>
                      </entry>
                      <entry>Enabled by default, supported if available in local <code>openssl</code>

   library.</entry>
                    </row>
                    <row>
                      <entry>TLSv1.2</entry>
                      <entry>
                        <code>TLSv1.2</code>
                      </entry>
                      <entry>Enabled by default, supported if available in local <code>openssl</code>

   library. </entry>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </section>
          </section>
          <section xml:id="howtomanagesslprotocolsandciphershowbasica">
            <title>Advanced SSL Cipher List Configuration</title>
            <para>The <code>SSL_Cipher_List</code>

   values in the <code>[Parameters]</code>

   and <code>[HTTP]</code>

   stanzas of the
      	  Virtuoso INI file may also be adjusted, to disable particular ciphers when there are security reports about some new
      	  attack that breaks them. These are colon-separated ("<code>:</code>

  ") value lists.</para>
            <para>Including a protocol name or groupname explicitly enables it; preceding the protocol name with an exclamation point
      	  ("<code>!</code>

  ") explicitly disables it. You can review the ciphers supported by your local <code>OpenSSL</code>

   library
      	  with the command:</para>
            <programlisting>
openssl ciphers -v ALL
</programlisting>
            <para>For instance, we recommend explicitly forbidding anonymous cipher suites (i.e., ones that do not use certificates,
          and are therefore susceptible to man-in-the-middle attacks) using <code>!aNULL</code>

  .</para>
            <para>We also recommend including <code>@STRENGTH</code>

   at the end of the list, so that <code>OpenSSL</code>

   will
          prioritize the enabled ciphers by key length, regardless of the list order.</para>
          </section>
          <section xml:id="howtomanagesslprotocolsandciphershowbasicr">
            <title>Recommended Settings</title>
            <para>The sample settings below provide a reasonable tradeoff of security versus flexibility. As shown, we have enabled
      	  <code>SSLv3</code>

   on the HTTPS ports for IE6 users, but left this disabled on the SQL data port.</para>
            <programlisting>
[Parameters]
SSL_Protocols	= TLSv1, TLSv1.1, TLSv1.2
SSL_Cipher_List = HIGH:!aNULL:!eNULL:!RC4:!DES:!MD5:!PSK:!SRP:!KRB5:!SSLv2:!EXP:!MEDIUM:!LOW:!DES-CBC-SHA:@STRENGTH

[HTTP]
SSL_Protocols	= SSLv3, TLSv1, TLSv1.1, TLSv1.2
SSL_Cipher_List = HIGH:!aNULL:!eNULL:!RC4:!DES:!MD5:!PSK:!SRP:!KRB5:!SSLv2:!EXP:!MEDIUM:!LOW:!DES-CBC-SHA:@STRENGTH
</programlisting>
          </section>
        </section>
      </section>
    </section>
