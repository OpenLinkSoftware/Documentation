<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="rdfnativestorageproviders">
      <title>RDF Data Access Providers (Drivers)</title>
      <section xml:id="rdfnativestorageprovidersjena">
        <title>Virtuoso Jena Provider</title>
        <section xml:id="rdfnativestorageprovidersjenawhatis">
          <title>What is Jena</title>
          <para>Jena is an open source Semantic Web framework for Java. It provides an API to extract data from and write to RDF
    graphs. The graphs are represented as an abstract "model". A model can be sourced with data from files, databases,
    URIs or a combination of these. A Model can also be queried through SPARQL and updated through SPARUL.
    </para>
        </section>
        <section xml:id="rdfnativestorageprovidersjenawhatisv">
          <title>What is the Virtuoso Jena Provider</title>
          <para>The Virtuoso Jena RDF Data Provider is a fully operational Native Graph Model Storage Provider for the
    Jena Framework, which enables Semantic Web applications written using the Jena RDF Frameworks to directly query the
    Virtuoso RDF Quad Store. Providers are available for the latest <link xlink:href="http://jena.sourceforge.net/">Jena</link>

   2.6.x
    and 2.10.x versions.</para>
          <figure xml:id="rdfnativestorageprovidersjena1" floatstyle="1">
            <title>Virtuoso Jena RDF Data Provider</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/VirtJenaProvider.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section xml:id="rdfnativestorageprovidersjenasetup">
          <title>Setup</title>
          <section xml:id="rdfnativestorageprovidersjenareqfiles">
            <title>Prerequisites</title>
            <para><link xlink:href="http://edit-wiki.usnet.private/dataspace/dav/wiki/VOS/VOSDownload#Jena%20Provider">Download the latest</link>

   Virtuoso Jena Provider for your Jena framework version, Virtuoso JDBC 3 Driver, Jena Framework, and associated classes and sample programs.</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  <emphasis>Note:</emphasis>
                </para>
                <para> The Jena Provider is explicitly bound to the Virtuoso JDBC 3 Driver. You cannot use the
        Virtuoso JDBC 4 Driver for this purpose at this time.</para>
              </listitem>
              <listitem>
                <para>The version of the Jena Provider (virt_jena.jar) can be verified with the command:
</para>
                <programlisting>
$ java -jar virt_jena.jar
OpenLink Virtuoso(TM) Provider for Jena(TM) Version 2.6.2 [Build 1.2]
</programlisting>
              </listitem>
              <listitem>
                <para>Files contained in the zip files are generally older than specifically linked downloads (e.g., the
        Virtuoso JDBC Driver, virtjdbc3.jar), so don't replace if prompted during extraction. Instead, rename the
        file extracted from the zip, and compare their versions to be sure you keep only the most recent.
</para>
                <programlisting>
$ java -cp virtjdbc3.jar virtuoso.jdbc3.Driver
OpenLink Virtuoso(TM) Driver for JDBC(TM) Version 3.x [Build 3.57]
$ java -cp virtjdbc3.fromzip.jar virtuoso.jdbc3.Driver
OpenLink Virtuoso(TM) Driver for JDBC(TM) Version 3.x [Build 3.11]
</programlisting>
              </listitem>
              <listitem>
                <para>Downloads:

</para>
                <itemizedlist mark="bullet">
                  <listitem>
                    <para>Virtuoso Jena Provider JAR file, 

                    <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/virt_jena.jar">virt_jena.jar
</link></para>
                  </listitem>
                  <listitem>
                    <para>Virtuoso JDBC Driver 3 JAR file, 

                    <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/virtjdbc3.jar">virtjdbc3.jar
</link></para>
                  </listitem>
                  <listitem>
                    <para>Virtuoso JDBC Driver 4 JAR file, 

                    <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/virtjdbc4.jar">virtjdbc4.jar
</link></para>
                  </listitem>
                  <listitem>
                    <para>Jena Framework and associated classes, 
                    <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/jenajars.zip">jenajars.zip
</link>
</para>
                  </listitem>
                  <listitem>
                    <para>Sample programs, 
                    <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/virtjenasamples.zip">virtjenasamples.zip
</link>
</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="rdfnativestorageprovidersjenacmsmpr">
            <title>Compiling Jena Sample Programs</title>
            <orderedlist>
              <listitem>
                <para>Edit the sample programs VirtuosoSPARQLExampleX.java, where X = 1 to 9.
Set the JDBC connection strings within to point to a valid Virtuoso Server instance of the form:
</para>
                <programlisting>
"jdbc:virtuoso://localhost:1111/charset=UTF-8/log_enable=2"
</programlisting>
                <itemizedlist>
                  <listitem>
                    <para>charset=UTF-8  will be added by Jena provider, if it isn't in connection string.
So now you don't need add "charset=UTF-8" to the connection string any more, it is done by Jena provider.
         </para>
                  </listitem>
                  <listitem>
                    <para>log_enable=2: to use row auto commit
         </para>
                  </listitem>
                  <listitem>
                    <para>use these settings to process large rdf data.
         </para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para>Ensure that full paths to </para>
                <para>
                  <emphasis>jena.jar, arq.jar,</emphasis>
                </para>
                <para> and
</para>
                <para>
                  <emphasis>virtjdbc3.jar</emphasis>
                </para>
                <para> are included in the active CLASSPATH setting.
      </para>
              </listitem>
              <listitem>
                <para>Compile the Jena Sample applications using the following command:
</para>
                <programlisting>
javac -cp "jena.jar:arq.jar:virtjdbc3.jar:virt_jena.jar:." VirtuosoSPARQLExample1.java
VirtuosoSPARQLExample2.java VirtuosoSPARQLExample3.java VirtuosoSPARQLExample4.java
VirtuosoSPARQLExample5.java VirtuosoSPARQLExample6.java VirtuosoSPARQLExample7.java
VirtuosoSPARQLExample8.java VirtuosoSPARQLExample9.java
</programlisting>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="rdfnativestorageprovidersjenatesting">
            <title>Testing</title>
            <para>Once the Provider classes and sample program have been successfully compiled,
the Provider can be tested using the sample programs included. Ensure your active CLASSPATH
includes full paths to all of the following files, before executing the example commands:
    </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>icu4j_3_4.jar</para>
              </listitem>
              <listitem>
                <para>iri.jar</para>
              </listitem>
              <listitem>
                <para>xercesImpl.jar</para>
              </listitem>
              <listitem>
                <para>axis.jar</para>
              </listitem>
              <listitem>
                <para>commons-logging-1.1.1.jar</para>
              </listitem>
              <listitem>
                <para>jena.jar</para>
              </listitem>
              <listitem>
                <para>arq.jar</para>
              </listitem>
              <listitem>
                <para>virtjdbc3.jar</para>
              </listitem>
              <listitem>
                <para>virt_jena.jar</para>
              </listitem>
            </itemizedlist>
            <orderedlist>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples1">VirtuosoSPARQLExample1</link>
                 returns the contents of the RDF Quad store of the targeted Virtuoso instance, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample1
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples2">VirtuosoSPARQLExample2</link>
                 reads in the contents of the following FOAF URIs --
</para>
                <programlisting>
http://kidehen.idehen.net/dataspace/person/kidehen#this
http://www.w3.org/People/Berners-Lee/card#i
http://demo.openlinksw.com/dataspace/person/demo#this
</programlisting>
                <para>-- and returns the RDF data stored, with the following command:</para>
                <programlisting>
java VirtuosoSPARQLExample2
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples3">VirtuosoSPARQLExample3</link>
                 performs simple addition and deletion operation on
the content of the triple store, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample3
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples4">VirtuosoSPARQLExample4</link>
                 demonstrates the use of the 

                  <emphasis>graph.contains</emphasis>

                 method for searching triples, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample4
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples5">VirtuosoSPARQLExample5</link>
                 demonstrates the use of the 

                  <emphasis>graph.find</emphasis>

                 method for searching triples, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample5
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples6">VirtuosoSPARQLExample6</link>
                 demonstrates the use of the 

                  <emphasis>graph.getTransactionHandler</emphasis>

                method, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample6
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples7">VirtuosoSPARQLExample7</link>
                 demonstrates the use of the graph.getBulkUpdateHandler method, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample7
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples8">VirtuosoSPARQLExample8</link>
                 demonstrates how to insert triples into a graph, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample8
</programlisting>
              </listitem>
              <listitem>
                <para><link linkend="rdfnativestorageprovidersjenaexamples9">VirtuosoSPARQLExample9</link>
                 demonstrates the use of the 

                  <emphasis>CONSTRUCT, DESCRIBE,</emphasis>

                 and 

                  <emphasis>ASK</emphasis>

                 SPARQL query forms, with the following command:
</para>
                <programlisting>
java VirtuosoSPARQLExample9
</programlisting>
              </listitem>
            </orderedlist>
          </section>
        </section>
        <section xml:id="rdfnativestorageprovidersjenaexamples">
          <title>Examples</title>
          <section xml:id="rdfnativestorageprovidersjenaexamples1">
            <title>VirtJenaSPARQLExample1</title>
            <programlisting>
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample1 {

	/**
	 * Executes a SPARQL query against a virtuoso url and prints results.
	 */
	public static void main(String[] args) {

		String url;
		if(args.length == 0)
		    url = "jdbc:virtuoso://localhost:1111";
		else
		    url = args[0];

/*			STEP 1			*/
		VirtGraph set = new VirtGraph (url, "dba", "dba");

/*			STEP 2			*/

/*			STEP 3			*/
/*		Select all data in virtuoso	*/
		Query sparql = QueryFactory.create("SELECT * WHERE { GRAPH ?graph { ?s ?p ?o } } limit 100");

/*			STEP 4			*/
		VirtuosoQueryExecution vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		ResultSet results = vqe.execSelect();
		while (results.hasNext()) {
			QuerySolution result = results.nextSolution();
		    RDFNode graph = result.get("graph");
		    RDFNode s = result.get("s");
		    RDFNode p = result.get("p");
		    RDFNode o = result.get("o");
		    System.out.println(graph + " { " + s + " " + p + " " + o + " . }");
		}
	}
}

</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples2">
            <title>VirtJenaSPARQLExample2</title>
            <programlisting>
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample2 {

	/**
	 * Executes a SPARQL query against a virtuoso url and prints results.
	 */
	public static void main(String[] args) {

		String url;
		if(args.length == 0)
		    url = "jdbc:virtuoso://localhost:1111";
		else
		    url = args[0];

/*			STEP 1			*/
		VirtGraph graph = new VirtGraph ("Example2", url, "dba", "dba");

/*			STEP 2			*/
/*		Load data to Virtuoso		*/
		graph.clear ();

		System.out.print ("Begin read from 'http://www.w3.org/People/Berners-Lee/card#i'  ");
		graph.read("http://www.w3.org/People/Berners-Lee/card#i", "RDF/XML");
		System.out.println ("\t\t\t Done.");

		System.out.print ("Begin read from 'http://demo.openlinksw.com/dataspace/person/demo#this'  ");
		graph.read("http://demo.openlinksw.com/dataspace/person/demo#this", "RDF/XML");
		System.out.println ("\t Done.");

		System.out.print ("Begin read from 'http://kidehen.idehen.net/dataspace/person/kidehen#this'  ");
		graph.read("http://kidehen.idehen.net/dataspace/person/kidehen#this", "RDF/XML");
		System.out.println ("\t Done.");

/*			STEP 3			*/
/*		Select only from VirtGraph	*/
		Query sparql = QueryFactory.create("SELECT ?s ?p ?o WHERE { ?s ?p ?o }");

/*			STEP 4			*/
		VirtuosoQueryExecution vqe = VirtuosoQueryExecutionFactory.create (sparql, graph);

		ResultSet results = vqe.execSelect();
		while (results.hasNext()) {
			QuerySolution result = results.nextSolution();
		    RDFNode graph_name = result.get("graph");
		    RDFNode s = result.get("s");
		    RDFNode p = result.get("p");
		    RDFNode o = result.get("o");
		    System.out.println(graph_name + " { " + s + " " + p + " " + o + " . }");
		}

		System.out.println("graph.getCount() = " + graph.getCount());
	}
}
</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples3">
            <title>VirtJenaSPARQLExample3</title>
            <programlisting>
import java.util.*;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Triple;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample3
{
    public static void main(String[] args)
    {
	String url;

	if(args.length == 0)
	    url = "jdbc:virtuoso://localhost:1111";
	else
	    url = args[0];

	Node foo1 = Node.createURI("http://example.org/#foo1");
	Node bar1 = Node.createURI("http://example.org/#bar1");
	Node baz1 = Node.createURI("http://example.org/#baz1");

	Node foo2 = Node.createURI("http://example.org/#foo2");
	Node bar2 = Node.createURI("http://example.org/#bar2");
	Node baz2 = Node.createURI("http://example.org/#baz2");

	Node foo3 = Node.createURI("http://example.org/#foo3");
	Node bar3 = Node.createURI("http://example.org/#bar3");
	Node baz3 = Node.createURI("http://example.org/#baz3");

	List &lt;Triple&gt; triples = new ArrayList &lt;Triple&gt; ();

	VirtGraph graph = new VirtGraph ("Example3", url, "dba", "dba");

	graph.clear ();

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("Add 3 triples to graph &lt;Example3&gt;.");

	graph.add(new Triple(foo1, bar1, baz1));
	graph.add(new Triple(foo2, bar2, baz2));
	graph.add(new Triple(foo3, bar3, baz3));

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	triples.add(new Triple(foo1, bar1, baz1));
	triples.add(new Triple(foo2, bar2, baz2));

	graph.isEmpty();

	System.out.println("Remove 2 triples from graph &lt;Example3&gt;");
	graph.remove(triples);
	System.out.println("graph.getCount() = " + graph.getCount());
	System.out.println("Please check result with isql tool.");

	/* EXPECTED RESULT:

SQL&gt; SPARQL
SELECT ?s ?p ?o
FROM &lt;Example3&gt;
WHERE {?s ?p ?o};
s                                                    p                                                             o
VARCHAR                                    VARCHAR                                              VARCHAR
_______________________________________________________________________________

http://example.org/#foo3              http://example.org/#bar3                         http://example.org/#baz3

1 Rows. -- 26 msec.
SQL&gt;

*/

	}
}
</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples4">
            <title>VirtJenaSPARQLExample4</title>
            <programlisting>
import java.util.*;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Triple;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample4
{

    public static void main(String[] args)
    {
	String url;
	if(args.length == 0)
	    url = "jdbc:virtuoso://localhost:1111";
	else
	    url = args[0];

	Node foo1 = Node.createURI("http://example.org/#foo1");
	Node bar1 = Node.createURI("http://example.org/#bar1");
	Node baz1 = Node.createURI("http://example.org/#baz1");

	Node foo2 = Node.createURI("http://example.org/#foo2");
	Node bar2 = Node.createURI("http://example.org/#bar2");
	Node baz2 = Node.createURI("http://example.org/#baz2");

	Node foo3 = Node.createURI("http://example.org/#foo3");
	Node bar3 = Node.createURI("http://example.org/#bar3");
	Node baz3 = Node.createURI("http://example.org/#baz3");

	VirtGraph graph = new VirtGraph ("Example4", url, "dba", "dba");

	graph.clear ();

	System.out.println("graph.isEmpty() = " + graph.isEmpty());

	System.out.println("Add 3 triples to graph &lt;Example4&gt;.");

	graph.add(new Triple(foo1, bar1, baz1));
	graph.add(new Triple(foo2, bar2, baz2));
	graph.add(new Triple(foo3, bar3, baz3));

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	System.out.println ("graph.contains(new Triple(foo2, bar2, baz2) - " + graph.contains(new Triple(foo2, bar2, baz2)));
	System.out.println ("graph.contains(new Triple(foo2, bar2, baz3) - " + graph.contains(new Triple(foo2, bar2, baz3)));

	graph.clear ();

    }
}
</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples5">
            <title>VirtJenaSPARQLExample5</title>
            <programlisting>
import java.util.*;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Triple;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample5
{

    public static void main(String[] args)
    {
	String url;
	if(args.length == 0)
	    url = "jdbc:virtuoso://localhost:1111";
	else
	    url = args[0];

	Node foo1 = Node.createURI("http://example.org/#foo1");
	Node bar1 = Node.createURI("http://example.org/#bar1");
	Node baz1 = Node.createURI("http://example.org/#baz1");

	Node foo2 = Node.createURI("http://example.org/#foo2");
	Node bar2 = Node.createURI("http://example.org/#bar2");
	Node baz2 = Node.createURI("http://example.org/#baz2");

	Node foo3 = Node.createURI("http://example.org/#foo3");
	Node bar3 = Node.createURI("http://example.org/#bar3");
	Node baz3 = Node.createURI("http://example.org/#baz3");

	VirtGraph graph = new VirtGraph ("Example5", url, "dba", "dba");

	graph.clear ();

	System.out.println("graph.isEmpty() = " + graph.isEmpty());

	System.out.println("Add 3 triples to graph &lt;Example5&gt;.");

	graph.add(new Triple(foo1, bar1, baz1));
	graph.add(new Triple(foo2, bar2, baz2));
	graph.add(new Triple(foo3, bar3, baz3));
	graph.add(new Triple(foo1, bar2, baz2));
	graph.add(new Triple(foo1, bar3, baz3));

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	ExtendedIterator iter = graph.find(foo1, Node.ANY, Node.ANY);
	System.out.println ("\ngraph.find(foo1, Node.ANY, Node.ANY) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	iter = graph.find(Node.ANY, Node.ANY, baz3);
	System.out.println ("\ngraph.find(Node.ANY, Node.ANY, baz3) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	iter = graph.find(foo1, Node.ANY, baz3);
	System.out.println ("\ngraph.find(foo1, Node.ANY, baz3) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	graph.clear ();

    }
}
</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples6">
            <title>VirtJenaSPARQLExample6</title>
            <programlisting>
import java.util.*;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Triple;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample6
{

    public static void main(String[] args)
    {
	String url;
	if(args.length == 0)
	    url = "jdbc:virtuoso://localhost:1111";
	else
	    url = args[0];

	Node foo1 = Node.createURI("http://example.org/#foo1");
	Node bar1 = Node.createURI("http://example.org/#bar1");
	Node baz1 = Node.createURI("http://example.org/#baz1");

	Node foo2 = Node.createURI("http://example.org/#foo2");
	Node bar2 = Node.createURI("http://example.org/#bar2");
	Node baz2 = Node.createURI("http://example.org/#baz2");

	Node foo3 = Node.createURI("http://example.org/#foo3");
	Node bar3 = Node.createURI("http://example.org/#bar3");
	Node baz3 = Node.createURI("http://example.org/#baz3");

	VirtGraph graph = new VirtGraph ("Example6", url, "dba", "dba");

	graph.clear ();

	System.out.println("graph.isEmpty() = " + graph.isEmpty());

	System.out.println("test Transaction Commit.");
	graph.getTransactionHandler().begin();
	System.out.println("begin Transaction.");
	System.out.println("Add 3 triples to graph &lt;Example6&gt;.");

	graph.add(new Triple(foo1, bar1, baz1));
	graph.add(new Triple(foo2, bar2, baz2));
	graph.add(new Triple(foo3, bar3, baz3));

	graph.getTransactionHandler().commit();
	System.out.println("commit Transaction.");
	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	ExtendedIterator iter = graph.find(Node.ANY, Node.ANY, Node.ANY);
	System.out.println ("\ngraph.find(Node.ANY, Node.ANY, Node.ANY) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	graph.clear ();
	System.out.println("\nCLEAR graph &lt;Example6&gt;");
	System.out.println("graph.isEmpty() = " + graph.isEmpty());

	System.out.println("Add 1 triples to graph &lt;Example6&gt;.");
	graph.add(new Triple(foo1, bar1, baz1));

	System.out.println("test Transaction Abort.");
	graph.getTransactionHandler().begin();
	System.out.println("begin Transaction.");
	System.out.println("Add 2 triples to graph &lt;Example6&gt;.");

	graph.add(new Triple(foo2, bar2, baz2));
	graph.add(new Triple(foo3, bar3, baz3));

	graph.getTransactionHandler().abort();
	System.out.println("abort Transaction.");
	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	iter = graph.find(Node.ANY, Node.ANY, Node.ANY);
	System.out.println ("\ngraph.find(Node.ANY, Node.ANY, Node.ANY) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	graph.clear ();
	System.out.println("\nCLEAR graph &lt;Example6&gt;");

    }
}

</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples7">
            <title>VirtJenaSPARQLExample7</title>
            <programlisting>
import java.util.*;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Triple;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample7
{

    public static void main(String[] args)
    {
	String url;
	if(args.length == 0)
	    url = "jdbc:virtuoso://localhost:1111";
	else
	    url = args[0];

	Node foo1 = Node.createURI("http://example.org/#foo1");
	Node bar1 = Node.createURI("http://example.org/#bar1");
	Node baz1 = Node.createURI("http://example.org/#baz1");

	Node foo2 = Node.createURI("http://example.org/#foo2");
	Node bar2 = Node.createURI("http://example.org/#bar2");
	Node baz2 = Node.createURI("http://example.org/#baz2");

	Node foo3 = Node.createURI("http://example.org/#foo3");
	Node bar3 = Node.createURI("http://example.org/#bar3");
	Node baz3 = Node.createURI("http://example.org/#baz3");

	List triples1 = new ArrayList();
	triples1.add(new Triple(foo1, bar1, baz1));
	triples1.add(new Triple(foo2, bar2, baz2));
	triples1.add(new Triple(foo3, bar3, baz3));

	List triples2 = new ArrayList();
	triples2.add(new Triple(foo1, bar1, baz1));
	triples2.add(new Triple(foo2, bar2, baz2));

	VirtGraph graph = new VirtGraph ("Example7", url, "dba", "dba");

	graph.clear ();

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("Add List with 3 triples to graph &lt;Example7&gt; via BulkUpdateHandler.");

	graph.getBulkUpdateHandler().add(triples1);

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	ExtendedIterator iter = graph.find(Node.ANY, Node.ANY, Node.ANY);
	System.out.println ("\ngraph.find(Node.ANY, Node.ANY, Node.ANY) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	System.out.println("\n\nDelete List of 2 triples from graph &lt;Example7&gt; via BulkUpdateHandler.");

	graph.getBulkUpdateHandler().delete(triples2);

	System.out.println("graph.isEmpty() = " + graph.isEmpty());
	System.out.println("graph.getCount() = " + graph.getCount());

	iter = graph.find(Node.ANY, Node.ANY, Node.ANY);
	System.out.println ("\ngraph.find(Node.ANY, Node.ANY, Node.ANY) \nResult:");
	for ( ; iter.hasNext() ; )
	    System.out.println ((Triple) iter.next());

	graph.clear ();
	System.out.println("\nCLEAR graph &lt;Example7&gt;");

    }
}
</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples8">
            <title>VirtJenaSPARQLExample8</title>
            <programlisting>
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample8 {

	/**
	 * Executes a SPARQL query against a virtuoso url and prints results.
	 */
	public static void main(String[] args) {

		String url;
		if(args.length == 0)
		    url = "jdbc:virtuoso://localhost:1111";
		else
		    url = args[0];

/*			STEP 1			*/
		VirtGraph set = new VirtGraph (url, "dba", "dba");

/*			STEP 2			*/
System.out.println("\nexecute: CLEAR GRAPH &lt;http://test1&gt;");
                String str = "CLEAR GRAPH &lt;http://test1&gt;";
                VirtuosoUpdateRequest vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();

System.out.println("\nexecute: INSERT INTO GRAPH &lt;http://test1&gt; { &lt;aa&gt; &lt;bb&gt; 'cc' . &lt;aa1&gt; &lt;bb1&gt; 123. }");
                str = "INSERT INTO GRAPH &lt;http://test1&gt; { &lt;aa&gt; &lt;bb&gt; 'cc' . &lt;aa1&gt; &lt;bb1&gt; 123. }";
                vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();

/*			STEP 3			*/
/*		Select all data in virtuoso	*/
System.out.println("\nexecute: SELECT * FROM &lt;http://test1&gt; WHERE { ?s ?p ?o }");
		Query sparql = QueryFactory.create("SELECT * FROM &lt;http://test1&gt; WHERE { ?s ?p ?o }");

/*			STEP 4			*/
		VirtuosoQueryExecution vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		ResultSet results = vqe.execSelect();
		while (results.hasNext()) {
			QuerySolution rs = results.nextSolution();
		    RDFNode s = rs.get("s");
		    RDFNode p = rs.get("p");
		    RDFNode o = rs.get("o");
		    System.out.println(" { " + s + " " + p + " " + o + " . }");
		}

System.out.println("\nexecute: DELETE FROM GRAPH &lt;http://test1&gt; { &lt;aa&gt; &lt;bb&gt; 'cc' }");
                str = "DELETE FROM GRAPH &lt;http://test1&gt; { &lt;aa&gt; &lt;bb&gt; 'cc' }";
                vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();

System.out.println("\nexecute: SELECT * FROM &lt;http://test1&gt; WHERE { ?s ?p ?o }");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);
                results = vqe.execSelect();
		while (results.hasNext()) {
			QuerySolution rs = results.nextSolution();
		    RDFNode s = rs.get("s");
		    RDFNode p = rs.get("p");
		    RDFNode o = rs.get("o");
		    System.out.println(" { " + s + " " + p + " " + o + " . }");
		}

	}
}
</programlisting>
          </section>
          <section xml:id="rdfnativestorageprovidersjenaexamples9">
            <title>VirtJenaSPARQLExample9</title>
            <programlisting>
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Graph;
import com.hp.hpl.jena.rdf.model.*;
import java.util.Iterator;

import virtuoso.jena.driver.*;

public class VirtuosoSPARQLExample9 {

	/**
	 * Executes a SPARQL query against a virtuoso url and prints results.
	 */
	public static void main(String[] args) {

		String url;
		if(args.length == 0)
		    url = "jdbc:virtuoso://localhost:1111";
		else
		    url = args[0];

/*			STEP 1			*/
		VirtGraph set = new VirtGraph (url, "dba", "dba");

/*			STEP 2			*/
                String str = "CLEAR GRAPH &lt;http://test1&gt;";
                VirtuosoUpdateRequest vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();

                str = "INSERT INTO GRAPH &lt;http://test1&gt; { &lt;http://aa&gt; &lt;http://bb&gt; 'cc' . &lt;http://aa1&gt; &lt;http://bb&gt; 123. }";
                vur = VirtuosoUpdateFactory.create(str, set);
                vur.exec();

/*		Select all data in virtuoso	*/
		Query sparql = QueryFactory.create("SELECT * FROM &lt;http://test1&gt; WHERE { ?s ?p ?o }");
		VirtuosoQueryExecution vqe = VirtuosoQueryExecutionFactory.create (sparql, set);
		ResultSet results = vqe.execSelect();
                System.out.println("\nSELECT results:");
		while (results.hasNext()) {
			QuerySolution rs = results.nextSolution();
		    RDFNode s = rs.get("s");
		    RDFNode p = rs.get("p");
		    RDFNode o = rs.get("o");
		    System.out.println(" { " + s + " " + p + " " + o + " . }");
		}

		sparql = QueryFactory.create("DESCRIBE &lt;http://aa&gt; FROM &lt;http://test1&gt;");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		Model model = vqe.execDescribe();
 	        Graph g = model.getGraph();
                System.out.println("\nDESCRIBE results:");
	        for (Iterator i = g.find(Node.ANY, Node.ANY, Node.ANY); i.hasNext();)
	           {
	              Triple t = (Triple)i.next();
		      System.out.println(" { " + t.getSubject() + " " +
		      				 t.getPredicate() + " " +
		      				 t.getObject() + " . }");
	        }

		sparql = QueryFactory.create("CONSTRUCT { ?x &lt;http://test&gt; ?y } FROM &lt;http://test1&gt; WHERE { ?x &lt;http://bb&gt; ?y }");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		model = vqe.execConstruct();
 	        g = model.getGraph();
                System.out.println("\nCONSTRUCT results:");
	        for (Iterator i = g.find(Node.ANY, Node.ANY, Node.ANY); i.hasNext();)
	           {
	              Triple t = (Triple)i.next();
		      System.out.println(" { " + t.getSubject() + " " +
		      				 t.getPredicate() + " " +
		      				 t.getObject() + " . }");
	        }

		sparql = QueryFactory.create("ASK FROM &lt;http://test1&gt; WHERE { &lt;http://aa&gt; &lt;http://bb&gt; ?y }");
		vqe = VirtuosoQueryExecutionFactory.create (sparql, set);

		boolean res = vqe.execAsk();
                System.out.println("\nASK results: "+res);

	}
}
</programlisting>
          </section>
        </section>
        <section xml:id="rdfnativestorageprovidersjenajavadoc">
          <title>Javadoc API Documentation</title>
          <para>Javadocs covers the complete set of classes, interfaces, and methods implemented by the provider:</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>
                <link xlink:href="http://docs.openlinksw.com/jena/">Javadoc API Documentation for the Jena 2.6 Provider</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link xlink:href="http://docs.openlinksw.com/jena2/">Javadoc API Documentation for the Jena 2.10+ Provider</link>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section xml:id="rdfnativestorageproviderssesame">
        <title>Virtuoso Sesame Provider</title>
        <section xml:id="rdfnativestorageproviderssesamewhatis">
          <title>What is Sesame</title>
          <para>Sesame is an open source Java framework for storing, querying, and reasoning with RDF and RDF Schema. It can be used as a database for RDF and RDF Schema, or as a Java library for applications that need to work with RDF internally. For example, suppose you need to read a big RDF file, find the relevant information for your application, and use that information. Sesame provides you with the necessary tools to parse, interpret, query, and store all this information, embedded in your own application if you want, or, if you prefer, in a separate database or even on a remote server. More generally: Sesame provides an application developer with a toolbox that contains useful hammers, screwdrivers, etc., for 'Do-It-Yourself' projects with RDF.
      </para>
        </section>
        <section xml:id="rdfnativestorageproviderssesamewhatisvirtuososesameprovider">
          <title>What is the Virtuoso Sesame Provider</title>
          <para>The Virtuoso Sesame Provider is a fully operational Native Graph Model Storage Provider for the Sesame Framework, allowing users of Virtuoso to leverage the Sesame framework to modify, query, and reason with the Virtuoso quad store using the Java language. The Sesame Repository API offers a central access point for connecting to the Virtuoso quad store. Its purpose is to provides a Java-friendly access point to Virtuoso. It offers various methods for querying and updating the data, while abstracting the details of the underlying machinery. The Provider has been tested against the two latest currently available versions,
      <link xlink:href="http://www.openrdf.org/download_sesame2.jsp">Sesame</link>

   2.6.x, 2.7.x, 2.8.x and the new Sesame 4.x release, for which a new Provider is available.
    </para>
          <figure xml:id="rdfnativestorageproviderssesame1" floatstyle="1">
            <title>Fig. 1 Sesame Component Stack</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/VirtSesame2Provider.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>If you need more information about how to set up your environment for working with the Sesame APIs, take a look at Chapter 2 of the Sesame User Guide, <link xlink:href="http://rdf4j.org/sesame/2.7/docs/users.docbook?view#Downloading_and_Configuring_Sesame">Setting up to use the Sesame libraries</link>

  .
    </para>
        </section>
        <section xml:id="rdfnativestorageproviderssesamesetup">
          <title>Setup</title>
          <section xml:id="rdfnativestorageproviderssesamereqfiles">
            <title>Required Files</title>
            <para>This tutorial assumes you have Virtuoso server installed and that the database is accessible at
      "localhost:1111".  In addition, the relevant version of the Virtuoso Sesame Provider, and Sesame java framework need to be installed.</para>
            <para>You should download the Virtuoso Sesame Provider JAR archive for the version of Sesame being used, Virtuoso JDBC Driver, Sesame Framework and associated classes and sample programs from our
      <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload">download page</link>

   .
       Note the version of the Sesame Provider (virt_sesameX.jar) can be determined with the command:
      </para>
            <programlisting>
$ java -jar virt_sesame2.jar
OpenLink Virtuoso(TM) Provider for Sesame2(TM) Version 2.6.5 [Build 1.7]
$ java -jar virt_sesame4.jar
OpenLink Virtuoso(TM) Provider for Sesame4(TM) Version 4.0.0 [Build 0.1]
$
</programlisting>
          </section>
          <section xml:id="rdfnativestorageproviderssesamecmppr">
            <title>Sesame 2 Sample Program</title>
            <section xml:id="rdfnativestorageproviderssesamecmpprcomp">
              <title>Compilation</title>
              <orderedlist>
                <listitem>
                  <para>Ensure that full paths to the following files, or equivalents for your version of Sesame, are all included in the active CLASSPATH setting --

</para>
                  <itemizedlist mark="bullet">
                    <listitem>
                      <para>openrdf-sesame-2.1.2-onejar.jar
</para>
                    </listitem>
                    <listitem>
                      <para>slf4j-api-1.5.0.jar
</para>
                    </listitem>
                    <listitem>
                      <para>slf4j-jdk14-1.5.0.jar
</para>
                    </listitem>
                    <listitem>
                      <para>commons-io-2.0.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virtjdbc3.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virt_sesame2.jar
</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
                <listitem>
                  <para>Execute the following command:
</para>
                  <programlisting>
javac VirtuosoTest.java
</programlisting>
                  <para>Note: we recommend adding the following to the connect string, to use utf-8 and row-auto-commit:</para>
                  <programlisting>
"/charset=UTF-8/log_enable=2"
-- i.e. in VirtuosoTest.java the line:
Repository repository = new VirtuosoRepository("jdbc:virtuoso://" + sa[0] + ":" + sa[1], sa[2], sa[3]);
-- should become:
Repository repository = new VirtuosoRepository("jdbc:virtuoso://" + sa[0] + ":" + sa[1]+ "/charset=UTF-8/log_enable=2", sa[2], sa[3]);
</programlisting>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="rdfnativestorageproviderssesametesting">
              <title>Testing</title>
              <orderedlist>
                <listitem>
                  <para>Ensure that full paths to the following files are all included in the active CLASSPATH setting (note the addition of virtuoso_driver, here):

</para>
                  <itemizedlist mark="bullet">
                    <listitem>
                      <para>openrdf-sesame-2.1.2-onejar.jar
</para>
                    </listitem>
                    <listitem>
                      <para>slf4j-api-1.5.0.jar
</para>
                    </listitem>
                    <listitem>
                      <para>slf4j-jdk14-1.5.0.jar
</para>
                    </listitem>
                    <listitem>
                      <para>commons-io-2.0.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virtjdbc3.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virt_sesame2.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virtuoso_driver
</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
                <listitem>
                  <para>Run the 
                  <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSesame2Provider?att=VirtuosoTest.java">VirtuosoTest</link>
                   program to test the Sesame 2 Provider with the following command:
</para>
                  <programlisting>
java VirtuosoTest &lt;hostname&gt; &lt;port&gt; &lt;uid&gt; &lt;pwd&gt;
</programlisting>
                </listitem>
                <listitem>
                  <para>The test run should look like this:
</para>
                  <programlisting>
$ java VirtuosoTest localhost 1111 dba dba

== TEST 1:  : Start
   Loading data from URL: http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com/foaf.rdf
== TEST 1:  : End
PASSED: TEST 1

== TEST 2:  : Start
   Clearing triple store
== TEST 2:  : End
PASSED: TEST 2

== TEST 3:  : Start
   Loading data from file: virtuoso_driver/data.nt
== TEST 3:  : End
PASSED: TEST 3

== TEST 4:  : Start
   Loading UNICODE single triple
== TEST 4:  : End
PASSED: TEST 4

== TEST 5:  : Start
   Loading single triple
== TEST 5:  : End
PASSED: TEST 5

== TEST 6:  : Start
   Casted value type
== TEST 6:  : End
PASSED: TEST 6

== TEST 7:  : Start
   Selecting property
== TEST 7:  : End
PASSED: TEST 7

== TEST 8:  : Start
   Statement does not exists
== TEST 8:  : End
PASSED: TEST 8

== TEST 9:  : Start
   Statement exists (by resultset size)
== TEST 9:  : End
PASSED: TEST 9

== TEST 10:  : Start
   Statement exists (by hasStatement())
== TEST 10:  : End
PASSED: TEST 10

== TEST 11:  : Start
   Retrieving namespaces
== TEST 11:  : End
PASSED: TEST 11

== TEST 12:  : Start
   Retrieving statement (http://myopenlink.net/dataspace/person/kidehen http://myopenlink.net/foaf/name null)
== TEST 12:  : End
PASSED: TEST 12

== TEST 13:  : Start
   Writing the statements to file: (/Users/src/virtuoso-opensource/binsrc/sesame2/results.n3.txt)
== TEST 13:  : End
PASSED: TEST 13

== TEST 14:  : Start
   Retrieving graph ids
== TEST 14:  : End
PASSED: TEST 14

== TEST 15:  : Start
   Retrieving triple store size
== TEST 15:  : End
PASSED: TEST 15

== TEST 16:  : Start
   Sending ask query
== TEST 16:  : End
PASSED: TEST 16

== TEST 17:  : Start
   Sending construct query
== TEST 17:  : End
PASSED: TEST 17

== TEST 18:  : Start
   Sending describe query
== TEST 18:  : End
PASSED: TEST 18

============================
PASSED:18 FAILED:0
</programlisting>
                </listitem>
              </orderedlist>
            </section>
          </section>
          <section xml:id="rdfnativestorageproviderssesamecmppr4">
            <title>Sesame 4 Sample Program</title>
            <section xml:id="rdfnativestorageproviderssesamecmppr4comp">
              <title>Compilation</title>
              <orderedlist>
                <listitem>
                  <para>Ensure that full paths to the following files, or equivalents for your version of Sesame, are all included in the active CLASSPATH setting --

</para>
                  <itemizedlist mark="bullet">
                    <listitem>
                      <para>openrdf-sesame-4.0.0-onejar.jar
</para>
                    </listitem>
                    <listitem>
                      <para>slf4j-api-1.7.10.jar
</para>
                    </listitem>
                    <listitem>
                      <para>commons-io-2.4.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virtjdbc4.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virt_sesame4.jar
</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
                <listitem>
                  <para>Execute the following command:
</para>
                  <programlisting>
javac VirtuosoTest.java
</programlisting>
                  <para>Note: we recommend adding the following to the connect string, to use utf-8 and row-auto-commit:</para>
                  <programlisting>
"/charset=UTF-8/log_enable=2"
-- i.e. in VirtuosoTest.java the line:
Repository repository = new VirtuosoRepository("jdbc:virtuoso://" + sa[0] + ":" + sa[1], sa[2], sa[3]);
-- should become:
Repository repository = new VirtuosoRepository("jdbc:virtuoso://" + sa[0] + ":" + sa[1]+ "/charset=UTF-8/log_enable=2", sa[2], sa[3]);
</programlisting>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="rdfnativestorageproviderssesametesting4">
              <title>Testing</title>
              <orderedlist>
                <listitem>
                  <para>Ensure that full paths to the following files are all included in the active CLASSPATH setting (note the addition of virtuoso_driver, here):

</para>
                  <itemizedlist mark="bullet">
                    <listitem>
                      <para>openrdf-sesame-4.0.0-onejar.jar
</para>
                    </listitem>
                    <listitem>
                      <para>slf4j-api-1.7.10.jar
</para>
                    </listitem>
                    <listitem>
                      <para>commons-io-2.4.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virtjdbc4.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virt_sesame4.jar
</para>
                    </listitem>
                    <listitem>
                      <para>virtuoso_driver
</para>
                    </listitem>
                  </itemizedlist>
                </listitem>
                <listitem>
                  <para>Run the 
                  <link xlink:href="http://opldownload.s3.amazonaws.com/uda/virtuoso/rdfproviders/sesame/40/VirtuosoTest.java">VirtuosoTest</link>
                   program to test the Sesame 2 Provider with the following command:
</para>
                  <programlisting>
java VirtuosoTest &lt;hostname&gt; &lt;port&gt; &lt;uid&gt; &lt;pwd&gt;
</programlisting>
                </listitem>
                <listitem>
                  <para>The test run should look like this:
</para>
                  <programlisting>
$ java VirtuosoTest localhost 1111 dba dba

== TEST 1:  : Start
== TEST 1:  : End
PASSED: TEST 1

== TEST 2:  : Start
   Loading data from URL: http://dbpedia.org/data/Berlin.rdf
log4j:WARN No appenders could be found for logger (org.openrdf.rio.RDFParserRegistry).
log4j:WARN Please initialize the log4j system properly.
== TEST 2:  : End
PASSED: TEST 2

== TEST 3:  : Start
   Clearing triple store
== TEST 3:  : End
PASSED: TEST 3

== TEST 4:  : Start
   Loading data from file: virtuoso_driver/data.nt
== TEST 4:  : End
PASSED: TEST 4

== TEST 5:  : Start
   Loading UNICODE single triple
== TEST 5:  : End
PASSED: TEST 5

== TEST 6:  : Start
   Loading single triple
== TEST 6:  : End
PASSED: TEST 6

== TEST 7:  : Start
   Casted value type
== TEST 7:  : End
PASSED: TEST 7

== TEST 8:  : Start
   Selecting property
== TEST 8:  : End
PASSED: TEST 8

== TEST 9:  : Start
   Statement does not exists
== TEST 9:  : End
PASSED: TEST 9

== TEST 10:  : Start
   Statement exists (by resultset size)
== TEST 10:  : End
PASSED: TEST 10

== TEST 11:  : Start
   Statement exists (by hasStatement())
== TEST 11:  : End
PASSED: TEST 11

== TEST 12:  : Start
   Retrieving namespaces
== TEST 12:  : End
PASSED: TEST 12

== TEST 13:  : Start
   Retrieving statement (http://myopenlink.net/dataspace/person/kidehen http://myopenlink.net/foaf/name null)
== TEST 13:  : End
PASSED: TEST 13

== TEST 14:  : Start
   Writing the statements to file: (/Users/hwilliams/src/git/vos-7-develop/binsrc/sesame4/results.n3.txt)
== TEST 14:  : End
PASSED: TEST 14

== TEST 15:  : Start
   Retrieving graph ids
== TEST 15:  : End
PASSED: TEST 15

== TEST 16:  : Start
   Retrieving triple store size
== TEST 16:  : End
PASSED: TEST 16

== TEST 17:  : Start
   Sending ask query
== TEST 17:  : End
PASSED: TEST 17

== TEST 18:  : Start
   Sending construct query
== TEST 18:  : End
PASSED: TEST 18

== TEST 19:  : Start
   Sending describe query
== TEST 19:  : End
PASSED: TEST 19

============================
PASSED:19 FAILED:0
</programlisting>
                </listitem>
              </orderedlist>
            </section>
          </section>
        </section>
        <section xml:id="rdfnativestorageproviderssesamegettingstarted">
          <title>Getting Started</title>
          <para>This section covers the essentials for connecting to and manipulating data stored in a Virtuoso repository using the Sesame API. More information on the Sesame Framework, including extended examples on how to use the API, can be found in Chapter 8 of the Sesame User's guide,
    	<link xlink:href="http://www.openrdf.org/doc/sesame2/2.1.2/users/ch08.html#d0e833">the RepositoryConnection API</link>

  .
    </para>
          <para>The interfaces for the Repository API can be found in packages virtuoso.sesame2.driver and org.openrdf.repository. Several implementations for these interfaces exist in the Virtuoso Provider download package. The
    	<link xlink:href="http://www.openrdf.org/doc/sesame2/2.1.2/apidocs/">Javadoc reference for the Sesame API</link>

is available online and can also be found in the doc directory of the download.
    </para>
          <section xml:id="rdfnativestorageproviderssesamegettingstartedcrrep">
            <title>Creating a Virtuoso Repository RDF object</title>
            <para>The first step to connecting to Virtuoso through the Sesame API is to create a Repository for it. The Repository object operates on (stacks of) Sail object(s) for storage and retrieval of RDF data.
      </para>
            <para>One of the simplest configurations is a repository that just stores RDF data in main memory, without applying any inference. This is also by far the fastest type of repository that can be used. The following code creates and initialize a non-inferencing main-memory repository:
      </para>
            <programlisting>
import virtuoso.sesame2.driver.VirtuosoRepository;

Repository myRepository = VirtuosoRepository("jdbc:virtuoso://localhost:1111","dba","dba");

myRepository.initialize();
</programlisting>
            <para>The constructor of the VirtuosoRepository class accepts the JDBC URL of the Virtuoso engine, and the username and password of an authorized user. Following this example, the repository needs to be initialized to prepare the Sail(s) that it operates on, which includes performing operations such as restoring previously stored data, setting up connections to a relational database, etc.
      </para>
            <para>The repository that is created by the above code is volatile: its contents are lost when the object is garbage collected or when the program is shut down. This is fine for cases where, for example, the repository is used as a means for manipulating an RDF model in memory.
      </para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamegettingstartedrdfvirtcr">
            <title>Creating a Virtuoso Repository Connection</title>
            <para>Now that we have created a VirtuosoRepository object instance, we want to do something with it. This is achieved through the use of the VirtuosoRepositoryConnection class, which can be created by the VirtuosoRepository class.
      </para>
            <para>A VirtuosoRepositoryConnection represents  as the name suggests  a connection to the actual Virtuoso quad store. We can issue operations over this connection, and close it when we are done to make sure we are not keeping resources unnecessarily occupied.
      </para>
            <para>In the following sections, we will show some examples of basic operations using the Northwind dataset.
      </para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamegettingstartedrdfvirt">
            <title>Adding RDF to Virtuoso</title>
            <para>The Repository implements the Sesame Repository API, which offers various methods for adding data to a repository. Data can be added programmatically by specifying the location of a file that contains RDF data, and statements can be added individually or in collections.
      </para>
            <para>We perform operations on the repository by requesting a RepositoryConnection from the repository, which returns a VirtuosoRepositoryConnection object. On this VirtuosoRepositoryConnection object we can perform the various operations, such as query evaluation; getting, adding, or removing statements; etc.
      </para>
            <para>The following example code adds two files, one local and one located on the Web, to a repository:
      </para>
            <programlisting>
import org.openrdf.repository.RepositoryException;

import org.openrdf.repository.Repository;

import org.openrdf.repository.RepositoryConnection;

import org.openrdf.rio.RDFFormat;

import java.io.File;

import java.net.URL;

File file = new File("/path/to/example.rdf");

String baseURI = "http://example.org/example/localRDF";

?
try {

   RepositoryConnection con = myRepository.getConnection();

   try {

      con.add(file, baseURI, RDFFormat.RDFXML);

      URL url = new URL("http://example.org/example/remoteRDF");

      con.add(url, url.toString(), RDFFormat.RDFXML);

   }

   finally {

      con.close();

   }

}

catch (RepositoryException rex) {

   // handle exception

}

catch (java.io.IOEXception e) {

   // handle io exception

}
</programlisting>
            <para>More information on other available methods can be found in the javadoc reference of the RepositoryConnection interface.</para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamegettingstartedqr">
            <title>Querying Virtuoso</title>
            <para>The Repository API has a number of methods for creating and evaluating queries. Three types of queries are distinguished: tuple queries, graph queries, and Boolean queries. The query types differ in the type of results that they produce.</para>
            <para><emphasis>Select Query:</emphasis>

   The result of a select query is a set of tuples (or variable bindings), where each tuple represents a solution of the query. This type of query is commonly used to get specific values (URIs, blank nodes, literals) from the stored RDF data. The method QueryFactory.executeQuery() returns a Value [ ][ ] for SPARQL "SELECT" queries. The method QueryFactory.executeQuery() also calls the QueryFactory.setResult() which populates a set of tuples for SPARQL "SELECT" queries. The graph can be retrieved using QueryFactory.getBooleanResult().
      </para>
            <para><emphasis>Graph Query:</emphasis>

   The result of a graph query is an RDF graph (or set of statements). This type of query is very useful for extracting sub-graphs from the stored RDF data, which can then be queried further, serialized to an RDF document, etc. The method QueryFactory.executeQuery() calls the QueryFactory.setGraphResult() which populates a graph for SPARQL "DESCRIBE" and "CONSTRUCT" queries. The graph can be retrieved using QueryFactory.getGraphResult().
      </para>
            <para><emphasis>Boolean Query:</emphasis>

   The result of a Boolean query is a simple Boolean value, i.e., TRUE or FALSE. This type of query can be used to check if a repository contains specific information. The method QueryFactory.executeQuery() calls the QueryFactory.setBooleanResult() which sets a Boolean value for SPARQL "ASK" queries. The value can be retrieved using QueryFactory.getBooleanResult().
      </para>
            <para>Note: Although Sesame 2 currently supports two query languages: SeRQL and SPARQL, the Virtuoso provider only supports the W3C SPARQL specification at this time.
      </para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamegettingstartevq">
            <title>Evaluating a SELECT Query</title>
            <para>To evaluate a tuple query we simply do the following:
      </para>
            <programlisting>
import java.util.List;

import org.openrdf.OpenRDFException;

import org.openrdf.repository.RepositoryConnection;

import org.openrdf.query.TupleQuery;

import org.openrdf.query.TupleQueryResult;

import org.openrdf.query.BindingSet;

import org.openrdf.query.QueryLanguage;
?

try {

   RepositoryConnection con = myRepository.getConnection();

   try {

      String queryString = "SELECT x, y FROM  WHERE {x} p {y}";

      TupleQuery tupleQuery = con.prepareTupleQuery(QueryLanguage.SPARQL, queryString);

      TupleQueryResult result = tupleQuery.evaluate();

      try {

         ? // do something with the result

      }

      finally {

         result.close();

      }

   }

   finally {

      con.close();

   }

}

catch (RepositoryException e) {

   // handle exception

}
</programlisting>
            <para>This evaluates a SPARQL query and returns a TupleQueryResult, which consists of a sequence of BindingSet objects. Each BindingSet contains a set of pairs called Binding objects. A Binding object represents a name/value pair for each variable in the query's projection.
      </para>
            <para>We can use the TupleQueryResult to iterate over all results and get each individual result for x and y:</para>
            <programlisting>
while (result.hasNext()) {

   BindingSet bindingSet = result.next();

   Value valueOfX = bindingSet.getValue("x");

   Value valueOfY = bindingSet.getValue("y");

   // do something interesting with the query variable values here?

}
</programlisting>
            <para>As you can see, we retrieve values by name rather than by an index. The names used should be the names of variables as specified in your query. The TupleQueryResult.getBindingNames() method returns a list of binding names, in the order in which they were specified in the query. To process the bindings in each binding set in the order specified by the projection, you can do the following:
      </para>
            <programlisting>
List bindingNames = result.getBindingNames();

while (result.hasNext()) {

   BindingSet bindingSet = result.next();

   Value firstValue = bindingSet.getValue(bindingNames.get(0));

   Value secondValue = bindingSet.getValue(bindingNames.get(1));

   // do something interesting with the values here?

}
</programlisting>
            <para>It is important to invoke the close() operation on the TupleQueryResult, after we are done with it. A TupleQueryResult evaluates lazily and keeps resources (such as connections to the underlying database) open. Closing the TupleQueryResult frees up these resources. Do not forget that iterating over a result may cause exceptions! The best way to make sure no connections are kept open unnecessarily is to invoke close() in the finally clause.
      </para>
            <para>An alternative to producing a TupleQueryResult is to supply an object that implements the TupleQueryResultHandler interface to the query's evaluate() method. The main difference is that when using a return object, the caller has control over when the next answer is retrieved, whereas with the use of a handler, the connection simply pushes answers to the handler object as soon as it has them available.
      </para>
            <para>As an example we will use SPARQLResultsXMLWriter, which is a TupleQueryResultHandler implementation that writes SPARQL Results XML documents to an output stream or to a writer:
      </para>
            <programlisting>
import org.openrdf.query.resultio.sparqlxml.SPARQLResultsXMLWriter;

?
FileOutputStream out = new FileOutputStream("/path/to/result.srx");

try {

   SPARQLResultsXMLWriter sparqlWriter = new SPARQLResultsXMLWriter(out);

   RepositoryConnection con = myRepository.getConnection();

   try {

      String queryString = "SELECT * FROM  WHERE {x} p {y}";

      TupleQuery tupleQuery = con.prepareTupleQuery(QueryLanguage.SPARQL, queryString);

      tupleQuery.evaluate(sparqlWriter);

   }

   finally {

      con.close();

   }

}

finally {

   out.close();

}
</programlisting>
            <para>You can just as easily supply your own application-specific implementation of TupleQueryResultHandler, if desired.
      </para>
            <para>Lastly, an important warning: as soon as you are done with the RepositoryConnection object, you should close it. Notice that during processing of the TupleQueryResult object (for example, when iterating over its contents), the RepositoryConnection should still be open. We can invoke con.close() after we have finished with the result.
      </para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamegettingstartevcnq">
            <title>Evaluating a CONSTRUCT query</title>
            <para>The following code evaluates a graph query on a repository:
      </para>
            <programlisting>
import org.openrdf.query.GraphQueryResult;

GraphQueryResult graphResult = con.prepareGraphQuery(

      QueryLanguage.SPARQL, "CONSTRUCT * FROM {x} p {y}").evaluate();
</programlisting>
            <para>A GraphQueryResult is similar to TupleQueryResult in that it is an object that iterates over the query results. However, for graph queries the query results are RDF statements, so a GraphQueryResult iterates over Statement objects:
      </para>
            <programlisting>
while (graphResult.hasNext()) {

   Statement st = graphResult.next();

   // ? do something with the resulting statement here.

}
</programlisting>
            <para>The TupleQueryResultHandler equivalent for graph queries is org.openrdf.rio.RDFHandler. Again, this is a generic interface; each object implementing it can process the reported RDF statements in any way it wants.
      </para>
            <para>All writers from Rio (such as the RDFXMLWriter, TurtleWriter, TriXWriter, etc.) implement the RDFHandler interface. This allows them to be used in combination with querying quite easily. In the following example, we use a TurtleWriter to write the result of a SPARQL graph query to standard output in Turtle format:
      </para>
            <programlisting>
import org.openrdf.rio.turtle.TurtleWriter;

?
RepositoryConnection con = myRepository.getConnection();

try {

   TurtleWriter turtleWriter = new TurtleWriter(System.out);

   con.prepareGraphQuery(QueryLanguage.SPARQL, "CONSTRUCT * FROM  WHERE {x} p {y}").evaluate(turtleWriter);

}

finally {

   con.close();

}
</programlisting>
            <para>Again, note that as soon as we are done with the result of the query (either after iterating over the contents of the GraphQueryResult or after invoking the RDFHandler), we invoke con.close() to close the connection and free resources.
      </para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamegettingstartevcnqapi">
            <title>Javadoc API Documentation</title>
            <para>Javadocs covers the complete set of classes, interfaces, and methods implemented by the provider:</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  <link xlink:href="http://docs.openlinksw.com/sesame/">Javadoc API Documentation for the Sesame 2.6 Provider</link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link xlink:href="http://docs.openlinksw.com/sesame2/">Javadoc API Documentation for the Sesame 2.7+ Provider</link>
                </para>
              </listitem>
              <listitem>
                <para>
                  <link xlink:href="http://docs.openlinksw.com/sesame4/">Javadoc API Documentation for the Sesame 4.x Provider</link>
                </para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
        <section xml:id="rdfnativestorageproviderssesamestpandtesting">
          <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
          <section xml:id="rdfnativestorageproviderssesamestpandtestingwhat">
            <title>What</title>
            <para>Sesame is an open source Java framework for storing, querying and reasoning with RDF and RDF Schema. It can be used as a database for RDF and RDF Schema, or as a Java library for applications that need to work with RDF internally. The Sesame HTTP repository serves as a proxy for a RDF store hosted on a remote Sesame server, enabling the querying of the RDF store using the Sesame HTTP protocol.
</para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamestpandtestingwhy">
            <title>Why</title>
            <para>The Sesame HTTP repository endpoint provides users with the greater flexibility for manipulating the RDF store via a common interface. Sesame provides you with the necessary tools to parse, interpret, query and store all this information, embedded in your own application if you want, or, if you prefer, in a separate database or even on a remote server.
</para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamestpandtestinghow">
            <title>How</title>
            <para>To create a new Sesame HTTP repository, the Console needs to create such an RDF document and submit it to the SYSTEM repository. The Console uses so called repository configuration templates to accomplish this. Repository configuration templates are simple Turtle RDF files that describe a repository configuration, where some of the parameters are replaced with variables. The Console parses these templates and asks the user to supply values for the variables. The variables are then substituted with the specified values, which produces the required configuration data.
</para>
          </section>
          <section xml:id="rdfnativestorageproviderssesamestpandtestingmain">
            <title>Setup and Testing</title>
            <para>This section details the steps required for configuring and testing a Virtuoso Sesame Repository, both using the HTTP and Console Sesame repositories.</para>
            <section xml:id="rdfnativestorageproviderssesamestpandtestingreq">
              <title>Requirements</title>
              <itemizedlist mark="bullet">
                <listitem>
                  <para><link xlink:href="http://www.openrdf.org/download.jsp">Sesame 2.3.1</link>
                   or higher</para>
                </listitem>
                <listitem>
                  <para><link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/virt_sesame2.jar">Virtuoso Sesame 2.x</link>

  (virt_sesame2.jar) or 
                  <link xlink:href="http://opldownload.s3.amazonaws.com/uda/virtuoso/rdfproviders/sesame/40/virt_sesame4.jar">Virtuoso Sesame 4.x</link>
                   (virt_sesame4.jar) Provider</para>
                </listitem>
                <listitem>
                  <para><link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload/VOSDownload/virtjdbc4.jar">Virtuoso JDBC Driver</link>
                   (virtjdbc4.jar)</para>
                </listitem>
                <listitem>
                  <para>Virtuoso System Repository config file for

                  <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSesame2HttpRepository/create.xsl">Sesame 2.x </link>

  	or 
                  <link xlink:href="http://opldownload.s3.amazonaws.com/uda/virtuoso/rdfproviders/sesame/40/create.xsl">Sesame 4.x</link>
                  (create.xsl)</para>
                </listitem>
                <listitem>
                  <para>Virtuoso Repository config file for

                  <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSesame2HttpRepository/create-virtuoso.xsl">Sesame 2.x </link>

  	or 
                  <link xlink:href="http://opldownload.s3.amazonaws.com/uda/virtuoso/rdfproviders/sesame/40/create-virtuoso.xsl">Sesame 4.x</link>
                   (create-virtuoso.xsl)</para>
                </listitem>
                <listitem>
                  <para>Configuration Template file for a Virtuoso Repository for

                  <link xlink:href="http://edit-wiki.usnet.private/dataspace/dav/wiki/VOS/VirtSesame2HttpRepository/virtuoso.ttl">Sesame 2.x</link>
                   or

                  <link xlink:href="http://opldownload.s3.amazonaws.com/uda/virtuoso/rdfproviders/sesame/40/virtuoso.ttl">Sesame 4.x</link></para>
                </listitem>
                <listitem>
                  <para><link xlink:href="http://tomcat.apache.org/download-60.cgi">Apache Tomcat</link>
                   version 5 or higher</para>
                </listitem>
              </itemizedlist>
            </section>
            <section xml:id="rdfnativestorageproviderssesamestpandtestinghttprep">
              <title>Setup Sesame HTTP Repository</title>
              <para>This section details the steps required for configuring and testing a Virtuoso HTTP Sesame Repository.</para>
              <orderedlist>
                <listitem>
                  <para>Install 
                  <link xlink:href="http://tomcat.apache.org/tomcat-6.0-doc/index.html">Apache Tomcat</link>
                   web server</para>
                </listitem>
                <listitem>
                  <para>From the Sesame 2.3.1 or higher "lib" directory copy the "openrdf-sesame.war" and "openrdf-worbbench.war" files to
  	the tomcat "webapps" directory where they will automatically be deployed creating two new sub directories "openrdf-sesame"
  	and "openrdf-workbench".</para>
                </listitem>
                <listitem>
                  <para>Place the corresponding Virtuoso Sesame Provider "virt_sesame2.jar" or "virt_sesame4.jar" and JDBC Driver "virtjdbc4.jar"
  	into the Tomcat ~/webapps/openrdf-sesame/WEB-INF/lib/ and ~/webapps/openrdf-workbench/WEB-INF/lib/ directories for use by the
  	Sesame HTTP Repository for accessing the Virtuoso RDF repository.</para>
                </listitem>
                <listitem>
                  <para>Place the "create.xsl" and "create-virtuoso.xsl" files in the Tomcat
~/webapps/openrdf-workbench/transformations/ directory. Note "create.xsl" replaces the default provided with Sesame and contains the necessary entries required to reference the new "create-virtuoso.xsl" template file for Virtuoso repository configuration.</para>
                </listitem>
                <listitem>
                  <para>The Sesame HTTP Repository will now be accessible on the URLs
</para>
                  <programlisting>
http://example.com/openrdf-sesame
http://example.com/openrdf-workbench
</programlisting>
                </listitem>
                <listitem>
                  <para>The Sesame OpenRDF Workbench is used for accessing the Sesame HTTP Repositories, loading
"
                  <link xlink:href="http://example.com/openrdf-workbench">http://example.com/openrdf-workbench</link>
                  " will enable the
default "SYSTEM" repository to be accessed.
     </para>
                  <figure xml:id="ss1" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss1.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click on the "New Repository" link in the left frame to create a new Sesame Repository.
     </para>
                  <figure xml:id="ss2" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss2.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Select the "Virtuoso RDF Store" from the "Type" drop down list box presented.
     </para>
                  <figure xml:id="ss3" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss3.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Choose suitable repository "ID" and "Title" for the Virtuoso repository to be created and click "Next".
     </para>
                  <figure xml:id="ss4" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss4.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Fill in the connection parameters for the target Virtuoso sever the repository is to be created for and click the "create" button. The minimum required are the hostname, port number, username and password of the Virtuoso Server.
     </para>
                  <figure xml:id="ss5" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss5.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>The new Virtuoso respository will be created and its summary page displayed.
     </para>
                  <figure xml:id="ss6" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss6.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click on the "Namespaces" link in the left frame to obtain a list of the available namespaces in the Virtuoso repository.
     </para>
                  <figure xml:id="ss7" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss7.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click on the "Context" link in the left frame to obtain a list of the available contexts in the Virtuoso repository.
     </para>
                  <figure xml:id="ss8" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss8.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click on the "Types" link in the left frame to obtain a list of the available types in the Virtuoso repository.
     </para>
                  <figure xml:id="ss9" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss9.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click on the "Query" link in the left frame, enter a suitable SPARQL query to execute against the Virtuoso repository
and click the "execute" button.
     </para>
                  <figure xml:id="ss10" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss10.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>The results of the SPARQL query are returned.
     </para>
                  <figure xml:id="ss11" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss11.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click on the "Repositories" link in the left frame and the newly created Virtuoso repository entry is displayed along side
the default SYSTEM repository.
     </para>
                  <figure xml:id="ss12" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss12.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="rdfnativestorageproviderssesamestpandtestingcons">
              <title>Setup Sesame Console Repository</title>
              <para>This section details the steps required for configuring and testing a Virtuoso Sesame Console Repository:</para>
              <orderedlist>
                <listitem>
                  <para>Extract Sesame 2.3.1 or higher archive to a location of choice and place the virt_sesame2.jar or virt_sesame4.jar
  	and virtjdbc4.jar files to the sesame "lib" directory</para>
                </listitem>
                <listitem>
                  <para>Start the 
                  <link xlink:href="http://www.openrdf.org/doc/sesame2/users/ch07.html#section-console-repository-creation">sesame console application</link>
                   by running the "console.bat" script in the sesame "bin" directory and then "exit." the program
</para>
                  <programlisting>
$ sh console.sh
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/myuser/openrdf-sesame-2.3.1/lib/logback-classic-0.9.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/myuser/openrdf-sesame-2.3.1/lib/slf4j-jdk14-1.5.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
10:32:38.317 [main] DEBUG info.aduna.platform.PlatformFactory - os.name &lt;http://os.name&gt; &lt;http://os.name&gt; = mac os x
10:32:38.351 [main] DEBUG info.aduna.platform.PlatformFactory - Detected Mac OS X platform
Connected to default data directory
Commands end with '.' at the end of a line
Type 'help.' for help
exit.
</programlisting>
                </listitem>
                <listitem>
                  <para>This will create the necessary sesame application data directories as detailed in the sesame

                  <link xlink:href="http://www.openrdf.org/doc/sesame2/2.3.1/users/userguide.html#chapter-datadir-config">data directory configuration</link>
                   documentation.
</para>
                  <programlisting>
Windows - C:\Documents and Settings\LocalService\Application Data\Aduna\
Mac OS X - /Users/myuser/Library/Application Support/Aduna/
Linux - $HOME/.aduna/
</programlisting>
                </listitem>
                <listitem>
                  <para>If you do not want to use the default sesame data directory location the Sesame console application can be started by specifying a custom data directory location with the "-d" option. Note in this case the directory "OpenRDF Sesame console" always has to be manually appended to the directory as Sesame assumes the data file will reside in a sub directory of this name.
</para>
                  <programlisting>
$ sh console.sh -d /Users/myuser/OpenRDF Sesame console
</programlisting>
                </listitem>
                <listitem>
                  <para>Add the virtuoso.ttl file to the ~/OpenRDF Sesame console/templates folder, to enable the Virtuoso repository default configuration parameters to be located.</para>
                </listitem>
                <listitem>
                  <para>Start the sesame console application with the required data directory location and create a Virtuoso repository as detailed in the steps below, the key parameters to be specified being the target Virtuoso server hostname, port number, username, password and a unique "Repository ID".
</para>
                  <programlisting>
$ sh console.sh
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/myuser/openrdf-sesame-2.3.1/lib/logback-classic-0.9.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/myuser/openrdf-sesame-2.3.1/lib/slf4j-jdk14-1.5.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
10:32:38.317 [main] DEBUG info.aduna.platform.PlatformFactory - os.name &lt;http://os.name&gt; &lt;http://os.name&gt; = mac os x
10:32:38.351 [main] DEBUG info.aduna.platform.PlatformFactory - Detected Mac OS X platform
Connected to default data directory
Commands end with '.' at the end of a line
Type 'help.' for help
create virtuoso .
Please specify values for the following variables:
Host list [localhost:1111]:
Username [dba]:
Password [dba]:
Default graph name [sesame:nil]:
Enable using batch optimization (false|true) [false]:
Use RoundRobin for connection (false|true) [false]:
Buffer fetch size [200]:
Inference RuleSet name [null]:
Repository ID [virtuoso]: myvirt
Repository title [Virtuoso repository]:
Repository created
show r .
+----------
|SYSTEM
|myvirt ("Virtuoso repository")
+----------
open myvirt .
Opened repository 'myvirt'
myvirt&gt; show n .
+----------
|bif  bif:
|dawgt  http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#
|dbpedia  http://dbpedia.org/resource/
|dbpprop  http://dbpedia.org/property/
|dc  http://purl.org/dc/elements/1.1/
|foaf  http://xmlns.com/foaf/0.1/
|geo  http://www.w3.org/2003/01/geo/wgs84_pos#
|go  http://purl.org/obo/owl/GO#
|math  http://www.w3.org/2000/10/swap/math#
|mesh  http://purl.org/commons/record/mesh/
|mf  http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#
|nci  http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#
|obo  http://www.geneontology.org/formats/oboInOwl#
|owl  http://www.w3.org/2002/07/owl#
|protseq  http://purl.org/science/protein/bysequence/
|rdf  http://www.w3.org/1999/02/22-rdf-syntax-ns#
|rdfdf  http://www.openlinksw.com/virtrdf-data-formats#
|rdfs  http://www.w3.org/2000/01/rdf-schema#
|sc  http://purl.org/science/owl/sciencecommons/
|scovo  http://purl.org/NET/scovo#
|skos  http://www.w3.org/2004/02/skos/core#
|sql  sql:
|vcard  http://www.w3.org/2001/vcard-rdf/3.0#
|virtrdf  http://www.openlinksw.com/schemas/virtrdf#
|void  http://rdfs.org/ns/void#
|xf  http://www.w3.org/2004/07/xpath-functions
|xml  http://www.w3.org/XML/1998/namespace
|xsd  http://www.w3.org/2001/XMLSchema#
|xsl10  http://www.w3.org/XSL/Transform/1.0
|xsl1999  http://www.w3.org/1999/XSL/Transform
|xslwd  http://www.w3.org/TR/WD-xsl
|yago  http://dbpedia.org/class/yago/
+----------
exit.
</programlisting>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="rdfnativestorageproviderssesamestpandtestinghttpcons">
              <title>Connection to Sesame HTTP repository from Console repository</title>
              <para>The Sesame Console repository can connect to a Sesame HTTP repository and vice-versa, enabling access to remote Sesame HTTP repositories from a local server.</para>
              <orderedlist>
                <listitem>
                  <para>The Sesame Console repository can connect to a Sesame HTTP repository and query it as if local using the "connect" command.
</para>
                  <programlisting>
$ sh console.sh
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/Users/myuser/openrdf-sesame-2.3.1/lib/logback-classic-0.9.18.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/Users/myuser/openrdf-sesame-2.3.1/lib/slf4j-jdk14-1.5.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
10:32:38.317 [main] DEBUG info.aduna.platform.PlatformFactory - os.name &lt;http://os.name&gt; &lt;http://os.name&gt; = mac os x
10:32:38.351 [main] DEBUG info.aduna.platform.PlatformFactory - Detected Mac OS X platform
Connected to default data directory
Commands end with '.' at the end of a line
Type 'help.' for help
&gt; connect http://localhost:8080/openrdf-sesame.
Connected to http://localhost:8080/openrdf-sesame
&gt; show r.
+----------
|SYSTEM ("System configuration repository")
|VirtSesRep ("Virtuoso Sesame HTTP Repository")
+----------
&gt; open VirtSesRep.
Opened repository 'VirtSesRep'
VirtSesRep&gt; sparql select * from &lt;http://localhost:8890/Northwind&gt; where {?s ?p ?o} Limit 10.
Evaluating query...
+------------------------+------------------------+------------------------+
| s                      | p                      | o                      |
+------------------------+------------------------+------------------------+
| &lt;http://localhost:8890/Northwind/CustomerContact/ALFKI#this&gt;| rdf:type  | foaf:Person            |
| &lt;http://localhost:8890/Northwind/CustomerContact/ALFKI#this&gt;| rdf:type  | northwind:CustomerContact|
| &lt;http://localhost:8890/Northwind/CustomerContact/ALFKI#this&gt;| opl:isDescribedUsing   | northwind:             |
| &lt;http://localhost:8890/Northwind/CustomerContact/ANATR#this&gt;| rdf:type | foaf:Person            |
| &lt;http://localhost:8890/Northwind/CustomerContact/ANATR#this&gt;| rdf:type | northwind:CustomerContact|
| &lt;http://localhost:8890/Northwind/CustomerContact/ANATR#this&gt;| opl:isDescribedUsing   | northwind:             |
| &lt;http://localhost:8890/Northwind/CustomerContact/ANTON#this&gt;| rdf:type  | foaf:Person            |
| &lt;http://localhost:8890/Northwind/CustomerContact/ANTON#this&gt;| rdf:type  | northwind:CustomerContact|
| &lt;http://localhost:8890/Northwind/CustomerContact/ANTON#this&gt;| opl:isDescribedUsing   | northwind:             |
| &lt;http://localhost:8890/Northwind/CustomerContact/AROUT#this&gt;| rdf:type  | foaf:Person            |
+------------------------+------------------------+------------------------+
10 result(s) (530 ms)
VirtSesRep&gt; show n.
+----------
|SearchResults  http://www.zillow.com/static/xsd/SearchResults.xsd
|UpdatedPropertyDetails  http://www.zillow.com/static/xsd/UpdatedPropertyDetails.xsd
|a  http://www.w3.org/2005/Atom
|aapi  http://rdf.alchemyapi.com/rdf/v1/s/aapi-schema#
|address  http://schemas.talis.com/2005/address/schema#
|admin  http://webns.net/mvcb/
|amz  http://webservices.amazon.com/AWSECommerceService/2005-10-05
|atom  http://atomowl.org/ontologies/atomrdf#
|audio  http://purl.org/media/audio#
|awol  http://bblfish.net/work/atom-owl/2006-06-06/#
|aws  http://soap.amazon.com/
|b3s  http://b3s.openlinksw.com/
</programlisting>
                </listitem>
                <listitem>
                  <para>Conversely the Sesame HTTP repository can be configured to access the repository created by the Sesame console. To do this the location of the data directory for both needs to be reconfigured using the Java system property info.aduna.platform.appdata.basedir (does not include "OpenRDF Sesame console directory) to point to the same location. When you are using Tomcat as the servlet container then you can set this property using the JAVA_OPTS parameter. Note, if you are using Apache Tomcat as a Windows Service you should use the Windows Services configuration tool to set this property. Other users can either edit the Tomcat startup script or set the property some other way.
</para>
                  <programlisting>
  * set JAVA_OPTS=-Dinfo.aduna.platform.appdata.basedir=\path\to\other\dir\ (on Windows)
  * export JAVA_OPTS='-Dinfo.aduna.platform.appdata.basedir=/path/to/other/dir/' (on Linux/UNIX/Mac OS X)
</programlisting>
                  <figure xml:id="ss13" floatstyle="1">
                    <title>Virtuoso Sesame HTTP Repository Configuration and Usage</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/ss13.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="rdfnativestorageproviderssesamestpandtestinghttpconsrmh">
              <title>Remote Sesame HTTP Repository Connections</title>
              <para>There are two methods of making a remote Sesame HTTP connection to a Virtuoso repository:</para>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>
                    <emphasis>Sesame Remote Repository Manager</emphasis>
                  </para>
                  <para> class - A manager for Repositorys that reside on a remote server, allowing one to access repositories over HTTP similar to how local repositories are accessed using the LocalRepositoryManager?. A connection via this method is made via the Virtuoso Sesame provider which will be faster and provide better support for transactions, than making a direct connection to the SPARQL endpoint using the HTTPRepository class. This is analogous to the ODBC Driver Manager in the ODBC realm for generic access to a data store via a suitable ODBC Driver.</para>
                </listitem>
                <listitem>
                  <para>
                    <emphasis>Sesame HTTP Repository</emphasis>
                  </para>
                  <para> class - A repository that serves as a proxy for a remote repository on a Sesame server or directly to a SPARQL endpoint. This method does not make use of the Virtuoso Sesame Provider, using instead the HTTP protocol to make requests directly Sesame server or other SPARQL endpoint.</para>
                </listitem>
              </itemizedlist>
              <section xml:id="rdfnativestorageproviderssesamestpandtestinghttpconsrmhr">
                <title>Using the Sesame Remote Repository Manager class</title>
                <para>If a Sesame HTTP Repository endpoint, as detailed above already exists, the <link xlink:href="http://www.openrdf.org/doc/sesame2/api/org/openrdf/repository/manager/RemoteRepositoryManager.html">Remote Repository Manager</link>

   class can be used to make a remote connection as follows by specify the URL to the remote Sesame HTTP Server and the RepositoryID for the repository the connection is to be made to:</para>
                <programlisting>
//Initialize Remote Repository Manager
RepositoryManager repositoryManager = new RemoteRepositoryManager( "http://hostname:portno/openrdf-sesame" );
repositoryManager.initialize();

//Set Virtuoso (or any other) repositoryID on http://hostname:portno/openrdf-sesame
Repository repository = repositoryManager.getRepository("RepositoryID");

// Open a connection to this repository
con = repository.getConnection();

// ... do something
</programlisting>
              </section>
              <section xml:id="rdfnativestorageproviderssesamestpandtestinghttpconsrmhh">
                <title>Using the Sesame HTTP Repository class</title>
                <para>A direct connection to the default built-in Virtuoso SPARQL Endpoint can be made using the <link xlink:href="http://www.openrdf.org/doc/sesame2/api/org/openrdf/repository/http/HTTPRepository.html">Sesame HTTP Repository class</link>

   by simply specifying the URL to the Virtuoso SPARQL Endpoint i.e. http://{hostname}:{port}/sparql as follows:</para>
                <programlisting>
// Initialize Direct SPARQL Endpoint HTTP Repository connection
String endpointURL = "http://hostname:portno/sparql";
HTTPRepository sparqlEndpoint = new HTTPRepository(endpointURL, "");
sparqlEndpoint.initialize();

// Open a connection to this repository
con = sparqlEndpoint.getConnection();

// ... do something
</programlisting>
              </section>
            </section>
          </section>
        </section>
        <section xml:id="rdfnativestorageproviderssesamejavadoc">
          <title>Javadoc API Documentation</title>
          <para><link xlink:href="http://docs.openlinksw.com/sesame/">Sesame Provider Javadoc API Documentation</link>

is available enabling the complete set of classes, interfaces and methods implemented for the provider to be viewed.
    </para>
        </section>
      </section>
      <section xml:id="rdfnativestorageproviderredland">
        <title>Virtuoso Redland Provider</title>
        <section xml:id="rdfnativestorageproviderredlandwhatis">
          <title>What is Redland</title>
          <para><link xlink:href="http://librdf.org/">Redland</link>

   is a set of free software 'C' libraries that
provide support for the Resource Description Framework (RDF), providing modular, object based libraries
and APIs for manipulating the RDF graph, triples, URIs and Literals. Redland includes several high-level
language APIs providing RDF manipulation and storage and requires the
<link xlink:href="http://librdf.org/raptor/">Raptor</link>

   RDF parser and <link xlink:href="http://librdf.org/rasqal/">Rasqal</link>

RDF syntax and query library
for its use.
    </para>
        </section>
        <section xml:id="rdfnativestorageproviderredlandwhatisv">
          <title>What is the Virtuoso Redland Provider</title>
          <para>The Virtuoso Redland RDF Provider is an implementation of the Storage API, Model and Query
interfaces of the Redland framework for RDF. This provider enables the execution of queries via the
Redland Rasqal query engine or via Virtuoso query engine directly against the Virtuoso Quad store.
The Virtuoso Redland Provider uses ODBC as the data access mechanism for communicating the Virtuoso
Quad Store and requires the Virtuoso ODBC Driver be installed on the Redland client and a suitable
ODBC DSN be configured for connecting to the target Virtuoso Quad Store instance. The provider has
been tested against the <link xlink:href="http://download.librdf.org/source/">Redland 1.0.8</link>

   version currently available for download.
    </para>
          <figure xml:id="rdfnativestorageproviderredland1" floatstyle="1">
            <title>Redland Component Stack</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/VirtRedLand.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>As indicated in the above diagram the Virtuoso Provider can be used to execute RDF queries either
directly against the Virtuoso graph storage module supporting the <link xlink:href="http://dbpedia.org/resource/SPARQL">SPARQL</link>

  ,
<link xlink:href="http://dbpedia.org/resource/SPARUL">SPARQL</link>

  SPARUL, <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSArticleBISPARQL2">SPARQL-BI</link>

query languages or via the Rasqal query engine built into Redland which supports the SPARQL query language.
This is done by simply changing the syntax of the query using the "vsparql" rather then default "sparql"
construct when executing a query as indicated in the sample queries below:
    </para>
          <programlisting>
rdfproc -r xml -t "user='dba',password='dba',dsn='Demo'" gr query sparql - "SELECT * WHERE { ?s ?p ?o }"   ;; via Redland Rasqal engine

rdfproc -r xml -t "user='dba',password='dba',dsn='Demo'" gr query vsparql - "SELECT * WHERE { ?s ?p ?o }"  ;; direct to Virtuoso storage module
</programlisting>
          <para>The Virtuoso Provider uses the <link xlink:href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSSQL2RDF">SPASQL</link>

   query language for querying the remote Virtuoso QUAD store.
    </para>
        </section>
        <section xml:id="rdfnativestorageproviderredlandsetup">
          <title>Setup</title>
          <section xml:id="rdfnativestorageproviderredlandreqfiles">
            <title>Required Files</title>
            <para>The Virtuoso Redland Provider has been integrated into the Redland RDF Framework and submitted to
the open source project to become part of the standard distribution available for
<link xlink:href="http://librdf.org/INSTALL.html">download</link>

  . Until this
submission has been accepted and committed into the available Redland release a tar ball created by
OpenLink Software and a diff for application to a Redland 1.0.8 tree can be obtained from:
      </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para><link xlink:href="ftp://download.openlinksw.com/support/vos/redland-vos-1.0.8.tar.gz"/>
                Redland 1.0.8 tar ball with Virtuoso storage support</para>
              </listitem>
              <listitem>
                <para>
                  <link xlink:href="ftp://download.openlinksw.com/support/vos/redland-vos.diff">Redland 1.0.8 Diff file of changes made for Virtuoso storage support</link>
                </para>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="rdfnativestorageprovidersredlandcmsmpr">
            <title>Compiling Redland with Virtuoso storage support</title>
            <itemizedlist mark="bullet">
              <listitem>
                <para><link xlink:href="http://svn.librdf.org/">Download Redland</link>
                , extract and apply diff
above or download the tar ball above with diff already applied and extract to a location of choice.</para>
              </listitem>
              <listitem>
                <para>The following additional configure options are available for enabling the Virtuoso
storage support:
</para>
                <programlisting>
  --with-virtuoso(=yes|no) Enable Virtuoso RDF store (default=auto)
  --with-iodbc(=DIR)        Select iODBC support
                            DIR is the iODBC base install directory
                            (default=/usr/local)
  --with-unixodbc(=DIR)   Select UnixODBC support
                            DIR is the UnixODBC base install directory
                            (default=/usr/local)
  --with-datadirect(=DIR) Select DataDirect support
                            DIR is the DataDirect base install directory
                            (default=/usr/local)
  --with-odbc-inc=DIR     Specify custom ODBC include directory
                            (default=/usr/local/include)
  --with-odbc-lib=DIR     Specify custom ODBC lib directory
                            (default=/usr/local/lib)
</programlisting>
              </listitem>
              <listitem>
                <para>The "--with-virtuoso" option default to being auto enable if a valid ODBC Driver Manager
(iODBC, UnixODBC? or DataDirect?) or include and lib directories for required ODBC header files and libraries
are located with the suitable setting for one or more of the other ODBC related options above. Assuming
iODBC is installed the following option can be used to enable Virtuoso storage support to be configured
for compilation into your Redland build:
</para>
                <programlisting>
./configure --with-iodbc=/usr/local/iODBC
</programlisting>
              </listitem>
              <listitem>
                <para>Run "make" to compile the Redland libraries and "sudo make install" to install in
the default "/usr/local" location</para>
              </listitem>
              <listitem>
                <para>Test compilation with test utility utils/rdfproc:
</para>
                <programlisting>

rdfproc test parse http://planetrdf.com/guide/rss.rdf
rdfproc test print
rdfproc test serialize ntriples
</programlisting>
                <para>This test will use the default 'hashes' storage.</para>
              </listitem>
              <listitem>
                <para>Ensure you have the Virtuoso ODBC Driver installed and a valid ODBC DSN called
"Local Virtuoso" configured for your target Virtuoso Server</para>
              </listitem>
              <listitem>
                <para>Set the following environment variable:
</para>
                <programlisting>
export RDFPROC_STORAGE_TYPE=virtuoso                                   ;; Enable Virtuoso Storage
export ODBCINI=&lt;path_to_odbcini_directory&gt;/odbc.ini                      ;; Enable ODBC DSN to be located
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH                     ;; May be required to enable Redland libraries to be located

</programlisting>
              </listitem>
              <listitem>
                <para>Test Virtuoso storage with the provided test program utils/vtest:
</para>
                <programlisting>
$ utils/vtest
  1: Remove all triples in &lt;http://red&gt; context
**PASSED**: removed context triples from the graph
  2: Add triples to &lt;http://red&gt; context
**PASSED**: add triple to context
  3: Print all triples in &lt;http://red&gt; context
[[
  {[aa], [bb], [cc]} with context [http://red]
  {[aa], [bb1], [cc]} with context [http://red]
  {[aa], [a2], "cc"} with context [http://red]
  {[aa], [a2], (cc)} with context [http://red]
  {[mm], [nn], "Some long literal with language@en"} with context [http://red]
  {[oo], [pp], "12345^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;"} with context [http://red]
]]
**PASSED**:
  4: Count of triples in &lt;http://red&gt; context
**PASSED**: graph has 6 triples
  5: Exec:  ARC  aa bb
Matched node: [cc]
**PASSED**:
  6: Exec:  ARCS  aa cc
Matched node: [bb] with context [http://red]
Matched node: [bb1] with context [http://red]
: matching nodes: 2
**PASSED**:
  7: Exec:  ARCS-IN  cc
Matched arc: [bb] with context [http://red]
Matched arc: [bb1] with context [http://red]
**PASSED**: matching arcs: 2
  8: Exec:  ARCS-OUT  aa
Matched arc: [bb] with context [http://red]
Matched arc: [bb1] with context [http://red]
Matched arc: [a2] with context [http://red]
Matched arc: [a2] with context [http://red]
**PASSED**: matching arcs: 4
  9: Exec:  CONTAINS aa bb1 cc
**PASSED**: the graph contains the triple
 10: Exec:  FIND aa - -
Matched triple: {[aa], [bb], [cc]} with context [http://red]
Matched triple: {[aa], [bb1], [cc]} with context [http://red]
Matched triple: {[aa], [a2], "cc"} with context [http://red]
Matched triple: {[aa], [a2], (cc)} with context [http://red]
**PASSED**: matching triples: 4
 11: Exec:  HAS-ARC-IN cc bb
**PASSED**: the graph contains the arc
 12: Exec:  HAS-ARC-OUT aa bb
**PASSED**: the graph contains the arc
 13: Exec:  SOURCE  aa cc
Matched node: [aa]
**PASSED**:
 14: Exec:  SOURCES  bb cc
Matched node: [aa] with context [http://red]
: matching nodes: 1
**PASSED**:
 15: Exec:  TARGET  aa bb
Matched node: [cc]
**PASSED**:
 16: Exec:  TARGETS  aa bb
Matched node: [cc] with context [http://red]
: matching nodes: 1
**PASSED**:
 17: Exec:  REMOVE aa bb1 cc
**PASSED**: removed triple from the graph
 18: Exec:  QUERY "CONSTRUCT {?s ?p ?o} FROM &lt;http://red&gt; WHERE {?s ?p ?o}"
Matched triple: {[aa], [a2], "cc"}
Matched triple: {[oo], [pp], "12345^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;"}
Matched triple: {[aa], [a2], (cc)}
Matched triple: {[aa], [bb], [cc]}
Matched triple: {[mm], [nn], "Some long literal with language@en"}
**PASSED**: matching triples: 5
 19: Exec1:  QUERY_AS_BINDINGS "SELECT * WHERE {graph &lt;http://red&gt; { ?s ?p ?o }}"
**: Formatting query result as 'xml':
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;sparql xmlns="http://www.w3.org/2005/sparql-results#"&gt;
  &lt;head&gt;
    &lt;variable name="s"/&gt;
    &lt;variable name="p"/&gt;
    &lt;variable name="o"/&gt;
  &lt;/head&gt;
  &lt;results&gt;
    &lt;result&gt;
      &lt;binding name="s"&gt;&lt;uri&gt;aa&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="p"&gt;&lt;uri&gt;bb&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="o"&gt;&lt;uri&gt;cc&lt;/uri&gt;&lt;/binding&gt;
    &lt;/result&gt;
    &lt;result&gt;
      &lt;binding name="s"&gt;&lt;uri&gt;aa&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="p"&gt;&lt;uri&gt;a2&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="o"&gt;&lt;literal&gt;cc&lt;/literal&gt;&lt;/binding&gt;
    &lt;/result&gt;
    &lt;result&gt;
      &lt;binding name="s"&gt;&lt;uri&gt;aa&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="p"&gt;&lt;uri&gt;a2&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="o"&gt;&lt;bnode&gt;cc&lt;/bnode&gt;&lt;/binding&gt;
    &lt;/result&gt;
    &lt;result&gt;
      &lt;binding name="s"&gt;&lt;uri&gt;mm&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="p"&gt;&lt;uri&gt;nn&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="o"&gt;&lt;literal&gt;Some long literal with language@en&lt;/literal&gt;&lt;/binding&gt;
    &lt;/result&gt;
    &lt;result&gt;
      &lt;binding name="s"&gt;&lt;uri&gt;oo&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="p"&gt;&lt;uri&gt;pp&lt;/uri&gt;&lt;/binding&gt;
      &lt;binding name="o"&gt;&lt;literal&gt;12345^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;&lt;/literal&gt;&lt;/binding&gt;
    &lt;/result&gt;
  &lt;/results&gt;
&lt;/sparql&gt;
**PASSED**:
 20: Exec2:  QUERY_AS_BINDINGS "SELECT * WHERE {graph &lt;http://red&gt; { ?s ?p ?o }}"
: Query returned bindings results:
result: [s=[aa], p=[bb], o=[cc]]
result: [s=[aa], p=[a2], o=cc]
result: [s=[aa], p=[a2], o=(cc)]
result: [s=[mm], p=[nn], o=Some long literal with language@en]
result: [s=[oo], p=[pp], o=12345^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;]
: Query returned 5 results
**PASSED**:
=============================================
PASSED: 20  FAILED:  0
</programlisting>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="rdfnativestorageprovidersredlandcp">
            <title>Connection Parameters</title>
            <para>The Virtuoso provider has the following connection parameters available fro use:</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  <emphasis>dsn</emphasis>
                </para>
                <para> - ODBC datasource name</para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>user</emphasis>
                </para>
                <para> - user name of database server</para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>password</emphasis>
                </para>
                <para> - password of database server</para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>host</emphasis>
                </para>
                <para> - hostname:portno of the database server</para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>charset</emphasis>
                </para>
                <para> - database charset to use</para>
              </listitem>
            </itemizedlist>
            <para>NOTE: Take care exposing the password as for example, program arguments or environment
variables. The rdfproc utility can help this by reading the password from standard input. Inside programs,
one way to prevent storing the password in a string is to construct a Redland hash of the storage options
such as via librdf hash_from_string and use librdf_new_storage_with_options to create a storage. The
rdfproc utility source code demonstrates this.
        </para>
            <para>The storage name parameter given to the storage constructor librdf new_storage is used
inside the virtuoso store to allow multiple stores inside one Virtuoso database instance as parameterized
with the above options.
        </para>
            <para>This store always provides contexts; the boolean storage option contexts is not checked.</para>
            <para>Examples:</para>
            <programlisting>
  /* A new Virtuoso store */
  storage=librdf_new_storage(world, "virtuoso", "db1",
      "dsn='Local Virtuoso',user='demo',password='demo'");

  /* A different, existing Virtuoso store in the same database as above */
  storage=librdf_new_storage(world, "virtuoso", "db2",
      "dsn='Local Virtuoso',user='demo',password='demo'");

  /* An existing Virtuoso store on a different database server */
  storage=librdf_new_storage(world, "virtuoso", "http://red3",
      "dsn='Remote Virtuoso',user='demo',password='demo'");

  /* Opening with an options hash */
  options=librdf_new_hash(world, NULL);
  librdf_hash_from_string(options,
      "dsn='Local Virtuoso',user='demo'");
  librdf_hash_put_strings(options, "password", user_password);
  storage=librdf_new_storage_with_options(world, "virtuoso", "http://red3", options);
</programlisting>
          </section>
        </section>
        <section xml:id="rdfnativestorageprovidersredlandref">
          <title>References</title>
          <itemizedlist mark="bullet">
            <listitem>
              <para>
                <link xlink:href="http://librdf.org/docs/api/redland-storage.html">RedLand Triple Store</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link xlink:href="http://librdf.org/docs/api/redland-storage-modules.html">RedLand Storage Modules</link>
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>
