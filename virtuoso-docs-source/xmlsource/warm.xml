<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="warm">
      <title>Web Services Reliable Messaging Protocol (WS-ReliableMessaging)</title>
      <para>The WS-ReliableMessaging protocol is a SOAP-based RPC protocol 
for guaranteed  delivery of messages; possibly in specific
order from one sender to one receiver. 
Such messages are usual SOAP messages - XML documents conforming
to the SOAP specification.
The Sender is an alias of the transmission initiator, i.e. the originator of the
message transfer. The Receiver is a recipient, that which accepts the messages.
How accepted messages should be processed is not covered in this document.; 
What to do with the data and whether to send replies is at the discretion of the application.
</para>
      <tip>
        <title>See Also:
</title>
        <para>
          <link xlink:href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnglobspec/html/ws-reliablemessaging.asp">WS Reliable Messaging
</link>
        </para>
        <para>
          <link xlink:href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnglobspec/html/WS-RM-exec-summary.asp">WS Reliable Messaging Exec Summary
</link>
        </para>
      </tip>
      <para>Further in this section for brevity WS-RM will be used
in place of "Web Services Reliable Messaging Protocol".
</para>
      <para>
        <emphasis>Delivery Assurances Types:
</emphasis>
      </para>
      <simplelist type="vert">
        <member><emphasis>AtMostOnce
</emphasis>

   - Delivery at most once without
duplication or an error will be raised on at least one endpoint. It is possible
that some messages in a sequence may not be delivered.</member>
        <member><emphasis>AtLeastOnce</emphasis>

   - Every message sent will be
delivered or an error will be raised on at least one endpoint. Some messages
may be delivered more than once.</member>
        <member><emphasis>ExactlyOnce</emphasis>

   - Every message sent will be delivered
without duplication or an error will be raised on at least one endpoint. This
delivery assurance is the logical "and" of the two prior delivery assurances.</member>
        <member><emphasis>InOrder</emphasis>

   - Messages will be delivered in the order
that they were sent. This delivery assurance may be combined with any of the
above delivery assurances.  It requires that the sequence observed by the
ultimate receiver be non-decreasing. It says nothing about duplications or
omissions.
</member>
      </simplelist>
      <tip>
        <title>See Also:
</title>
        <para><link linkend="systabswsrm">WS-RM System Table Definitions
</link>

  in the Appendix section
</para>
      </tip>
      <section xml:id="wsrmsoapcliapi">
        <title>SOAP CLIENT API Extensions
</title>
        <para>The SOAP Client API is used for handling, building and accessing
complex types required to perform a SOAP request. It allows you to build
a structures to access their elements and to build values suitable for
passing to the
<link linkend="fn_soap_client"><function>SOAP_CLIENT()</function></link>

   function.
It also allows to de-serialize a SOAP response to a
<computeroutput>soap_parameter</computeroutput>

and access its members and attributes safely.</para>
        <para>Vectors are used to pass or retrieve a complex type using SOAP
These vectors contain special content or UDTs.  In SOAP, 
structures are allowed to have multiple members of the same name, or
conditional members (choices). Thus it is not possible to cover all
variants of XSD types with UDTs (which would be  the most elegant way to represent structures).
So to cover all variants of structure handling or to express
structures containing attributes, we have to use vectors.
Since we used a special structure with vectors for expressing such complex types
we introduce the following API to deal with them.</para>
        <para>The base of API is a UDT 'soap_parameter':</para>
        <programlisting>
create type soap_parameter as
		(
		  s any default null,
		  param_type int default 1,
		  param_xsd varchar default null,
		  ver int default 11
		)
		temporary self as ref
;
</programlisting>
        <para>Its members are:
</para>
        <simplelist type="vert">
          <member><emphasis>'s'
</emphasis>

   - a vector representing a structure,
  array or simple type.</member>
          <member><emphasis>'param_type'</emphasis>

   - designates what is kept in
  's' : 1 is struct ; 0 - simple type; 2 - array
</member>
          <member><emphasis>'param_xsd'
</emphasis>

   - URL; QName of the type stored in 's'
</member>
          <member><emphasis>'ver'
</emphasis>

   - soap version to be used for 
  serialization/deserialization if RPC style is used.
</member>
        </simplelist>
        <para>Its Constructors are:
</para>
        <programlisting>
constructor method soap_complex_parameter ()
Instantiate an empty structure placeholder;
</programlisting>
        <programlisting>
constructor method soap_simple_parameter (val any),
Instantiate an empty simple type placeholder
</programlisting>
        <programlisting>
constructor method soap_array_parameter (n int),
Instantiate an array placeholder
</programlisting>
        <programlisting>
constructor method soap_single_parameter (elm soap_parameter),
Instantiate an element of containing a type of 'elm'
</programlisting>
        <para>Its Methods are:</para>
        <programlisting>
method get_length () returns any,
Returns the  length of the parameter
</programlisting>
        <programlisting>
method add_member (name varchar, val any) returns any,
Add a new member element to the structure placeholder
</programlisting>
        <programlisting>
method set_member (name varchar, val any) returns any
Sets the value of an existing member by name or will add a new member  if  the member does not exist
</programlisting>
        <programlisting>
method set_member (pos int, val any) returns any,
the same as above but using ordinal position of the member;
</programlisting>
        <programlisting>
method get_member (name varchar) returns any,
Returns a member's value by name
</programlisting>
        <programlisting>
method get_member (pos int) returns any,
Returns member value by ordinal position
</programlisting>
        <programlisting>
method get_value () returns any,
Returns value for simple types. Only for simple type is applicable
</programlisting>
        <programlisting>
method set_value (val any) returns any,
Sets the value of a simple type
</programlisting>
        <programlisting>
method set_attribute (name varchar, val any) returns any,
Set an attribute value of a structure or simple type
</programlisting>
        <programlisting>
method get_attribute (name varchar) returns any,
Return an attribute value of a structure or simple type
</programlisting>
        <programlisting>
method get_call_param (name varchar) returns any,
</programlisting>
        <para>Serializes the parameter in a form suitable for  passing to the
SOAP_CLIENT() function. When several parameters needs to be passed to it,
then result of those calls must be concatenated (see vector_concat())
Important: set_xsd have to be called with valid ExQName, before doing
get_call_param call.
</para>
        <programlisting>
method set_xsd (xsd varchar) returns any,
</programlisting>
        <para>Establish a SOAP data-type Expanded QName, referencing the data kept in the
soap_parameter. This is a reference to a SOAP complex data-type already defined
with soap_dt_define () function (see function reference).
This method only sets the relation between data kept in soap_parameter and
doesn't check its validity unless serialize is performed. The data-type
Expanded QName also will be included into output of the get_call_param method.

</para>
        <example xml:id="ex_wsrmtypes">
          <title>Complex WS Type Example
</title>
          <para>Consider the following complex type:
</para>
          <programlisting>
&lt;xsd:complexType
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    name="SOAPComplexType"
    targetNamespace="http://soapinterop.org/xsd"&gt;
 &lt;xsd:sequence&gt;
	&lt;xsd:element minOccurs="1" maxOccurs="1" name="varInt" type="xsd:int" /&gt;
	&lt;xsd:element minOccurs="0" maxOccurs="1" name="varString" type="xsd:string" /&gt;
	&lt;xsd:element minOccurs="1" maxOccurs="1" name="varFloat" type="xsd:float" /&gt;
 &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;

declare s soap_parameter ;
s := new soap_parameter ();
s.set_xsd ('http://soapinterop.org/xsd:SOAPComplexType');
s.add_member ('varString', 'string');
s.serialize ('mystruct'); -- will generate an error as, varInt and varFloat are
			              -- missing but they are declared as minOccurs="1"
</programlisting>
          <para>So if we add two more members, and remove varString, to the statements above.
</para>
          <programlisting>
s.add_member ('varInt', 123);
s.add_member ('varFloat', 3.14);
s.serialize ('mystruct');
</programlisting>
          <para>Will produce valid output:</para>
          <programlisting>
&lt;mystruct&gt;&lt;varInt&gt;123&lt;/varInt&gt;&lt;varFloat&gt;3.14&lt;/varFloat&gt;&lt;/mystruct&gt;
</programlisting>
          <para>and finally  we can make a parameter for the SOAP_CLIENT() function:
</para>
          <programlisting>
par := s.get_call_param ('par1');
</programlisting>
          <para>here are the contents of 'par':</para>
          <programlisting>
(
  ("par1", "http://soapinterop.org/xsd:SOAPComplexType" ), -- designates parameter par1, with type SOAPComplexType
  (&lt;COMPOSITE&gt;, "",	-- this is a marker that it's a struct
	"varInt", 123, 	-- the members name/value pairs follows
	"varFloat", 3.14
  )
)
</programlisting>
        </example>
        <para>Further methods are:</para>
        <programlisting>
method deserialize (xs any, elem varchar) returns any,
</programlisting>
        <para>Deserializes a element 'elem' from  'xs' (XML tree object)
the the soap_parameter.</para>
        <programlisting>
method serialize (tag varchar) returns any,
</programlisting>
        <para>Returns an XML document representing the data kept into
the soap_parameter.</para>
        <programlisting>
method set_struct (s any) returns any
</programlisting>
        <para>Explicitly sets the structure/array/simple type kept in the
soap_parameter UDT. This can be used to disassemble a nested
complex type into its components.
</para>
        <example xml:id="ex_wsrmuseparam">
          <title>Example Using WS-RM
</title>
          <para>echoStruct invocation
</para>
          <programlisting>
declare ret any;
declare pa soap_parameter;

pa := new soap_parameter ();
pa.add_member ('varString', 'My String');
pa.add_member ('varInt', 12345);
pa.add_member ('varFloat', 3.1415926);
pa.set_xsd ('http://soapinterop.org/xsd:SOAPStruct');

ret := SOAP_CLIENT (url=&gt;'http://.../interop',
  operation=&gt;'echoStruct', parameters=&gt;pa.get_call_param ('inputStruct'));

pa := new soap_parameter ();
pa.set_xsd ('http://soapinterop.org/xsd:SOAPStruct');
pa.deserialize (ret, 'CallReturn');
return pa.get_member ('varString');
</programlisting>
          <para>echoDocument invocation</para>
          <programlisting>
declare ret any;
declare doc, pa soap_parameter;

doc := new soap_parameter ('The document content');
doc.set_attribute ('ID', uuid());
doc.set_xsd ('http://soapinterop.org/xsd:x_Document');

ret := SOAP_CLIENT (url=&gt;'http://.../r3/Compound1', operation=&gt;'echoDocument',
  parameters=&gt;doc.get_call_param ('x'), style=&gt;1);

pa := new soap_parameter ();
pa.set_xsd ('http://soapinterop.org/xsd:Document');
pa.deserialize (ret, 'result_Document');
dbg_obj_print (pa.s);

return pa.get_attribute ('ID');
</programlisting>
        </example>
        <tip>
          <title>See Also:
</title>
          <para>
            <link linkend="fn_soap_client">
              <function>SOAP_CLIENT()
</function>
            </link>
          </para>
        </tip>
      </section>
      <section xml:id="wsrmsndrapi">
        <title>WS-RM Sender API
</title>
        <para>The WS-RM API allows for:
</para>
        <simplelist type="vert">
          <member>register/start a conversation
</member>
          <member>set parameters on both sides (receiver or sender)
</member>
          <member>check the acknowledgment
</member>
          <member>retry if needed
</member>
          <member>to finish or cancel the conversation (can be with cancel) 
</member>
          <member>check for faults
</member>
        </simplelist>
        <para>The User Defined Types defined in support of WS-RM are as follows:
</para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>soap_client () parameters wrapper
</emphasis>
            </para>
            <programlisting>
create type soap_client_req as
	(
	url varchar,
	operation varchar,
	target_namespace varchar default null,
	parameters any default null,
	headers any default null,
	soap_action varchar default '',
	attachments any default null,
	ticket any default null,
	passwd varchar default null,
	user_name varchar default null,
	user_password varchar default null,
	auth_type varchar default 'none',
	security_type varchar default 'sign',
	debug integer default 0,
	template varchar default null,
	style integer default 0,
	version integer default 11,
	direction integer default 0
      	)
;
</programlisting>
            <para>This UDT is used for passing  various parameters to the
WS-RM client to send a SOAP messages along with WS-RM specific headers.
The members are with same names as for SOAP_CLIENT () function.
In other words applications must fill a soap_client_req specific
data and pass this to the wsrm_cli methods (see below).
</para>
          </listitem>
          <listitem>
            <para><emphasis>client addressing UDT:
</emphasis> To facilitate two-way transport the receiver must know the
address of the sender's responder (endpoint for asynchronous Acknowledgment or
response). To pass such addresses to the WS-RM client (wsrm_cli)
the following UDT is used.</para>
            <programlisting>
create type wsa_cli as
	(
	mid varchar default null,
	"to" varchar default null,
	"from" varchar default null,
	action varchar default null,
	fault_to varchar default null,
	reply_to varchar default null
	)
</programlisting>
            <para>Whose members are as follows:
</para>
            <simplelist type="vert">
              <member><emphasis>mid
</emphasis>

   - message identifier; unique across space and time
</member>
              <member><emphasis>to
</emphasis>

   - where message traveling to
</member>
              <member><emphasis>from
</emphasis>

   - from where it's sent
</member>
              <member><emphasis>action
</emphasis>

   - WS-Addressing Action headed element
</member>
              <member><emphasis>fault_to
</emphasis>

   - where to return the fault
</member>
              <member><emphasis>reply_to
</emphasis>

   - where to reply; if no such URL given the "to" will be used to reply. 
</member>
            </simplelist>
            <note>
              <title>Important Note:
</title>
              <para>A special "to" equal to
  '<computeroutput>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</computeroutput>

  '
  is used to designate an 'anonymous' sender. Further Acknowledgment
  can be made as a synchronous reply only.  There is no way to return a response
  in asynchronous manner.</para>
            </note>
            <para>Constructors:</para>
            <programlisting>
constructor method wsa_cli ()
</programlisting>
            <para>Instantiate a new addressing placeholder ; with new message id. 
</para>
          </listitem>
          <listitem>
            <para><emphasis>WS-RM Client UDT
</emphasis> The following is a core UDT for the sender's activity.
It is used to establish a message sequence context, to
set various parameters and to send/check/cancel WS-RM
encapsulated SOAP messages to the sender.</para>
            <programlisting>
create type wsrm_cli as
	(
	url varchar,
	seq varchar,
	msgno int default -1,
	assurance varchar,
	expiry datetime,
	address wsa_cli,
	i_timeout int,
	resend_intl int,
	ack_intl int,
	dirty int default 0,
	is_last int default 0,
	is_finish int default 0
	)
	temporary self as ref
</programlisting>
            <para>Members:
</para>
            <simplelist type="vert">
              <member><emphasis>url
</emphasis>

   - the recipient's URL
</member>
              <member><emphasis>seq
</emphasis>

   - identifier; unique Id for batch of
  messages to be sent together</member>
              <member><emphasis>msgno</emphasis>

   - unique number/unsigned integer greater than 1,
  unique identifying a message within a sequence</member>
              <member><emphasis>assurance</emphasis>

   - policy to be applied on receiver
  side : AtLeastOne; InOrder; AtMostOne 
</member>
              <member><emphasis>expiry
</emphasis>

   - message expiration 
</member>
              <member><emphasis>address
</emphasis>

   - a UDT of type 
<computeroutput>wsa_cli
</computeroutput>

  ;
  identifying sender and receiver URLs
</member>
              <member><emphasis>i_timeout
</emphasis>

   - inactivity timeout
</member>
              <member><emphasis>ack_intl
</emphasis>

   - Acknowledgment interval
</member>
              <member><emphasis>dirty
</emphasis>

   - (internal use)
</member>
              <member><emphasis>is_last
</emphasis>

   - the current message is a last in sequence
</member>
              <member><emphasis>is_finish
</emphasis>

   - transfer is finished; no more
  messages are pending</member>
            </simplelist>
            <para>Constructors:</para>
            <programlisting>
constructor method wsrm_cli (addr wsa_cli, url varchar),
</programlisting>
            <para>Instantiate a new WS-RM sender object; new message sequence
This will generate a new sequence identifier, and will store it into a
outgoing sequences table. The default policy will be established.</para>
            <programlisting>
constructor method wsrm_cli (addr wsa_cli, url varchar, seq varchar),
</programlisting>
            <para>Instantiate a WS-RM sender object from a persisted state;
The policy and parameters will be read from database and instantiated
in WS-RM sender's object.</para>
            <para>Methods:</para>
            <programlisting>
method create_sequence () returns any,
</programlisting>
            <para>Start a new sequence with current WS-RM sender's object;</para>
            <programlisting>
method send_message (req soap_client_req, last int) returns any,
</programlisting>
            <para>Send a message to the recipient; depending on 'last' flag this can be
designate open or closed message sequence.
The 'req' must be fulfilled with appropriate parameters (see above).</para>
            <programlisting>
method send_message (req soap_client_req) returns any,
</programlisting>
            <para>same as send_message (req soap_client_req, 0)</para>
            <programlisting>
method finish (req soap_client_req) returns any,
</programlisting>
            <para>same as send_message (req soap_client_req, 1)</para>
            <programlisting>
method check_state () returns any,
</programlisting>
            <para>retrieves a state for a sequence. If sequence is closed and all is
delivered no remote call will be performed. If an message is in pending state
a remote call will be issued to check the state of message sequence.
The return value is an array containing message numbers (id's within sequence)
and their state: 0 or 1 - send or pending</para>
            <programlisting>
method cancel () returns any,
</programlisting>
            <para>cancel the sequence; kill it on WS-RM sender site ; say that to recipient to
do that also.</para>
            <programlisting>
method set_parameter (name varchar, val any) returns any,
</programlisting>
            <para>Set a parameter to the current message sequence : like policy; timeout etc.
The parameters will be sent together with next WS-RM conversation.
Note: Some of parameters may invalidate previous state of message transfer; so
in this case the sender will receive a fault and application must handle the
situation properly. 
</para>
            <para>Valid 'name's are :
</para>
            <simplelist type="vert">
              <member><emphasis>Assurance
</emphasis>

   - 'AtMostOnce','AtLeastOnce','ExactlyOnce','InOrder'
</member>
              <member><emphasis>Expiry
</emphasis>

   - date of expiration
</member>
              <member><emphasis>Timeout
</emphasis>

   - inactivity timeout in milliseconds
</member>
              <member><emphasis>RetryInterval
</emphasis>

   - retry on every n milliseconds if message is not sent
</member>
              <member><emphasis>AckInterval
</emphasis>

   - Acknowledgment interval in milliseconds
</member>
            </simplelist>
          </listitem>
        </itemizedlist>
        <formalpara>
          <title>Sender's responder (endpoint)
</title>
          <para>To receive an asynchronous Acknowledgment the sender must
have an endpoint to handle them.
The <computeroutput>WSRMSequenceAcknowledgment()</computeroutput>

procedure must be exposed at that endpoint.  This accepts and processes asynchronous
Acknowledgment.  This is used to accept a SequenceAcknowledgment response
from a remote party so it will process the response and will set the state
of messages that are acknowledged.
</para>
        </formalpara>
      </section>
      <section xml:id="wsrmrcvrapi">
        <title>WSRM Receiver API
</title>
        <para>On the receiver side we have PL wrappers
that take as arguments all *known* WS-RM headers.
This procedure, when granted to a SOAP endpoint will process the
incoming requests. It will also answer send the appropriate
answers to the sender.
</para>
        <para>The following is the list of WS-RM receiver wrappers:
</para>
        <orderedlist>
          <listitem>
            <formalpara>
              <title>WSRMSequence
</title>
              <para>accept and store a Sequence requests.  This is used
  to accept Sequence requests from sender and will perform the
  following actions:
</para>
            </formalpara>
            <simplelist type="vert">
              <member>store the message in incoming message log table
</member>
              <member>process and apply the Policy attachment (if supplied); otherwise
    apply default rule: AtMostOnce</member>
              <member>depending of a addressing headers will reply in synchronous or
	asynchronous manner. This depends on the value of "From" and "ReplyTo" headers.
	If these contains non-anonymous URL (see above); an asynchronous
	Acknowledgment will be sent in a separate TCP connection. Thus in this mode
	the sender must have defined a listener with WSRMSequenceAcknowledgment
	exposed to accept such responses.  Otherwise synchronous Acknowledgment
	will be sent in the same TCP connection.
</member>
              <member>If an error occurred a Fault will be generated 
</member>
            </simplelist>
          </listitem>
          <listitem>
            <formalpara>
              <title>WSRMSequenceTerminate
</title>
              <para>accept and process SequenceTerminate requests.  This is used to
  accept cancel request; to kill an existing message sequence.  Further
  actions on such sequence will be rejected.
</para>
            </formalpara>
          </listitem>
          <listitem>
            <formalpara>
              <title>WSRMAckRequested
</title>
              <para>accept and process AckRequested requests.  This is used to process
  AckRequested WS-RM messages and will produce a SequenceAcknowledgment
  containing info about messages been accepted. Used from sender's side to
  check the message sequence state.
</para>
            </formalpara>
          </listitem>
        </orderedlist>
        <para>These PL procedures are built-in to the server, and
have to be granted to the user that is assigned as the SOAP execution
account for a given virtual directory designated as a WS-RM receiver endpoint.
</para>
      </section>
      <section xml:id="wsrmsetupendpoint">
        <title>WS-RM Protocol Endpoint Configuration
</title>
        <para>The setup is a virtual directory definition and grant of
rights to the procedures for sender and receiver endpoints.
</para>
        <para>This will be demonstrated as an example of setting up both endpoints:
</para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>Sender
</emphasis>
            </para>
            <programlisting>
create user WSRMS;
grant execute on WSRMSequenceAcknowledgment to WSRMS;
vhost_define (lpath=&gt;'/replyto', ppath=&gt;'/SOAP/', soap_user=&gt;'WSRMS');
</programlisting>
          </listitem>
          <listitem>
            <para>
              <emphasis>Reply</emphasis>
            </para>
            <programlisting>
create user WSRMR;
grant execute on WSRMSequence to WSRMR;
grant execute on WSRMSequenceTerminate to WSRMR;
grant execute on WSRMAckRequested to WSRMR;
vhost_define (lpath=&gt;'/wsrm', ppath=&gt;'/SOAP/', soap_user=&gt;'WSRMR');
</programlisting>
          </listitem>
        </itemizedlist>
        <example xml:id="ex_wsrmping">
          <title>WS-RM Ping Test Example
</title>
          <para>This is an example client used to perform the interoperability
test "Ping" as proposed in "Interop Workshop Scenarios"</para>
          <programlisting>
soap_dt_define ('',
		'&lt;element
			xmlns="http://www.w3.org/2001/XMLSchema"
			name="Ping" type="test:Ping_t"
			targetNamespace = "http://tempuri.org/" xmlns:test="http://tempuri.org/" /&gt;');
</programlisting>
          <programlisting>
soap_dt_define ('',
		'&lt;complexType xmlns="http://www.w3.org/2001/XMLSchema"
		 	      name="Ping_t" targetNamespace = "http://tempuri.org/"&gt;
				&lt;sequence&gt;
					&lt;element minOccurs="1" maxOccurs="1" name="Text" type="string"/&gt;
				&lt;/sequence&gt;
		&lt;/complexType&gt;');
</programlisting>
          <programlisting>
create procedure WSRMTestPing (in _to varchar, in _from varchar)
  {
    declare addr wsa_cli;
    declare test wsrm_cli;
    declare req soap_client_req;
    declare finish any;
    declare ping soap_parameter;

    ping := new soap_parameter (1);

    ping.set_xsd ('http://tempuri.org/:Ping');
    ping.s := vector ('Hello World');

    addr := new wsa_cli ();
    addr."to" := _to;
    addr."from" := _from;
    addr.action := 'urn:wsrm:Ping';

    req := new soap_client_req ();
    req.url := _to;
    req.operation := 'Ping';
    req.parameters := ping.get_call_param ('');

    test := new wsrm_cli (addr, _to);

    test.send_message (req);
    test.send_message (req);
    test.finish (req);
    return test.seq;
  }
;
</programlisting>
        </example>
      </section>
      <section xml:id="wsrmmsgexamples">
        <title>Message Examples
</title>
        <example xml:id="ex_wsrminitreq">
          <title>Example: Initial request
</title>
          <programlisting>
&lt;SOAP:Envelope&gt;
  &lt;SOAP:Header&gt;
    &lt;wsa:MessageID&gt;uuid:aa8bd508-110b-11d8-8344-8cfad4a25a87&lt;/wsa:MessageID&gt;
    &lt;wsa:To&gt;http://host:9999/wsrm&lt;/wsa:To&gt;
    &lt;wsa:From&gt;
      &lt;wsa:Address&gt;http://host:9999/replyto&lt;/wsa:Address&gt;
    &lt;/wsa:From&gt;
    &lt;wsa:Action&gt;&lt;!-- depending of application --&gt;

&lt;/wsa:Action&gt;
    &lt;wsrm:Sequence&gt;
      &lt;wsu:Identifier&gt;uuid:aa8bfa74-110b-11d8-8344-8cfad4a25a87&lt;/wsu:Identifier&gt;
      &lt;wsrm:MessageNumber&gt;1&lt;/wsrm:MessageNumber&gt;
    &lt;/wsrm:Sequence&gt;
  &lt;/SOAP:Header&gt;
  &lt;SOAP:Body&gt;
    &lt;!-- some application data --&gt;

  &lt;/SOAP:Body&gt;
&lt;/SOAP:Envelope&gt;
</programlisting>
          <para>receiver accepts and return just</para>
          <programlisting>
HTTP/1.1 202 Accepted
Content-Length: 0
</programlisting>
          <para>Last message</para>
          <programlisting>
&lt;SOAP:Envelope&gt;
  &lt;SOAP:Header&gt;
    &lt;wsa:MessageID&gt;uuid:aa8bd508-110b-11d8-8344-8cfad4a25a87&lt;/wsa:MessageID&gt;
    &lt;wsa:To&gt;http://host:9999/wsrm&lt;/wsa:To&gt;
    &lt;wsa:From&gt;
      &lt;wsa:Address&gt;http://host:9999/replyto&lt;/wsa:Address&gt;
    &lt;/wsa:From&gt;
    &lt;wsa:Action&gt;&lt;!-- depending of application --&gt;

&lt;/wsa:Action&gt;
    &lt;wsrm:Sequence&gt;
      &lt;wsu:Identifier&gt;uuid:aa8bfa74-110b-11d8-8344-8cfad4a25a87&lt;/wsu:Identifier&gt;
      &lt;wsrm:MessageNumber&gt;2&lt;/wsrm:MessageNumber&gt;
      &lt;wsrm:LastMessage/&gt;
    &lt;/wsrm:Sequence&gt;
  &lt;/SOAP:Header&gt;
  &lt;SOAP:Body&gt;
    &lt;!-- some application data --&gt;

  &lt;/SOAP:Body&gt;
&lt;/SOAP:Envelope&gt;
</programlisting>
          <para>receiver accepts and returns </para>
          <programlisting>
HTTP/1.1 202 Accepted
Content-Length: 0
</programlisting>
          <para>Sequence Acknowledgment response; sent via another channel</para>
          <programlisting>
&lt;SOAP:Envelope&gt;
  &lt;SOAP:Header&gt;
    &lt;wsa:MessageID&gt;uuid:aadedf64-110b-11d8-8344-8cfad4a25a87&lt;/wsa:MessageID&gt;
    &lt;wsa:To&gt;http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous&lt;/wsa:To&gt;
    &lt;wsa:From&gt;
      &lt;wsa:Address&gt;http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous&lt;/wsa:Address&gt;
    &lt;/wsa:From&gt;
    &lt;wsa:Action&gt;http://schemas.xmlsoap.org/ws/2004/08/rm#SequenceAcknowledgment&lt;/wsa:Action&gt;
    &lt;wsrm:SequenceAcknowledgment&gt;
      &lt;wsu:Identifier&gt;uuid:aa8bfa74-110b-11d8-8344-8cfad4a25a87&lt;/wsu:Identifier&gt;
      &lt;wsrm:AcknowledgmentRange Upper="2" Lower="1"/&gt;
    &lt;/wsrm:SequenceAcknowledgment&gt;
  &lt;/SOAP:Header&gt;
  &lt;SOAP:Body/&gt;
&lt;/SOAP:Envelope&gt;
</programlisting>
          <para>initial sender accepts and returns </para>
          <programlisting>
HTTP/1.1 202 Accepted
Content-Length: 0
</programlisting>
        </example>
      </section>
      <section xml:id="wsrmschema">
        <title>WS-RM Schema</title>
        <programlisting>
&lt;xsd:schema
    targetNamespace="http://schemas.xmlsoap.org/ws/2003/03/rm"
	xmlns:wsu="http://schemas.xmlsoap.org/ws/2002/07/utility"
	xmlns:wsrm="http://schemas.xmlsoap.org/ws/2003/03/rm"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified" attributeFormDefault="unqualified"&gt;

	&lt;!-- *** BASE *** --&gt;

    &lt;xsd:complexType name="SequenceType"&gt;
	&lt;xsd:sequence&gt;
	    &lt;xsd:element ref="wsu:Identifier"/&gt;
	    &lt;xsd:element name="MessageNumber" type="xsd:unsignedLong"/&gt;
	    &lt;xsd:element name="LastMessage" type="xsd:ENTITY" minOccurs="0"/&gt;
	&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="SequenceTerminate_t"&gt;
	&lt;xsd:sequence&gt;
	    &lt;xsd:element ref="wsu:Identifier"/&gt;
	&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="AcknowledgmentRange_t"&gt;
	&lt;xsd:sequence/&gt;
	&lt;xsd:attribute name="Upper" type="xsd:unsignedLong" use="required"/&gt;
	&lt;xsd:attribute name="Lower" type="xsd:unsignedLong" use="required"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="SequenceAcknowledgment_t"&gt;
	&lt;xsd:sequence&gt;
	    &lt;xsd:element ref="wsu:Identifier"/&gt;
	    &lt;xsd:element name="AcknowledgmentRange" type="wsrm:AcknowledgmentRange_t" maxOccurs="unbounded"&gt;
	    &lt;/xsd:element&gt;
	&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="AckRequestedType"&gt;
	&lt;xsd:sequence&gt;
	    &lt;xsd:element ref="wsu:Identifier"/&gt;
	&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:element name="Sequence" type="wsrm:SequenceType"/&gt;
    &lt;xsd:element name="SequenceTerminate" type="wsrm:SequenceTerminate_t"/&gt;
    &lt;xsd:element name="SequenceAcknowledgment" type="wsrm:SequenceAcknowledgment_t" /&gt;
    &lt;xsd:element name="AckRequested" type="wsrm:AckRequestedType"/&gt;

    &lt;!-- *** FAULTS *** --&gt;

    &lt;xsd:simpleType name="FaultCodes"&gt;
	&lt;xsd:restriction base="xsd:QName"&gt;
	    &lt;xsd:enumeration value="wsrm:UnknownSequence"/&gt;
	    &lt;xsd:enumeration value="wsrm:SequenceTerminated"/&gt;
	    &lt;xsd:enumeration value="wsrm:InvalidAcknowledgment"/&gt;
	    &lt;xsd:enumeration value="wsrm:MessageNumberRollover"/&gt;
	&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:complexType name="SequenceFaultType"&gt;
	&lt;xsd:sequence&gt;
	    &lt;xsd:element ref="wsu:Identifier"/&gt;
	    &lt;xsd:element name="FaultCode" type="wsrm:FaultCodes"/&gt;
	&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:element name="SequenceFault" type="wsrm:SequenceFaultType"/&gt;

    &lt;!-- *** ASSERTIONS *** --&gt;

    &lt;xsd:complexType name="InactivityTimeout_t"&gt;
	&lt;xsd:sequence/&gt;
	&lt;xsd:attribute name="Milliseconds" type="xsd:unsignedLong" use="required"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="BaseRetransmissionInterval_t"&gt;
	&lt;xsd:sequence/&gt;
	&lt;xsd:attribute name="Milliseconds" type="xsd:unsignedLong" use="required"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="AcknowledgmentInterval_t"&gt;
	&lt;xsd:sequence/&gt;
	&lt;xsd:attribute name="Milliseconds" type="xsd:unsignedLong" use="required"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:complexType name="PolicyAssertionType"&gt;
	&lt;xsd:sequence&gt;
	    &lt;xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/&gt;
	&lt;/xsd:sequence&gt;
	&lt;xsd:anyAttribute namespace="##other"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:simpleType name="DeliveryAssuranceEnum"&gt;
	&lt;xsd:restriction base="xsd:QName"&gt;
	    &lt;xsd:enumeration value="wsrm:AtMostOnce"/&gt;
	    &lt;xsd:enumeration value="wsrm:AtLeastOnce"/&gt;
	    &lt;xsd:enumeration value="wsrm:ExactlyOnce"/&gt;
	    &lt;xsd:enumeration value="wsrm:InOrder"/&gt;
	&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;

    &lt;xsd:complexType name="DeliveryAssurance_t"&gt;
	&lt;xsd:sequence/&gt;
	&lt;xsd:attribute name="Value" type="xsd:QName" use="required"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:element name="InactivityTimeout" type="wsrm:InactivityTimeout_t" /&gt;
    &lt;xsd:element name="BaseRetransmissionInterval" type="wsrm:BaseRetransmissionInterval_t" /&gt;
    &lt;xsd:element name="ExponentialBackoff" type="wsrm:PolicyAssertionType"/&gt;
    &lt;xsd:element name="AcknowledgmentInterval" type="wsrm:AcknowledgmentInterval_t"/&gt;
    &lt;xsd:element name="DeliveryAssurance" type="wsrm:DeliveryAssurance_t"/&gt;

    &lt;!-- *** Sequence Reference *** --&gt;

    &lt;xsd:complexType name="SequenceRefType"&gt;
	&lt;xsd:sequence /&gt;
	&lt;xsd:attribute name="Identifier" type="xsd:anyURI" use="required"/&gt;
	&lt;xsd:attribute name="Match" type="wsrm:MatchChoiceType" use="optional"/&gt;
    &lt;/xsd:complexType&gt;

    &lt;xsd:simpleType name="MatchChoiceType"&gt;
	&lt;xsd:restriction base="xsd:QName"&gt;
	    &lt;xsd:enumeration value="wsrm:Exact"/&gt;
	    &lt;xsd:enumeration value="wsrm:Prefix"/&gt;
	&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
    &lt;xsd:element name="SequenceRef" type="wsrm:SequenceRefType"/&gt;

&lt;/xsd:schema&gt;
</programlisting>
      </section>
    </section>
