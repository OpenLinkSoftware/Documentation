<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_jvm_ref_import">
      <refmeta>
        <refentrytitle>jvm_ref_import
</refentrytitle>
        <refmiscinfo>type
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>jvm_ref_import
</refname>
        <refpurpose>Creates XML description of Java class
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_jvm_ref_import">
          <funcprototype xml:id="fproto_jvm_ref_import">
            <funcdef>varchar 
<function>jvm_ref_import
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>files
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>classes
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_jvm_ref_import">
        <title>Description
</title>
        <para>This function will returns an XML description of the selected classes
    from the source files.</para>
        <para>The XML produced by the JVM_REF_IMPORT can be supplied to the
    predefined XSL style sheet <computeroutput>__javavm_type</computeroutput>

    to produce the CREATE TYPE statements:</para>
        <programlisting>
select xslt ('__javavm_type', xml_tree_doc (JVM_REF_IMPORT (files, classes)));
</programlisting>
        <para>This can also be achieve directly using a single call to:</para>
        <programlisting>
IMPORT_JAR (in files any, in classes any)

</programlisting>
      </refsect1>
      <refsect1 xml:id="params_jvm_ref_import">
        <title>Parameters
</title>
        <refsect2>
          <title>files
</title>
          <para>Null, string or vector of strings.  This can contain one or many
      Java .class files, .zip or .jar files to pick classes from.  Null means
      only the classes specified in the classes argument regardless of their
      physical location.
</para>
        </refsect2>
        <refsect2>
          <title>classes
</title>
          <para>Wildcard string or a vector of strings specifying which classes to
      describe in the resulting XML.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_jvm_ref_import">
        <title>Return Types
</title>
        <para>A varchar of XML that describes the selected Java classes.
</para>
      </refsect1>
      <!--
  <refsect1
xml:id="errors_jvm_ref_import">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
  -->

      <refsect1 xml:id="examples_jvm_ref_import">
        <title>Examples
</title>
        <example xml:id="ex_jvm_ref_import">
          <title>Simple Use
</title>
          <screen>
JVM_REF_IMPORT (NULL, vector ('java.lang.Object', 'java.lang.System'));
</screen>
          <para>This will return an XML describing the Java classes java.lang.Object
    and java.lang.System.  Because the java.lang.System class is a subclass
    of java.lang.Object the XML description for java.lang.System will contain
    a reference to java.lang.Object and only the methods/members defined in
    java.lang.System (because the methods/members of java.lang.Object will
    be inherited).</para>
          <screen>
JVM_REF_IMPORT (NULL, 'java.lang.System');
</screen>
          <para>As opposed to the above example this will create an XML description
    only for the java.lang.System class, but will also add the inherited
    methods/members (from java.lang.Object) as if they were methods/members of
    the java.lang.System class.
</para>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_jvm_ref_import">
        <title>See Also
</title>
        <para>
          <link linkend="fn_import_jar">
            <function>import_jar()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
