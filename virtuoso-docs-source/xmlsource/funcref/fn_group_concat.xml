<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_group_concat">
      <refmeta>
        <refentrytitle>DB.DBA.GROUP_CONCAT
</refentrytitle>
        <refmiscinfo>rdf
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>DB.DBA.GROUP_CONCAT
</refname>
        <refpurpose>returns an arbitrary value from the multiset passed to it.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_group_concat">
          <funcprototype xml:id="fproto_group_concat">
            <funcdef>
              <function>DB.DBA.GROUP_CONCAT
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>token
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>delim
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_group_concat">
        <title>Description
</title>
        <para>DB.DBA.GROUP_CONCAT is aggregate function that performs a string concatenation across
    	the values of an expression with a group. The order of the strings is not specified.
    	The separator character used in the concatenation may be given with the scalar
    	argument delimiter.</para>
        <para>Note: the "sql:" prefix is mandatory when this aggregate is used in SPARQL queries.
    	In SQL queries the prefix is "DB.DBA".

</para>
      </refsect1>
      <refsect1 xml:id="params_group_concat">
        <title>Parameters
</title>
        <refsect2>
          <title>token
</title>
          <para>An item that should be added to a delimited list.
</para>
        </refsect2>
        <refsect2>
          <title>delim
</title>
          <para>The delimeter character to be used in the concatenation.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_group_concat">
        <title>Return Types
</title>
        <para>any
</para>
      </refsect1>
      <refsect1 xml:id="examples_group_concat">
        <title>Examples
</title>
        <example xml:id="ex_group_concat">
          <title>Simple Use
</title>
          <programlisting>
SQL&gt;SPARQL
SELECT ?name, (sql:GROUP_CONCAT(?near, ' , '))
WHERE
  {
    GRAPH ?g
      {
        [] a foaf:Person ;
        foaf:name ?name ;
        foaf:based_near ?near
      }
  }
LIMIT 10

name callret-1
ANY  ANY
________________________________________________
Jonas Smedegaard	 nodeID://b6190457 , nodeID://b6190507
Adam Harvey	       nodeID://b780751
John Breslin	     nodeID://b56694
John Breslin	     nodeID://b56694
Chris Bizer	       http://sws.geonames.org/2950159/ , http://dbpedia.org/resource/Berlin
Leo Sauermann	     nodeID://b53598
Andreas Harth	     http://dbpedia.org/resource/Karlsruhe , nodeID://b53559 , nodeID://b53569
Alexandre Passant	 http://dbpedia.org/resource/Galway
Leon Lord	         http://ods-qa.openlinksw.com/dataspace/person/t1#based_near
Leon Smith         http://ods-qa.openlinksw.com/dataspace/person/t2#based_near
No. of rows in result: 10

</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_group_concat">
        <title>See Also
</title>
        <para>
          <link linkend="fn_sample">
            <function>DB.DBA.SAMPLE()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_group_concat_distinct">
            <function>DB.DBA.GROUP_CONCAT_DISTINCT()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_group_digest">
            <function>DB.DBA.GROUP_DIGEST()
</function>
          </link>
        </para>
        <para>
          <link linkend="samplegroupconcatdigest">Differences between DB.DBA.SAMPLE, DB.DBA.GROUP_CONCAT and
    DB.DBA.GROUP_DIGEST functions usage.</link>
        </para>
      </refsect1>
    </refentry>
