<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_regexp_like">
      <refmeta>
        <refentrytitle>regexp_like
</refentrytitle>
        <refmiscinfo>string
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>regexp_like
</refname>
        <refpurpose>Allows a like comparison using regular-expression.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_regexp_like">
          <funcprototype xml:id="fproto_regexp_like">
            <funcdef>integer 
<function>regexp_like
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>source_string
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>pattern
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>match_parameter
</parameter>

   integer
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_regexp_like">
        <title>Description
</title>
        <para>The source_string supports character datatypes (CHAR, VARCHAR2, CLOB,
NCHAR, NVARCHAR2, and NCLOB but not LONG).  The pattern parameter is another
name for the regular expression.  match_parameter allows optional parameters such
as handling the newline character, retaining multiline formatting, and providing
control over case-sensitivity. 
</para>
      </refsect1>
      <refsect1 xml:id="params_regexp_like">
        <title>Parameters
</title>
        <refsect2>
          <title>source_string
</title>
          <para>Source string
</para>
        </refsect2>
        <refsect2>
          <title>pattern
</title>
          <para>The regular expression to match. The following special classes are supported:
</para>
          <simplelist type="vert">
            <member>[:alpha:] Alphabetic characters
</member>
            <member>[:lower:] Lowercase alphabetic characters
</member>
            <member>[:upper:] Uppercase alphabetic characters
</member>
            <member>[:digit:] Numeric digits
</member>
            <member>[:alnum:] Alphanumeric characters
</member>
            <member>[:space:] Space characters (nonprinting), such as carriage return, newline, vertical tab, and form feed
</member>
            <member>[:punct:] Punctuation characters
</member>
            <member>[:cntrl:] Control characters (nonprinting)
</member>
            <member>[:print:] Printable characters
</member>
          </simplelist>
        </refsect2>
        <refsect2>
          <title>match_parameter
</title>
          <para>This is null by default.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="examples_regexp_like_01">
        <title>Examples
</title>
        <example xml:id="ex_regexp_like">
          <title>Simple Use
</title>
          <para>The following SQL query's WHERE clause shows the REGEXP_LIKE operator,
which searches the ZIP column for a pattern that satisfies the regular expression
[^[:digit:]]. It will retrieve those rows in the ZIPCODE table for which the ZIP
column values contain any character that is not a numeric digit.</para>
          <programlisting>
SELECT postalcode FROM demo.demo.customers
 WHERE REGEXP_LIKE(postalcode, '[^[:digit:]]')

PostalCode
==========
 WA1 1DP
 S-958 22
 T2F 8M4
 EC2 5NT
 05432-043
.
.
</programlisting>
        </example>

        <note><title>Compatibility:</title>
        <para>The regular expressions supported here follow version 7.9 of the Perl
        Compatible Regular Expression (PCRE) syntax.
        </para>
        <orderedlist>
          <listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions">Wikipedia</link></para></listitem>
          <listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pcre.org/">PCRE.org</link></para></listitem>
        </orderedlist>
        </note>

        
      </refsect1>
      <refsect1 xml:id="seealso_regexp_like">
        <title>See Also
</title>
        <para>
          <link linkend="fn_regexp_match">
            <function>regexp_match()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_parse">
            <function>regexp_parse()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_instr">
            <function>regexp_instr()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_replace">
            <function>regexp_replace()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_regexp_substr">
            <function>regexp_substr()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
