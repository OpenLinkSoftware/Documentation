<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_rdf_audit_metadata">
      <refmeta>
        <refentrytitle>DB.DBA.RDF_AUDIT_METADATA
</refentrytitle>
        <refmiscinfo>rdf
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>DB.DBA.RDF_AUDIT_METADATA
</refname>
        <refpurpose>Fix RDF metadata corruption.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_rdf_audit_metadata">
          <funcprototype xml:id="fproto_rdf_audit_metadata">
            <funcdef>
              <function>DB.DBA.RDF_AUDIT_METADATA
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>audit_mode
</parameter>

   integer
</paramdef>
            <paramdef choice="opt">in 
<parameter>str_value
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>graph_iri
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_rdf_audit_metadata">
        <title>Description
</title>
        <para>This function can detect and automatically fix most popular sorts of metadata corruption.
</para>
      </refsect1>
      <refsect1 xml:id="params_rdf_audit_metadata">
        <title>Parameters
</title>
        <refsect2>
          <title>audit_mode
</title>
          <para>(0|1|2|3 default 0) - 0 = read-only audit operation; 1 = audit and fix; 2 = audit, fix and garbage collection for
      	all incomplete declarations; 3 = the routine erases data it can't fix and it makes up to 10 iterations trying to erase
      	all invalid/incomplete metadata. The bigger the number, the more errors can be fixed, at the price of more metadata
      	changed if needed for the fix.
</para>
        </refsect2>
        <refsect2>
          <title>str_value
</title>
          <para>Default '' is to stop if the metadata graph contains marks that some storages are being edited.
</para>
          <para>'*' is to remove such marks.
</para>
          <para>Other values will be suggested by the error dump when appropriate.
</para>
        </refsect2>
        <refsect2>
          <title>graph_iri
</title>
          <para>Default is system metadata graph.
</para>
          <para>If specified then it should be a name of graph created by
        <link linkend="fn_rdf_backup_metadata"><function>DB.DBA.RDF_BACKUP_METADATA</function></link>

  .
It is possible to make the backup to a graph, test and maybe fix that backup and finally restore metadata from the fixed backup.
The disadvantage is that DB.DBA.RDF_AUDIT_METADATA() may detect and fix more errors on "active" metadata than on their backup.
The possible approach is to make backup, test and maybe fix it (after fix it can be tested one more time).
If the backup was successfully fixed then the DB.DBA.RDF_AUDIT_METADATA() is used to fix the "active" metadata, not the copy.
In any case, if one makes a backup to fix it then it's worth to make and keep another 'untouched' backup, just to stay on safe side.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="examples_rdf_audit_metadata">
        <title>Examples
</title>
        <example xml:id="ex_rdf_audit_metadata">
          <title>Simple example
</title>
          <para>Automatically fix the corrupted metadata:
</para>
          <screen>
        SQL&gt; DB.DBA.RDF_AUDIT_METADATA(1, '*');

</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_rdf_audit_metadata">
        <title>See Also
</title>
        <para>
          <link linkend="fn_rdf_backup_metadata">
            <function>DB.DBA.RDF_BACKUP_METADATA
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_restore_metadata">
            <function>DB.DBA.RDF_RESTORE_METADATA
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
