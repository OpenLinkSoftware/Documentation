<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_sprintf">
      <refmeta>
        <refentrytitle>sprintf
</refentrytitle>
        <refmiscinfo>string
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>sprintf
</refname>
        <refpurpose>returns a formatted string
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_sprintf">
          <funcprototype xml:id="fproto_sprintf">
            <funcdef>
              <function>sprintf
</function>
            </funcdef>
            <paramdef choice="opt"><parameter>format
</parameter>

   string
</paramdef>
            <paramdef choice="opt"><parameter>arg_1
</parameter>

   any
</paramdef>
            <paramdef choice="opt">
              <parameter>...
</parameter>
            </paramdef>
            <paramdef choice="opt"><parameter>arg_x
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_24">
        <title>Description
</title>
        <para>sprintf returns a new string formed by "printing" a variable number
    of arguments arg_1 - arg_x according to the format string format,
    that is, exactly the same way as with the sprintf function of C language.
    However the sprintf function enforces some additional limitations over the sprintf C function.
    It does not allow for single value output to take more than 2000 characters.
    It does support the following additional format characters:
</para>
        <para>
    diouxXeEfgcs - as in the C language printf
</para>
        <para>
    S - as 's' but escapes the single quotes by doubling them (as per SQL/92). This is suitable for
    constructing dynamic SQL statements with string literals inline.
</para>
        <screen>
    sprintf ('insert into testit (data) values ('%S')', 'Test ''Real'' data')
	-&gt; insert into testit (data) values ('Test ''Real'' data')
</screen>
        <para>
    I - as 's' but escapes the string value to form a valid identifier name (will double the double
      quotes).  This is suitable for constructing dynamic SQL statements with identifiers inline.
</para>
        <screen>
    sprintf ('select * from "%I"', 'Big "Table" Name')
	-&gt; select * from "Big ""Table"" Name"
</screen>
        <para>
    U - as 's' but escapes the string value as an HTTP URL (same as http_url() function). Useful for making
      dynamic VSP content
</para>
        <screen>
    sprintf ('&lt;a href="%U"&gt;', 'day &amp; night')
	-&gt; &lt;a href="day+%26+night"&gt;
</screen>
        <para>
    R - use to replace leading spaces: the modifiers are one of + - # 0 and space.
</para>
        <screen>
    sprintf ('%-R', ' 123')
    -123
    sprintf ('%-R', '  123')
    --123
</screen>
        <para>
    V - as 's' but escapes the string value as an HTTP Value (same as http_value). Useful for making
      dynamic VSP content
</para>
        <screen>
    sprintf ('&lt;INPUT name="test" value="%V"&gt;', 'day &amp; night')
	-&gt; &lt;INPUT name="test" value="day &amp;amp; night"&gt;
</screen>
        <para>
    Note that the sprintf format length and precision modifiers do not apply to the extension format characters
</para>
        <screen>sprintf('Int=%d/%o/%x, String=%s, Character=%c',
    42798,42798,42798,'la cadena',65)
 -&gt; 'Int=42798/123456/a72e, String=la cadena, Character=A'

</screen>
        <para>In addition, 
<emphasis>%{varname}U
</emphasis>

   syntax extension is supported, mostly for 
<link linkend="rdfconnvarsiniriclasses">uing connection variables in RDF IRI classes
</link>

  . That syntax is to print the value of client connection variable 
<emphasis>varname
</emphasis>

   using print format 
<emphasis>%U
</emphasis>

  . Other format characters are not supported for that feature in current version of Virtuoso but might be supported in the future.
</para>
      </refsect1>
    </refentry>
