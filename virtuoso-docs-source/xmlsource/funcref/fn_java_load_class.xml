<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_java_load_class">
      <refmeta>
        <refentrytitle>java_load_class
</refentrytitle>
        <refmiscinfo>jvmpl
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>java_load_class
</refname>
        <refpurpose>Declares a Java class to a Java VM
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_java_load_class">
          <funcprototype xml:id="fprot_java_load_class">
            <funcdef>
              <function>java_load_class
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>java_class_name
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>java_class_bytecode
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_java_load_class">
        <title>Description
</title>
        <para>Defines a java class into the running Java VM.  This is useful for 
    loading .class/.jar/.zip files from a BLOB column or from the Virtuoso 
    WebDAV repository.
</para>
      </refsect1>
      <refsect1 xml:id="params_java_load_class">
        <title>Parameters
</title>
        <refsect2>
          <title>java_class_name
</title>
          <para>the name under which the class is to be defined
</para>
        </refsect2>
        <refsect2>
          <title>java_class_bytecode
</title>
          <para>the contents of the .class file.
</para>
        </refsect2>
      </refsect1>
      <!--
  <refsect1
xml:id="ret_java_load_class"><title>Return Types</title>
    <para></para>
  </refsect1>
  -->

      <refsect1 xml:id="examples_java_load_class">
        <title>Examples
</title>
        <example xml:id="ex_java_load_class">
          <title>Loading a Java Class
</title>
          <para>Some sample Java code:
</para>
          <programlisting>
java_server.java:

  public class java_server {
    public static int property;
  }
</programlisting>
          <para>Compiling it makes a java_server.class.  Loading it in Virtuoso 
      is as follows:</para>
          <programlisting>
  java_load_class ('java_server', file_to_string ('java_server.class'));
</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_java_load_class">
        <title>See Also
</title>
        <para>
          <link linkend="fn_java_call_method">
            <function>java_call_method()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_set_property">
            <function>java_set_property()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_get_property">
            <function>java_get_property()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_vm_attach">
            <function>java_vm_attach()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_new_object">
            <function>java_new_object()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_java_vm_detach">
            <function>java_vm_detach()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
