<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_import_clr">
      <refmeta>
        <refentrytitle>import_clr
</refentrytitle>
        <refmiscinfo>udt
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>import_clr
</refname>
        <refpurpose>This function automatically creates the SQL Type wrappers based on 
    the CLR Reflection API.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_import_clr">
          <funcprototype xml:id="fprot_import_clr">
            <funcdef>any 
<function>import_clr
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>assemblies_vector
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>classes_vector
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>security_mode
</parameter>

   integer
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_import_clr">
        <title>Description
</title>
        <para>This function automatically creates the SQL Type wrappers based on 
    the CLR Reflection API.
</para>
      </refsect1>
      <refsect1 xml:id="params_import_clr">
        <title>Parameters
</title>
        <refsect2>
          <title>assemblies_vector
</title>
          <para>a vector of assembly names (as VARCHAR) to look into (or null).
</para>
        </refsect2>
        <refsect2>
          <title>classes_vector
</title>
          <para>a vector of type names to create SQL type wrappers for (or null to mark 
	    all the types in the assemblies specified by assemblies_vector. In that case the 

<computeroutput>assemblies_vector
</computeroutput>

   cannot be NULL).
</para>
        </refsect2>
        <refsect2>
          <title>security_mode
</title>
          <para>This optional parameter defines the access mode as follows:
</para>
          <simplelist type="vert">
            <member><emphasis>0
</emphasis>

   - restricted (default if unspecified)
</member>
            <member><emphasis>1
</emphasis>

   - unrestricted
</member>
          </simplelist>
        </refsect2>
      </refsect1>
      <!--
  <refsect1
xml:id="ret_import_clr"><title>Return Types</title>
    <para></para>
  </refsect1>
  -->

      <refsect1 xml:id="examples_import_clr">
        <title>Examples
</title>
        <example xml:id="ex_import_clr">
          <title>Importing a Class
</title>
          <para>Here is a simple C# program that we can import and use with Virtuoso.  
 This example requires that you are running Virtuoso with CLR support.</para>
          <para>Using a text editor create a C# source file in the server 
 root directory called sanity.cs, with the following contents:</para>
          <programlisting>
using System;

public class sanity
{
    public static string test(string  name) {
       return "Hello "+ name + ", from Virtuoso";
    }
}
</programlisting>
          <para>This sample needs to be compiled into bytecode assembly before it can 
 be used.  Use a command prompt that is suitably set up to find .NET 
 utilities in its path, the .NET Framework SDK installation provides a 
 shortcut in the Start menu to a command prompt that is preconfigured.  
 From the command prompt change directory to the Virtuoso server root 
 containing the C# source file.  Execute:</para>
          <programlisting>
C:\Program Files\OpenLink\Virtuoso 3.0\bin&gt;csc /target:library sanity.cs
Microsoft (R) Visual C# .NET Compiler version 7.00.9466
for Microsoft (R) .NET Framework version 1.0.3705
Copyright (C) Microsoft Corporation 2001. All rights reserved.
</programlisting>
          <para>Now this library must be introduce to the Virtuoso Server.  Using ISQL 
 use the following commands to test the CLR:</para>
          <programlisting>
C:\Program Files\OpenLink\Virtuoso 3.0\bin&gt;isql 1112
Connected to OpenLink Virtuoso
Driver: 03.00.2315 OpenLink Virtuoso ODBC Driver
OpenLink Interactive SQL (Virtuoso), version 0.9849b.
Type HELP; for help and EXIT; to exit.
SQL&gt; DB..import_clr (vector ('sanity'), vector ('sanity'));

Done. -- 300 msec.
SQL&gt; select sanity::test('Rob');
callret
VARCHAR
______________________________________________

Hello Rob, from Virtuoso

1 Rows. -- 60 msec.
</programlisting>
          <para>Congratulations, you have proven that your Virtuoso server 
 can run .NET classes.
</para>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_import_clr">
        <title>See Also
</title>
        <para>
          <link linkend="ch-runtimehosting">The Runtime Hosting Chapter
</link>
        </para>
        <para>
          <link linkend="fn_unimport_clr">unimport_clr
</link>
        </para>
      </refsect1>
    </refentry>
