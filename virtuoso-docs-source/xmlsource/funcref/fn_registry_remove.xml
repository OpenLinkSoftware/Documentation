<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_registry_remove">
      <refmeta>
        <refentrytitle>registry_remove
</refentrytitle>
        <refmiscinfo>sql
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>registry_remove
</refname>
        <refpurpose>Remove a variable from registry
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_registry_remove">
          <funcprototype xml:id="fproto_registry_remove">
            <funcdef>
              <function>registry_remove
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>name
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_registry_remove">
        <title>Description
</title>
        <para>The function removes a given variable from registry, so future calls of registry_get returns zero.
</para>
        <para>Some registry variables are used solely by internal server routines so they should not be changed by any application.
Nobody can remove such a "protected" variable even if some of them can be updated by DBA.
</para>
      </refsect1>
      <refsect1 xml:id="params_registry_remove">
        <title>Parameters
</title>
        <refsect2>
          <title>name
</title>
          <para>Name of variable to be removed.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_registry_remove">
        <title>Return Types
</title>
        <para>The function returns the last saved value of a variable or zero if the specified variable does not exists.
</para>
      </refsect1>
      <refsect1 xml:id="errors_registry_remove">
        <title>Errors
</title>
        <table>
          <title>Errors signalled by registry_set
</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>SQLState
</entry>
                <entry>Error Code
</entry>
                <entry>Error Text
</entry>
                <entry>Description
</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <errorcode>22023
</errorcode>
                </entry>
                <entry>
                  <errorcode>SR014
</errorcode>
                </entry>
                <entry>
                  <errortext>Function registry_remove needs a string as argument 1, not an arg of [datatype]
</errortext>
                </entry>
                <entry/>
              </row>
              <row>
                <entry>
                  <errorcode>42000
</errorcode>
                </entry>
                <entry>
                  <errorcode>SR485
</errorcode>
                </entry>
                <entry>
                  <errortext>Function registry_remove can not remove protected registry variable [name].
</errortext>
                </entry>
                <entry/>
              </row>
            </tbody>
          </tgroup>
        </table>
      </refsect1>
      <refsect1 xml:id="examples_registry_remove">
        <title>Examples
</title>
        <example xml:id="ex_registry_remove">
          <title>Creation and Removal of a Registry Variable
</title>
          <para>This sequence of operations demonstrates that 
<function>registry_remove
</function>

   reverts the effect of 
<function>registry_set
</function>

  .
</para>
          <screen>
&gt; select registry_get ('my_variable');
0

&gt; select registry_set ('my_variable', 'my_value');
1

&gt; select registry_get ('my_variable');
my_value

&gt; select registry_remove ('my_variable');
my_value

&gt; select registry_get ('my_variable');
0
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_registry_remove">
        <title>See Also
</title>
        <para>
          <link linkend="fn_registry_set">
            <function>registry_set
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_get">
            <function>registry_get
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_name_is_protected">
            <function>registry_name_is_protected
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_get_all">
            <function>registry_get_all
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sequence_get_all">
            <function>sequence_get_all
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sequence_next">
            <function>sequence_next
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sequence_set">
            <function>sequence_set
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sequence_remove">
            <function>sequence_remove
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
