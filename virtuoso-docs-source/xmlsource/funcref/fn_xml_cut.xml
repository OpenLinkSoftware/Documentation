<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xml_cut">
      <refmeta>
        <refentrytitle>xml_cut
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>xml_cut
</refname>
        <refpurpose>creates a new XML document which contains a copy of data pointed by given XML tree- or XPER- entity
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_ml_cut">
          <funcprototype xml:id="fproto_xml_cut">
            <funcdef>
              <function>xml_cut
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>source_entity
</parameter>

   any (XML entity)
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_65">
        <title>Description
</title>
        <para>
In some special cases, some part of XML document,
being pointed by a XML entity, should be copied into a new separate document
with new entity pointing to the top-level element or the root of this document.
One reason for doing this is optimization of XPER processing (see <link linkend="fn_xper_cut">xper_cut</link>

  ).
Another way to use this functionality is passing of some XML entity
to a function, when function uses XPath operations with references to
the "document's root".
		</para>
        <example xml:id="ex_xml_cut">
          <title>A sample of hidden bug</title>
          <para> 
  </para>
          <screen>
create procedure get_C (inout b any)
{
  return cast (xpath_eval('//C', b) as varchar);
}

create procedure hidden_bug_1()
{
  declare abc any;	-- some XML document
  declare b_list any;	-- a vector of all B elements of the doc
  declare c1 varchar;	-- a name of first variable
  declare c2 varchar;	-- a title of second variable
  abc := xtree_doc ('&lt;A&gt;&lt;B
xml:id="1_01"&gt;&lt;C&gt;One&lt;/C&gt;&lt;/B&gt;&lt;B
xml:id="2_01"&gt;&lt;C&gt;Two&lt;/C&gt;&lt;/B&gt;&lt;/A&gt;');
  b_list := xpath_eval ('//B', abc, 0);
  -- now b_list is a vector of two items, '&lt;B
xml:id="1_02"&gt;&lt;C&gt;One&lt;/C&gt;&lt;/B&gt;' and '&lt;B
xml:id="2_02"&gt;&lt;C&gt;Two&lt;/C&gt;&lt;/B&gt;'.
  c1 := get_C ( aref (b_list, 0));
  -- looks fine, c1 is '&lt;C&gt;One&lt;/C&gt;'
  c2 := get_C ( aref (b_list, 1));
  -- looks strange fine, c2 is '&lt;C&gt;One&lt;/C&gt;',
  -- while the expected value is '&lt;C&gt;Two&lt;/C&gt;'.
}
      </screen>
          <para>
The origin of the bug is '//C' path in get_C(), which returns not
the "C element inside given b element", but
"C element inside the document where given b element is located",
thus get_C returns the first C element in the whole document with any of
two B elements given.
      </para>
          <para>
There are two ways to fix this bug.
It is better to correct get_C():
      </para>
          <screen>
create procedure get_C (inout b any)
{
  return cast (xpath_eval('./C', b) as varchar);
}
      </screen>
          <para>
If you cannot patch get_C() for some reason, xml_cut will help,
but it will waste both memory and CPU time for copying a branch of
XML tree:
      </para>
          <screen>
create procedure hidden_bug_1()
{
...
  c1 := get_C ( xml_cut (aref (b_list, 0)));
...
}
      </screen>
        </example>
        <para>
The current node of the resulting entity is the node that is a copy
of the current node of the source entity. In common,
the top-level node of the copied subtree becomes the current node of the result.
There are two special cases, however. If the source entity is an attribute entity,
then the result is also an attribute entity and the attribute name remains the same.
If the source entity points to the root of the document, the resulting entity
also points to the root of the copied document, not to its top-level node.
      </para>
        <para>
With XPER entity given, xml_cut() works exactly as xper_cut().

</para>
      </refsect1>
      <refsect1 xml:id="params_29">
        <title>Parameters
</title>
        <refsect2>
          <title>source_xper
</title>
          <para>XML Entity to be converted into new document
</para>
        </refsect2>
      </refsect1>
      <!--
  <refsect1
xml:id="ret_20"><title>Return Types</title><para></para></refsect1>
  <refsect1
xml:id="errors_13"><title>Errors</title>
    <table><title>Errors signalled by</title>
      <tgroup cols="4">

<thead>
<row>
<entry>SQLState
</entry>
<entry>Error Code
</entry>
<entry>Error Text
</entry>
<entry>Description
</entry>
</row>
</thead>
	<tbody>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode></errorcode></entry>
	    <entry><errortext></errortext></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
  <refsect1
xml:id="examples_23"><title>Examples</title>
    <example
xml:id="ex__35"><title></title>
      <para></para>
      <screen></screen>
    </example>
  </refsect1>
-->

      <refsect1 xml:id="seealso_38">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xper_cut">
            <function>xper_cut()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
