<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmltype.isfragment">
      <refmeta>
        <refentrytitle>XMLType.isFragment
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLType.isFragment
</refname>
        <refpurpose>The function returns 1 if the instance is an XML generic entity or 0 if it is a plain document.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmltype.isfragment">
          <funcprototype xml:id="fproto_xmltype.isfragment">
            <funcdef>
              <function>XMLType.isFragment
</function>
            </funcdef>
            <paramdef choice="opt"/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmltype.isfragment">
        <title>Description
</title>
        <para>The function checks the number of children elements of the root of
	the document root of the given instance. If there are no such documents or
	there are many of them then the document is not well-formed, for example it
	can not be fully validated against an XML schema. However it can be used
	as a fragment of a larger document: it can be declared as an external
	generic entity and then referenced in a top-level document or in one of its
	subdocuments. For example a book can be stored in XML as a root
	document that includes subdocuments, one or more chapter per
	subdocument.</para>
        <para>
The function returns 1 if the given XMLType instance is a fragment and returns 0 if it is a well-formed XML document.
</para>
      </refsect1>
      <refsect1 xml:id="ret_xmltype.isfragment">
        <title>Return Types
</title>
        <para>Integer value 1 or 0.
</para>
      </refsect1>
      <refsect1 xml:id="examples_xmltype.isfragment">
        <title>Examples
</title>
        <example xml:id="ex_xmltype.isfragment">
          <title>Basic test
</title>
          <para>The table DB.DBA.SYS_USERS always contains more than one user record so the call of XMLAGG
that returns one element per record creates an valid generic entity but not a valid document.</para>
          <screen>
select XMLAGG (XMLELEMENT ("User",U_NAME)) from DB.DBA.SYS_USERS;
callret
VARCHAR
_______________________________________________________________________________

&lt;User&gt;BACKUP&lt;/User&gt;&lt;User&gt;SOAP&lt;/User&gt;&lt;User&gt;dba&lt;/User&gt;&lt;User&gt;demo&lt;/User&gt;

1 Rows. -- 00000 msec.
select XMLType (XMLAGG (XMLELEMENT ("User",U_NAME))).isFragment() from DB.DBA.SYS_USERS;
callret
INTEGER
_______________________________________________________________________________

1

1 Rows. -- 00000 msec.
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmltype.isfragment">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmltype.getrootelement">
            <function>XMLType.getRootElement()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
