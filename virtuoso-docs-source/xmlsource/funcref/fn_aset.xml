<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_aset">
      <refmeta>
        <refentrytitle>aset
</refentrytitle>
        <refmiscinfo>array
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>aset
</refname>
        <refpurpose>set array element
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_aset">
          <funcprototype xml:id="fprot_aset">
            <funcdef>
              <function>aset
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>arg
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>nth
</parameter>

   integer
</paramdef>
            <paramdef choice="opt">in 
<parameter>new_elem
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_aset">
        <title>Description
</title>
        <para>aset sets the nth element of a string, array or vector where nth
      is a zero-based index. If the first argument is a string, the nth
      character of string is replaced with the ASCII value given in the third
      argument elem.
</para>
      </refsect1>
      <refsect1 xml:id="params_aset">
        <title>Parameters
</title>
        <refsect2>
          <title>arg
</title>
          <para>A string, array or vector.
</para>
        </refsect2>
        <refsect2>
          <title>nth
</title>
          <para>Zero-based element index.
</para>
        </refsect2>
        <refsect2>
          <title>nelem
</title>
          <para>The new element. If 
<parameter>arg
</parameter>

   is a string,
      its nth element will be replaced by the ASCII value given in

<parameter>new_elem
</parameter>

  .
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_aset">
        <title>Return Values
</title>
        <para><function>Aset
</function>

   returns

<parameter>nelem
</parameter>

  . It modifies its first argument.
</para>
      </refsect1>
      <refsect1 xml:id="errors_aset">
        <title>Errors
</title>
        <table>
          <title>Errors signalled by aset
</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>SQLState
</entry>
                <entry>Error Code
</entry>
                <entry>Error Text
</entry>
                <entry>Description
</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <errorcode>22003
</errorcode>
                </entry>
                <entry>
                  <errorcode>SR020
</errorcode>
                </entry>
                <entry>
                  <errortext>Bad array subscript %d in aset.
</errortext>
                </entry>
                <entry/>
              </row>
            </tbody>
          </tgroup>
        </table>
      </refsect1>
      <refsect1 xml:id="examples_aset">
        <title>Examples
</title>
        <example xml:id="ex_aset_1">
          <title>Using 
<function>make_string
</function>

   and
      <function>aref</function>

  </title>
          <para>Make a string, fill with character sequence from A to Z.</para>
          <screen>
SQL&gt; create procedure
alphabet_string ()
{
  declare _inx integer;
  declare _str varchar;
  _str := make_string (26);

  while (_inx &lt; 26)
    {
      aset (_str, _inx, _inx + 65);
      _inx := _inx + 1;
    }

  return (_str);
}
;

Done. -- 6 msec.
SQL&gt; select alphabet_string ();
callret
VARCHAR NOT NULL
_______________________________________________________________________________

ABCDEFGHIJKLMNOPQRSTUVWXYZ

1 Rows. -- 4 msec.

</screen>
        </example>
        <example xml:id="ex_aset_2">
          <title>Reverse a string using aset
</title>
          <para>Note that str is modified by aset.
</para>
          <screen>
SQL&gt; create procedure
revstr (in str varchar)
{
    declare len, inx1, inx2, tmp integer;

    if (str is null) return (str);

    len := length (str);
    if (len &lt; 2)
      return (str); -- No need for further processing

    inx1 := 0;       -- Index from the left.
    inx2 := len - 1; -- Index from the right.
    len  := len / 2; -- Upper limit for inx1.

    while (inx1 &lt; len)
      {
        tmp := aref (str, inx1);
	aset (str, inx1, aref (str, inx2));
	aset (str, inx2, tmp);
	inx1 := inx1 + 1;
	inx2 := inx2 - 1;
      }
    return (str);
}
;

Done. -- 7 msec.
SQL&gt; select revstr ('repaid'), revstr ('Alli, tapa pulu papatilla!');
callret   callret
VARCHAR   VARCHAR
_______________________________________________________________________________

diaper    !allitapap ulup apat ,illA

1 Rows. -- 11 msec.

</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_aset">
        <title>See Also
</title>
        <para><link linkend="fn_aref"><function>aref()
</function></link>

  ,
    <link linkend="fn_vector"><function>vector()</function></link>

  ,
    <link linkend="fn_make_string"><function>make_string()</function></link>

  </para>
      </refsect1>
    </refentry>
