<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_soap_wsdl_import">
      <refmeta>
        <refentrytitle>soap_wsdl_import
</refentrytitle>
        <refmiscinfo>soap
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>SOAP_WSDL_IMPORT
</refname>
        <refpurpose/>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_soap_wsdl_import">
          <funcprototype xml:id="fproto_soap_wsdl_import">
            <funcdef>array DB.DBA.
<function>SOAP_WSDL_IMPORT
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>target_url
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_soap_wsdl_import">
        <title>Description
</title>
        <para>The 
<function>soap_wsdl_import()
</function>

   function is used to
    import operations and types definitions from an WSDL file on
    a remote server. The retrieved file will be parsed and PL (procedure
    language) wrappers will be generated for each SOAP operation that is
    described. The SOAP service will be represented by a PL module which will
    be the overall container the generated PL wrappers.
    Once the WSDL file has been imported the PL wrappers are automatically
    generated and available for use.
</para>
      </refsect1>
      <refsect1 xml:id="params_soap_wsdl_import">
        <title>Parameters
</title>
        <refsect2>
          <title>target_url
</title>
          <para>A URL to a WSDL file.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_soap_wsdl_import">
        <title>Return Types
</title>
        <para>soap_wsdl_import() returns an array that consists of
    the name of module, the name of PL wrapper, and a vector of parameter
    name/type pairs. An example of the result is:  vector ([module name],
    [wrapper1], vector ([param1], [type1], [param2], [tyep2] ...),
    [wrapper2] vector (...))</para>
      </refsect1>
      <!--  <refsect1
xml:id="errors_soap_wsdl_import">
    <title>Errors</title>
    <table>
      <title>Errors signalled by</title>
      <tgroup cols="4">
       <thead>
         <row>
           <entry>SQLState</entry>
           <entry>Error Code</entry>
           <entry>Error Text</entry>
           <entry>Description</entry></row></thead>
	<tbody>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode></errorcode></entry>
	    <entry><errortext></errortext></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
-->

      <refsect1 xml:id="examples_soap_wsdl_import">
        <title>Examples
</title>
        <example xml:id="ex_soap_wsdl_import">
          <title>Importing and using a Web Services description file
</title>
          <screen>
 SQL&gt; soap_wsdl_import('http://[host:port]/chemistry.wsdl');

 Done. -- 1286 msec.
 SQL&gt; select xml_tree_doc (Chemistry.getElementBySymbol('Ni'));
 callret
 VARCHAR
 _______________________________________________________________________________

 &lt;getElementBySymbolResponse&gt;
   &lt;return&gt;
     &lt;atomicnumber&gt;28&lt;/atomicnumber&gt;
     &lt;symbol&gt;Ni&lt;/symbol&gt;
     &lt;name&gt;Nickel&lt;/name&gt;
     &lt;mass&gt;58.69&lt;/mass&gt;
     &lt;meltingPoint&gt;1726.0&lt;/meltingPoint&gt;
     &lt;boilingPoint&gt;3005.0&lt;/boilingPoint&gt;
     &lt;found&gt;1751&lt;/found&gt;
  &lt;/return&gt;
 &lt;/getElementBySymbolResponse&gt;

 Note: the namespaces from response are omitted for better reading.
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_soap_wsdl_import">
        <title>See Also
</title>
        <para>
          <link linkend="fn_soap_wsdl">soap_wsdl()
</link>
        </para>
      </refsect1>
    </refentry>
