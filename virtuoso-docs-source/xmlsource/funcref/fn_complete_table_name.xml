<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_complete_table_name">
      <refmeta>
        <refentrytitle>complete_table_name
</refentrytitle>
        <refmiscinfo>sql
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>complete_table_name
</refname>
        <refpurpose>Returns a fully qualified table name.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_complete_table_name">
          <funcprototype xml:id="fproto_complete_table_name">
            <funcdef>varchar 
<function>complete_table_name
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>tablename
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>mode
</parameter>

   integer
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_complete_table_name">
        <title>Description
</title>
        <para>The 
<function>complete_table_name()
</function>

   can be used to make a
    fully qualified table name from non-qualified one, i.e. the qualifier and
    owner will be added if they are missing.
</para>
      </refsect1>
      <refsect1 xml:id="params_complete_table_name">
        <title>Parameters
</title>
        <refsect2>
          <title>tablename
</title>
          <para>The table name to be retrieved.
</para>
        </refsect2>
        <refsect2>
          <title>mode
</title>
          <para>If this mode parameter is set to 1 this function will first look-up
      the supplied tablename for a match in the system tables.  If a match is found
      the full name will be returned, if the table is not found the function
      will continue as if the mode were set to 0.</para>
          <para>When the mode parameter is 0 the result will be generated using
      the current qualifier and current SQL user account names.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_complete_table_name">
        <title>Return Types
</title>
        <para>A string will be returned containing the fully qualified table name.

</para>
      </refsect1>
      <refsect1 xml:id="errors_complete_table_name">
        <title>Errors
</title>
        <table>
          <title>Errors signalled by
</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>SQLState
</entry>
                <entry>Error Code
</entry>
                <entry>Error Text
</entry>
                <entry>Description
</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <errorcode>22023
</errorcode>
                </entry>
                <entry>
                  <errorcode>SR014
</errorcode>
                </entry>
                <entry>
                  <errortext>Function complete_table_name needs a string as argument 1,
      not an arg of type [type]
</errortext>
                </entry>
                <entry/>
              </row>
              <row>
                <entry>
                  <errorcode>22023
</errorcode>
                </entry>
                <entry>
                  <errorcode>SR008
</errorcode>
                </entry>
                <entry>
                  <errortext>Function complete_table_name needs an integer as argument 2,
      not an arg of type [type]
</errortext>
                </entry>
                <entry/>
              </row>
            </tbody>
          </tgroup>
        </table>
      </refsect1>
      <refsect1 xml:id="examples_complete_table_name">
        <title>Examples
</title>
        <example xml:id="ex_complete_table_name">
          <title>Using the complete_table_name() function
</title>
          <para>This simple example shows retrieval of a fully qualified table name
      using the complete_table_name() function from ISQL.  In the first case
      the table name supplied is a system table, in the second case the table does
      not exist and the result is generated based on the users details:</para>
          <screen>
SQL&gt; use WS;

Done. -- 4 msec.
SQL&gt; select complete_table_name('SYS_DAV_RES', 1);
callret
VARCHAR
_______________________________________________________________________________

WS.WS.SYS_DAV_RES

1 Rows. -- 1 msec.

SQL&gt; select complete_table_name('SYS_DAV_RES__', 1);
callret
VARCHAR
_______________________________________________________________________________

WS.DBA.SYS_DAV_RES__

1 Rows. -- 1 msec.
</screen>
        </example>
      </refsect1>
    </refentry>
