<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_sequence_set">
      <refmeta>
        <refentrytitle>sequence_set
</refentrytitle>
        <refmiscinfo>sql
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>sequence_set
</refname>
        <refpurpose>Sets and returns the state of a sequence object.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_sequence_set">
          <funcprototype xml:id="fproto_sequence_set">
            <funcdef>integer 
<function>sequence_set
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>name
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>state
</parameter>

   integer
</paramdef>
            <paramdef choice="opt">in 
<parameter>mode
</parameter>

   integer
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_sequence_set">
        <title>Description
</title>
        <para>
The function sets and returns the state of a sequence object.
The <parameter>mode</parameter>

   specifies whether a check for order of values should be made.
If <parameter>mode</parameter>

   equals 0, the state is set regardless of the previous state.
If <parameter>mode</parameter>

   is non-zero,
the state is changed only if the new state is greater than the previous state.
This gives some (weak) protection from occasional 'rewind' the sequence back to values that are already in use.

</para>
      </refsect1>
      <refsect1 xml:id="params_sequence_set">
        <title>Parameters
</title>
        <refsect2>
          <title>name
</title>
          <para>The server-wide name of a sequence.
</para>
        </refsect2>
        <refsect2>
          <title>state
</title>
          <para>A new state of the sequence.
</para>
        </refsect2>
        <refsect2>
          <title>mode
</title>
          <para>Flags if a new state of the sequence should be ignored if it is less than the current one.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_sequence_set">
        <title>Return Types
</title>
        <para>
The function returns an integer that is equal to what the next 
call to <function>sequence_next</function>

  () will return.

</para>
      </refsect1>
      <refsect1 xml:id="examples_sequence_set">
        <title>Examples
</title>
        <example xml:id="ex_sequence_set">
          <title>Different modes of sequence_set()
</title>
          <para>The sequence of calls demonstrates various calls of 
<function>sequence_set
</function>

  ().
</para>
          <screen>
select sequence_set ('sample', 5, 0);
5

1 Rows. -- 0 msec.

select sequence_next ('sample');
5

1 Rows. -- 0 msec.

select sequence_next ('sample');
6

1 Rows. -- 0 msec.

-- This has no effect because current state(6) is greater than 2.
select sequence_set ('sample', 2, 1);
7

1 Rows. -- 0 msec.

select sequence_next ('sample');
7

1 Rows. -- 0 msec.

-- But this change has effect:
select sequence_set ('sample', 2, 0);
2

1 Rows. -- 0 msec.

select sequence_next ('sample');
2

1 Rows. -- 0 msec.
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_sequence_set">
        <title>See Also
</title>
        <para>
          <link linkend="sequenceobjects">Sequence Objects
</link>
        </para>
        <para>
          <link linkend="fn_sequence_get_all">
            <function>sequence_get_all
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sequence_next">
            <function>sequence_next
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sequence_remove">
            <function>sequence_remove
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_get">
            <function>registry_get
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_get_all">
            <function>registry_get_all
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_set">
            <function>registry_set
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_name_is_protected">
            <function>registry_name_is_protected
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_registry_remove">
            <function>registry_remove
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
