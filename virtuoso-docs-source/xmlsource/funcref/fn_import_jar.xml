<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_import_jar">
      <refmeta>
        <refentrytitle>import_jar
</refentrytitle>
        <refmiscinfo>type
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>import_jar
</refname>
        <refpurpose>Creates SQL wrapper types of selected Java classes
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_import_jar">
          <funcprototype xml:id="fproto_import_jar">
            <funcdef>void 
<function>import_jar
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>files
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>classes
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>security_mode
</parameter>

   integer
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_import_jar">
        <title>Description
</title>
        <para>This function calls the 
<function>jvm_ref_import()
</function>

   function
    to produce the XML, then transforms it to a set of CREATE TYPE statements
    and executes them.  The SQL names of the types are generated by retrieving
    the fully qualified name of the Java class and substituting the . with _
    (e.g.: java.lang.System becomes java_lang_System).  The names of the static
    members observer functions are composed by prepending the name of the
    static member with 'get' so the static Java member stat_m is mapped to a
    SQL static method getstat_m().  As a result it creates SQL type wrappers
    for the specified Java classes.
</para>
      </refsect1>
      <refsect1 xml:id="params_import_jar">
        <title>Parameters
</title>
        <refsect2>
          <title>files
</title>
          <para>Null, string or vector of strings.  This can contain one or many
      Java .class files, .zip or .jar files to pick classes from.  Null means
      only the classes specified in the classes argument regardless of their
      physical location.
</para>
        </refsect2>
        <refsect2>
          <title>classes
</title>
          <para>Wildcard string or a vector of strings specifying which classes to
      describe in the resulting XML.
</para>
        </refsect2>
        <refsect2>
          <title>security_mode
</title>
          <para>This optional parameter defines the access mode as follows:
</para>
          <simplelist type="vert">
            <member><emphasis>0
</emphasis>

   - restricted (default if unspecified)
</member>
            <member><emphasis>1
</emphasis>

   - unrestricted
</member>
          </simplelist>
        </refsect2>
      </refsect1>
      <!--
  <refsect1
xml:id="ret_import_jar"><title>Return Types</title>
    <para></para>
  </refsect1>
  <refsect1
xml:id="errors_import_jar">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
  -->

      <refsect1 xml:id="examples_import_jar">
        <title>Examples
</title>
        <example xml:id="ex_import_jar">
          <title>Simple example
</title>
          <screen>
SQL&gt; import_jar (null, vector ('java.lang.System'));
SQL&gt; select java_lang_System::getProperty('java.vm.name');
callret
NVARCHAR
_______________________________________________________________________________

Java HotSpot(TM) Client VM
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_import_jar">
        <title>See Also
</title>
        <para>
          <link linkend="fn_unimport_jar">
            <function>unimport_jar()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_jvm_ref_import">
            <function>jvm_ref_import()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
