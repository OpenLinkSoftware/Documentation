<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_udt_implements_method">
      <refmeta>
        <refentrytitle>udt_implements_method
</refentrytitle>
        <refmiscinfo>type
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>udt_implements_method
</refname>
        <refpurpose>provides a handle to the first method with specific name in a
    user defined type.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_udt_implements_method">
          <funcprototype xml:id="fproto_udt_implements_method">
            <funcdef>any 
<function>udt_implements_method
</function>

</funcdef>
            <paramdef choice="opt">in 
<parameter>udt
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>method_name
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_udt_implements_method">
        <title>Description
</title>
        <para>This returns a non-zero value (true) if the udt has an instance method
    with a name equal to the value of method_name. For methods with the same
    name, but with different signatures this function will return the handle
    of the first method in order of definition. If a method is not found, 0
    will be returned. The return value can be used to call the method using
    the indirect call statement. In which case an instance should be passed
    as a first argument to the indirect call statement.
</para>
      </refsect1>
      <refsect1 xml:id="params_udt_implements_method">
        <title>Parameters
</title>
        <refsect2>
          <title>udt
</title>
          <para>Type name as varchar or a type instance.
</para>
        </refsect2>
        <refsect2>
          <title>method_name
</title>
          <para>The requested method name as a varchar.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_udt_implements_method">
        <title>Return Types
</title>
        <para>An integer will be returned. If the named method is not contained
    within the user defined type 0 (false) will be returned. Otherwise an
    integer representing the handle to first definition of a contained method
    with that name will be returned.</para>
      </refsect1>
      <!--
  <refsect1
xml:id="errors_udt_implements_method">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
  -->

      <refsect1 xml:id="examples_udt_implements_method">
        <title>Examples
</title>
        <example xml:id="ex_udt_implements_method">
          <title>Finding methods within a UDT
</title>
          <para>This example demonstrates how one might go about utilizing the
      handle of a method if found within a user defined type.</para>
          <screen>
....
declare mtd any;
declare inst SER_UDT;

inst := new SER_UDT ();
mtd := udt_implements_method (inst, 'NEGATE');

if (mtd &lt;&gt; 0)
  return call (mtd) (inst);
else
  signal ('42000', 'No method NEGATE');
....
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_udt_implements_method">
        <title>See Also
</title>
        <para>
          <link linkend="fn_udt_get">
            <function>udt_get()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_udt_defines_field">
            <function>udt_defines_field()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_udt_instance_of">
            <function>udt_instance_of()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_udt_set">
            <function>udt_set()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
