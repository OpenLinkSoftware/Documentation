<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_csv_parse">
      <refmeta>
        <refentrytitle>csv_parse
</refentrytitle>
        <refmiscinfo>file
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>csv_parse
</refname>
        <refpurpose>Parses a CSV file.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_csv_parse">
          <funcprototype xml:id="fproto_csv_parse">
            <funcdef>
              <function>csv_parse
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>string_session_input
</parameter>

   any
</paramdef>
            <paramdef choice="opt">in 
<parameter>callback_sp_name
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">inout 
<parameter>callback_user_data
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>from_line
</parameter>

   integer
</paramdef>
            <paramdef choice="opt">in 
<parameter>to_line
</parameter>

   integer
</paramdef>
            <paramdef choice="opt">in 
<parameter>opts
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_csv_parse">
        <title>Description
</title>
        <para>Parses string session containing CSV data and then calls stored procedure
by given callback_sp_name parameter. The call back will be invoked for lines
between from_line and to_line argument's values.
The default from/to is 0/null which means from begining to end.
The callback function must take three arguments: the vector which contains
parsed csv row, the line number, inout the callback_user_data.
</para>
      </refsect1>
      <refsect1 xml:id="params_csv_parse">
        <title>Parameters
</title>
        <refsect2>
          <title>string_session_input
</title>
          <para>String session containing CSV data will be parsed as CSV where it will
insert into the table specified as table_name the lines between from_line and to_line offsets.

</para>
        </refsect2>
        <refsect2>
          <title>callback_sp_name
</title>
          <para>The name of the stored procedure.
</para>
        </refsect2>
        <refsect2>
          <title>callback_user_data
</title>
          <para>The user data.
</para>
        </refsect2>
        <refsect2>
          <title>from_line
</title>
          <para>Default - 0, This means counted from the begining.
</para>
        </refsect2>
        <refsect2>
          <title>to_line
</title>
          <para>Default - null, This means counted to the end.
</para>
        </refsect2>
        <refsect2>
          <title>opts
</title>
          <para>Default - null. The opts paramater is used to specify the delimiter
and quote it should look like this:
</para>
          <programlisting>
vector ('csv-delimiter', self.delim, 'csv-quote', self.quot)
</programlisting>
        </refsect2>
      </refsect1>
      <!--<refsect1
xml:id="ret_csv_parse"><title>Return Types</title>
    <para>Returns a vector with field values.</para>
  </refsect1>
  <refsect1
xml:id="errors_csv_parse">
    <title>Errors</title>
    <para>If table is not suitable in respect of number of columns or
type of columns error will be signaled.</para>
  </refsect1>-->

      <refsect1 xml:id="examples_csv_parse">
        <title>Examples
</title>
        <example xml:id="ex_csv_parse">
          <title>Simple Use
</title>
          <programlisting>
create procedure y_csv_cb (inout r any, in inx int, inout cbd any)
{
 if (cbd is null)
   cbd := vector ();
 cbd := vector_concat (cbd, vector (r));
}
;

....
 h := null;
 csv_parse (ss, 'DB.DBA.y_csv_cb', h, 0, 10);
....

</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_csv_parse">
        <title>See Also
</title>
        <para>
          <link linkend="fn_get_csv_row">
            <function>get_csv_row
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_load_file">
            <function>csv_load_file
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_load">
            <function>csv_load
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_cols_def">
            <function>csv_cols_def
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_csv_table_def">
            <function>csv_table_def
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
