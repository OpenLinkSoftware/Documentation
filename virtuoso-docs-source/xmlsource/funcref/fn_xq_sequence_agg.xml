<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xq_sequence_agg">
      <refmeta>
        <refentrytitle>DB.DBA.XQ_SEQUENCE_AGG
</refentrytitle>
        <refmiscinfo>aggr
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>DB.DBA.XQ_SEQUENCE_AGG
</refname>
        <refpurpose>Creates an XQuery sequence object that consists of all values passed the the aggregate.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xq_sequence_agg">
          <funcprototype xml:id="fproto_xq_sequence_agg">
            <funcdef>vector 
<function>DB.DBA.XQ_SEQUENCE_AGG
</function>

</funcdef>
            <paramdef choice="opt"><parameter>value_expression
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xq_sequence_agg">
        <title>Description
</title>
        <para><function>DB.DBA.XQ_SEQUENCE_AGG
</function>

   creates an XQuery sequence object that consists of all values
    passed the aggregate.

</para>
      </refsect1>
      <refsect1 xml:id="params_xq_sequence_agg">
        <title>Parameters
</title>
        <refsect2>
          <title>value_expression
</title>
          <para>Values are "flatten" before being added to the sequence. It means that --- NULLs are not added at all.
</para>
          <para>If an XQuery sequence object is passed to the aggregate then all items of sequence are appended to the
    end of the accumulated result, one after other. Thus the aggregate of a sequence ('A', 'B'), a string 'C' and
    a sequence ('D', 'E', 'F') is a sequence ('A', 'B', 'C', 'D', 'E', 'F'), not something like (('A', 'B'), 'C', ('D', 'E', 'F')).
    </para>
          <para>If an SQL vector is passed to the aggregate then every item of the vector is appended to result separately, and if an
    item is in turn a nested vector or a nested XQuery sequence then every sub-item is appended separately, in a
    recursive manner. So SQL vectors are "flattened" recursively.
    </para>
          <para>If the argument of DB.DBA.XQ_SEQUENCE_AGG () is a narrow string or a wide string it is converted to UTF-8
    before being added to the sequence. If an SQL vector contains a narrow or wide string then it is also converted
    to UTF-8. However if a narrow string is an item of an XQuery sequence then it is treated as UTF-8 and not
    subject to encoding.
    </para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_xq_sequence_agg">
        <title>Return Types</title>
        <para>Any

</para>
      </refsect1>
      <refsect1 xml:id="seealso_xq_sequence_agg">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xquery_eval">
            <function>xquery_eval()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_vector_agg">
            <function>DB.DBA.VECTOR_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_vector_of_nonnulls_agg">
            <function>DB.DBA.VECTOR_OF_NONNULLS_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_vector_or_null_agg">
            <function>DB.DBA.VECTOR_OR_NULL_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_vector_of_nonnulls_or_null_agg">
            <function>DB.DBA.VECTOR_OF_NONNULLS_OR_NULL_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_vector_concat_agg">
            <function>DB.DBA.VECTOR_CONCAT_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_bag_agg">
            <function>DB.DBA.BAG_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_bag_of_nonnulls_agg">
            <function>DB.DBA.BAG_OF_NONNULLS_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_bag_or_null_agg">
            <function>DB.DBA.BAG_OR_NULL_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_bag_of_nonnulls_or_null_agg">
            <function>DB.DBA.BAG_OF_NONNULLS_OR_NULL_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_bag_concat_agg">
            <function>DB.DBA.BAG_CONCAT_AGG()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_group_concat">
            <function>DB.DBA.GROUP_CONCAT()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_group_concat_distinct">
            <function>DB.DBA.GROUP_CONCAT_DISTINCT()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_group_digest">
            <function>DB.DBA.GROUP_DIGEST()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sample">
            <function>DB.DBA.SAMPLE()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
