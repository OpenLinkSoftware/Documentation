<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_bag_agg">
      <refmeta>
        <refentrytitle>DB.DBA.BAG_AGG
</refentrytitle>
        <refmiscinfo>aggr
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>DB.DBA.BAG_AGG
</refname>
        <refpurpose>Returns a vector of passed values.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_bag_agg">
          <funcprototype xml:id="fproto_bag_agg">
            <funcdef>vector 
<function>DB.DBA.BAG_AGG
</function>

</funcdef>
            <paramdef choice="opt"><parameter>value_expression
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_bag_agg">
        <title>Description
</title>
        <para><function>DB.DBA.BAG_AGG()
</function>

   returns a vector of passed values.
</para>
        <para>This is similar to 
<link linkend="fn_vector_agg">DB.DBA.VECTOR_AGG()
</link>

   and returns a vector of
    passed values but the order of items in the vector is not predefined and may vary from run to run.</para>
        <para>A query with <function>DB.DBA.BAG_AGG()</function>

   may work faster than a similar query with
<link linkend="fn_vector_agg">DB.DBA.VECTOR_AGG()</link>

   because <function>DB.DBA.BAG_AGG()</function>

   gives more
freedom to the SQL optimizer. If the order is not important for your application, consider using of <function>DB.DBA.BAG_AGG()</function>

   .

</para>
      </refsect1>
      <refsect1 xml:id="params_bag_agg">
        <title>Parameters
</title>
        <refsect2>
          <title>value_expression
</title>
          <para>Value of item for aggregation.

</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_bag_agg">
        <title>Return Types
</title>
        <para>Any
</para>
      </refsect1>
      <refsect1 xml:id="examples_bag_agg">
        <title>Examples
</title>
        <example xml:id="ex_bag_agg_1">
          <title>Simple Use
</title>
          <programlisting>
SELECT DB.DBA.BAG_AGG (subquery.X)
FROM (SELECT X FROM ... ORDER BY X) as subquery
</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_bag_agg">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xq_sequence_agg">DB.DBA.XQ_SEQUENCE_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_vector_agg">DB.DBA.VECTOR_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_vector_of_nonnulls_agg">DB.DBA.VECTOR_OF_NONNULLS_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_vector_or_null_agg">DB.DBA.VECTOR_OR_NULL_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_vector_of_nonnulls_or_null_agg">DB.DBA.VECTOR_OF_NONNULLS_OR_NULL_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_vector_concat_agg">DB.DBA.VECTOR_CONCAT_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_bag_of_nonnulls_agg">DB.DBA.BAG_OF_NONNULLS_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_bag_or_null_agg">DB.DBA.BAG_OR_NULL_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_bag_of_nonnulls_or_null_agg">DB.DBA.BAG_OF_NONNULLS_OR_NULL_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_bag_concat_agg">DB.DBA.BAG_CONCAT_AGG()
</link>
        </para>
        <para>
          <link linkend="fn_group_concat">DB.DBA.GROUP_CONCAT()
</link>
        </para>
        <para>
          <link linkend="fn_group_concat_distinct">DB.DBA.GROUP_CONCAT_DISTINCT()
</link>
        </para>
        <para>
          <link linkend="fn_group_digest">DB.DBA.GROUP_DIGEST()
</link>
        </para>
        <para>
          <link linkend="fn_sample">DB.DBA.SAMPLE()
</link>
        </para>
      </refsect1>
    </refentry>
