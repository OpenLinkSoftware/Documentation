<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmltype.getrootelement">
      <refmeta>
        <refentrytitle>XMLType.getRootElement
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLType.getRootElement
</refname>
        <refpurpose>Returns top-level element of the given instance (NULL for fragment)
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmltype.getrootelement">
          <funcprototype xml:id="fproto_xmltype.getrootelement">
            <funcdef>
              <function>XMLType.getRootElement
</function>
            </funcdef>
            <paramdef choice="opt"/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmltype.getrootelement">
        <title>Description
</title>
        <para>If the given instance is well-formed then this function will return
	the top-level element of the document that is stored within the instance.
    If the given instance is a fragment then NULL will be returned because there
	may be no top-level elements or too many of them.</para>
        <para>Note that in spite of this functions name this function actually
	returns the a top-level node rather than not a root node.  According to the
	W3C XPATH standards, the root element is an implicit node whose children are top-level
    elements, comments, processing instructions and maybe text nodes. E.g. if
	a correct HTML document is started by tag <computeroutput>&lt;HTML&gt;</computeroutput>

	and ended by corresponding <computeroutput>&lt;/HTML&gt;</computeroutput>

   tag
	then the only top-level node is the "<computeroutput>HTML</computeroutput>

  "
	element node and this node is a single child of the root node.</para>
        <para>If the given instance is well-formed then the function returns a
	top-level element of the document that is stored in the instance. If the
	given instance is fragment then NULL is returned, because there may be
	no top-level elements or too many of them.</para>
        <para>If the given instance is schema-based then the returned
	instance is based on the same schema.
</para>
      </refsect1>
      <refsect1 xml:id="ret_xmltype.getrootelement">
        <title>Return Types
</title>
        <para>The function returns an XMLType instance.
</para>
      </refsect1>
      <refsect1 xml:id="examples_xmltype.getrootelement">
        <title>Examples
</title>
        <example xml:id="ex_xmltype.getrootelement">
          <title>A table with an XMLType column
</title>
          <para>First select statement lists well-formed documents; second one lists the only fragment in the table.
</para>
          <screen>
create table TEST_XMLS  (I integer primary key, XMLVAL XMLType);
insert into TEST_XMLS  values (1, XMLType('&lt;emp&gt;&lt;empno&gt;221&lt;/empno&gt;&lt;ename&gt;John&lt;/ename&gt;&lt;/emp&gt;'));
insert into TEST_XMLS  values (2, XMLType('&lt;po&gt;&lt;pono&gt;331&lt;/pono&gt;&lt;poname&gt;PO_1&lt;/poname&gt;&lt;/po&gt;'));
insert into TEST_XMLS  values (3, XMLType('&lt;oil-rig
xml:id="14a_04" water="0.413"/&gt;&lt;oil-rig
xml:id="14b_04" water="0.402"/&gt;'));

select e.I, e.XMLVAL.getRootElement().getClobVal()
  from TEST_XMLS as e
  where e.XMLVAL.getRootElement() is not null
I                 callret
INTEGER NOT NULL  NVARCHAR
_______________________________________________________________________________

1                 &lt;emp&gt;&lt;empno&gt;221&lt;/empno&gt;&lt;ename&gt;John&lt;/ename&gt;&lt;/emp&gt;
2                 &lt;po&gt;&lt;pono&gt;331&lt;/pono&gt;&lt;poname&gt;PO_1&lt;/poname&gt;&lt;/po&gt;

2 Rows. -- 00000 msec.

select e.I, e.XMLVAL.getClobVal()
  from TEST_XMLS as e
  where e.XMLVAL.getRootElement() is null
I                 callret
INTEGER NOT NULL  NVARCHAR
_______________________________________________________________________________

3                 &lt;oil-rig
xml:id="14a_05" water="0.413" /&gt;&lt;oil-rig
xml:id="14b_05" water="0.402" /&gt;

1 Rows. -- 00000 msec.
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmltype.getrootelement">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmltype.isfragment">
            <function>XMLType.isFragment()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
