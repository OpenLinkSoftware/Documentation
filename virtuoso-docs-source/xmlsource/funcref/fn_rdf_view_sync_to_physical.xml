<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_rdf_view_sync_to_physical">
      <refmeta>
        <refentrytitle>RDF_VIEW_SYNC_TO_PHYSICAL
</refentrytitle>
        <refmiscinfo>rdf
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>RDF_VIEW_SYNC_TO_PHYSICAL
</refname>
        <refpurpose>This function generates data synchronization triggers and/or actual RDF quad store data
    	from transient Linked Data views. Basically, it enables you share physical and transient Linked
    	Data views typically generated from 3rd party ODBC/JDBC accessible data sources.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_rdf_view_sync_to_physical">
          <funcprototype xml:id="fproto_rdf_view_sync_to_physical">
            <funcdef>
              <function>RDF_VIEW_SYNC_TO_PHYSICAL
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>vgraph
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>load_data
</parameter>

   int := 0
</paramdef>
            <paramdef choice="opt">in 
<parameter>pgraph
</parameter>

   varchar := null
</paramdef>
            <paramdef choice="opt">in 
<parameter>transaction_mode
</parameter>

   int := 1
</paramdef>
            <paramdef choice="opt">in 
<parameter>atomicity
</parameter>

   int := 1
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_rdf_view_sync_to_physical">
        <title>Description
</title>
        <para>This function create new Transient and Materialized View pairs with option (where load = 1/0) to load data
    	or wait for updates -- from triggers at execute time. 0 for non-transaction mode, and atomicity 0/1 determines
    	server accessiblity where 1 indicates inaccessiblity during run. Note: applicable for Virtuoso 6.0 and higher.

</para>
      </refsect1>
      <refsect1 xml:id="params_rdf_view_sync_to_physical">
        <title>Parameters
</title>
        <refsect2>
          <title>vgraph
</title>
          <para>The transient (or virutal) named graph to which synchronization triggers are to be associated, or the actual
      	source of data used to populate a named graph in the quad store.
</para>
        </refsect2>
        <refsect2>
          <title>load_data
</title>
          <para>Flag that determines which operations are performed:
</para>
          <itemizedlist mark="bullet">
            <listitem>
              <para>0 -- only create synchronization triggers;
</para>
            </listitem>
            <listitem>
              <para>1 -- create synchronization triggers and then immediately load data into a designated quad store
        	named graph.

</para>
            </listitem>
          </itemizedlist>
        </refsect2>
        <refsect2>
          <title>pgraph
</title>
          <para>Designated quad store named graph IRI.
</para>
        </refsect2>
        <refsect2>
          <title>transaction_mode
</title>
          <para>Integer values (0, 1, 2, or 3) which determine the transaction mode in place during synchronization.
      	This is basically a call to log_enable () with the same values.
</para>
        </refsect2>
        <refsect2>
          <title>atomicity
</title>
          <para>Enforces atomic mode during data synchronization. This mode of operation performs a checkpoint when
      	completed, and is the recommended behavior for handling transient Linked Data views derived from large
      	SQL large tables.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_rdf_view_sync_to_physical">
        <title>Return Types
</title>
        <para>any
</para>
      </refsect1>
      <refsect1 xml:id="examples_rdf_view_sync_to_physical">
        <title>Examples
</title>
        <example xml:id="ex_rdf_view_sync_to_physical">
          <title> 
  </title>
          <para>Example 1
</para>
          <para>Using the command-line iSQL utility or its variant hosted in the HTML based Conductor, and assuming named
     	graphs denoted by the following IRIs:</para>
          <orderedlist>
            <listitem>
              <para>&lt;http://www.openlinksw.com/schemas/odbcCustomers#&gt; -- a named graph associated with virtual (and transient)
       	 RDF statements (triples) mapped to an ODBC accessible data source e.g., a "Customers" database.
       </para>
            </listitem>
            <listitem>
              <para>&lt;urn:rdf:materialized:view:odbc:Customers&gt; -- a named graph to be associated with RDF statements (triples)
       	 materialized from virtual triples in the designated source named graph.
       </para>
            </listitem>
          </orderedlist>
          <screen>
SQL&gt; RDF_VIEW_SYNC_TO_PHYSICAL ('http://www.openlinksw.com/schemas/odbcCustomers#', 1, 'urn:rdf:materialized:view:odbc:Customers');

# which is equivalent to:

SQL&gt; RDF_VIEW_SYNC_TO_PHYSICAL ('http://www.openlinksw.com/schemas/odbcCustomers#', 1, 'urn:rdf:materialized:view:odbc:Customers', 1, 1);
</screen>
          <para>Example 2
</para>
          <para>A variant of the prior example where with ACID transaction modality enabled:
</para>
          <screen>
SQL&gt; RDF_VIEW_SYNC_TO_PHYSICAL ('http://www.openlinksw.com/schemas/odbcCustomers#', 0, 'urn:rdf:materialized:view:odbc:Customers', 1, 1);
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_rdf_view_sync_to_physical">
        <title>See Also
</title>
        <para>
          <link linkend="fn_rdf_audit_metadata">
            <function>DB.DBA.RDF_AUDIT_METADATA()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_backup_metadata">
            <function>DB.DBA.RDF_BACKUP_METADATA()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_load_rdfxml_mt">
            <function>DB.DBA.RDF_LOAD_RDFXML_MT()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_ttlp">
            <function>DB.DBA.TTLP()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_ttlp_mt">
            <function>DB.DBA.TTLP_MT()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_triples_to_rdf_xml_text">
            <function>DB.DBA.RDF_TRIPLES_TO_RDF_XML_TEXT()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sparql_rexec">
            <function>DB.DBA.SPARQL_REXEC()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sparql_rexec_to_array">
            <function>DB.DBA.SPARQL_REXEC_TO_ARRAY()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_sparql_rexec_with_meta">
            <function>DB.DBA.SPARQL_REXEC_WITH_META()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_quad_uri">
            <function>DB.DBA.RDF_QUAD_URI()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_quad_uri_l_typed">
            <function>DB.DBA.RDF_QUAD_URI_L_TYPED()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_rdf_ttl2hash">
            <function>DB.DBA.RDF_TTL2HASH()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
