<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xenc_pkcs12_export">
      <refmeta>
        <refentrytitle>xenc_pkcs12_export
</refentrytitle>
        <refmiscinfo>hash
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>xenc_pkcs12_export
</refname>
        <refpurpose>Generates a secure Public-Key Cryptography Standards (PKCS#12) file from a PEM (base64 encoded DER) file comprised of an X.509 certificate and an associated Private Key.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xenc_pkcs12_export">
          <funcprototype xml:id="fproto_xenc_pkcs12_export">
            <funcdef>
              <function>xenc_pkcs12_export
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>key_name
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>name
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>pass
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>export_chain
</parameter>

   integer := 0 
</paramdef>
            <paramdef choice="opt">in 
<parameter>additional_certs
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xenc_pkcs12_export">
        <title>Description
</title>
        <para>Generates a secure Public-Key Cryptography Standards (PKCS#12) file from a PEM (base64 encoded DER) file comprised of an X.509 certificate and an associated Private Key.
</para>
      </refsect1>
      <refsect1 xml:id="params_xenc_pkcs12_export">
        <title>Parameters
</title>
        <refsect2>
          <title>key_name
</title>
          <para>Name that identifies private key associated with X.509 certificate.
</para>
        </refsect2>
        <refsect2>
          <title>name
</title>
          <para>Name to used to identify each  pkcs#12 object bundle.
</para>
        </refsect2>
        <refsect2>
          <title>pass
</title>
          <para>A password or pass phrase used to encrypt the pkcs#12 file
</para>
        </refsect2>
        <refsect2>
          <title>export_chain
</title>
          <para>1/0 - to export the certificate chain if there is a such
</para>
        </refsect2>
        <refsect2>
          <title>additional_certs
</title>
          <para>Certificates in PEM format to be added to the bundle even if they are not in the certificate chain stored in
      	the memory object of the certificate
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="examples_xenc_pkcs12_export">
        <title>Examples
</title>
        <example xml:id="ex_xenc_pkcs12_export">
          <title>Persisting a key &amp; certificate
</title>
          <para>The example below persists a key named 'id_rsa' and certificate created for it into user's key space.
      Thus after server restart the key will be available again.</para>
          <programlisting>
USER_KEY_STORE (user, 'id_rsa', 'X.509', 2, '', xenc_pkcs12_export ('id_rsa', 'CA Certificate', ''));
</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xenc_pkcs12_export">
        <title>See Also
</title>
        <para>
          <link linkend="fn_user_key_store">
            <function>user_key_store()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xenc_x509_generate">
            <function>xenc_x509_generate()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xenc_x509_ss_generate">
            <function>xenc_x509_ss_generate()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
