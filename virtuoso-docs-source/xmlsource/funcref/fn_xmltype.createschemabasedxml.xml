<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmltype.createschemabasedxml">
      <refmeta>
        <refentrytitle>XMLType.createSchemaBasedXML
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLType.createSchemaBasedXML
</refname>
        <refpurpose>Returns a copy of the given instance with new schema reference.
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmltype.createschemabasedxml">
          <funcprototype xml:id="fproto_xmltype.createschemabasedxml">
            <funcdef>
              <function>XMLType.createSchemaBasedXML
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>schema_url
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmltype.createschemabasedxml">
        <title>Description
</title>
        <para>The function creates a new instance of XMLType by copying the given one and assigning a new schema URL to it.
    	Parameter <code>schema_url</code>

   specifies a new URL; if it is omitted then a non-schema based instance is created like
    	the <link linkend="fn_xmltype.createnonschemabasedxml"><function>XMLType.createNonSchemaBasedXML()</function></link>

   function.</para>
        <para>The returned copy has an internal "validated" flag set to 0, even if the new URL is equal to the URL of the
    	original instance.
</para>
      </refsect1>
      <refsect1 xml:id="params_xmltype.createschemabasedxml">
        <title>Parameters
</title>
        <refsect2>
          <title>schema_url
</title>
          <para>The location of a schema of a new instance.
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_xmltype.createschemabasedxml">
        <title>Return Types
</title>
        <para>The member function returns a new instance of XMLType.
</para>
      </refsect1>
      <refsect1 xml:id="examples_xmltype.createschemabasedxml">
        <title>Examples
</title>
        <example xml:id="ex_xmltype.createschemabasedxml">
          <title>Converting a non schema-based instance to schema-based one
</title>
          <para>The procedure creates a schema-based copy of a sample non schema-based instance.
</para>
          <screen>
create procedure schema_assignment_test ()
{
  declare orig_instance XMLType;
  declare schema_based_copy XMLType;
  declare PROBE varchar;
  result_names (PROBE);
  orig_instance := XMLType ('&lt;sample-xml/&gt;');
  result (concat (
    '"orig_instance" is declared as non schema-based, URI=',
    cast (orig_instance.getSchemaURL() as varchar) ) );
  schema_based_copy := orig_instance.createSchemaBasedXML (
    'http://www.example.com/test.xsd' );
  result (concat (
    '"schema_based_copy" is schema-based, URI=',
    schema_based_copy.getSchemaURL() ) );
}

schema_assignment_test()
PROBE
VARCHAR
_______________________________________________________________________________

"orig_instance" is declared as non schema-based, URI=
"schema_based_copy" is schema-based, URI=http://www.example.com/test.xsd

2 Rows. -- 00000 msec.
</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmltype.createschemabasedxml">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmltype.createnonschemabasedxml">
            <function>XMLType.createNonSchemaBasedXML()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
