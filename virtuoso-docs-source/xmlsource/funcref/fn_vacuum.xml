<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns="http://docbook.org/ns/docbook" xml:id="fn_vacuum">
  <refmeta>
    <refentrytitle>DB.DBA.VACUUM
    </refentrytitle>
    <refmiscinfo>admin
    </refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>DB.DBA.VACUUM
    </refname>
    <refpurpose>Compact index structures in the database (deprecated since v6)
    </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis xml:id="fsyn_vacuum">
      <funcprototype xml:id="fproto_vacuum">
        <funcdef>
          <function>DB.DBA.VACUUM
          </function>
        </funcdef>
        <paramdef choice="opt">in
          <parameter>table_name
          </parameter>

   varchar (default %)
        </paramdef>
        <paramdef choice="opt">in
          <parameter>index_name
          </parameter>

   varchar (default %)
        </paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 xml:id="desc_vacuum">
    <note>
      <title>Deprecated!</title>
      <para>This index compaction is automatic in Virtuoso version 6 and later.</para>
    </note>
    <note>
      <title>Note:</title>
      <para>This is not the same as compacting the database and may actually make the db file
        larger when run. The preferred way to shrink the database file itself is to perform a
        <link linkend="vdbrecovery">backup-dump/restore-crash-dump</link> cycle.
      </para>
    </note>
    <title>Description
    </title>
    <para>This function reads through the specified tables and indices and finds groups of adjacent index
pages holding data that will fit on fewer pages than it currently occupies. If such an operation can be made,
the pages are thus compacted.</para>
    <para>The compacted pages become part of the committed state and will be written to the checkpoint
space on the next checkpoint.</para>
    <para>The vacuum operation is non-locking and can be run on a busy database. It will simply skip pages
with ongoing activity such as pending cursors or locks. The vacuum procedure returns only after it has read
    through the indices it affects but it will not prevent other activity on the indices.</para>
    <para>The vacuum operation may run out of disk space even if it makes net gains because the modified
pages will not be final until the next checkpoint and the originals will not be free until this same
checkpoint. Manually running a checkpoint after vacuum runs out of space will free the space and
vacuum may be rerun.
    </para>

  </refsect1>
  <refsect1 xml:id="params_vacuum">
    <title>Parameters
    </title>
    <refsect2>
      <title>table_name
      </title>
      <para>This is a LIKE pattern for tables to vacuum. The default is all tables. The name is case
sensitive and must have all the three parts given, e.g. APP.USER.DATA
      </para>
    </refsect2>
    <refsect2>
      <title>index_name
      </title>
      <para>This specifies an individual index to compact. The specified table(s) must have
this index. The index name is a LIKE pattern and if given should match the case and spelling of index
names as returned by the ODBC call SQLStatistics or equivalent, which is also the KEY_NAME column of
SYS_KEYS.
      </para>
    </refsect2>
  </refsect1>
  <refsect1 xml:id="examples_vacuum">
    <title>Examples
    </title>
    <example xml:id="ex_vacuum">
      <title>Simple example
      </title>
      <para>Vacuum the entire database:
      </para>
      <screen>
        SQL&gt; DB.DBA.vacuum ();
      </screen>
    </example>
  </refsect1>
</refentry>
