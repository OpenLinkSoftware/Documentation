<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xml_create_tables_from_mapping_schema_decl">
      <refmeta>
        <refentrytitle>xml_create_tables_from_mapping_schema_decl
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>xml_create_tables_from_mapping_schema_decl
</refname>
        <refpurpose> returns a vector containing strings. Each string is a command to drop
                a table or a foreign key or to create table.

</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xml_create_tables_from_mapping_schema_decl">
          <funcprototype xml:id="fproto_xml_create_tables_from_mapping_schema_decl">
            <funcdef>
              <function>xml_create_tables_from_mapping_schema_decl
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>base_uri
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>mapping_schema_file
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>content_encoding
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>content_language
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_64">
        <title>Description
</title>
        <para><function>xml_create_tables_from_mapping_schema_decl
</function>

   takes a file containing mapping schema and
         returns a vector containing strings. Each string is a command to drop a table or a foreign key or to
        create table. All tables and fields are mentioned in the mapping schema. If a field type is not defined in
        the mapping schema, the VARCHAR type is used. 
</para>
      </refsect1>
      <refsect1 xml:id="params_28">
        <title>Parameters
</title>
        <refsect2>
          <title>base_uri
</title>
          <para>in HTML parser mode change all absolute references to relative from given base_uri (http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;)
</para>
        </refsect2>
        <refsect2>
          <title>mapping_schema_file
</title>
          <para>well formed XML document containing a mapping schema
</para>
        </refsect2>
        <refsect2>
          <title>content_encoding
</title>
          <para>string with content encoding type of &lt;document&gt;; valid are 'ASCII', 'ISO', 'UTF8', 'ISO8859-1', 'LATIN-1' etc., defaults are 'UTF-8' for XML mode and 'LATIN-1' for HTML mode
</para>
        </refsect2>
        <refsect2>
          <title>content_language
</title>
          <para>string with language tag of content of &lt;document&gt;; valid names are listed in IETF RFC 1766, default is 'x-any' (it means 'mix of words from various human languages)
</para>
        </refsect2>
      </refsect1>
      <refsect1 xml:id="ret_07_01">
        <title>Return Types
</title>
        <para>A vector containing strings
</para>
      </refsect1>
      <refsect1 xml:id="examples_13_01">
        <title> 
  </title>
        <example xml:id="ex_xml_create_tables_from_mapping_schema_decl">
          <title>Extracting tables from mapping schema
</title>
          <para>Let we have the following mapping schema in the catmp.xsd file
</para>
          <programlisting>
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:sql="urn:schemas-microsoft-com:mapping-schema"&gt;
&lt;xsd:annotation&gt;
  &lt;xsd:appinfo&gt;
    &lt;sql:relationship name="CategoryProduct"
          parent="Demo.demo.Categories"
          parent-key="CategoryID"
          child="Demo.demo.Products"
          child-key="CategoryID" /&gt;
  &lt;/xsd:appinfo&gt;
&lt;/xsd:annotation&gt;

  &lt;xsd:element name="category" sql:relation="Demo.demo.Categories" type="CategoryType" /&gt;
   &lt;xsd:complexType name="CategoryType" &gt;
     &lt;xsd:sequence&gt;
        &lt;xsd:element name="product"
                     sql:relation="Demo.demo.Products"
                     sql:relationship="CategoryProduct" &gt;
           &lt;xsd:complexType&gt;
              &lt;xsd:attribute name="ProductName" type="xsd:string" /&gt;
           &lt;/xsd:complexType&gt;
        &lt;/xsd:element&gt;
     &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="CategoryID"  type="xsd:integer" /&gt;
        &lt;xsd:attribute name="description"  sql:field="Description"  type="xsd:string" /&gt;
    &lt;/xsd:complexType&gt;
&lt;/xsd:schema&gt;
</programlisting>
          <para>the _result vector after the call</para>
          <programlisting>
_result := xml_create_tables_from_mapping_schema_decl (
  'http://localhost.localdomain/xmlrepository',
  'catmp.xsd', 'UTF-8', 'x-any');
</programlisting>
          <para>will contain the following six strings</para>
          <programlisting>
drop table "Demo"."demo"."Categories",

ALTER TABLE "Demo"."demo"."Products" DROP CONSTRAINT "Demo.demo.Products_Demo.demo.Categories_FK",

drop table "Demo"."demo"."Products",

create table "Demo"."demo"."Categories"
("Description"  VARCHAR, "CategoryID" INTEGER, PRIMARY KEY ("CategoryID")),

create table "Demo"."demo"."Products" ("CategoryID"  INTEGER, "ProductName"  VARCHAR),

ALTER TABLE "Demo"."demo"."Products" ADD CONSTRAINT "Demo.demo.Products_Demo.demo.Categories_FK"
FOREIGN KEY ("CategoryID") REFERENCES "Demo"."demo"."Categories" ("CategoryID")

</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_37">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xml_load_mapping_schema_decl">
            <function>xml_load_mapping_schema_decl()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xml_load_schema_decl">
            <function>xml_load_schema_decl()
</function>
          </link>
        </para>
        <para>
          <link linkend="fn_xml_view_schema">
            <function>xml_view_schema()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
