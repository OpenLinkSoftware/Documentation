<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xmlattributes">
      <refmeta>
        <refentrytitle>XMLATTRIBUTES
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>XMLATTRIBUTES
</refname>
        <refpurpose>Creates a list of attributes and their values
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xmlattributes">
          <funcprototype xml:id="fproto_xmlattributes">
            <funcdef>
              <function>XMLATTRIBUTES
</function>
            </funcdef>
            <paramdef choice="opt"><parameter>string_expr1 [AS alias1]
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt"><parameter>string_expr2 [AS alias2]
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">
              <parameter>...
</parameter>
            </paramdef>
            <paramdef choice="opt"><parameter>string_exprN [AS aliasN]
</parameter>

   varchar
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xmlattributes">
        <title>Description
</title>
        <para>
   This function creates a vector that may be used only as argument of 
   <function>XMLELEMENT</function>

   function. The vector has an even number of elements, each odd element is a name of an attribute, an
   even element is its value. If the attribute value is NULL, then no attribute and no value is created.
   If none of the attribute is created, then the function returns NULL.
   If string_expr is a column name, then you can omit the AS clause, and Virtuoso uses the partially escaped form of 
   the column name as the attribute name. 

</para>
      </refsect1>
      <refsect1 xml:id="xmlattributes">
        <title>Parameters
</title>
        <refsect2>
          <title>String_exprI [AS aliasI]
</title>
          <para>string value; AS clause is mandatory if it is not a column name but an expression of some other sort.
</para>
        </refsect2>
      </refsect1>
      <!--
  <refsect1
xml:id="errors_xmlattributes">
    <title>Errors</title>
    <table><title>Errors signalled by <function>XMLATTRIBUTES</function></title>
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry>SQLState</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><errorcode>37000</errorcode></entry>
	    <entry><errorcode>SQ074</errorcode></entry>
	    <entry><errortext>The special SQL predicate has invalid argument</errortext></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para></para>
  </refsect1>
-->

      <refsect1 xml:id="xmlattributes_01">
        <title>Examples
</title>
        <example xml:id="ex_xmlattributes">
          <title>XMLATTRIBUTES() with two parameters
</title>
          <para>The following example produces an 'EmpName' elements with two attributes (if value of the column 'Region' is not NULL) or 
with one attribute (if value of the column 'Region' is NULL) </para>
          <screen>
select XMLELEMENT ("EmpName",
                    XMLATTRIBUTES ("FirstName" || ' ' || "LastName" as "Name", "Region" ))
  from "Demo"."demo"."Employees";
callret
VARCHAR
_______________________________________________________________________________
&lt;EmpName Name="Nancy Davolio" Region="WA" /&gt;
&lt;EmpName Name="Andrew Fuller" Region="WA" /&gt;
&lt;EmpName Name="Janet Leverling" Region="WA" /&gt;
&lt;EmpName Name="Margaret Peacock" Region="WA" /&gt;
&lt;EmpName Name="Steven Buchanan" /&gt;
&lt;EmpName Name="Michael Suyama" /&gt;
&lt;EmpName Name="Robert King" /&gt;
&lt;EmpName Name="Laura Callahan" Region="WA" /&gt;
&lt;EmpName Name="Anne Dodsworth" /&gt;

9 Rows. 

</screen>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xmlattributes">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xmlelement">XMLELEMENT()
</link>
        </para>
        <para>
          <link linkend="fn_xmlforest">XMLFOREST()
</link>
        </para>
        <para>
          <link linkend="fn_xmlagg">XMLAGG()
</link>
        </para>
        <para>
          <link linkend="fn_xmlconcat">XMLCONCAT()
</link>
        </para>
      </refsect1>
    </refentry>
