<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="fn_xslt_sheet">
      <refmeta>
        <refentrytitle>xslt_sheet
</refentrytitle>
        <refmiscinfo>xml
</refmiscinfo>
      </refmeta>
      <refnamediv>
        <refname>xslt_sheet
</refname>
        <refpurpose>declares an XSL stylesheet for use
</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis xml:id="fsyn_xslt_sheet">
          <funcprototype xml:id="fproto_xslt_sheet">
            <funcdef>
              <function>xslt_sheet
</function>
            </funcdef>
            <paramdef choice="opt">in 
<parameter>uri
</parameter>

   varchar
</paramdef>
            <paramdef choice="opt">in 
<parameter>entity
</parameter>

   any
</paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1 xml:id="desc_xslt_sheet">
        <title>Description
</title>
        <para>
This function takes a name and the root element of a parsed XML
document and defines these as a stylesheet. The unique element child
of the entity object's document should be an xsl:stylesheet
element. Included or imported stylesheets will be located relative to
the base URI of the entity passed to
<function>xslt_sheet()</function>

  . Once a stylesheet thus defined it
can be used as the stylesheet argument of xslt.

</para>
      </refsect1>
      <refsect1 xml:id="params_xslt_sheet">
        <title>Parameters
</title>
        <refsect2>
          <title>uri
</title>
          <para>The location of the XSLT style sheet
</para>
        </refsect2>
        <refsect2>
          <title>entity
</title>
          <para>A valid XSL style sheet, XML entity parsed using the 
<function>xml_tree_doc()
</function>

   function
</para>
        </refsect2>
      </refsect1>
      <!--
  <refsect1
xml:id="ret_xslt_sheet"><title>Return Types</title><para></para></refsect1>
  <refsect1
xml:id="errors_xslt_sheet"><title>Errors</title>
    <table><title>Errors signalled by</title>
      <tgroup cols="4">
      <thead>
	  <row><entry>SQL State</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry></row>
     </thead>
	<tbody>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode></errorcode></entry>
	    <entry><errortext></errortext></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
-->

      <refsect1 xml:id="examples_xslt_sheet">
        <title>Examples
</title>
        <example xml:id="ex_xslt_sheet">
          <title>Preparing a Style Sheet from the File System
</title>
          <para>
The <function>xslt_view()</function>

   function first defines the style
sheet from a file. The <function>xslt_sheet()</function>

   function is
called with the name and the root element of the parsed file.
<function>xslt_view()</function>

   next gets the string to process,
parses the string as XML and converts the parse tree into an entity
object. This is then passed to the <function>xslt()</function>

function. The result is another entity object. This is finally
serialized as XML text and written into the file
<parameter>xslt.out</parameter>

  .
</para>
          <programlisting>
create procedure xslt_view (in v varchar, in xst varchar)
{
  declare str, r varchar;
  xslt_sheet (xst, xml_tree_doc (xml_tree  (file_to_string (xst))));
  str := xml_view_string (v);
  r := xslt (xst, xml_tree_doc (xml_tree (str)));
  declare str any;
  str := string_output ();
  http_value (r, 0, str);
  string_to_file ('xslt.out', string_output_string (str), 0);
}

</programlisting>
        </example>
      </refsect1>
      <refsect1 xml:id="seealso_xslt_sheet">
        <title>See Also
</title>
        <para>
          <link linkend="fn_xml_tree_doc">
            <function>xml_tree_doc()
</function>
          </link>
        </para>
      </refsect1>
    </refentry>
