<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vcrvirtdatareadrclass">
          <title>VirtuosoDataReader Class</title>
          <para>Provides a means of reading a forward-only stream of rows from a Virtuoso database. This class cannot
be inherited.</para>
          <simplelist type="vert">
            <member>System.Object</member>
            <member>   System.MarshalByRefObject</member>
            <member>      VirtuosoDataReader</member>
          </simplelist>
          <classsynopsis class="class">
            <ooclass>
              <modifier>public</modifier>
              <modifier>sealed</modifier>
              <modifier>class</modifier>
              <classname>VirtuosoDataReader</classname>
            </ooclass>
            <ooclass>
              <classname>MarshalByRefObject</classname>
            </ooclass>
            <oointerface>
              <interfacename>IDataReader</interfacename>
            </oointerface>
            <oointerface>
              <interfacename>IDataRecord</interfacename>
            </oointerface>
            <oointerface>
              <interfacename>IDisposable</interfacename>
            </oointerface>
            <oointerface>
              <interfacename>IEnumerable</interfacename>
            </oointerface>
          </classsynopsis>
          <section>
            <title>Thread Safety</title>
            <para>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations.
Any instance members are not guaranteed to be thread safe.</para>
          </section>
          <section>
            <title>Remarks</title>
            <para>To create a VirtuosoDataReader, you must call the ExecuteReader method of the VirtuosoCommand object,
rather than directly using a constructor.</para>
            <para>Changes made to a resultset by another process or thread while data is being read may be visible to
the user of the VirtuosoDataReader. However, the precise behavior is both driver and timing dependent.</para>
            <para>IsClosed and RecordsAffected are the only properties that you can call after the VirtuosoDataReader
is closed. In some cases, you must call Close before you can call RecordsAffected.</para>
          </section>
          <section>
            <title>Properties</title>
            <section>
              <title>Depth Property</title>
              <para>Gets a value indicating the depth of nesting for the current row.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <varname>Depth</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The depth of nesting for the current row.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataReader.Depth</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The outermost table has a depth of zero. The Virtuoso .NET Data Provider does not support
nesting and always returns zero.</para>
              </section>
            </section>
            <section>
              <title>FieldCount Property</title>
              <para>Gets the number of columns in the current row.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <varname>FieldCount</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>When not positioned in a valid record set, 0; otherwise the number of columns in the current record.
The default is -1.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.FieldCount</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>After executing a query that does not return rows, FieldCount returns 0.</para>
              </section>
            </section>
            <section>
              <title>IsClosed Property</title>
              <para>Gets a value indicating whether the data reader is closed.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>bool</type>
                <varname>IsClosed</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para><literal>true</literal>

   if the VirtuosoDataReader is closed; otherwise,
<literal>false</literal>

  .</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataReader.IsClosed</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>IsClosed and RecordsAffected are the only properties that you can call after the
VirtuosoDataReader is closed.</para>
              </section>
            </section>
            <section>
              <title>Item Property</title>
              <section>
                <title>Item Property (int)</title>
                <para>Gets the value of the specified column in its native format given the column ordinal.</para>
                <fieldsynopsis>
                  <modifier>public</modifier>
                  <type>object</type>
                  <varname>this[int i]</varname>
                </fieldsynopsis>
                <section>
                  <title>Parameters</title>
                  <variablelist>
                    <varlistentry>
                      <term>i</term>
                      <listitem>
                        <para>The zero-based column ordinal.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </section>
                <section>
                  <title>Property Value</title>
                  <para>The value of the specified column in its native format.</para>
                </section>
                <section>
                  <title>Implements</title>
                  <para>IDataRecord.Item</para>
                </section>
              </section>
              <section>
                <title>Item Property (string)</title>
                <para>Gets the value of the specified column in its native format given the column name.</para>
                <fieldsynopsis>
                  <modifier>public</modifier>
                  <type>object</type>
                  <varname>this[string name]</varname>
                </fieldsynopsis>
                <section>
                  <title>Parameters</title>
                  <variablelist>
                    <varlistentry>
                      <term>name</term>
                      <listitem>
                        <para>The column name.</para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </section>
                <section>
                  <title>Property Value</title>
                  <para>The value of the specified column in its native format.</para>
                </section>
                <section>
                  <title>Implements</title>
                  <para>IDataRecord.Item</para>
                </section>
              </section>
            </section>
            <section>
              <title>RecordsAffected Property</title>
              <para>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <varname>RecordsAffected</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement
failed; and -1 for SELECT statements.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataReader.RecordsAffected</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>IsClosed and RecordsAffected are the only properties that you can call after the
VirtuosoDataReader is closed.</para>
              </section>
            </section>
          </section>
          <section>
            <title>Methods</title>
            <section>
              <title>Close Method</title>
              <para>Closes the VirtuosoDataReader object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Close</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDataReader.Close</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>You must explicitly call the Close method when you are through using the VirtuosoDataReader
to use the associated VirtuosoConnection for any other purpose.</para>
                <para>The Close method fills in the values for output parameters, return values and RecordsAffected.</para>
              </section>
            </section>
            <section>
              <title>GetBoolean Method</title>
              <para>Gets the value of the specified column as a Boolean.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>bool</type>
                <methodname>GetBoolean</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>A Boolean that is the value of the column.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetBoolean</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetByte Method</title>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>byte</type>
                <methodname>GetByte</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a byte.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetByte</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetBytes Method</title>
              <para>Reads a stream of bytes from the specified column offset into the buffer as an array,
starting at the given buffer offset.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>long</type>
                <methodname>GetBytes</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>long</type>
                  <parameter>fieldOffset</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>byte[]</type>
                  <parameter>buffer</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>bufferOffset</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>length</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>fieldOffset</term>
                    <listitem>
                      <para>
		    The index within the field from which to begin the read operation.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>buffer</term>
                    <listitem>
                      <para>
		    The buffer into which to read the stream of bytes.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>bufferOffset</term>
                    <listitem>
                      <para>
		    The index for buffer to begin the read operation.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>length</term>
                    <listitem>
                      <para>
		    The number of bytes to read.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The actual number of bytes read.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetBytes</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>GetBytes returns the number of available bytes in the field. In most cases this is the exact
length of the field. However, the number returned may be less than the true length of the field if GetBytes has
already been used to obtain bytes from the field. This may be the case, for example, if the VirtuosoDataReader is
reading a large data structure into a buffer. For more information, see the SequentialAccess setting of
System.Data.CommandBehavior in the Microsoft® .NET Framework SDK documentation.</para>
                <para>If you pass a buffer that is a null value, GetBytes returns the length of the field in bytes.</para>
              </section>
            </section>
            <section>
              <title>GetChar Method</title>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>char</type>
                <methodname>GetChar</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a character.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetChar</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetChars Method</title>
              <para>Reads a stream of characters from the specified column offset into the buffer as an array,
starting at the given buffer offset.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>long</type>
                <methodname>GetChars</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>long</type>
                  <parameter>fieldOffset</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>char[]</type>
                  <parameter>buffer</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>bufferOffset</parameter>
                </methodparam>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>length</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>fieldOffset</term>
                    <listitem>
                      <para>
		    The index within the field from which to begin the read operation.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>buffer</term>
                    <listitem>
                      <para>
		    The buffer into which to copy data..
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>bufferOffset</term>
                    <listitem>
                      <para>
		    The index for buffer to begin the read operation.
		  </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term>length</term>
                    <listitem>
                      <para>
		    The number of characters to read.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The actual number of characters read.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetChars</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>GetChars returns the number of available characters in the field. In most cases this is the
exact length of the field. However, the number returned may be less than the true length of the field if GetChars
has already been used to obtain characters from the field. This may be the case, for example, if the
VirtuosoDataReader is reading a large data structure into a buffer. For more information, see the SequentialAccess
setting of System.Data.CommandBehavior in the Microsoft® .NET Framework SDK documentation.</para>
                <para>If you pass a buffer that is a null value. GetChars returns the length of the field in
characters.</para>
              </section>
            </section>
            <section>
              <title>GetData Method</title>
              <para>Not currently supported.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>IDataReader</type>
                <methodname>GetData</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetData</para>
              </section>
            </section>
            <section>
              <title>GetDataTypeName Method</title>
              <para>Gets the name of the source data type.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <methodname>GetDataTypeName</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The name of the source data type.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetDataTypeName</para>
              </section>
            </section>
            <section>
              <title>GetDateTime Method</title>
              <para>Gets the value of the specified column as a DateTime object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>DateTime</type>
                <methodname>GetDateTime</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a DateTime object.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetDateTime</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetDecimal Method</title>
              <para>Gets the value of the specified column as a Decimal object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>decimal</type>
                <methodname>GetDecimal</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a Decimal object.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetDecimal</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetDouble Method</title>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>double</type>
                <methodname>GetDouble</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a double-precision floating point number.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetDouble</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetFieldType Method</title>
              <para>Gets the Type that is the data type of the object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>Type</type>
                <methodname>GetFieldType</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The Type that is the data type of the object.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetFieldType</para>
              </section>
            </section>
            <section>
              <title>GetFloat Method</title>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>float</type>
                <methodname>GetFloat</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a single-precision floating-point number.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetFloat</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetGuid Method</title>
              <para>Gets the value of the specified column as a globally-unique identifier (GUID).</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>Guid</type>
                <methodname>GetGuid</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a GUID.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetGuid</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetInt16 Method</title>
              <para>Gets the value of the specified column as a 16-bit signed integer.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>short</type>
                <methodname>GetInt16</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a 16-bit signed integer.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetInt16</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetInt32 Method</title>
              <para>Gets the value of the specified column as a 32-bit signed integer</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <methodname>GetInt32</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a 32-bit signed integer.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetInt32</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetInt64 Method</title>
              <para>Gets the value of the specified column as a 64-bit signed integer.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>long</type>
                <methodname>GetInt64</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a 64-bit signed integer.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetInt64</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetName Method</title>
              <para>Gets the name of the specified column.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <methodname>GetName</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>A string that is the name of the specified column.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetName</para>
              </section>
            </section>
            <section>
              <title>GetOrdinal Method</title>
              <para>Gets the column ordinal, given the name of the column.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <methodname>GetOrdinal</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>string</type>
                  <parameter>name</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>name</term>
                    <listitem>
                      <para>
		    The name of the column.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The zero-based column ordinal.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetOrdinal</para>
              </section>
              <!--

<section>
	      <title>Remarks</title>

GetOrdinal performs a case-sensitive lookup first. If it fails, a second case-insensitive search is made.

GetOrdinal is kana-width insensitive.

Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call GetOrdinal within a loop. Save time by calling GetOrdinal once and assigning the results to an integer variable for use within the loop.

	    </section>
-->

            </section>
            <section>
              <title>GetSchemaTable Method</title>
              <para>Returns a DataTable that describes the column metadata of the VirtuosoDataReader.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>DataTable</type>
                <methodname>GetSchemaTable</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>A DataTable that describes the column metadata.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataReader.GetSchemaTable</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>For the GetSchemaTable method returns metadata about each column in the following order:</para>
                <table>
                  <title/>
                  <tgroup cols="2">
                    <thead>
                      <row>
                        <entry>DataReader Column</entry>
                        <entry>Description</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>ColumnName</entry>
                        <entry>The name of the column; this might not be unique. If the column name cannot be determined,
a null value is returned. This name always reflects the most recent naming of the column in the current view or command
text.</entry>
                      </row>
                      <row>
                        <entry>ColumnOrdinal</entry>
                        <entry>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other
columns are numbered starting with one. This column cannot contain a null value.</entry>
                      </row>
                      <row>
                        <entry>ColumnSize</entry>
                        <entry>The maximum possible length of a value in the column. For columns that use a fixed-length
data type, this is the size of the data type.</entry>
                      </row>
                      <row>
                        <entry>NumericPrecision</entry>
                        <entry>If ProviderType is a numeric data type, this is the maximum precision of the column.
The precision depends on the definition of the column. If ProviderType is not a numeric data type, this is a null
value.</entry>
                      </row>
                      <row>
                        <entry>NumericScale</entry>
                        <entry>If ProviderType is decimal, the number of digits to the right of the decimal point.
Otherwise, this is a null value.</entry>
                      </row>
                      <row>
                        <entry>DataType</entry>
                        <entry>Maps to the .Net Framework type of the column.</entry>
                      </row>
                      <row>
                        <entry>ProviderType</entry>
                        <entry>The indicator of the column's data type. If the data type of the column varies from
row to row, this must be Object. This column cannot contain a null value.</entry>
                      </row>
                      <row>
                        <entry>IsLong</entry>
                        <entry>Set if the column contains a Binary Long Object (BLOB) that contains very long data.</entry>
                      </row>
                      <row>
                        <entry>AllowDBNull</entry>
                        <entry>Set if the consumer can set the column to a null value or if the provider cannot determine
whether or not the consumer can set the column to a null value. Otherwise, not set. A column may contain null values,
even if it cannot be set to a null value.</entry>
                      </row>
                      <row>
                        <entry>IsReadOnly</entry>
                        <entry><literal>true</literal>

   if the column can be modified; otherwise
<literal>false</literal>

  .</entry>
                      </row>
                      <row>
                        <entry>IsRowVersion</entry>
                        <entry/>
                      </row>
                      <row>
                        <entry>IsUnique</entry>
                        <entry><literal>true</literal>

  : No two rows in the base table-the table returned in
BaseTableName-can have the same value in this column. IsUnique is guaranteed to be true if the column
constitutes a key by itself or if there is a constraint of type UNIQUE that applies only to this column.
<literal>false</literal>

  : The column can contain duplicate values in the base table. The default of this
column is <literal>false</literal>

  .</entry>
                      </row>
                      <row>
                        <entry>IsKey</entry>
                        <entry><literal>true</literal>

  : The column is one of a set of columns in the rowset that,
taken together, uniquely identify the row. The set of columns with IsKey set to <literal>true</literal>

   must
uniquely identify a row in the rowset. There is no requirement that this set of columns is a minimal set of
columns. This set of columns may be generated from a base table primary key, a unique constraint or a unique
index. <literal>false</literal>

  : The column is not required to uniquely identify the row.</entry>
                      </row>
                      <row>
                        <entry>IsAutoIncrement</entry>
                        <entry><literal>true</literal>

  : The column assigns values to new rows in fixed increments.
<literal>false</literal>

  : The column does not assign values to new rows in fixed increments. The default of this
column is <literal>false</literal>

  .</entry>
                      </row>
                      <row>
                        <entry>BaseSchemaName</entry>
                        <entry>The name of the schema in the data store that contains the column. A null value if
the base schema name cannot be determined. The default of this column is a null value.</entry>
                      </row>
                      <row>
                        <entry>BaseCatalogName</entry>
                        <entry>The name of the catalog in the data store that contains the column. NULL if the base
catalog name cannot be determined. The default of this column is a null value.</entry>
                      </row>
                      <row>
                        <entry>BaseTableName</entry>
                        <entry>The name of the table or view in the data store that contains the column. A null value
if the base table name cannot be determined. The default of this column is a null value.</entry>
                      </row>
                      <row>
                        <entry>BaseColumnName</entry>
                        <entry>The name of the column in the data store. This might be different than the column name
returned in the ColumnName column if an alias was used. A null value if the base column name cannot be determined or
if the rowset column is derived, but not identical to, a column in the data store. The default of this column is
a null value.</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
              </section>
            </section>
            <section>
              <title>GetString Method</title>
              <para>Gets the value of the specified column as a string.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <methodname>GetString</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value of the specified column as a string.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetString</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Call IsDBNull to check for null values before calling this method.</para>
              </section>
            </section>
            <section>
              <title>GetValue Method</title>
              <para>Gets the value of the column at the specified ordinal in its native format.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>object</type>
                <methodname>GetValue</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The value to return.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetValue</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>This method returns DBNull for null database columns.</para>
              </section>
            </section>
            <section>
              <title>GetValues Method</title>
              <para>Gets all the attribute columns in the current row.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <methodname>GetValues</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>object[]</type>
                  <parameter>values</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>values</term>
                    <listitem>
                      <para>
		    An array of type Object into which to copy the attribute columns.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>The number of instances of Object in the array.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.GetValues</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>For most applications, the GetValues method provides an efficient means for retrieving
all columns, rather than retrieving each column individually.</para>
                <para>You can pass an Object array that contains fewer than the number of columns contained
in the resulting row. Only the amount of data the Object array holds is copied to the array. You can also
pass an Object array whose length is more than the number of columns contained in the resulting row.</para>
                <para>This method returns DBNull for null database columns.</para>
              </section>
            </section>
            <section>
              <title>IDisposable.Dispose Method</title>
              <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended to be
used directly from your code.</para>
              <methodsynopsis>
                <void/>
                <methodname>IDisposable.Dispose</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>IEnumerable.GetEnumerator Method</title>
              <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended to be
used directly from your code.</para>
              <methodsynopsis>
                <type>IEnumerable</type>
                <methodname>IEnumerable.GetEnumerator</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>IsDBNull Method</title>
              <para>Gets a value indicating whether the column contains non-existent or missing values.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>bool</type>
                <methodname>IsDBNull</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>int</type>
                  <parameter>i</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>i</term>
                    <listitem>
                      <para>
		    The zero-based column ordinal.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para><literal>true</literal>

   if the specified column value is equivalent to DBNull;
otherwise, <literal>false</literal>

  .</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataRecord.IsDBNull</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>To avoid raising an error, call this method to check for null column values before calling
the typed Get methods (for example, GetByte, GetChar, and so on).</para>
              </section>
            </section>
            <section>
              <title>NextResult Method</title>
              <para>Advances the VirtuosoDataReader to the next result, when reading the results
of batch SQL statements.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>bool</type>
                <methodname>NextResult</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para><literal>true</literal>

   if there are more result sets; otherwise, <literal>false</literal>

  .</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataReader.NextResult</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Used to process multiple results, which can be generated by executing batch SQL statements.</para>
                <para>By default, the VirtuosoDataReader is positioned on the first result.</para>
              </section>
            </section>
            <section>
              <title>Read Method</title>
              <para>Advances the VirtuosoDataReader to the next record.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>bool</type>
                <methodname>Read</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para><literal>true</literal>

   if there are more rows; otherwise, <literal>false</literal>

  .</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDataReader.Read</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The default position of the VirtuosoDataReader is prior to the first record. Therefore,
you must call Read to begin accessing any data.</para>
              </section>
            </section>
          </section>
        </section>
