<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vcrvirttransclass">
          <title>VirtuosoTransaction Class</title>
          <para>Represents a transaction to be made at a Virtuoso database. This class cannot be inherited.</para>
          <simplelist type="vert">
            <member>System.Object</member>
            <member>   System.MarshalByRefObject</member>
            <member>      VirtuosoTransaction</member>
          </simplelist>
          <classsynopsis class="class">
            <ooclass>
              <modifier>public</modifier>
              <modifier>sealed</modifier>
              <modifier>class</modifier>
              <classname>VirtuosoTransaction</classname>
            </ooclass>
            <ooclass>
              <classname>MarshalByRefObject</classname>
            </ooclass>
            <oointerface>
              <interfacename>IDbTransaction</interfacename>
            </oointerface>
            <oointerface>
              <interfacename>IDisposable</interfacename>
            </oointerface>
          </classsynopsis>
          <section>
            <title>Thread Safety</title>
            <para>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations.
Any instance members are not guaranteed to be thread safe.</para>
          </section>
          <section>
            <title>Remarks</title>
            <para>The application creates a VirtuosoTransaction object by calling BeginTransaction on
the VirtuosoConnection object. All subsequent operations associated with the transaction (for example,
committing or aborting the transaction), are performed on the VirtuosoTransaction object.</para>
          </section>
          <section>
            <title>Properties</title>
            <section>
              <title>Connection</title>
              <para>Gets the VirtuosoConnection object associated with the transaction.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoConnection</type>
                <varname>Connection</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The VirtuosoConnection object to associate with the transaction.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>A single application may have multiple database connections, each with zero or more transactions.
This property enables you to determine the connection object associated with a particular transaction.</para>
              </section>
            </section>
            <section>
              <title>IsolationLevel</title>
              <para>Specifies the IsolationLevel for this transaction</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>IsolationLevel</type>
                <varname>IsolationLevel</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The IsolationLevel for this transaction.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbTransaction.IsolationLevel</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Parallel transactions are not supported. Therefore, the IsolationLevel applies
to the entire transaction.</para>
              </section>
            </section>
          </section>
          <section>
            <title>Methods</title>
            <section>
              <title>Commit Method</title>
              <para>Commits the database transaction.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Commit</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>Dispose Method</title>
              <para>Releases the unmanaged resources used by the VirtuosoTransaction and optionally
releases the managed resources.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Dispose</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDisposable.Dispose</para>
              </section>
            </section>
            <section>
              <title>Rollback Method</title>
              <para>Rolls back a transaction from a pending state.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Rollback</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDbTransaction.Rollback</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The transaction can be rolled back only from a pending state
(after BeginTransaction has been called, but before Commit is called).</para>
              </section>
            </section>
          </section>
        </section>
