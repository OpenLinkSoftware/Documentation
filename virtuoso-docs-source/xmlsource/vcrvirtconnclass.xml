<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vcrvirtconnclass">
          <title>VirtuosoConnection Class</title>
          <para>Represents an open connection to a Virtuoso database. This class cannot be inherited.</para>
          <simplelist type="vert">
            <member>System.Object</member>
            <member>   System.MarshalByRefObject</member>
            <member>      System.ComponentModel.Component</member>
            <member>         VirtuosoConnection</member>
          </simplelist>
          <classsynopsis class="class">
            <ooclass>
              <modifier>public</modifier>
              <modifier>sealed</modifier>
              <modifier>class</modifier>
              <classname>VirtuosoConnection</classname>
            </ooclass>
            <ooclass>
              <classname>Component</classname>
            </ooclass>
            <oointerface>
              <interfacename>ICloneable</interfacename>
            </oointerface>
            <oointerface>
              <interfacename>IDbConnection</interfacename>
            </oointerface>
          </classsynopsis>
          <section>
            <title>Thread Safety</title>
            <para>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations.
Any instance members are not guaranteed to be thread safe.</para>
          </section>
          <section>
            <title>Remarks</title>
            <para>A VirtuosoConnection object represents a unique session to a Virtuoso database server.</para>
            <para>The VirtuosoConnection object uses native resources such as network connection handles.
You should always explicitly close any open VirtuosoConnection objects by calling Close or Dispose before
the VirtuosoConnection object goes out of scope. Not doing so leaves the freeing of these native resources
to garbage collection, which may not free them immediately. This, in turn, may eventually cause the
underlying driver to run out of resources or reach a maximum limit, resulting in sporadic failures.
For example, you might encounter Maximum Connections-related errors while a number of connections are
waiting to be deleted by the garbage collector. Explicitly closing the connections by calling Close or
Dispose allows a more efficient use of native resources, enhancing scalability and improving overall
application performance.</para>
          </section>
          <section>
            <title>VirtuosoConnection Constructor</title>
            <para>Initializes a new instance of the VirtuosoConnection class.</para>
            <section>
              <title>VirtuosoConnection Constructor ()</title>
              <para>Initializes a new instance of the VirtuosoConnection class.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoConnection</methodname>
                <void/>
              </constructorsynopsis>
              <section>
                <title>Remarks</title>
                <para>When a new instance of VirtuosoConnection is created, the read/write properties are set
to the following initial values unless they are specifically set using their associated keywords in the
ConnectionString property.</para>
                <table>
                  <title/>
                  <tgroup cols="2">
                    <thead>
                      <row>
                        <entry>Properties</entry>
                        <entry>Initial Value</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>ConnectionString</entry>
                        <entry>empty string ("")</entry>
                      </row>
                      <row>
                        <entry>ConnectionTimeout</entry>
                        <entry>15</entry>
                      </row>
                      <row>
                        <entry>Database</entry>
                        <entry>empty string ("")</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
                <para>You can change the value for these properties only by using the ConnectionString property</para>
              </section>
            </section>
            <section>
              <title>VirtuosoConnection Constructor (string)</title>
              <para>Initializes a new instance of the VirtuosoConnection class with the specified connection string.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoConnection</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>string</type>
                  <parameter>connectionString</parameter>
                </methodparam>
              </constructorsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>connectionString</term>
                    <listitem>
                      <para>
		    The connection used to open the Virtuoso database.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Remarks</title>
                <para>When a new instance of VirtuosoConnection is created, the read/write properties are set
to the following initial values unless they are specifically set using their associated keywords in the
ConnectionString property.</para>
                <table>
                  <title/>
                  <tgroup cols="2">
                    <thead>
                      <row>
                        <entry>Properties</entry>
                        <entry>Initial Value</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>ConnectionString</entry>
                        <entry>connectionString</entry>
                      </row>
                      <row>
                        <entry>ConnectionTimeout</entry>
                        <entry>15</entry>
                      </row>
                      <row>
                        <entry>Database</entry>
                        <entry>empty string ("")</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
                <para>You can change the value for these properties only by using the ConnectionString property</para>
              </section>
            </section>
          </section>
          <section>
            <title>Properties</title>
            <section>
              <title>ConnectionString Property</title>
              <para>Gets or sets the string used to open a Virtuoso database.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <varname>ConnectionString</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The connection string that includes the source database name, and other parameters
needed to establish the initial connection. The default value is an empty string.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbConnection.ConnectionString</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The ConnectionString is similar to an OLE DB connection string, but is not identical.
Unlike OLE DB or ADO, the connection string that is returned is the same as the user-set ConnectionString
minus security information if the <varname>Persist Security</varname>

   Info value is set to
<literal>false</literal>

   (default). The Virtuoso .NET Data Provider does not persist or return the
password in a connection string unless you set <varname>Persist Security Info</varname>

   to true.</para>
                <para>The ConnectionString property can be set only when the connection is closed. Many of
the connection string values have corresponding read-only properties. When the connection string is set,
all of these properties are updated, except when an error is detected. In this case, none of the properties
are updated. VirtuosoConnection properties return only those settings contained in the ConnectionString.</para>
                <para>Resetting the ConnectionString on a closed connection resets all connection string values
(and related properties) including the password. For example, if you set a connection string that includes
"Database=Demo", and then reset the connection string to "Data Source=myserver;User ID=dba;Password=dba",
the Database property is no longer set to northwind.</para>
                <para>The connection string is parsed immediately after being set. If errors in syntax are found
when parsing, a runtime exception, such as ArgumentException, is generated. Other errors can be found only when
an attempt is made to Open the connection.</para>
                <para>Connection string has the following syntax. Each connection string is a sequence of settings
Individual settings are separated by semicolons. Each setting is a pair of name and value delimited by the equal
sign. Whitespace is ignored on either side of both names and values. Names are case insensitive. The value part
can be quoted by either single or double quote characters or remain unquoted at all. However if it includes a
semicolon, single quote, or double quote characters, it must be enclosed in either type of quotes. To embed the
same character that is used for enclosing the value the character within the value must be doubled.</para>
                <para>The following table lists the valid names for values within the ConnectionString.</para>
                <table>
                  <title/>
                  <tgroup cols="3">
                    <thead>
                      <row>
                        <entry>Name</entry>
                        <entry>Default</entry>
                        <entry>Description</entry>
                      </row>
                    </thead>
                    <tbody>
                      <row>
                        <entry>
                          <simpara>Connect Timeout</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Connection Timeout</simpara>
                        </entry>
                        <entry>15</entry>
                        <entry>The length of time (in seconds) to wait for a connection to the server before
terminating the attempt and generating an error.</entry>
                      </row>
                      <row>
                        <entry>Connection Lifetime</entry>
                        <entry>0</entry>
                        <entry>When a connection is returned to the pool, its creation time is compared with
the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified
by connection lifetime. Useful in clustered configurations to force load balancing between a running server
and a server just brought on-line.</entry>
                      </row>
                      <row>
                        <entry>
                          <simpara>Data Source</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Server</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Address</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Network Address</simpara>
                        </entry>
                        <entry/>
                        <entry>The name or network address of the instance of Virtuoso server to which to connect.</entry>
                      </row>
                      <row>
                        <entry>Encrypt</entry>
                        <entry>false</entry>
                        <entry>Specifies if the connection must be SSL encrypted. Currently encryption only works
with an ODBC-based provider.</entry>
                      </row>
                      <row>
                        <entry>Enlist</entry>
                        <entry>true</entry>
                        <entry>When true, the pooler automatically enlists the connection in the creation thread's
current transaction context.</entry>
                      </row>
                      <row>
                        <entry>
                          <simpara>Initial Catalog</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Database</simpara>
                        </entry>
                        <entry/>
                        <entry>The name of the database.</entry>
                      </row>
                      <row>
                        <entry>Max Pool Size</entry>
                        <entry>100</entry>
                        <entry>The maximum number of connections allowed in the pool.</entry>
                      </row>
                      <row>
                        <entry>Min Pool Size</entry>
                        <entry>0</entry>
                        <entry>The minimum number of connections allowed in the pool.</entry>
                      </row>
                      <row>
                        <entry>
                          <simpara>Password</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Pwd</simpara>
                        </entry>
                        <entry/>
                        <entry>The password for the Virtuoso account logging on.</entry>
                      </row>
                      <row>
                        <entry>Persist Security Info</entry>
                        <entry>false</entry>
                        <entry>When set to 'false', security-sensitive information, such as the password,
is not returned as part of the connection if the connection is open or has ever been in an open State.
Resetting the connection string resets all connection string values including the password</entry>
                      </row>
                      <row>
                        <entry>Pooling</entry>
                        <entry>true</entry>
                        <entry>When true, the VirtuosoConnection object is drawn from the appropriate pool,
or if necessary, is created and added to the appropriate pool.</entry>
                      </row>
                      <row>
                        <entry>
                          <simpara>User ID</simpara>
                          <simpara>-or-</simpara>
                          <simpara>Uid</simpara>
                        </entry>
                        <entry/>
                        <entry>The Virtuoso login name.</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </table>
              </section>
            </section>
            <section>
              <title>ConnectionTimeout Property</title>
              <para>Gets or sets the time to wait while trying to establish a connection before terminating
the attempt and generating an error.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>int</type>
                <varname>ConnectionTimeout</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbConnection.ConnectionTimeout</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>A value of 0 indicates no limit, and should be avoided in a ConnectionString because an attempt
to connect will wait indefinitely.</para>
              </section>
            </section>
            <section>
              <title>Database Property</title>
              <para>Gets the name of the current database or the database to be used after a connection is opened.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>string</type>
                <varname>Database</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>The name of the current database or the name of the database to be used once
a connection is open. The default value is an empty string.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbConnection.Database</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>Initially, the Database property is set in the connection string. The Database property
can be updated by using the ChangeDatabase method.</para>
              </section>
            </section>
            <section>
              <title>State Property</title>
              <para>Gets the current state of the connection.</para>
              <fieldsynopsis>
                <modifier>public</modifier>
                <type>ConnectionState</type>
                <varname>State</varname>
              </fieldsynopsis>
              <section>
                <title>Property Value</title>
                <para>A bitwise combination of the ConnectionState values. The default is Closed.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The allowed state changes are:</para>
                <itemizedlist>
                  <listitem>
                    <para>
		  From Closed to Open, using the Open method of the connection object.
		</para>
                  </listitem>
                  <listitem>
                    <para>
		  From Open to Closed, using either the Close method or the Dispose method of the connection object.
		</para>
                  </listitem>
                </itemizedlist>
              </section>
            </section>
          </section>
          <section>
            <title>Methods</title>
            <section>
              <title>BeginTransaction Method</title>
              <para>Begins a database transaction.</para>
              <section>
                <title>BeginTransaction Method ()</title>
                <para>Begins a database transaction.</para>
                <methodsynopsis>
                  <modifier>public</modifier>
                  <type>VirtuosoTransaction</type>
                  <methodname>BeginTransaction</methodname>
                  <void/>
                </methodsynopsis>
                <section>
                  <title>Return Value</title>
                  <para>An object representing the new transaction.</para>
                </section>
                <section>
                  <title>Remarks</title>
                  <para>To commit or roll back the transaction, you must explicitly use the Commit or Rollback methods.</para>
                  <para>To ensure that the Virtuoso .NET Data Provider transaction management model performs correctly,
avoid using other transaction management models, such as those provided by the data source.</para>
                </section>
              </section>
              <section>
                <title>BeginTransaction Method (IsolationLevel)</title>
                <para>Begins a database transaction with the specified isolation level.</para>
                <methodsynopsis>
                  <modifier>public</modifier>
                  <type>VirtuosoTransaction</type>
                  <methodname>BeginTransaction</methodname>
                  <methodparam choice="req" rep="norepeat">
                    <type>IsolationLevel</type>
                    <parameter>isoLevel</parameter>
                  </methodparam>
                </methodsynopsis>
                <section>
                  <title>Parameters</title>
                  <variablelist>
                    <varlistentry>
                      <term>isoLevel</term>
                      <listitem>
                        <para>
		      The isolation level under which the transaction should run.
		    </para>
                      </listitem>
                    </varlistentry>
                  </variablelist>
                </section>
                <section>
                  <title>Return Value</title>
                  <para>An object representing the new transaction.</para>
                </section>
                <section>
                  <title>Remarks</title>
                  <para>To commit or roll back the transaction, you must explicitly use the Commit or Rollback methods.</para>
                  <para>To ensure that the Virtuoso .NET Data Provider transaction management model performs correctly,
avoid using other transaction management models, such as those provided by the data source.</para>
                </section>
              </section>
            </section>
            <section>
              <title>ChangeDatabase Method</title>
              <para>Changes the current database for an open VirtuosoConnection.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>ChangeDatabase</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>string</type>
                  <parameter>database</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>database</term>
                    <listitem>
                      <para>
		    The name of the database to use in place of the current database.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Implements</title>
                <para>IDbConnection.ChangeDatabase</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The value parameter must contain a valid database name, and cannot contain a null value,
an empty string (""), or a string with only blank characters.</para>
              </section>
            </section>
            <section>
              <title>Close Method</title>
              <para>Closes the connection to the database. This is the preferred method of closing any open connection.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Close</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDbConnection.Close</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The Close method rolls back any pending transactions. It then releases the connection
to the connection pool, or closes the connection if connection pooling is disabled.</para>
                <para>An application can call Close more than one time. No exception is generated.</para>
              </section>
            </section>
            <section>
              <title>CreateCommand Method</title>
              <para>Creates and returns a VirtuosoCommand object associated with the VirtuosoConnection.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>VirtuosoCommand</type>
                <methodname>CreateCommand</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>A VirtuosoCommand object.</para>
              </section>
            </section>
            <section>
              <title>EnlistDistributedTransaction Method</title>
              <para>Enlists in the specified transaction as a distributed transaction.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>EnlistDistributedTransaction</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>ITransaction</type>
                  <parameter>transaction</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>transaction</term>
                    <listitem>
                      <para>A reference to an existing transaction in which to enlist or null to unenlist.</para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Remarks</title>
                <para>You can enlist in an existing distributed transaction using the EnlistDistributedTransaction
method if auto-enlistment is disabled. Enlisting in an existing distributed transaction ensures that, if the
transaction is committed or rolled back, modifications made by the code at the data source are also committed or
 rolled back.</para>
              </section>
            </section>
            <section>
              <title>ICloneable.Clone Method</title>
              <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended
to be used directly from your code.</para>
              <methodsynopsis>
                <type>object</type>
                <methodname>ICloneable.Clone</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>IDbConnection.BeginTransaction Method</title>
              <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended
to be used directly from your code.</para>
              <section>
                <title>IDbConnection.BeginTransaction Method ()</title>
                <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended
to be used directly from your code.</para>
                <methodsynopsis>
                  <type>IDbTransaction</type>
                  <methodname>IDbConnection.BeginTransaction</methodname>
                  <void/>
                </methodsynopsis>
              </section>
              <section>
                <title>IDbConnection.BeginTransaction Method (IsolationLevel)</title>
                <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended
to be used directly from your code.</para>
                <methodsynopsis>
                  <type>IDbTransaction</type>
                  <methodname>IDbConnection.BeginTransaction</methodname>
                  <methodparam choice="req" rep="norepeat">
                    <type>IsolationLevel</type>
                    <parameter>isoLevel</parameter>
                  </methodparam>
                </methodsynopsis>
              </section>
            </section>
            <section>
              <title>IDbConnection.CreateCommand Method</title>
              <para>This member supports the Microsoft® .NET Framework infrastructure and is not intended
to be used directly from your code.</para>
              <methodsynopsis>
                <type>IDbCommand</type>
                <methodname>IDbConnection.CreateCommand</methodname>
                <void/>
              </methodsynopsis>
            </section>
            <section>
              <title>Open Method</title>
              <para>Opens a database connection with the property settings specified by the ConnectionString.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <void/>
                <methodname>Open</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Implements</title>
                <para>IDbConnection.Open</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The VirtuosoConnection draws an open connection from the connection pool if one is available.
Otherwise, it establishes a new connection to an instance of Virtuoso server.</para>
                <note>
                  <title>Note:</title>
                  <para>If the VirtuosoConnection goes out of scope, it is not closed. Therefore, you must explicitly
close the connection by calling Close or Dispose.</para>
                </note>
              </section>
            </section>
          </section>
        </section>
