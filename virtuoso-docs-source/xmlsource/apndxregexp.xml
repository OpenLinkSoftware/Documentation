<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="apndxregexp">
      <title>Basic Syntax of Regular Expressions</title>
      <para>The two special symbols: <computeroutput>'^'</computeroutput>

   and
<computeroutput>'$'</computeroutput>

   indicate the <emphasis>start</emphasis>

and the <emphasis>end</emphasis>

   of a string respectively, like so:</para>
      <simplelist type="vert">
        <member><computeroutput>^The</computeroutput>

  : matches any string
  that starts with The;</member>
        <member><computeroutput>of despair$</computeroutput>

  : matches a
  string that ends in the substring of despair;</member>
        <member><computeroutput>^abc$</computeroutput>

  : a string that
  starts and ends with abc -- that could only be abc itself!</member>
        <member><computeroutput>notice</computeroutput>

  : a string that
  has the text notice in it.</member>
      </simplelist>
      <para>Without either of the above special character you are allowing the pattern
to occur anywhere inside the string.</para>
      <para>The symbols <computeroutput>'*'</computeroutput>

  , <computeroutput>'+'</computeroutput>

  ,
and <computeroutput>'?'</computeroutput>

   denote the number of times a character
or a sequence of characters may occur.  What they mean is: zero or more, one or
more, and zero or one.  Here are some examples:</para>
      <simplelist type="vert">
        <member><computeroutput>ab*</computeroutput>

  : matches a string
  that has an <emphasis>a</emphasis>

   followed by zero or more
  <emphasis>b</emphasis>

  's (a, ab, abbb, etc.);</member>
        <member><computeroutput>ab+</computeroutput>

  : same, but there is
  at least one <emphasis>b</emphasis>

   (ab, abbb, etc.);</member>
        <member><computeroutput>ab?</computeroutput>

  : there might be a
  <emphasis>b</emphasis>

   or not;</member>
        <member><computeroutput>a?b+$</computeroutput>

  : a possible <emphasis>a</emphasis>

  followed by one or more <emphasis>b</emphasis>

  's ending a string.</member>
      </simplelist>
      <para>You can also use <emphasis>bounds</emphasis>

  , which come inside braces
and indicate ranges in the number of occurrences: </para>
      <simplelist type="vert">
        <member><computeroutput>ab{2}</computeroutput>

  : matches a string that has an
  <emphasis>a</emphasis>

   followed by exactly two <emphasis>b</emphasis>

  's
  (abb);</member>
        <member><computeroutput>ab{2,}</computeroutput>

  : there are at least two
  <emphasis>b</emphasis>

  's (abb, abbbb, etc.);</member>
        <member><computeroutput>ab{3,5}</computeroutput>

  : from three to five
  <emphasis>b</emphasis>

  's (abbb, abbbb, or abbbbb).</member>
      </simplelist>
      <para>Note, that you must always specify the first number of a range
(i.e, <computeroutput>{0,2}</computeroutput>

  , not <computeroutput>{,2}</computeroutput>

  ).
Also, as you may have noticed, the symbols '*', '+', and '?' have the same effect
as using the bounds <computeroutput>{0,}</computeroutput>

  ,
<computeroutput>{1,}</computeroutput>

  , and <computeroutput>{0,1}</computeroutput>

  ,
respectively.</para>
      <para>Now, to quantify a sequence of characters, put them inside parentheses:</para>
      <simplelist type="vert">
        <member><computeroutput>a(bc)*</computeroutput>

  : matches a string that has
  an <emphasis>a</emphasis>

   followed by zero or more copies of the sequence bc;</member>
        <member><computeroutput>a(bc){1,5}</computeroutput>

  : one through five copies of bc.</member>
      </simplelist>
      <para>There's also the '|' symbol, which works as an OR operator:</para>
      <simplelist type="vert">
        <member><computeroutput>hi|hello</computeroutput>

  : matches a string that has
  either hi or hello in it;</member>
        <member><computeroutput>(b|cd)ef</computeroutput>

  : a string that has either
  bef or cdef;</member>
        <member><computeroutput>(a|b)*c</computeroutput>

  : a string that has a
  sequence of alternating <emphasis>a</emphasis>

  's and <emphasis>b</emphasis>

  's
  ending in a <emphasis>c</emphasis>

  ;</member>
      </simplelist>
      <para>A period ('.') stands for any single character:</para>
      <simplelist type="vert">
        <member><computeroutput>a.[0-9]</computeroutput>

  : matches a string that has
  an <emphasis>a</emphasis>

   followed by one character and a digit;</member>
        <member><computeroutput>^.{3}$</computeroutput>

  : a string with exactly 3 characters.</member>
      </simplelist>
      <para><emphasis>Bracket expressions</emphasis>

   specify which characters are
allowed in a single position of a string: </para>
      <simplelist type="vert">
        <member><computeroutput>[ab]</computeroutput>

  : matches a string that has
  either an <emphasis>a</emphasis>

   or a <emphasis>b</emphasis>

    (that's the same as <computeroutput>a|b</computeroutput>

  );</member>
        <member><computeroutput>[a-d]</computeroutput>

  : a string that has lowercase
  letters 'a' through 'd' (that's equal to <computeroutput>a|b|c|d</computeroutput>

  and even <computeroutput>[abcd]</computeroutput>

  );</member>
        <member><computeroutput>^[a-zA-Z]</computeroutput>

  : a string that starts with a letter;</member>
        <member><computeroutput>[0-9]%</computeroutput>

  : a string that has a single
  digit before a percent sign;</member>
        <member><computeroutput>,[a-zA-Z0-9]$</computeroutput>

  : a string that ends in
  a comma followed by an alphanumeric character.</member>
      </simplelist>
      <para>You can also list the characters that do NOT want -- just use a '^' as
the first symbol in a bracketed expression (i.e.,
<computeroutput>%[^a-zA-Z]%</computeroutput>

   matches a string with a character
that is not a letter between two percent signs).</para>
      <para>Do not forget that bracket expressions are an exception to that
rule--inside them, all special characters, including the backslash ('\'),
lose their special powers (i.e., <computeroutput>[*\+?{}.]</computeroutput>

matches exactly any of the characters inside the brackets).
To include a literal ']' in the list, make it the first character
(following a possible '^'). To include a literal '-', make it the first or last
character, or the second endpoint of a range.</para>
    </section>
