<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vcrvirtpermclass">
          <title>VirtuosoPermission Class</title>
          <para>Provides the capability for the Virtuoso .NET Data Provider to ensure that a user has a security level
adequate to access a data source. This class cannot be inherited.</para>
          <simplelist type="vert">
            <member>System.Object</member>
            <member>   System.Security.CodeAccessPermission</member>
            <member>      VirtuosoPermission</member>
          </simplelist>
          <classsynopsis class="class">
            <ooclass>
              <modifier>public</modifier>
              <modifier>sealed</modifier>
              <modifier>class</modifier>
              <classname>VirtuosoPermission</classname>
            </ooclass>
            <ooclass>
              <classname>CodeAccessPermission</classname>
            </ooclass>
            <oointerface>
              <interfacename>IUnrestrictedPermission</interfacename>
            </oointerface>
          </classsynopsis>
          <section>
            <title>Thread Safety</title>
            <para>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations.
Any instance members are not guaranteed to be thread safe.</para>
          </section>
          <section>
            <title>VirtuosoPermission Constructor</title>
            <section>
              <title>VirtuosoPermission Constructor ()</title>
              <para>Initializes a new instance of the VirtuosoPermission class.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoPermission</methodname>
                <void/>
              </constructorsynopsis>
            </section>
            <section>
              <title>VirtuosoPermission Constructor (PermissionState)</title>
              <para>Initializes a new instance of the VirtuosoPermission class.</para>
              <constructorsynopsis>
                <modifier>public</modifier>
                <methodname>VirtuosoPermission</methodname>
                <methodparam choice="req" rep="norepeat">
                  <type>PermissionState</type>
                  <parameter>state</parameter>
                </methodparam>
              </constructorsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>state</term>
                    <listitem>
                      <para>
		    One of the System.Security.Permissions.PermissionState values.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
            </section>
          </section>
          <section>
            <title>Methods</title>
            <section>
              <title>Copy Method</title>
              <para>Creates and returns an identical copy of the current permission object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>override</modifier>
                <type>IPermission</type>
                <methodname>Copy</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>A copy of the current permission object.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IPermission.Copy</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>A copy of a permission object represents the same access to resources as the original
permission object.</para>
              </section>
            </section>
            <section>
              <title>FromXml Method</title>
              <para>Reconstructs a security object with a specified state from an XML encoding.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>override</modifier>
                <void/>
                <methodname>FromXml</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>SecurityElement</type>
                  <parameter>securityElement</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>securityElement</term>
                    <listitem>
                      <para>
		    The XML encoding to use to reconstruct the security object.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Implements</title>
                <para>ISecurityEncodable.FromXml</para>
              </section>
            </section>
            <section>
              <title>Intersect Method</title>
              <para>Returns a new permission object representing the intersection of the current permission
object and the specified permission object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>override</modifier>
                <type>IPermission</type>
                <methodname>Intersect</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>IPermission</type>
                  <parameter>target</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>target</term>
                    <listitem>
                      <para>
		    A permission object to intersect with the current permission object. It must be of the same
		    type as the current permission object.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>A new permission object that represents the intersection of the current permission object
and the specified permission object. This new permission object is a null reference (Nothing in Visual Basic)
if the intersection is empty.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IPermission.Intersect</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The intersection of two permissions is a permission that describes the set of operations
they both describe in common. Only a demand that passes both original permissions will pass the intersection.</para>
              </section>
            </section>
            <section>
              <title>IsSubsetOf Method</title>
              <para>Returns a value indicating whether the current permission object is a subset of the specified
permission object.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>override</modifier>
                <type>bool</type>
                <methodname>IsSubsetOf</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>IPermission</type>
                  <parameter>target</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>target</term>
                    <listitem>
                      <para>
		    A permission object that is to be tested for the subset relationship. This object must be of
		    the same type as the current permission object.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para><literal>true</literal>

   if the current permission object is a subset of the specified
permission object; otherwise <literal>false</literal>

  .</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IPermission.IsSubsetOf</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The current permission object is a subset of the specified permission object if the current
permission object specifies a set of operations that is wholly contained by the specified permission object.
For example, a permission that represents access to C:\example.txt is a subset of a permission that represents
access to C:\. If this method returns true, the current permission object represents no more access to the
protected resource than does the specified permission object.</para>
              </section>
            </section>
            <section>
              <title>IsUnrestricted Method</title>
              <para>Returns a value indicating whether the permission can be represented as unrestricted without
any knowledge of the permission semantics.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <type>bool</type>
                <methodname>IsUnrestricted</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para><literal>true</literal>

   if the VirtuosoPermission instance was created with
PermissionState.Unrestricted; otherwise, <literal>false</literal>

  .</para>
              </section>
              <section>
                <title>Implements</title>
                <para>IUnrestrictedPermission.IsUnrestricted</para>
              </section>
            </section>
            <section>
              <title>ToXml Method</title>
              <para>Creates an XML encoding of the security object and its current state.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>override</modifier>
                <type>SecurityElement</type>
                <methodname>ToXml</methodname>
                <void/>
              </methodsynopsis>
              <section>
                <title>Return Value</title>
                <para>An XML encoding of the security object, including any state information.</para>
              </section>
              <section>
                <title>Implements</title>
                <para>ISecurityEncodable.ToXml</para>
              </section>
            </section>
            <section>
              <title>Union Method</title>
              <para>Creates a permission that is the union of the permission and the specified permission.</para>
              <methodsynopsis>
                <modifier>public</modifier>
                <modifier>override</modifier>
                <type>IPermission</type>
                <methodname>Union</methodname>
                <methodparam rep="norepeat" choice="req">
                  <type>IPermission</type>
                  <parameter>target</parameter>
                </methodparam>
              </methodsynopsis>
              <section>
                <title>Parameters</title>
                <variablelist>
                  <varlistentry>
                    <term>target</term>
                    <listitem>
                      <para>
		    A permission to combine with the current permission. It must be of the same type as
		    the current permission.
		  </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
              </section>
              <section>
                <title>Return Value</title>
                <para>A new permission that represents the union of the current permission and the specified
permission.</para>
              </section>
              <section>
                <title>Remarks</title>
                <para>The result of a call to Union is a permission that represents all the operations
represented by both the current permission and the specified permission. Any demand that passes either permission
passes their union.</para>
              </section>
            </section>
          </section>
        </section>
