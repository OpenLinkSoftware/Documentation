<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="installnetriadd">
      <title>Creating A Simple .NET RIA Services Application To Display Data
From Virtuoso</title>
      <para>.NET RIA Services is a new framework from Microsoft that simplifies the development of n-tier web
applications. A typical application will consist of a presentation layer, application logic and a data
access layer. In these examples a combination of Silverlight 3 and .NET RIA Services will provide the
presentation layer and application layer while the data will reside in Virtuoso and be accessed using
the Virtuoso ADO.NET provider. The first example demonstrates how to display data from the Employee
table in the Demo database in a grid on a web page. The second example shows how to display IRIs from
the Linked Data Views of the demo data. The IRIs are used to create hyperlinks that are the starting point
for exploring the linked data.
</para>
      <section xml:id="installnetriaddpreq">
        <title>Pre-requisites</title>
        <orderedlist>
          <listitem>
            <para>The example assumes that you have a local Virtuoso server with the Northwind demo database
installed. If the demo database is not already installed then download the demo database VAD package
(demo_dav.vad) and install it. The VAD package will create a new database in Virtuoso called demo
containing the familiar Northwind tables. It will also creates Linked Data Views of the Northwind tables.
In the example we assume the database is accessible on a hostname of "demo.openlinksw.com" on the
default port 80, where an actually live instance of the Virtuoso Demo database is hosted. Users
would use the appropriate hostname and port number of their Virtuoso installation to create the
sample application, and would be would be example.com for a default installation or whatever
the URIQA DefaultHost Virtuoso configuration parameter is set to when the demo database VAD package
is installed.</para>
          </listitem>
          <listitem>
            <para>The Virtuoso ADO.Net provider for .Net 3.5 and the Entity Framework.</para>
          </listitem>
          <listitem>
            <para>Microsoft Visual Studio 2008</para>
          </listitem>
          <listitem>
            <para>The Virtuoso 
            <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.3/virtuoso/cartridges_dav.vad">Cartridges VAD package</link>
            .</para>
          </listitem>
          <listitem>
            <para><link xlink:href="http://www.microsoft.com/downloads/details.aspx?familyid=9442b0f2-7465-417a-88f3-5e7b5409e9dd&amp;displaylang=en">Silverlight 3 Tools for Visual Studio 2008 SP1</link>
            .</para>
          </listitem>
          <listitem>
            <para><link xlink:href="http://www.microsoft.com/downloads/details.aspx?FamilyID=76bb3a07-3846-4564-b0c3-27972bcaabce&amp;displaylang=en">Microsoft .NET RIA Services July 2009 Preview</link>
            .</para>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="installnetriaddcrser">
        <title>Creating the Application</title>
        <para>
          <emphasis>Step 1 - Create the Visual Studio Projects.</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Open </para>
            <para>
              <emphasis>Visual Studio</emphasis>
            </para>
            <para> and create a new </para>
            <para>
              <emphasis>Silverlight Application</emphasis>
            </para>
            <para> project. Call the project DemoApplication.</para>
          </listitem>
          <listitem>
            <para>In the New Silverlight Application dialog ensure that </para>
            <para>
              <emphasis>Enable .NET RIA Services</emphasis>
            </para>
            <para> is checked. Click the </para>
            <para>
              <emphasis>OK</emphasis>
            </para>
            <para> button.
      </para>
            <figure xml:id="ria1" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria1.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <para>At this point a skeleton solution is created that consists of a client project called DemoApplication
and a server project called DemoApplication.Web. This application will use data from the Virtuoso database.
We add the data and its schema to the application by adding an ADO.NET entity data model to the server
project.</para>
        <para>
          <emphasis>Step 2 -  Add the Data Model</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Right click the server project in the </para>
            <para>
              <emphasis>Solution Explorer</emphasis>
            </para>
            <para> and
</para>
            <para>
              <emphasis>Add New Item</emphasis>
            </para>
            <para>. In the dialog box select </para>
            <para>
              <emphasis>ADO.NET Entity Data Model</emphasis>
            </para>
            <para>
and call it demo.edmx. Click the </para>
            <para>
              <emphasis>Add</emphasis>
            </para>
            <para> button. This will open the
</para>
            <para>
              <emphasis>Entity Data Model Wizard</emphasis>
            </para>
            <para>.</para>
          </listitem>
          <listitem>
            <para>Choose </para>
            <para>
              <emphasis>Generate From Database</emphasis>
            </para>
            <para> and click </para>
            <para>
              <emphasis>Next</emphasis>
            </para>
            <para>.</para>
          </listitem>
          <listitem>
            <para>Set up a connection to the Demo database on your local Virtuoso Server, select
</para>
            <para>
              <emphasis>Yes, include the sensitive data in the connection string</emphasis>
            </para>
            <para> and set the name of the
entities to DemoEntities. Click </para>
            <para>
              <emphasis>Next</emphasis>
            </para>
            <para>.</para>
          </listitem>
          <listitem>
            <para>On the </para>
            <para>
              <emphasis>Choose Your Database Objects</emphasis>
            </para>
            <para> page expand </para>
            <para>
              <emphasis>Tables</emphasis>
            </para>
            <para>
and select Employees. Check that the Model Namespace is DemoModel and click </para>
            <para>
              <emphasis>Finish</emphasis>
            </para>
            <para>.</para>
          </listitem>
        </orderedlist>
        <figure xml:id="ria2" floatstyle="1">
          <title>.NET RIA Services Application</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/ria2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>We want to make the entities in the model available to both the client and server parts of the
solution. To do this we need to add a DomainService to the solution. However, to make the entities from
the data model available to the domain service we must first build the solution.</para>
        <para>
          <emphasis>Step 3 - Add a Domain Service.</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>First build the solution.</para>
          </listitem>
          <listitem>
            <para>Right click the server project in the </para>
            <para>
              <emphasis>Solution Explorer</emphasis>
            </para>
            <para> and
</para>
            <para>
              <emphasis>Add New Item</emphasis>
            </para>
            <para>. In the dialog box choose </para>
            <para>
              <emphasis>Domain Service Class</emphasis>
            </para>
            <para>
from the Templates pane and call it EmployeeService.cs. Click </para>
            <para>
              <emphasis>Add</emphasis>
            </para>
            <para>. This will open the
</para>
            <para>
              <emphasis>Add New Domain Service Class</emphasis>
            </para>
            <para> dialog.</para>
          </listitem>
          <listitem>
            <para>The entities from the model we have just added to the project are listed under
</para>
            <para>
              <emphasis>Entities</emphasis>
            </para>
            <para>. Tick the box next to Employees. and click OK.</para>
          </listitem>
        </orderedlist>
        <figure xml:id="ria3" floatstyle="1">
          <title>.NET RIA Services Application</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/ria3.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>This will create the DomainService class and generated code in both the client and server parts of
the application. The Silverlight client can now interact with the data through the DomainContext class
in the client project. At this point you need to build the solution again.
</para>
        <para>
          <emphasis>Step 4 -  Display The Data</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>From the </para>
            <para>
              <emphasis>Silverlight XAML Controls</emphasis>
            </para>
            <para> in the </para>
            <para>
              <emphasis>Toolbox</emphasis>
            </para>
            <para>
drag a </para>
            <para>
              <emphasis>DataGrid</emphasis>
            </para>
            <para> between the &lt;Grid&gt; &lt;/Grid&gt; tags on MainPage.xaml in the client. Call the grid EmployeeGrid.
</para>
            <programlisting>
&lt;data:DataGrid Name="EmployeeGrid"&gt;&lt;/data:DataGrid&gt;
</programlisting>
          </listitem>
          <listitem>
            <para>Instantiate the DomainContext to get the list of employees and add them to the grid by
adding code to MainPage.xaml.cs so it looks like this:
</para>
            <programlisting>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using DemoApplication.Web;
using System.Windows.Ria.Data;

namespace DemoApplication
{
    public partial class MainPage : UserControl
    {
        private EmployeeContext _employeeContext = new EmployeeContext();
        public MainPage()
        {
            InitializeComponent();
            LoadOperation&lt;Employees&gt; LoadOp =
                this._employeeContext.Load(this._employeeContext.GetEmployeesQuery());
            this.EmployeeGrid.ItemsSource = LoadOp.Entities;
        }
    }
}
</programlisting>
          </listitem>
          <listitem>
            <para>Build and run the application. Internet Explorer will be launched and you will see the data
displayed on the page as a grid.
</para>
          </listitem>
        </orderedlist>
        <figure xml:id="ria4" floatstyle="1">
          <title>.NET RIA Services Application</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ui/ria4.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <section xml:id="installnetriaddcrdf">
        <title>Displaying RDF Data</title>
        <para>One advantage of using Virtuoso as the data store is the seamless way in which we can use
this use this application to display dereferencable IRIs and explore RDF linked data.
     </para>
        <para>The Virtuoso SPASQL interface allows RDF data in the Virtuoso Quad store to be queried
using SPARQL from any SQL interface by simply prefixing the SPARQL query with the keyword SPARQL.
We will use the SPASQL interface to create a view containing the IRIs of the Employees in the
the Demo RDF data in Virtuoso.
     </para>
        <para>
          <emphasis>Step 1 -  Create the View in Virtuoso</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Open the Virtuoso Conductor.</para>
          </listitem>
          <listitem>
            <para>In isql execute the following statement. Remember to use the appropriate hostname and port
number of your Virtuoso installation, typically example.com for a default installation or whatever
the 
            <link linkend="ini_uriqa">URIQA DefaultHost</link>
             Virtuoso configuration parameter was set to when
the demo database VAD package was installed.
</para>
            <programlisting>
CREATE VIEW Demo.demo.sparqlview as
SPARQL
PREFIX nwind: &lt;http://demo.openlinksw.com/schemas/northwind#&gt;
SELECT DISTINCT  ?s
FROM &lt;http://demo.openlinksw.com/Northwind&gt;
WHERE
  {
    ?s a nwind:Employee
  }
</programlisting>
          </listitem>
        </orderedlist>
        <para>
          <emphasis>Step 2 -  Modify the Solution To use the View</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Delete the existing Employee model and add a new one that comprises this new view.
    </para>
            <figure xml:id="ria5" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria5.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Delete the DomainService. Build the solution and add a new DomainService called
EmployeeService. Select the sparqlview entity. Build the solution.
    </para>
            <figure xml:id="ria6" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria6.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Modify the code in mainpage.xaml.cs so it uses the sparqview entity. It should look like this:
</para>
            <programlisting>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using DemoApplication.Web;
using System.Windows.Ria.Data;

namespace DemoApplication
{
    public partial class MainPage : UserControl
    {
        private EmployeeContext _employeeContext = new EmployeeContext();
        public MainPage()
        {
            InitializeComponent();
            LoadOperation&lt;sparqlview&gt; LoadOp =
                this._employeeContext.Load(this._employeeContext.GetSparqlviewQuery());
            this.EmployeeGrid.ItemsSource = LoadOp.Entities;
        }
    }
}
</programlisting>
          </listitem>
          <listitem>
            <para>Build and run the application. You will see a list of IRIs that identify the Northwind employees.
    </para>
            <figure xml:id="ria7" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria7.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <para>To realize the power of linked data we would now liked to begin exploring this data by clicking on
these IRIs.</para>
        <para>
          <emphasis>Step 3 - Make Hyperlinks From IRIs</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Modify the DataGrid in MainPage.xaml to bind the IRI in each cell of the grid to a
Hyperlink button. We set the AutoGenerateColumns property of the DataGrid to False then add our
own Template for the column. MainPage.xaml should look like this:
</para>
            <programlisting>
&lt;UserControl xmlns:data="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Data"  x:Class="DemoApplication.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d" d:DesignWidth="640" d:DesignHeight="480"&gt;
  &lt;Grid x:Name="LayoutRoot"&gt;
      &lt;data:DataGrid Name="EmployeeGrid" AutoGenerateColumns="False"&gt;
            &lt;data:DataGrid.Columns&gt;
                &lt;data:DataGridTemplateColumn Header="Employee"&gt;
                    &lt;data:DataGridTemplateColumn.CellTemplate&gt;
                        &lt;DataTemplate&gt;
                            &lt;StackPanel x:Name="DisplayEmployeeData"
                                        Orientation="Horizontal"
                                        VerticalAlignment="Bottom"
                                        Margin="5" &gt;
                                &lt;HyperlinkButton Content ="{Binding s}"
                                                 NavigateUri="{Binding s}"
                                                 Margin="5,0,0,0"
                                                 VerticalAlignment="Bottom"
                                                 HorizontalAlignment="Left"
                                                 FontSize="12"&gt;
                                &lt;/HyperlinkButton&gt;
                            &lt;/StackPanel&gt;
                        &lt;/DataTemplate&gt;
                    &lt;/data:DataGridTemplateColumn.CellTemplate&gt;
                &lt;/data:DataGridTemplateColumn&gt;
            &lt;/data:DataGrid.Columns&gt;
        &lt;/data:DataGrid&gt;
    &lt;/Grid&gt;
&lt;/UserControl&gt;
</programlisting>
          </listitem>
          <listitem>
            <para>If we build and run the project now each IRI in the list appears as a hyperlink.
    </para>
            <figure xml:id="ria8" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria8.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Clicking on each of the links takes you to a new document that contains further links
to information about each Employee. The Demo dataset can be explored further by following the
dereferenceable IRIs in the description pages.
    </para>
            <figure xml:id="ria9" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria9.png"/>
                </imageobject>
              </mediaobject>
            </figure>
            <figure xml:id="ria10" floatstyle="1">
              <title>.NET RIA Services Application</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/ria10.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="installnetriaddcnext">
        <title>Next Steps</title>
        <para>The examples in this document show you how to simply display data in a browser using
Silverlight 3 and .NET RIA Services. See an <link linkend="installnetriavd">example</link>

   of a
more complicated application.</para>
      </section>
    </section>
