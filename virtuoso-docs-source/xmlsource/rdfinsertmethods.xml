<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="rdfinsertmethods">
      <title>RDF Insert Methods in Virtuoso</title>
      <section xml:id="rdfinsertmethodsapifunct">
        <title>Using API functions</title>
        <itemizedlist mark="bullet">
          <listitem>
            <para>
              <link linkend="rdfapidataimportttlp">Using the DB.DBA.TTLP() function</link>
            </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Note: use this function for loading Turtle</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <link linkend="rdfapidataimportttlpmt">Using the DB.DBA.TTLP_MT() function</link>
            </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Note: use this function for loading triples from file on multiple threads</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <link linkend="rdfapidataimportxmlttlpmt">Using the DB.DBA.RDF_LOAD_RDFXML_MT() function</link>
            </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Note: Use this function for loading large resources when transactional integrity is not important (loading of a single resource may take more than one transaction)</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <link linkend="rdfapidataimportttlphash">Using the DB.DBA.RDF_TTL2HASH() function</link>
            </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>Note: use this function to get dictionary of triples in 'long valmode'.</para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              <link linkend="rdfapidataimportloadrdfxml">Using the DB.DBA.RDF_LOAD_RDFXML() function</link>
            </para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>For loading RDF/XML, the best way is to split the data to be loaded into multiple streams and load these in parallel using this function.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <para>See <link linkend="rdfperfloading">more details</link>

   for loading Performance Tuning specifics.</para>
      </section>
      <section xml:id="rdfinsertmethodshttppost">
        <title>SPARQL endpoint REST API</title>
        <para>With POST can be accomplished SPARQL Insert/Update etc.</para>
        <para>The result is in the rdf_quad.</para>
        <para>With GET Methods you can get the triples which are saved.</para>
        <para>
          <emphasis>Examples:</emphasis>
        </para>
        <para>
          <emphasis>Example 1:</emphasis>
        </para>
        <para>Create a DAV collection xx for user demo with password demo.</para>
        <para>Execute the following command:</para>
        <programlisting>
curl -i -d "INSERT {&lt;http://demo.openlinksw.com/DAV/home/demo_about.rdf&gt;
&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://rdfs.org/sioc/ns#User&gt;}" -u "demo:demo"
-H "Content-Type: application/sparql-query" http://example.com/DAV/xx/yy
</programlisting>
        <para>The response should be:</para>
        <programlisting>
HTTP/1.1 201 Created
Server: Virtuoso/05.00.3023 (Win32) i686-generic-win-32  VDB
Connection: Keep-Alive
Content-Type: text/html; charset=ISO-8859-1
Date: Fri, 28 Dec 2007 12:50:12 GMT
Accept-Ranges: bytes
MS-Author-Via: SPARQL
Content-Length: 0
</programlisting>
        <para>The result in the DAV/xx location will be a new WebDAV resource with name "yy" containing the inserted RDF:</para>
        <programlisting>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"&gt;
&lt;rdf:Description
rdf:about="http://demo.openlinksw.com/DAV/home/demo_about.rdf"&gt;
&lt;ns0pred:type xmlns:ns0pred="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
rdf:resource="http://rdfs.org/sioc/ns#User"/&gt;
&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
</programlisting>
        <para>
          <emphasis>Example 2:</emphasis>
        </para>
        <para>Create a DAV collection, for ex. with name "test" for user ( for ex. demo).</para>
        <para>Execute the following command:</para>
        <programlisting>
curl -i -d "INSERT IN GRAPH &lt;http://mygraph.com&gt;
{ &lt;http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .
  &lt;http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this&gt;
  &lt;http://www.w3.org/2000/01/rdf-schema#label&gt;
  &lt;Kingsley Uyi Idehen&gt; .
  &lt;http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this&gt;
  &lt;http://rdfs.org/sioc/ns#creator_of&gt;

&lt;http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1300&gt;
  } " -u "demo:demo" -H "Content-Type: application/sparql-query" http://example.com/DAV/home/demo/test/myrq
</programlisting>
        <para>As result the response will be:</para>
        <programlisting>
HTTP/1.1 201 Created
Server: Virtuoso/05.00.3023 (Win32) i686-generic-win-32  VDB
Connection: Keep-Alive
Content-Type: text/html; charset=ISO-8859-1
Date: Thu, 20 Dec 2007 16:25:25 GMT
Accept-Ranges: bytes
MS-Author-Via: SPARQL
Content-Length: 0
</programlisting>
        <para>Now let's check the inserted triples. Go to the sparql endpoint, i.e. http://example.com/sparql and:</para>
        <orderedlist>
          <listitem>
            <para>Enter for Default Graph URI:
</para>
            <programlisting>
http://mygraph.com
</programlisting>
          </listitem>
          <listitem>
            <para>Enter in the Query area:
</para>
            <programlisting>
SELECT * WHERE {?s ?p ?o}
</programlisting>
          </listitem>
          <listitem>
            <para>Click the button "Run Query"</para>
          </listitem>
          <listitem>
            <para>As result will be shown the inserted triples:
</para>
            <programlisting>
s  	                                                          p                                                 o
http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this   http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://rdfs.org/sioc/ns#User
http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this   http://www.w3.org/2000/01/rdf-schema#label 	      Kingsley
http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this   http://rdfs.org/sioc/ns#creator_of                http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1300
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="rdfinsertmethodshttpput">
        <title>HTTP PUT using Content-Type: application/rdf+xml</title>
        <para>The URI in a PUT request identifies the entity enclosed with the request. Therefore using HTTP PUT is a more useful and meaningful command than using POST (which is more about submitting data to a script).</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>Suppose there is myfoaf.rdf file with the following content:</para>
        <programlisting>
&lt;rdf:RDF xmlns="http://www.example/jose/foaf.rdf#"
    xmlns:foaf="http://xmlns.com/foaf/0.1/"
    xmlns:log="http://www.w3.org/2000/10/swap/log#"
    xmlns:myfoaf="http://www.example/jose/foaf.rdf#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;

    &lt;foaf:Person rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;
        &lt;foaf:homepage rdf:resource="http://www.example/jose/"/&gt;
        &lt;foaf:knows rdf:resource="http://www.example/jose/foaf.rdf#juan"/&gt;
        &lt;foaf:name&gt;Jose Jimen~ez&lt;/foaf:name&gt;
        &lt;foaf:nick&gt;Jo&lt;/foaf:nick&gt;
        &lt;foaf:workplaceHomepage rdf:resource="http://www.corp.example/"/&gt;
    &lt;/foaf:Person&gt;

    &lt;foaf:Person rdf:about="http://www.example/jose/foaf.rdf#juan"&gt;
        &lt;foaf:mbox rdf:resource="mailto:juan@mail.example"/&gt;
    &lt;/foaf:Person&gt;

    &lt;foaf:Person rdf:about="http://www.example/jose/foaf.rdf#julia"&gt;
        &lt;foaf:mbox rdf:resource="mailto:julia@mail.example"/&gt;
    &lt;/foaf:Person&gt;

    &lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#kendall"&gt;
        &lt;foaf:knows rdf:resource="http://www.example/jose/foaf.rdf#edd"/&gt;
    &lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
</programlisting>
        <para>Now let's upload the myfoaf.rdf file to destination server demo.openlinksw.com for user demo:</para>
        <programlisting>
curl -T myfoaf.rdf http://demo.openlinksw.com/DAV/home/demo/rdf_sink/myfoaf.rdf -u demo:demo
</programlisting>
        <para>As result the response should be:</para>
        <programlisting>
&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;201 Created&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;H1&gt;Created&lt;/H1&gt;
  Resource /DAV/home/demo/rdf_sink/ myfoaf.rdf has been created.
&lt;/BODY&gt;
&lt;/HTML&gt;
</programlisting>
        <para>Then you can execute:</para>
        <programlisting>
curl -F "query=SELECT DISTINCT ?p FROM &lt;http://demo.openlinksw.com/DAV/home/demo/rdf_sink/&gt; WHERE {?s ?p ?o}" http://demo.openlinksw.com/sparql
</programlisting>
        <para>The result should be:</para>
        <programlisting>
&lt;?xml version="1.0" ?&gt;
&lt;sparql xmlns="http://www.w3.org/2005/sparql-results#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/sw/DataAccess/rf1/result2.xsd"&gt;
 &lt;head&gt;
  &lt;variable name="p"/&gt;
 &lt;/head&gt;
 &lt;results distinct="false" ordered="true"&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/nick&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/name&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/homepage&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/knows&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/workplaceHomepage&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/mbox&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
 &lt;/results&gt;
&lt;/sparql&gt;
</programlisting>
        <para>Other examples with curl:</para>
        <programlisting>
curl -F "query=SELECT distinct ?Concept FROM &lt;http://dbpedia.org&gt; WHERE {?s a ?Concept} limit 10" http://dbpedia.org/sparql
</programlisting>
        <programlisting>
curl -F "query=SELECT distinct ?Concept FROM &lt;http://example.com/dataspace/person/kidehen&gt; WHERE {?s a ?Concept} limit 10" http://demo.openlinksw.com/sparql
</programlisting>
        <programlisting>
curl -F "query=SELECT distinct ?Concept FROM &lt;http://data.openlinksw.com/oplweb/product_family/virtuoso&gt; WHERE {?s a ?Concept} limit 10" http://demo.openlinksw.com/sparql
</programlisting>
        <programlisting>
curl -F "query=SELECT distinct ?Concept FROM &lt;http://openlinksw.com/dataspace/organization/openlink&gt; WHERE {?s a ?Concept} limit 10" http://demo.openlinksw.com/sparql
</programlisting>
      </section>
      <section xml:id="rdfinsertmethodsload">
        <title>SPARQL Insert using LOAD</title>
        <para>SPARQL INSERT operation can be done using the LOAD features:</para>
        <programlisting>

SPARQL INSERT INTO &lt;..&gt; { .... } [[FROM ...] { ... }]

SPARQL LOAD &lt;x&gt; [INTO &lt;y&gt;]

-- &lt;ResourceURL&gt; will be the Graph IRI of the loaded data:
SPARQL LOAD &lt;ResourceURL&gt;

</programlisting>
        <para>Examples:</para>
        <orderedlist>
          <listitem>
            <para>Load from ISQL:
</para>
            <programlisting>
SPARQL insert in graph &lt;http://mygraph.com&gt;
{
  &lt;http://example.com/dataspace/Kingsley#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .

  &lt;http://example.com/dataspace/Kingsley#this&gt;
  &lt;http://rdfs.org/sioc/ns#id&gt;
  &lt;Kingsley&gt; .

  &lt;http://example.com/dataspace/Caroline#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .

 &lt;http://example.com/dataspace/Caroline#this&gt;
  &lt;http://rdfs.org/sioc/ns#id&gt;
  &lt;Caroline&gt; .

   &lt;http://example.com/dataspace/Matt#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .

  &lt;http://example.com/dataspace/Matt#this&gt;
  &lt;http://rdfs.org/sioc/ns#id&gt;
  &lt;Matt&gt; .

   &lt;http://example.com/dataspace/demo#this&gt;
  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;
  &lt;http://rdfs.org/sioc/ns#User&gt; .

  &lt;http://example.com/dataspace/demo#this&gt;
  &lt;http://rdfs.org/sioc/ns#id&gt;
  &lt;demo&gt; .};
</programlisting>
          </listitem>
          <listitem>
            <para>Load from .rq file:
     </para>
            <orderedlist>
              <listitem>
                <para>Create DAV collection which is visible to public, for ex: http://example.com/DAV/tmp</para>
              </listitem>
              <listitem>
                <para>Upload to the DAV collection the following file for ex. with name listall.rq and with the following content:
</para>
                <programlisting>
SPARQL
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX sioc: &lt;http://rdfs.org/sioc/ns#&gt;
SELECT ?x ?p ?o
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?x rdf:type sioc:User .
    ?x ?p ?o.
    ?x sioc:id ?id .
    FILTER REGEX(str(?id), "^King")
  }
ORDER BY ?x
</programlisting>
              </listitem>
              <listitem>
                <para>Execute from ISQL the following command:
</para>
                <programlisting>
SQL&gt;SPARQL
load bif:concat ("http://", bif:registry_get("URIQADefaultHost"), "/DAV/tmp/listall.rq") into graph &lt;http://myNewGraph.com&gt;;
</programlisting>
                <para>As result should be shown:</para>
                <programlisting>
callret-0
VARCHAR
_______________________________________________________________________________

Load &lt;http://example.com/DAV/tmp/listall.rq&gt; into graph &lt;http://myNewGraph.com&gt; -- done

1 Rows. -- 321 msec.
</programlisting>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>Load from Resource URL:
</para>
            <programlisting>
SQL&gt; SPARQL LOAD &lt;http://www.w3.org/People/Berners-Lee/card#i&gt;;
callret-0
VARCHAR
_______________________________________________________________________________

Load &lt;http://www.w3.org/People/Berners-Lee/card#i&gt; into graph &lt;http://www.w3.org/People/Berners-Lee/card#i&gt; -- done

1 Rows. -- 703 msec.
SQL&gt;

</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="rdfindertmethodsparqlendpoint">
        <title>SPARQL Insert via /sparql endpoint</title>
        <para>SPARQL INSERT operation can be sent to a web service endpoint as a single statement and executed in sequence.</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>Using the Virtuoso ISQL tool or using the /sparql UI at http://host:port/sparql, execute the following:</para>
        <orderedlist>
          <listitem>
            <para>Insert into graph http://BookStore.com 3 triples:
</para>
            <programlisting>
SQL&gt;SPARQL insert in graph &lt;http://BookStore.com&gt;
{ &lt;http://www.dajobe.org/foaf.rdf#i&gt; &lt;http://purl.org/dc/elements/1.1/date&gt; &lt;1999-04-01T00:00:00&gt; .
  &lt;http://www.w3.org/People/Berners-Lee/card#i&gt; &lt;http://purl.org/dc/elements/1.1/date&gt; &lt;1998-05-03T00:00:00&gt; .
  &lt;http://www.w3.org/People/Connolly/#me&gt; &lt;http://purl.org/dc/elements/1.1/date&gt; &lt;2001-02-08T00:00:00&gt; };
</programlisting>
          </listitem>
          <listitem>
            <para>As result will be shown the message:
</para>
            <programlisting>
SQL&gt;Insert into &lt;http://BookStore.com&gt;
3 triples -- done
</programlisting>
          </listitem>
          <listitem>
            <para>Next we will select all triples from the graph http://BookStore.com:
</para>
            <programlisting>
SQL&gt;SPARQL SELECT * FROM &lt;http://BookStore.com&gt; WHERE {?s ?p ?o};
</programlisting>
          </listitem>
          <listitem>
            <para>As result will be shown:
</para>
            <programlisting>
s                                              p                                       o
VARCHAR                                        VARCHAR                                 VARCHAR
_______________________________________________________________________________

http://www.w3.org/People/Berners-Lee/card#i    http://purl.org/dc/elements/1.1/date    1998-05-03T00:00:00
http://www.w3.org/People/Connolly/#me          http://purl.org/dc/elements/1.1/date    2001-02-08T00:00:00
http://www.dajobe.org/foaf.rdf#i               http://purl.org/dc/elements/1.1/date    1999-04-01T00:00:00

3 Rows. -- 0 msec.

</programlisting>
          </listitem>
          <listitem>
            <para>Now let's insert into graph another http://NewBookStore.com graph's values:
</para>
            <programlisting>
SQL&gt;SPARQL
PREFIX dc:  &lt;http://purl.org/dc/elements/1.1/&gt;
PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
INSERT INTO GRAPH &lt;http://NewBookStore.com&gt; { ?book ?p ?v }
WHERE
  { GRAPH  &lt;http://BookStore.com&gt;
   { ?book dc:date ?date
     FILTER ( xsd:dateTime(?date) &lt; xsd:dateTime("2000-01-01T00:00:00")).
     ?book ?p ?v.
   }
  };
</programlisting>
          </listitem>
          <listitem>
            <para>As result will be shown:
</para>
            <programlisting>
callret-0
VARCHAR
_______________________________________________________________________________

Insert into &lt;http://NewBookStore.com&gt;, 2 triples -- done
</programlisting>
          </listitem>
          <listitem>
            <para>Finally we will check the triples from the graph NewBookStore.com:
</para>
            <programlisting>
SQL&gt; SPARQL
SELECT *
FROM &lt;http://NewBookStore.com&gt;
WHERE {?s ?p ?o};
</programlisting>
          </listitem>
          <listitem>
            <para>As result will be shown:
</para>
            <programlisting>
s                                             p                                      o
VARCHAR                                       VARCHAR                                VARCHAR
_______________________________________________________________________________

http://www.w3.org/People/Berners-Lee/card#i   http://purl.org/dc/elements/1.1/date   1998-05-03T00:00:00
http://www.dajobe.org/foaf.rdf#i              http://purl.org/dc/elements/1.1/date   1999-04-01T00:00:00

2 Rows. -- 10 msec.
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="rdfinsertmethodsparqlqueryandodswiki">
        <title>SPARQL Insert via SPARQL endpoint REST API and ODS wiki</title>
        <para>With HTTP Post and ODS wiki can be written an rdf document and respectively to be performed over it INSERT/UPDATE action.</para>
        <para>You can write to a file using SIOC terms for ODS-Wiki</para>
        <para>You can check with sparql the inserted / updated triples in the Quad Store.</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>Suppose there is ODS user test3 with ODS password 1, which has testWiki wiki instance.</para>
        <para>Execute the following:</para>
        <programlisting>
curl -i -d "INSERT {&lt;http://example.com/dataspace/test3/wiki/testWiki&gt; &lt;http://atomowl.org/ontologies/atomrdf#contains&gt; &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://rdfs.org/sioc/ns#has_container&gt; &lt;http://example.com/dataspace/test3/wiki/testWiki&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki&gt; &lt;http://atomowl.org/ontologies/atomrdf#entry&gt; &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki&gt; &lt;http://rdfs.org/sioc/ns#container_of&gt; &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://rdfs.org/sioc/ns#topic&gt;  &lt;http://example.com/dataspace/test3/wiki/testWiki&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://atomowl.org/ontologies/atomrdf#source&gt; &lt;http://example.com/dataspace/test3/wiki/testWiki&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://rdfs.org/sioc/types#Comment&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://atomowl.org/ontologies/atomrdf#Entry&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; 'MyTest' . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://atomowl.org/ontologies/atomrdf#Link&gt; . &lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://rdfs.org/sioc/ns#content&gt; &lt;test&gt;}" -u "test3:1" -H "Content-Type: application/sparql-query" http://example.com/DAV/home/test3/wiki/testWiki/MyTest
</programlisting>
        <para>As result we should have 2 files created:</para>
        <itemizedlist>
          <listitem>
            <para>In the user DAV folder "DAV/home/test3/wiki/testWiki/" will be created a file "MyTest" with type "application/sparql-query". You can view the content of this file from the Conductor UI or from the user's Briefcase UI, path "DAV/home/test3/wiki/testWiki". Its content will be:
</para>
            <programlisting>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki"&gt;&lt;ns0pred:entry xmlns:ns0pred="http://atomowl.org/ontologies/atomrdf#" rdf:resource="http://example.com/dataspace/test3/wiki/testWiki/MyTest"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:label xmlns:ns0pred="http://www.w3.org/2000/01/rdf-schema#"&gt;MyTest&lt;/ns0pred:label&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:type xmlns:ns0pred="http://www.w3.org/1999/02/22-rdf-syntax-ns#" rdf:resource="http://atomowl.org/ontologies/atomrdf#Link"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:type xmlns:ns0pred="http://www.w3.org/1999/02/22-rdf-syntax-ns#" rdf:resource="http://rdfs.org/sioc/types#Comment"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:type xmlns:ns0pred="http://www.w3.org/1999/02/22-rdf-syntax-ns#" rdf:resource="http://atomowl.org/ontologies/atomrdf#Entry"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:has_container xmlns:ns0pred="http://rdfs.org/sioc/ns#" rdf:resource="http://example.com/dataspace/test3/wiki/testWiki"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki"&gt;&lt;ns0pred:container_of xmlns:ns0pred="http://rdfs.org/sioc/ns#" rdf:resource="http://example.com/dataspace/test3/wiki/testWiki/MyTest"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki"&gt;&lt;ns0pred:contains xmlns:ns0pred="http://atomowl.org/ontologies/atomrdf#" rdf:resource="http://example.com/dataspace/test3/wiki/testWiki/MyTest"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:content xmlns:ns0pred="http://rdfs.org/sioc/ns#"&gt;test&lt;/ns0pred:content&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:topic xmlns:ns0pred="http://rdfs.org/sioc/ns#" rdf:resource="http://example.com/dataspace/test3/wiki/testWiki"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://example.com/dataspace/test3/wiki/testWiki/MyTest"&gt;&lt;ns0pred:source xmlns:ns0pred="http://atomowl.org/ontologies/atomrdf#" rdf:resource="http://example.com/dataspace/test3/wiki/testWiki"/&gt;&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
</programlisting>
          </listitem>
          <listitem>
            <para>To the user's wiki instance will be added a new WikiWord "MyTest" with content the value of the SIOC term attribute "content":
</para>
            <programlisting>
&lt;http://example.com/dataspace/test3/wiki/testWiki/MyTest&gt; &lt;http://rdfs.org/sioc/ns#content&gt; &lt;test&gt;
i.e. the content will be "test".
</programlisting>
          </listitem>
        </itemizedlist>
        <para>Now let's check what data was inserted in the Quad Store:</para>
        <orderedlist>
          <listitem>
            <para>Go to the sparql endpoint, i.e. for ex. to http://example.com/sparql</para>
          </listitem>
          <listitem>
            <para>Enter for Default Graph URI:
</para>
            <programlisting>
http://example.com/DAV/home/test3/wiki/testWiki/MyTest
</programlisting>
          </listitem>
          <listitem>
            <para>Enter for Query text:
</para>
            <programlisting>
SELECT * WHERE {?s ?p ?o}
</programlisting>
          </listitem>
          <listitem>
            <para>Click the "Run Query" button.</para>
          </listitem>
          <listitem>
            <para>As result will be shown the inserted triples:
</para>
            <programlisting>
s  	                                                    p  	                                             o
http://example.com/dataspace/test3/wiki/testWiki 	    http://rdfs.org/sioc/ns#container_of 	     http://example.com/dataspace/test3/wiki/testWiki/MyTest
http://example.com/dataspace/test3/wiki/testWiki 	    http://atomowl.org/ontologies/atomrdf#entry      http://example.com/dataspace/test3/wiki/testWiki/MyTest
http://example.com/dataspace/test3/wiki/testWiki 	    http://atomowl.org/ontologies/atomrdf#contains   http://example.com/dataspace/test3/wiki/testWiki/MyTest
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://rdfs.org/sioc/types#Comment
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://atomowl.org/ontologies/atomrdf#Entry
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://atomowl.org/ontologies/atomrdf#Link
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://www.w3.org/2000/01/rdf-schema#label 	     MyTest
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://rdfs.org/sioc/ns#has_container 	     http://example.com/dataspace/test3/wiki/testWiki
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://rdfs.org/sioc/ns#content 	             test
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://rdfs.org/sioc/ns#topic 	             http://example.com/dataspace/test3/wiki/testWiki
http://example.com/dataspace/test3/wiki/testWiki/MyTest  http://atomowl.org/ontologies/atomrdf#source     http://example.com/dataspace/test3/wiki/testWiki
</programlisting>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="rdfinsertmethodwebdav">
        <title>Using WebDAV</title>
        <para> Example using WebDAV (mount folder to DAV and dump; if this is the rdf_sink
the Quad Store is updated automatically, or you can load from DAV manually to quad store)</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>
          <emphasis>Example 1: Using ODS Briefcase</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Go to your ods location, for ex. http://example.com/ods</para>
          </listitem>
          <listitem>
            <para>Register user, for ex. user test1</para>
          </listitem>
          <listitem>
            <para>Login if not already in ods</para>
          </listitem>
          <listitem>
            <para>Go to ODS -&gt; Briefcase</para>
          </listitem>
          <listitem>
            <para>Go to ODS -&gt; Briefcase</para>
          </listitem>
          <listitem>
            <para>Click the "New folder" icon from the Main Briefcase horizontal navigation</para>
          </listitem>
          <listitem>
            <para>Enter for name for ex. "mytest" and click the "Create" button.
          </para>
            <figure xml:id="uc6" floatstyle="1">
              <title>Using Briefcase UI</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/uc6.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Go to folder "mytest" and click the click the "Upload" icon from the Main Briefcase horizontal navigation</para>
          </listitem>
          <listitem>
            <para>Enter for name for ex. "mytest" and click the "Create" button.
          </para>
            <figure xml:id="uc7" floatstyle="1">
              <title>Using Briefcase UI</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/uc7.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>In the shown form set:
          </para>
            <itemizedlist>
              <listitem>
                <para>Destination: RDF Store</para>
              </listitem>
              <listitem>
                <para>RDF graph name for ex. with the value: http://example.com/DAV/home/test2/mytest/</para>
              </listitem>
              <listitem>
                <para>Select URL or File. For ex. you can select the following file with name jose.rdf:
</para>
                <programlisting>
&lt;rdf:RDF xmlns="http://www.example/jose/foaf.rdf#"
    xmlns:foaf="http://xmlns.com/foaf/0.1/"
    xmlns:log="http://www.w3.org/2000/10/swap/log#"
    xmlns:myfoaf="http://www.example/jose/foaf.rdf#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;

    &lt;foaf:Person rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;
        &lt;foaf:homepage rdf:resource="http://www.example/jose/"/&gt;
        &lt;foaf:knows rdf:resource="http://www.example/jose/foaf.rdf#juan"/&gt;
        &lt;foaf:name&gt;Jose Jimen~ez&lt;/foaf:name&gt;
        &lt;foaf:nick&gt;Jo&lt;/foaf:nick&gt;
        &lt;foaf:workplaceHomepage rdf:resource="http://www.corp.example/"/&gt;
    &lt;/foaf:Person&gt;

    &lt;foaf:Person rdf:about="http://www.example/jose/foaf.rdf#juan"&gt;
        &lt;foaf:mbox rdf:resource="mailto:juan@mail.example"/&gt;
    &lt;/foaf:Person&gt;

    &lt;foaf:Person rdf:about="http://www.example/jose/foaf.rdf#julia"&gt;
        &lt;foaf:mbox rdf:resource="mailto:julia@mail.example"/&gt;
    &lt;/foaf:Person&gt;

    &lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#kendall"&gt;

        &lt;foaf:knows rdf:resource="http://www.example/jose/foaf.rdf#edd"/&gt;
    &lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
</programlisting>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>You can also perform the steps from above by uploading the file in the rdf_sink
folder i.e. in Briefcase it will be with this path: DAV/home/test2/rdf_sink and respectively the "RDF graph name"
will have this value: http://host:port/DAV/home/username/rdf_sink/</para>
          </listitem>
        </orderedlist>
        <para>Execute from ISQL or from the SPARQL endpoint the following query:</para>
        <programlisting>
SELECT * FROM &lt;http://example.com/DAV/home/test2/mytest/&gt;
WHERE {?s ?p ?o}
</programlisting>
        <para>As result should be shown:</para>
        <programlisting>
s  	                                  p  	                                            o
http://www.example/jose/foaf.rdf#jose 	  http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://xmlns.com/foaf/0.1/Person
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/nick 	            Jo
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/name 	            Jose Jimen~ez
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/knows 	            http://www.example/jose/foaf.rdf#juan
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/homepage 	            http://www.example/jose/
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/workplaceHomepage 	    http://www.corp.example/
http://www.example/jose/foaf.rdf#kendall  http://xmlns.com/foaf/0.1/knows 	            http://www.example/jose/foaf.rdf#edd
http://www.example/jose/foaf.rdf#julia 	  http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://xmlns.com/foaf/0.1/Person
http://www.example/jose/foaf.rdf#julia 	  http://xmlns.com/foaf/0.1/mbox 	            mailto:julia@mail.example
http://www.example/jose/foaf.rdf#juan 	  http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://xmlns.com/foaf/0.1/Person
http://www.example/jose/foaf.rdf#juan 	  http://xmlns.com/foaf/0.1/mbox 	            mailto:juan@mail.example
</programlisting>
        <para>
          <emphasis>Example 2: Using Conductor UI</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Go to Conductor UI, for ex. at http://example.com/conductor</para>
          </listitem>
          <listitem>
            <para>Login as dba user</para>
          </listitem>
          <listitem>
            <para>Go to Linked Data -&gt; Quad Store Upload
          </para>
            <figure xml:id="uc1" floatstyle="1">
              <title>Quad Store Upload</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/uc1.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>In the shown form click the "Browse" button in order to select a file, for ex.
        	the file jose.rdf and set the "RDF IRI*"
          </para>
            <figure xml:id="uc2" floatstyle="1">
              <title>Quad Store Upload</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/uc2.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click the "Upload" button.
          </para>
            <figure xml:id="uc3" floatstyle="1">
              <title>Quad Store Upload</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/uc3.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
      </section>
      <section xml:id="rdfinsertmethodvirtuosocrawler">
        <title>Using Virtuoso Crawler</title>
        <para>Using Virtuoso Crawler (which includes the Sponger options so you crawl
non-RDF but get RDF and this can go to the Quad Store).</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <orderedlist>
          <listitem>
            <para>Go to Conductor UI. For ex. at http://example.com/conductor :
          </para>
            <figure xml:id="rdfinsertwebdav11" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert11.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Enter admin user credentials:
          </para>
            <figure xml:id="rdfinsertwebdav12" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert12.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Go to tab Web Application Server:
          </para>
            <figure xml:id="rdfinsertwebdav13" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert13.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Go to tab Content Imports:
          </para>
            <figure xml:id="rdfinsertwebdav14" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert14.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click the "New Target" button:
          </para>
            <figure xml:id="rdfinsertwebdav15" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert15.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>In the shown form set respectively:

</para>
            <orderedlist>
              <listitem>
                <para>"Target description": Tim Berners-Lee's electronic Business Card 
</para>
              </listitem>
              <listitem>
                <para>"Target URL": http://www.w3.org/People/Berners-Lee/ ;
</para>
              </listitem>
              <listitem>
                <para>"Copy to local DAV collection " for ex.: /DAV/home/demo/my-crawling/ ;
</para>
              </listitem>
              <listitem>
                <para>Choose from the list "Local resources owner": demo ;
</para>
              </listitem>
              <listitem>
                <para>Leave checked by default the check-box "Store documents locally". -- Note: if "Store document locally" is not checked, then in this case no documents will be save as DAV resource and the specified DAV folder from above will not be used ;
</para>
              </listitem>
              <listitem>
                <para>Check the check-box with label "Store metadata" ; 
</para>
              </listitem>
              <listitem>
                <para>Specify which cartridges to be involved by hatching their check-box ;
</para>
              </listitem>
              <listitem>
                <para>Note: when selected "Convert Link", then all HREFs in the local stored content will be relative.
</para>
              </listitem>
            </orderedlist>
            <figure xml:id="rdfinsertwebdav16" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert16.png"/>
                </imageobject>
              </mediaobject>
            </figure>
            <figure xml:id="rdfinsertwebdav17" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert17.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click the button "Create":
          </para>
            <figure xml:id="rdfinsertwebdav19" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert19.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>Click the button "Import Queues":
          </para>
            <figure xml:id="rdfinsertwebdav20" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert20.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>For "Robot target" with label "Tim Berners-Lee's electronic Business Card"
click "Run".</para>
          </listitem>
          <listitem>
            <para>As result should be shown the number of the pages retrieved.
          </para>
            <figure xml:id="rdfinsertwebdav2" floatstyle="1">
              <title>Using Virtuoso Crawler</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/rdfinsert2.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </orderedlist>
        <para>
          <emphasis>Example: Use of schedular to interface Virtuoso Quad Store with PTSW using the following program:</emphasis>
        </para>
        <programlisting>

create procedure PTSW_CRAWL ()
{
  declare xt, xp any;
  declare content, headers any;

  content := http_get ('http://pingthesemanticweb.com/export/', headers);
  xt := xtree_doc (content);
  xp := xpath_eval ('//rdfdocument/@url', xt, 0);
  foreach (any x in xp) do
    {
      x := cast (x as varchar);
      dbg_obj_print (x);
      {
	declare exit handler for sqlstate '*' {
	  log_message (sprintf ('PTSW crawler can not load : %s', x));
	};
        sparql load ?:x into graph ?:x;
	update DB.DBA.SYS_HTTP_SPONGE set HS_LOCAL_IRI = x, HS_EXPIRATION = null WHERE HS_LOCAL_IRI = 'destMD5=' || md5 (x) || '&amp;graphMD5=' || md5 (x);
	commit work;
      }
    }
}
;

insert soft SYS_SCHEDULED_EVENT (SE_SQL, SE_START, SE_INTERVAL, SE_NAME)
	values ('DB.DBA.PTSW_CRAWL ()', cast (stringtime ('0:0') as DATETIME), 60, 'PTSW Crawling');
</programlisting>
        <tip>
          <title>See Also:</title>
          <para>
            <link linkend="contentcrawlerrdf">Other Methods to Set Up the Content Crawler for RDF gathering.</link>
          </para>
        </tip>
      </section>
      <section xml:id="rdfinsertmethodsparqlqueryandsponger">
        <title>Using SPARQL Query and Sponger (i.e. we Fetch the Network Resources in the FROM Clause or values for the graph-uri parameter in SPARQL protocol URLs)</title>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>Execute the following query: </para>
        <programlisting>
SQL&gt;SPARQL
SELECT ?id
FROM NAMED &lt;http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/sioc.ttl&gt;
 OPTION (get:soft "soft", get:method "GET")
WHERE { GRAPH ?g { ?id a ?o } }
limit 10;
</programlisting>
        <para>As result will be shown the retrieved triples:</para>
        <programlisting>
id
VARCHAR
_______________________________________________________________________________

http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D
http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com#this
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/612
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/612
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/610
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/610
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/856
http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/856

10 Rows. -- 20 msec.
</programlisting>
      </section>
      <section xml:id="rdfinsertmethodplapis">
        <title>Using Virtuoso PL APIs</title>
        <section xml:id="rdfinsertmethodplapissimpleexample">
          <title>Basic Sponger Cartridge Example</title>
          <para>In the example script we implement a basic mapper which maps a text/plain mime type
to an imaginary ontology, which extends the class Document from FOAF with properties 'txt:UniqueWords'
and 'txt:Chars', where the prefix 'txt:' we specify as 'urn:txt:v0.0:'.</para>
          <programlisting>
use DB;

create procedure DB.DBA.RDF_LOAD_TXT_META
	(
	 in graph_iri varchar,
	 in new_origin_uri varchar,
	 in dest varchar,
         inout ret_body any,
	 inout aq any,
	 inout ps any,
	 inout ser_key any
	 )
{
  declare words, chars int;
  declare vtb, arr, subj, ses, str any;
  declare ses any;
  -- if any error we just say nothing can be done
  declare exit handler for sqlstate '*'
    {
      return 0;
    };
  subj := coalesce (dest, new_origin_uri);
  vtb := vt_batch ();
  chars := length (ret_body);
  -- using the text index procedures we get a list of words
  vt_batch_feed (vtb, ret_body, 1);
  arr := vt_batch_strings_array (vtb);
  -- the list has 'word' and positions array , so we must divide by 2
  words := length (arr) / 2;
  ses := string_output ();
  -- we compose a N3 literal
  http (sprintf ('&lt;%s&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Document&gt; .\n', subj), ses);
  http (sprintf ('&lt;%s&gt; &lt;urn:txt:v0.0:UniqueWords&gt; "%d" .\n', subj, words), ses);
  http (sprintf ('&lt;%s&gt; &lt;urn:txt:v0.0:Chars&gt; "%d" .\n', subj, chars), ses);
  str := string_output_string (ses);
  -- we push the N3 text into the local store
  DB.DBA.TTLP (str, new_origin_uri, subj);
  return 1;
}
;

--
DELETE FROM DB.DBA.SYS_RDF_MAPPERS WHERE RM_HOOK = 'DB.DBA.RDF_LOAD_TXT_META';

INSERT SOFT DB.DBA.SYS_RDF_MAPPERS (RM_PATTERN, RM_TYPE, RM_HOOK, RM_KEY, RM_DESCRIPTION)
    VALUES ('(text/plain)', 'MIME', 'DB.DBA.RDF_LOAD_TXT_META', null, 'Text Files (demo)');

-- here we set order to some large number so don't break existing mappers
update DB.DBA.SYS_RDF_MAPPERS set RM_ID = 2000 WHERE RM_HOOK = 'DB.DBA.RDF_LOAD_TXT_META';
</programlisting>
          <orderedlist>
            <listitem>
              <para>Paste the whole of this code into Conductor's iSQL interface and execute it to
  	define and register the cartridge.</para>
            </listitem>
            <listitem>
              <para>Create a simple text document with a .txt extension. For ex. with name: summary.txt</para>
            </listitem>
            <listitem>
              <para>The .txt file must now be made Web accessible. A simple way to do this is to expose it as a WebDAV
  	resource using Virtuoso's built-in WebDAV support:

</para>
              <orderedlist>
                <listitem>
                  <para>Log in to Virtuoso's ODS Briefcase application;
</para>
                </listitem>
                <listitem>
                  <para>Navigate to your Public folder;
</para>
                </listitem>
                <listitem>
                  <para>Upload your text document, ensuring that the file extension is .txt, the MIME type is set to text/plain and the file permissions are rw-r--r--.
</para>
                </listitem>
                <listitem>
                  <para>As result the file would be Web accessible via the URL http://cname/DAV/home/username/Public/summary.txt .
</para>
                </listitem>
                <listitem>
                  <para>Note: you can also check our 

                  <link xlink:href="http://demo.openlinksw.com/tutorial/hosting/ho_s_30/WebCalendar/tools/summary.txt">live demo
</link>
                  .
</para>
                </listitem>
              </orderedlist>
            </listitem>
            <listitem>
              <para>To test the mapper we just use /sparql endpoint with option 'Retrieve remote
RDF data for all missing source graphs' to execute (for ex.):
</para>
              <programlisting>
SELECT *
FROM &lt;http://cname/DAV/home/username/Public/summary.txt&gt;
WHERE {?s ?p ?o}
</programlisting>
            </listitem>
            <listitem>
              <para>Click the "Run Query" button.</para>
            </listitem>
            <listitem>
              <para>As result should be shown the found triples, for ex.:
</para>
              <programlisting>
s  	                                               p  	                                            o
http://cname/DAV/home/username/Public/summary.txt  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://xmlns.com/foaf/0.1/Document
http://cname/DAV/home/username/Public/summary.txt  urn:txt:v0.0:UniqueWords 	                      47
http://cname/DAV/home/username/Public/summary.txt  urn:txt:v0.0:Chars 	                            625
</programlisting>
            </listitem>
          </orderedlist>
          <para>
            <emphasis>Important: Setting Sponger Permissions</emphasis>
          </para>
          <para>In order to allow the Sponger to update the local RDF quad store with triples
constituting the fetched Network Resource structured data, the role "SPARQL_SPONGE" must be granted to the
account "SPARQL", i.e., to the owner account of /sparql web service endpoint.
This should normally be the case. If not, you must manually grant this
permission. As with most Virtuoso DBA tasks, the Conductor provides the simplest means of
doing this.</para>
          <tip>
            <title>See Also:</title>
            <itemizedlist mark="bullet">
              <listitem>
                <para>The 
                <link linkend="fn_rdf_load_rdfxml">DB.DBA.RDF_LOAD_RDFXML</link>
                 function to
parse the content of RDF/XML text.</para>
              </listitem>
              <listitem>
                <para>The 
                <link linkend="fn_ttlp_mt">DB.DBA.TTLP_MT</link>
                 function to
parse TTL (TURTLE or N3 resource).</para>
              </listitem>
              <listitem>
                <para>The 
                <link linkend="fn_gz_file_open">gz_file_open</link>
                 function to
retrieve content of a gzipped file and example for loading gzipped N3 and Turtle files.</para>
              </listitem>
            </itemizedlist>
          </tip>
        </section>
      </section>
      <section xml:id="rdfinsertmethodsimilerdfbankapi">
        <title>Using SIMILE RDF Bank API</title>
        <para>Virtuoso implements the HTTP-based Semantic Bank API that enables client
applications to post to its RDF Triple Store. This method offers an alternative to
using Virtuoso/PL functions or WebDAV uploads as the triples-insertion mechanism.</para>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>From your machine go to Firefox-&gt;Tools-&gt;PiggyBank-&gt;My Semantic Bank Accounts</para>
        <para>Add in the shown form:</para>
        <itemizedlist>
          <listitem>
            <para>For bank: address: http://demo.openlinksw.com/bank</para>
          </listitem>
          <listitem>
            <para>For account id: demo</para>
          </listitem>
          <listitem>
            <para>For password: demo</para>
          </listitem>
        </itemizedlist>
        <para>Go to http://demo.openlinksw.com/ods</para>
        <para>Log in as user demo, password: demo</para>
        <para>Go to the Weblog tab from the main ODS Navigation</para>
        <para>Click on weblog instance name, for ex. "demo's Weblog".</para>
        <para>When the weblog home page is loaded, click Alt + P.</para>
        <para>As result is shown the "My PiggyBank" page with all the collected information
presented in items.</para>
        <para>For several of the items add Tags from the form "Tag" shown for each of them.</para>
        <para>As result should be shown the message "Last updated: [here goes the date value].</para>
        <para>You can also click "Save" and "Publish" for these items.</para>
        <para>Go to http://demo.openlinksw.com/sparql</para>
        <para>Enter for the "Default Graph URI" field: http://simile.org/piggybank/demo</para>
        <para>Enter for the "Query text" text-area:</para>
        <programlisting>
prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
prefix sioc: &lt;http://rdfs.org/sioc/ns#&gt;
SELECT *
FROM &lt;http://simile.org/piggybank/demo&gt;
WHERE {?s ?p  ?o}
</programlisting>
        <para>Click "Run Query".</para>
        <para>As results are shown the found results.</para>
      </section>
      <section xml:id="rdfinsertmethodrdfnet">
        <title>Using RDF NET</title>
        <para>
          <emphasis>Example:</emphasis>
        </para>
        <para>Execute the following query:</para>
        <programlisting>
SQL&gt; SELECT DB.DBA.HTTP_RDF_NET ('sparql load
"http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com"
into graph &lt;http://www.openlinksw.com/&gt;');
</programlisting>
        <para>As result should be shown:</para>
        <programlisting>
callret
VARCHAR
_______________________________________________________

&lt;?xml version="1.0" ?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:vcard="http://www.w3.org/2001/vcard-rdf/3.0#"
xmlns="http://example.org/book/" xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:ns="http://example.org/ns#"&gt;
&lt;rdf:Description&gt;
&lt;callret-0&gt;Load &lt;http://www.openlinksw.com/dataspace/person/kidehen@openlinksw.com&gt;
into graph &lt;http://www.openlinksw.com/&gt; -- done&lt;/callret-0&gt;
&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;

1 Rows. -- 1982 msec.
</programlisting>
      </section>
      <section xml:id="rdfinsertmethodproxy">
        <title>Using the RDF Proxy (Sponger) Service</title>
        <para>Triples can be inserted also using the Sponger Proxy URI Service. For more information
    	and examples see <link linkend="rdfproxyservice">here</link>

  .</para>
      </section>
    </section>
