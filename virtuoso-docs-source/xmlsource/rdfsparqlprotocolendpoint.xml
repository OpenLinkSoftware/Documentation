<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="rdfsparqlprotocolendpoint">
        <title>SPARQL Web Services &amp; APIs</title>
        <section xml:id="rdfsparqlprotocolendpointintro">
          <title>Introduction</title>
          <para>The Virtuoso SPARQL query service implements the <link xlink:href="http://www.w3.org/TR/rdf-sparql-protocol/">SPARQL Protocol for RDF</link>

(W3C Working Draft 25 January 2006) providing SPARQL query processing for RDF data available on the open internet.</para>
          <para>The query processor extends the standard protocol to provide support for multiple output formats.
At present this uses additional query parameters.</para>
          <para>Supported features include:</para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>Support for GET and POST requests</para>
            </listitem>
            <listitem>
              <para>Support for a variety of transfer MIME-types, including RDF /XML and TURTLE</para>
            </listitem>
            <listitem>
              <para>Support for:
                <emphasis>default-graph-uri</emphasis>, <emphasis>named-graph-uri</emphasis>, <emphasis>using-graph-uri</emphasis>, <emphasis>using-named-graph-uri</emphasis>, <emphasis>format</emphasis>
                parameters
            </para>
            </listitem>
            <listitem>
              <para>Support for:
              <emphasis>debug</emphasis>, <emphasis>timeout</emphasis>, <emphasis>maxrows</emphasis>, <emphasis>qtxt</emphasis>, <emphasis>query</emphasis>
               parameters</para>
            </listitem>
            <listitem>
              <para>Support for a variety of query types including CONSTRUCT, ASK, DESCRIBE</para>
            </listitem>
          </itemizedlist>
          <para>Virtuoso also supports /sparql-graph-crud/ web service endpoint that
implements the current draft of <link xlink:href="http://www.w3.org/TR/sparql11-http-rdf-update/">W3C SPARQL Graph Update protocol</link>

  .
Both /sparql /sparql-graph-crud/ endpoints use the same SPARQL user account,
so this user should be member of SPARQL_UPDATE group in order to modify data via Graph Update protocol.
Note that /sparql/ endpoint has /sparql-auth/ variant that uses web authentication.
Similarly, /sparql-graph-crud/ has /sparql-graph-crud-auth/ variant. As
soon as user is member of SPARQL_UPDATE group, she/he can modify the stored
data via /sparql-graph-crud-auth/ as well as via /sparql-auth/ .

The /sparql-graph-crud/ endpoint is primarily for serving requests from applications, not for manual interactions via browser.

See more information in our <link linkend="sparqloauthendpointauth">SPARQL Authentication</link>

   section.

</para>
        </section>
        <section xml:id="rdfsupportedprotocolendpoint">
          <title>Service Endpoint</title>
          <para>Virtuoso uses the pre-assigned endpoints "/sparql" and "/SPARQL" as the
defaults for exposing its REST based SPARQL Web Services.</para>
          <para>The port number associated with the SPARQL services is determined by the 'ServerPort' key value
in the '[HTTPServer]' section of the virtuoso.ini file. Thus, if the Virtuoso instance is configured
to listen at a none default port e.g. 8890, the SPARQL endpoints would be accessible
at http://example.com:8890/sparql/.</para>
          <para>The SPARQL endpoint supports both GET and POST requests. The client chooses between GET and POST
automatically, using the length of query text as the criterion. If the SPARQL endpoint is accessed without
any URL and requisite SPARQL protocol parameters, an interactive HTML page for capturing SPARQL input will
be presented.</para>
          <section xml:id="rdfsupportedprotocolendpointuricustm">
            <title>Customizing SPARQL Endpoint Page</title>
            <para>The SPARQL Endpoint Page can now be customized using a xsl stylesheet.</para>
            <para>This works by adding the following line with isql:</para>
            <programlisting>
SQL&gt; registry_set ('sparql_endpoint_xsl', 'http://host:port/path/isparql.xsl');
</programlisting>
            <para>where obviously host, port, path and the name isparql.xsl can be set to anything.</para>
          </section>
        </section>
        <section xml:id="rdfrequestparamsextensions">
          <title>SPARQL Protocol Extensions</title>
          <section xml:id="rdfrequestparamsofunctions">
            <title>Request Parameters</title>
            <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
              <title>Request Parameters List</title>
              <tgroup align="char" charoff="50" char="." cols="3">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry>Notes</entry>
                    <entry>Required?</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>service</entry>
                    <entry>Service URI such as 'http://example.com/sparql/'</entry>
                    <entry>Yes</entry>
                  </row>
                  <row>
                    <entry>query</entry>
                    <entry>Text of the query</entry>
                    <entry>Yes</entry>
                  </row>
                  <row>
                    <entry>dflt_graph</entry>
                    <entry>Default graph URI (string or NULL)</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>named_graphs</entry>
                    <entry>Vector of named graphs (or NULL to prevent overriding named graphs specified in the query)</entry>
                    <entry>Yes</entry>
                  </row>
                  <row>
                    <entry>req_hdr</entry>
                    <entry>Additional HTTP headers that should be passed to the service, e.g. 'Host: ...'</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>maxrows</entry>
                    <entry>Limit on the numbers of rows that should be returned (the actual size of the result set may differ)</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>xslt-uri</entry>
                    <entry>Absolute URL of any XSLT stylesheet file to be applied to the SPARQL query results</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>timeout</entry>
                    <entry>Timeout for "anytime" query execution, in milliseconds, values less than 1000 are ignored; see
<link linkend="anytimequeries">Anytime Queries</link>

   for more details</entry>
                    <entry>No</entry>
                  </row>
                  <row>
                    <entry>debug</entry>
                    <entry>If set to on, SPARQL Compiler will check if all variables are declared, and if there
        	is variable that is not declared, an error will be raised</entry>
                    <entry>No</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </section>
          <section xml:id="rdfresponsecodeofprotocol">
            <title>Response Codes</title>
            <para>If the query is a CONSTRUCT or a DESCRIBE then the result set
consists of a single row and a single column. The value inside is a
dictionary of triples in 'long valmode'. Note that the dictionary
object cannot be sent to a SQL client, say, via ODBC. The client may
lose the database connection trying to fetch a result set row that
contains a dictionary object. This disconnection does not disrupt the server,
so the client may readily reconnect to the server, but the disconnected
transaction will have been rolled back.</para>
            <tip>
              <title>See Also:</title>
              <itemizedlist mark="bullet">
                <listitem>
                  <para>
                    <link linkend="virtodbcsparql">Virtuoso ODBC RDF extensions for SPASQL</link>
                  </para>
                </listitem>
              </itemizedlist>
            </tip>
          </section>
          <section xml:id="rdfsupportedmimesofprotocol">
            <title>Response Format</title>
            <para>All the SPARQL protocol standard MIME types are supported by a SPARQL web service client.
Moreover, SPARQL web service endpont supports additional MIME types and in some cases additional
query types for standard MIME types.</para>
            <section xml:id="rdfsupportedmimesofprotocolserver">
              <title>Server Response Formats</title>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>Server Response Formats</title>
                <tgroup align="char" charoff="50" char="." cols="3">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>Content-Type</entry>
                      <entry>SPARQL query type</entry>
                      <entry>Description</entry>
                    </row>
                    <row>
                      <entry>'application/sparql-results+xml'</entry>
                      <entry>SELECT, ASK</entry>
                      <entry>Canonical XML presentation of SPARQL result set</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+n3'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+ttl'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+turtle'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/turtle'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/n3'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'application/turtle'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'application/x-turtle'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'application/x-nice-turtle'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle, like above, but the server will try to use "list" and "[...]" notations to make the document easier to read. This formatting is a slow procedure so long results will be formatted as plain Turtle.</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+nt'</entry>
                      <entry>SELECT</entry>
                      <entry>Format for NT (each triple is printed separately without abbreviations)</entry>
                    </row>
                    <row>
                      <entry>'text/plain'</entry>
                      <entry>SELECT</entry>
                      <entry>Format for NT (each triple is printed separately without abbreviations)</entry>
                    </row>
                    <row>
                      <entry>'text/ntriples'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>Format for NT (each triple is printed separately without abbreviations)</entry>
                    </row>
                    <row>
                      <entry>'application/x-trig'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>TriG syntax for result sets, triples and quads (or sets of graphs with triples). While it is not used for quads, the output is same as for Turtle.</entry>
                    </row>
                    <row>
                      <entry>'application/rdf+xml'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>Canonical RDF/XML presentation</entry>
                    </row>
                    <row>
                      <entry>'application/soap+xml'</entry>
                      <entry>SELECT</entry>
                      <entry>SOAP XML</entry>
                    </row>
                    <row>
                      <entry>'application/soap+xml;11'</entry>
                      <entry>SELECT</entry>
                      <entry>SOAP XML</entry>
                    </row>
                    <row>
                      <entry>'text/html'</entry>
                      <entry>SELECT</entry>
                      <entry>HTML document for plain browsing; it's a TABLE for result set and HTML with micro-data for triples</entry>
                    </row>
                    <row>
                      <entry>'text/md+html'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>HTML with microdata; for triples only</entry>
                    </row>
                    <row>
                      <entry>'text/microdata+html'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>HTML with microdata; for triples only</entry>
                    </row>
                    <row>
                      <entry>'text/x-html+ul'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>HTML with triples grouped into hierarchical list</entry>
                    </row>
                    <row>
                      <entry>'text/x-html+tr'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>HTML with triples in form of a table</entry>
                    </row>
                    <row>
                      <entry>'application/vnd.ms-excel'</entry>
                      <entry>SELECT</entry>
                      <entry>HTML table for loading data into stylesheets</entry>
                    </row>
                    <row>
                      <entry>'text/csv'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>Comma-separated values</entry>
                    </row>
                    <row>
                      <entry>'text/tab-separated-values'</entry>
                      <entry>SELECT</entry>
                      <entry>Tab-separated values</entry>
                    </row>
                    <row>
                      <entry>'application/javascript'</entry>
                      <entry>SELECT</entry>
                      <entry>JavaScript data fragment</entry>
                    </row>
                    <row>
                      <entry>'application/json'</entry>
                      <entry>SELECT</entry>
                      <entry>JSON</entry>
                    </row>
                    <row>
                      <entry>'application/sparql-results+json'</entry>
                      <entry>SELECT, ASK</entry>
                      <entry>JSON result set</entry>
                    </row>
                    <row>
                      <entry>'application/odata+json'</entry>
                      <entry>SELECT, ASK, CONSTRUCT, DESCRIBE</entry>
                      <entry>JSON in ODATA style</entry>
                    </row>
                    <row>
                      <entry>'application/microdata+json'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>Microdata as JSON; for triples only</entry>
                    </row>
                    <row>
                      <entry>'application/rdf+json'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>JSON in TALIS style; for triples only</entry>
                    </row>
                    <row>
                      <entry>'application/x-rdf+json'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>JSON in TALIS style; for triples only</entry>
                    </row>
                    <row>
                      <entry>'application/x-json+ld'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>JSON in Linked Data style; for triples only</entry>
                    </row>
                    <row>
                      <entry>'application/ld+json'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>JSON in Linked Data style; for triples only</entry>
                    </row>
                    <row>
                      <entry>'text/cxml'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>CXML output for rendering in Pivot Viewer of MS SilverLight?. Result sets and triples are handled in different ways.</entry>
                    </row>
                    <row>
                      <entry>'text/cxml+qrcode'</entry>
                      <entry>SELECT,CONSTRUCT, DESCRIBE</entry>
                      <entry>CXML output with QRcode imprinted into each picture; for result sets and triples</entry>
                    </row>
                    <row>
                      <entry>'application/atom+xml'</entry>
                      <entry>SELECT, CONSTRUCT, DESCRIBE</entry>
                      <entry>Atom-style XML</entry>
                    </row>
                    <row>
                      <entry>'application/xhtml+xml'</entry>
                      <entry>SELECT</entry>
                      <entry>RDFa placed into XHTML; for triples only</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry/>
                    </row>
                  </tbody>
                </tgroup>
              </table>
            </section>
            <section xml:id="rdfsupportedmimesofprotocolclient">
              <title>Client Response Formats</title>
              <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
                <title>Client Response Formats</title>
                <tgroup align="char" charoff="50" char="." cols="3">
                  <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                  <thead>
                    <row>
                      <entry>Content-Type</entry>
                      <entry>SPARQL query type</entry>
                      <entry>Description</entry>
                    </row>
                    <row>
                      <entry>'application/sparql-results+xml'</entry>
                      <entry>SELECT, ASK</entry>
                      <entry>Canonical XML presentation of SPARQL result set</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+n3'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+ttl'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/rdf+turtle'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/turtle'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'text/n3'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'application/turtle'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'application/x-turtle'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Turtle</entry>
                    </row>
                    <row>
                      <entry>'application/rdf+xml'</entry>
                      <entry>CONSTRUCT, DESCRIBE</entry>
                      <entry>Canonical RDF/XML presentation</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry/>
                    </row>
                  </tbody>
                </tgroup>
              </table>
              <para>The current implementation does not support returning the results of SELECT as RDF/XML or 'sparql-results-2'.</para>
              <para>If the HTTP header returned by the remote server does not contain a 'Content-Type' line, the client may guess MIME type from the text of the returned body.</para>
              <para>Error messages returned from the service are returned as XML documents, using the MIME type application/xml. The documents consist of a single element containing an error message.</para>
            </section>
          </section>
          <section xml:id="rdfsupportedmimesofprotocoladdselect">
            <title>Additional Response Formats -- SELECT</title>
            <para>Use the format parameter to select one of the following alternate output formats:</para>
            <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
              <title>Additional Response formats list -- SELECT</title>
              <tgroup align="char" charoff="50" char="." cols="3">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>Format Value</entry>
                    <entry>Description</entry>
                    <entry>Mimetype</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>HTML</entry>
                    <entry>The result is a HTML document containing query summary and tabular results. The format
is human-readable but not intended for using by applications because it makes strings undistinguishable
from IRIs and loses other details such as exact datatypes of returned values.</entry>
                    <entry>text/html</entry>
                  </row>
                  <row>
                    <entry>json</entry>
                    <entry>Two separate MIME types exist for JSON: JSON serialization of results is
'application/sparql-results+json' and confirms to the draft specification "Serializing SPARQL
Query Results in JSON". JSON serialization of triples is 'application/rdf+json' and interoperable
with Talis. Sometimes a client needs a JSON but it does not know the type of query it sends to
Virtuoso web service endpoint. In this case the client can specify either one MIME-type
'application/json' or both 'application/sparql-results+json' and 'application/rdf+json' in the
"Accept" header line and Virtuoso will chose the appropriate one automatically. Similar trick
works for other sorts of result types: Virtuoso inspects the whole "Accept" header line to
find out the most appropriate return type for the given query.
        </entry>
                    <entry>application/sparql-results+json</entry>
                  </row>
                  <row>
                    <entry>json</entry>
                    <entry/>
                    <entry>application/rdf+json</entry>
                  </row>
                  <row>
                    <entry>js</entry>
                    <entry>Javascript serialization of results generates an HTML table with the CSS class sparql.
The table contains a column indicating row number and additional columns for each query variable.
Each query solution contributes one row of the table.
Unbound variables are indicated with a non-breaking space in the appropriate table cells.</entry>
                    <entry>application/javascript</entry>
                  </row>
                  <row>
                    <entry>table</entry>
                    <entry/>
                    <entry>text/html</entry>
                  </row>
                  <row>
                    <entry>XML</entry>
                    <entry/>
                    <entry>text/html</entry>
                  </row>
                  <row>
                    <entry>TURTLE</entry>
                    <entry/>
                    <entry>text/html</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </section>
          <section xml:id="rdfsupportedmimesofprotocoladdcons">
            <title>Additional Response Formats -- CONSTRUCT &amp; DESCRIBE</title>
            <para>
              <emphasis>Example output of DESCRIBE in rdf+json serialization format</emphasis>
            </para>
            <orderedlist>
              <listitem>
                <para>Go to the sparql endpoint at http://host:port/sparql, for ex. at http://dbpedia.org/sparql</para>
              </listitem>
              <listitem>
                <para>Enter query in the "Query text" area, for ex.:
</para>
                <programlisting>
DESCRIBE &lt;http://dbpedia.org/resource/%22S%22_Bridge_II&gt;
</programlisting>
              </listitem>
              <listitem>
                <para>Select for "Display Results As": JSON</para>
              </listitem>
              <listitem>
                <para>Click "Run Query" button.</para>
              </listitem>
              <listitem>
                <para>As result should be produced the following output:
</para>
                <programlisting>
{
  { 'http://dbpedia.org/resource/%22S%22_Bridge_II' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/ontology/Place' } ,
      { 'type' : 'uri', 'value' : 'http://dbpedia.org/ontology/Resource' } ,
      { 'type' : 'uri', 'value' : 'http://dbpedia.org/ontology/HistoricPlace' } } ,
    { 'http://dbpedia.org/ontology/added' : { 'type' : 'literal', 'value' : '1973-04-23' , 'datatype' : 'http://www.w3.org/2001/XMLSchema#date' } } ,
    { 'http://www.w3.org/2003/01/geo/wgs84_pos#lat' : { 'type' : 'literal', 'value' : 39.99305725097656 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#float' } } ,
    { 'http://www.w3.org/2003/01/geo/wgs84_pos#long' : { 'type' : 'literal', 'value' : -81.74666595458984 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#float' } } ,
    { 'http://dbpedia.org/property/wikiPageUsesTemplate' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Template:infobox_nrhp' } } ,
    { 'http://dbpedia.org/property/name' : { 'type' : 'literal', 'value' : '"S" Bridge II' , 'lang' : 'en' } } ,
    { 'http://dbpedia.org/property/nearestCity' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/New_Concord%2C_Ohio' } ,
      { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Ohio' } } ,
    { 'http://dbpedia.org/property/latDirection' : { 'type' : 'literal', 'value' : 'N' , 'lang' : 'en' } } ,
    { 'http://dbpedia.org/property/governingBody' : { 'type' : 'literal', 'value' : 'State' , 'lang' : 'en' } } ,
    { 'http://www.georss.org/georss/point' : { 'type' : 'literal', 'value' : '39.99305556 -81.74666667' } ,
      { 'type' : 'literal', 'value' : '39.9930555556 -81.7466666667' } } ,
    { 'http://xmlns.com/foaf/0.1/name' : { 'type' : 'literal', 'value' : '"S" Bridge II' } } ,
    { 'http://dbpedia.org/property/latDegrees' : { 'type' : 'literal', 'value' : 39 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://dbpedia.org/property/latMinutes' : { 'type' : 'literal', 'value' : 59 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://dbpedia.org/property/latSeconds' : { 'type' : 'literal', 'value' : 35 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://dbpedia.org/property/longDirection' : { 'type' : 'literal', 'value' : 'W' , 'lang' : 'en' } } ,
    { 'http://dbpedia.org/property/architect' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Benjamin_Latrobe' } } ,
    { 'http://dbpedia.org/property/added' : { 'type' : 'literal', 'value' : '1973-04-23' , 'datatype' : 'http://www.w3.org/2001/XMLSchema#date' } } ,
    { 'http://www.w3.org/2000/01/rdf-schema#label' : { 'type' : 'literal', 'value' : '"S" Bridge II (Muskingum County, Ohio)' , 'lang' : 'nl' } ,
      { 'type' : 'literal', 'value' : '"S" Bridge II' , 'lang' : 'en' } } ,
    { 'http://dbpedia.org/ontology/architect' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Benjamin_Latrobe' } } ,
    { 'http://xmlns.com/foaf/0.1/img' : { 'type' : 'uri', 'value' : 'http://upload.wikimedia.org/wikipedia/commons/d/d4/FoxRunS-Bridge_NewConcordOH.jpg' } } ,
    { 'http://dbpedia.org/property/locmapin' : { 'type' : 'literal', 'value' : 'Ohio' , 'lang' : 'en' } } ,
    { 'http://dbpedia.org/property/refnum' : { 'type' : 'literal', 'value' : 73001513 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://dbpedia.org/property/abstract' : { 'type' : 'literal', 'value' : '"S" Bridge II is a historic S bridge near New Concord, Ohio, United States. A part of the National Road, the first federally-financed highway in the United States, it was built in 1828. Its peculiar shape, typical for an S bridge, is designed to minimize the span and allow easy access. In 1973, it was listed on the National Register of Historic Places.' , 'lang' : 'en' } ,
      { 'type' : 'literal', 'value' : '"S" Bridge II bij New Concord, Ohio, is een deel van de National Road, een van de eerste highways die door de federale overheid vanaf 1811 werden aangelegd. De vorm, die de brug als een S Brug kenmerkt, is bedoeld om de overspanning zo klein mogelijk te houden en toch gemakkelijk toegang tot de brug te verlenen. De brug staat sinds 1973 op de lijst van het National Register of Historic Places als monument vermeld.' , 'lang' : 'nl' } } ,
    { 'http://www.w3.org/2004/02/skos/core#subject' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Category:National_Register_of_Historic_Places_in_Ohio' } ,
      { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Category:Bridges_on_the_National_Register_of_Historic_Places' } } ,
    { 'http://dbpedia.org/ontology/nearestCity' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/Ohio' } ,
      { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/New_Concord%2C_Ohio' } } ,
    { 'http://xmlns.com/foaf/0.1/depiction' : { 'type' : 'uri', 'value' : 'http://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/FoxRunS-Bridge_NewConcordOH.jpg/200px-FoxRunS-Bridge_NewConcordOH.jpg' } } ,
    { 'http://dbpedia.org/property/caption' : { 'type' : 'literal', 'value' : 'The bridge in the fall' , 'lang' : 'en' } } ,
    { 'http://dbpedia.org/property/longDegrees' : { 'type' : 'literal', 'value' : 81 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://dbpedia.org/property/longMinutes' : { 'type' : 'literal', 'value' : 44 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://dbpedia.org/property/longSeconds' : { 'type' : 'literal', 'value' : 48 , 'datatype' : 'http://www.w3.org/2001/XMLSchema#integer' } } ,
    { 'http://www.w3.org/2000/01/rdf-schema#comment' : { 'type' : 'literal', 'value' : '"S" Bridge II is a historic S bridge near New Concord, Ohio, United States.' , 'lang' : 'en' } ,
      { 'type' : 'literal', 'value' : '"S" Bridge II bij New Concord, Ohio, is een deel van de National Road, een van de eerste highways die door de federale overheid vanaf 1811 werden aangelegd.' , 'lang' : 'nl' } } ,
    { 'http://xmlns.com/foaf/0.1/page' : { 'type' : 'uri', 'value' : 'http://en.wikipedia.org/wiki/%22S%22_Bridge_II' } } } ,
  { 'http://dbpedia.org/resource/%22S%22_Bridge_II_%28Muskingum_County%2C_Ohio%29' : { 'http://dbpedia.org/property/redirect' : { 'type' : 'uri', 'value' : 'http://dbpedia.org/resource/%22S%22_Bridge_II' } } }
}

</programlisting>
              </listitem>
            </orderedlist>
            <para>
              <emphasis>Example output of CONSTRUCT in rdf+json serialization format</emphasis>
            </para>
            <orderedlist>
              <listitem>
                <para>Go to the sparql endpoint at http://host:port/sparql, for ex. at http://dbpedia.org/sparql</para>
              </listitem>
              <listitem>
                <para>Enter query in the "Query text" area, for ex.:
</para>
                <programlisting>
CONSTRUCT
{
 ?s a ?Concept .
}
WHERE
{
 ?s a ?Concept .
}
LIMIT 10
</programlisting>
              </listitem>
              <listitem>
                <para>Select for "Display Results As": JSON</para>
              </listitem>
              <listitem>
                <para>Click "Run Query" button.</para>
              </listitem>
              <listitem>
                <para>As result should be produced the following output:
</para>
                <programlisting>
{
  { 'http://dbpedia.org/ontology/Place' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/Area' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/City' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/River' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/Road' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/Lake' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/LunarCrater' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/ShoppingMall' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/Park' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } } ,
  { 'http://dbpedia.org/ontology/SiteOfSpecialScientificInterest' : { 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' : { 'type' : 'uri', 'value' : 'http://www.w3.org/2002/07/owl#Class' } } }
}
</programlisting>
              </listitem>
            </orderedlist>
            <para>
For interoperability with clients that were developed before current versions of SPARQL protocol and
format specs are issued, Virtuoso supports some obsolete variants of standard MIME types.
'text/rdf+n3', 'text/rdf+ttl', 'application/turtle' and 'application/x-turtle' are understood for
TURTLE output, 'application/x-rdf+json' and 'application/rdf+json' are for "Serializing SPARQL Query
Results in JSON". When a client specifies obsolete MIME type but not its standard variant, an obsolete
variant is returned for interoperability.
</para>
          </section>
          <section xml:id="viewresultspagesparqldebug">
            <title>Strict checking of void variables</title>
            <para>To set SPARQL Endpoint to check if all variables in a given query are declared correctly,
  	one should hatch the the Options "Strict checking of void variables" check-box. In that case,
  	if a variable declaration is missing, i.e. not included in the SPARQL Query WHERE clause, then an error will be raised.
  	For example, on attempt to execute the following query:
  </para>
            <programlisting>
-- 	Options "Strict checking of void variables" check-box is checked:
select ?y
where
 {
  ?s ?p ?o
 }
</programlisting>
            <para>since the variable <code>?y</code>

   is not declared, the following error will be raised:</para>
            <programlisting>
Virtuoso 37000 Error SP031: SPARQL compiler:
Variable 'y' is used in the query result set but not assigned

SPARQL query:

#output-format:text/html
define sql:signal-void-variables 1 define sql:gs-app-callback "ODS" select ?y
where
{
?s ?p ?o
}
</programlisting>
          </section>
          <section xml:id="viewresultspagesparqlqex">
            <title>View Results Page of SPARQL Query Execution</title>
            <para>To view SPARQL Endpoint Results page of SPARQL query execution should be used the parameter
<emphasis>query</emphasis>

   i.e the SPARQL Protocol URL should look like:</para>
            <programlisting>
http://cname/sparql?default-graph-uri=&amp;query=...
</programlisting>
            <para>
              <emphasis>Example</emphasis>
            </para>
            <para>Suppose the following simple query:</para>
            <programlisting>
SELECT *
WHERE
  {
    ?s ?p ?o
  }
LIMIT 10
</programlisting>
            <para>See <link xlink:href="http://demo.openlinksw.com/sparql?default-graph-uri=&amp;query=SELECT+*+%0D%0AWHERE+%0D%0A++{%0D%0A++++%3Fs+%3Fp+%3Fo%0D%0A++}%09%0D%0ALIMIT+10++&amp;should-sponge=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=121&amp;CXML_redir_for_hrefs=&amp;timeout=0&amp;debug=on">this example link</link>

   against <link xlink:href="http://demo.openlinksw.com/sparql">Virtuoso Demo Server SPARQL Endpoint</link>

   with SPARQL Protocol URL.</para>
          </section>
          <section xml:id="viewresultspagesparqlqed">
            <title>View Editor Page of SPARQL Query</title>
            <para>To view the SPARQL Endpoint editor page of SPARQL query execution should be used the parameter
<emphasis>qtxt</emphasis>

   i.e the SPARQL Protocol URL should look like:</para>
            <programlisting>
http://cname/sparql?default-graph-uri=&amp;qtxt=...
</programlisting>
            <para>
              <emphasis>Example</emphasis>
            </para>
            <para>Suppose the following simple query:</para>
            <programlisting>
SELECT *
WHERE
  {
    ?s ?p ?o
  }
LIMIT 10
</programlisting>
            <para>Suppose also <link xlink:href="http://demo.openlinksw.com/sparql?default-graph-uri=&amp;query=SELECT+*+%0D%0AWHERE+%0D%0A++{%0D%0A++++%3Fs+%3Fp+%3Fo%0D%0A++}%09%0D%0ALIMIT+10++&amp;should-sponge=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=121&amp;CXML_redir_for_hrefs=&amp;timeout=0&amp;debug=on">this results page link</link>

   against <link xlink:href="http://demo.openlinksw.com/sparql">Virtuoso Demo Server SPARQL Endpoint</link>

   with SPARQL Protocol URL. </para>
            <para>Replace the parameter name <emphasis>query</emphasis>

   with <emphasis>qtxt</emphasis>

  .</para>
            <para><link xlink:href="http://demo.openlinksw.com/sparql?default-graph-uri=&amp;qtxt=SELECT+*+%0D%0AWHERE+%0D%0A++{%0D%0A++++%3Fs+%3Fp+%3Fo%0D%0A++}%09%0D%0ALIMIT+10++&amp;should-sponge=&amp;format=text%2Fhtml&amp;CXML_redir_for_subjs=121&amp;CXML_redir_for_hrefs=&amp;timeout=0&amp;debug=on">Access the new link</link>

  , which should present the SPARQL Endpoint Editor page with "Query Text" area filled in with the SPARQL Query from above.</para>
          </section>
          <section xml:id="rdfsupportedmimesaddofprotocol">
            <title>Virtuoso/PL APIs</title>
            <para>Virtuoso also provides SPARQL protocol client APIs in Virtuoso PL, so you can communicate with SPARQL
Query Services from Virtuoso stored procedures. The APIs are as follows:
</para>
            <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
              <title>Virtuoso/PL APIs</title>
              <tgroup align="char" charoff="50" char="." cols="2">
                <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
                <thead>
                  <row>
                    <entry>API</entry>
                    <entry>Notes</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>DB.DBA.SPARQL_REXEC</entry>
                    <entry>Behaves like DBA.SPARQL_EVAL, but executes the query on the specified server. The procedure
does not return anything. Instead, it creates a result set.</entry>
                  </row>
                  <row>
                    <entry>DB.DBA.SPARQL_REXEC_TO_ARRAY</entry>
                    <entry>Behaves like DBA.SPARQL_EXEC_TO_ARRAY(), but executes the query on the specified server. The
function returns a vector of rows, where every row is represented by a vector of field values.</entry>
                  </row>
                  <row>
                    <entry>DB.DBA.SPARQL_REXEC_WITH_META</entry>
                    <entry>Has no local SPARQL_EVAL analog. It produces not only an array of result rows together with an array
of result set metadata in a format used by the exec() function.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </section>
          <section xml:id="anytimequeriessparql">
            <title>SPARQL Anytime Queries</title>
            <para>Starting with version 6, Virtuoso offers a partial query evaluation feature that guarantees
answers to arbitrary queries within a fixed time. This is intended for use in  publicly available SPARQL
or SQL end points on large databases. This enforces a finite duration to all queries and will strive to
return meaningful partial results. Thus this provides the same security as a transaction timeout but will
be more user friendly since results will generally be returned, also for aggregate queries. Outside of a
public query service, this may also be handy when exploring a large data set with unknown properties.
     </para>
            <para>The feature is activated with the statement</para>
            <programlisting>
set result_timeout == &lt;expression&gt;;
</programlisting>
            <para>Find more detailed information in the <link linkend="anytimequeries">Anytime Queries</link>

   section.</para>
            <section xml:id="anytimequeriessparqlex">
              <title>Example Dump arbitrary query result as N-Triples</title>
              <para>Assume the following arbitrary query:</para>
              <programlisting>
SPARQL define output:format "NT"
CONSTRUCT { ?s a ?t }
FROM virtrdf:
WHERE { ?s a ?t };
</programlisting>
              <para>For iteration over result-set of an arbitrary query, use
      	<link linkend="fn_exec_next"><function>exec_next()</function></link>

   in a loop that begins with
      	<link linkend="fn_exec"><function>exec()</function></link>

   with cursor output variable as
      	an argument and ends with <link linkend="fn_exec_close"><function>exec_close()</function></link>

      	after it is out of data.
      </para>
            </section>
          </section>
        </section>
        <section xml:id="rdfsupportedprotocolendpointuri">
          <title>Service Endpoint Security</title>
          <para>Earlier releases of Virtuoso secured the SPARQL endpoint via privileges assigned to the service-
specific SQL user account "SPARQL". This account was optionally granted "SPARQL_SELECT" or
"SPARQL_UPDATE" roles. By default only the  "SPARQL_SELECT" role was assigned, enabling all users
to at least perform SELECT queries. The "SPARQL_UPDATE" role must be granted to allow updates
to the Quad Store - a pre-requisite for the Virtuoso Sponger services to be functional i.e. to
allow the Sponger to populate and update the Quad Store. In Virtuoso release 5.0.7, there is a new "SPARQL_SPONGE" role
which can be assigned specifically to allow Sponger services to update the Quad Store but not
SPARQL users via the SPARQL endpoint.</para>
          <para>Restricting a user's access to specific graphs can be done using Virtuoso Graph security
functionality, via one of the Virtuoso Data Access APIs: ODBC, JDBC, ADO.Net or PL code.</para>
          <tip>
            <title>See Also:</title>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
                  <link linkend="virtodbcsparql">Virtuoso ODBC RDF extensions for SPASQL</link>
                </para>
              </listitem>
            </itemizedlist>
          </tip>
          <para>For example, users of OpenLink Data Space (ODS) applications are restricted in the RDF graphs accessible to them as follows:</para>
          <programlisting>
DB.DBA.TABLE_DROP_POLICY ('DB.DBA.RDF_QUAD', 'S');

create procedure DB.DBA.RDF_POLICY (in tb varchar, in op varchar)
{
 declare chost, ret varchar;
 chost := DB.DBA.WA_CNAME ();
 ret := sprintf ('(ID_TO_IRI (G) NOT LIKE \'http://%s/dataspace/%%/private#\' ' ||
 'OR G = IRI_TO_ID (sprintf (\'http://%s/dataspace/%%U/private#\', USER)))', chost, chost);
 return ret;
}
;

grant execute on DB.DBA.RDF_POLICY to public;

DB.DBA.TABLE_SET_POLICY ('DB.DBA.RDF_QUAD', 'DB.DBA.RDF_POLICY', 'S');
</programlisting>
          <para>
where DB.DBA.WA_CNAME () is an ODS function returning the default host name.
</para>
          <para>The effect of this policy is to restrict user 'user' to the graph http://cname/dataspace/user/private#</para>
          <section xml:id="rdfsupportedprotocolendpointurisparqlauthex">
            <title>SPARQL Auth Endpoint Usage Example</title>
            <para>Virtuoso reserves the path '/sparql-auth/' for a SPARQL service supporting authenticated SPARUL.
This endpoint allows specific SQL accounts to perform SPARUL over the SPARQL protocol.
To be allowed to login via SQL or ODBC and update physical triples, a user must be granted "SPARQL_UPDATE" privileges. To grant this role:
</para>
            <orderedlist>
              <listitem>
                <para>Go to the Virtuoso administration UI i.e. http://host:port/conductor</para>
              </listitem>
              <listitem>
                <para>Login as user dba</para>
              </listitem>
              <listitem>
                <para>Go to System Admin-&gt;User Accounts-&gt;Users
    </para>
                <figure xml:id="rdf1" floatstyle="1">
                  <title>Conductor UI</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/usr1.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click the link "Edit"</para>
              </listitem>
              <listitem>
                <para>Set "User type" to "SQL/ODBC Logins and WebDAV".</para>
              </listitem>
              <listitem>
                <para>Select from the list of available Account Roles "SPARQL_UPDATE" role and
click the "&gt;&gt;" button so to add it to the right-hand list.</para>
              </listitem>
              <listitem>
                <para>
                  <figure xml:id="rdf2" floatstyle="1">
                    <title>Conductor UI</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/usr2.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </para>
              </listitem>
              <listitem>
                <para>Click the "Save" button.</para>
              </listitem>
            </orderedlist>
            <para>Note that if a table is used in an Linked Data View, and this table is not granted to SPARQL_SELECT permission
(or SPARQL_UPDATE, which implicitly confers SPARQL_SELECT), then all SELECTs on a graph defined by an
Linked Data View will return an access violation error as the user
account has no permissions to read the table. The user must have appropriate privileges on all tables included
in an Linked Data View in order to be able to select on <emphasis>all</emphasis>

   graphs.</para>
          </section>
          <section xml:id="sparqwebservicetbl">
            <title>Managing a SPARQL Web Service Endpoint</title>
            <para>
Virtuoso web service endpoints may provide different default configurations for different host names mentioned in an HTTP request.
Host name configuration for SPARQL web service endpoints can be managed via the table <emphasis>DB.DBA.SYS_SPARQL_HOST</emphasis>

  .
</para>
            <programlisting>
create table DB.DBA.SYS_SPARQL_HOST (
  SH_HOST	varchar not null primary key, -- host mask
  SH_GRAPH_URI varchar,                 -- default graph uri
  SH_USER_URI	varchar,                  -- reserved for any use in applications
  SH_BASE_URI varchar,                  -- for future use (not used currently) to set BASE in sparql queries. Should be NULL for now.
  SH_DEFINES long varchar,              -- additional defines for requests
  PRIMARY KEY (SH_HOST)
)
</programlisting>
            <para>You can find detailed descriptions of the table columns <link linkend="rdfdefaultgraph">here</link>

  .
Also, please read <link linkend="rdfperfindexes">these notes</link>

   on managing public web service endpoints.</para>
          </section>
          <section xml:id="sparqloauthendpointauth">
            <title>Authentication</title>
            <para>Virtuoso 5.0.7 introduced a new "SPARQL_SPONGE" role which can be assigned
specifically for controlling Sponger middleware services which perform writes and graph creation in
the RDF Quad Store. This role only allows updates through the Sponger. Quad Store updates via any other route
require granting the SPARQL_UPDATE role.</para>
            <para>
Virtuoso 5.0.11 onwards added three new methods for securing SPARQL endpoints that include:
</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>SQL authentication</para>
              </listitem>
              <listitem>
                <para>OAuth</para>
              </listitem>
              <listitem>
                <para>WebID Protocol based authentication</para>
              </listitem>
            </itemizedlist>
            <para>
Each of these authentication methods is associated with a purpose specific default SPARQL endpoint along the following lines:
</para>
            <itemizedlist>
              <listitem>
                <para>http://&lt;cname&gt;/sparql-auth (SQL authentication)</para>
              </listitem>
              <listitem>
                <para>http://&lt;cname&gt;/sparql-oauth (OAuth)</para>
              </listitem>
              <listitem>
                <para>http://&lt;cname&gt;/sparql-graph-crud-auth (OAuth CRUD)</para>
              </listitem>
              <listitem>
                <para>https://&lt;cname&gt;/sparql and https://&lt;cname&gt;/sparql-webid (WebID Protocol)</para>
              </listitem>
            </itemizedlist>
            <para>Note: sparql-ssl is alias of sparql-webid.</para>
            <para>The Virtuoso Authentication Server offers a UI with options for managing:</para>
            <itemizedlist mark="bullet">
              <listitem>
                <para>
Application keys and protected SPARQL endpoints: OAuth provides a secure data transmission
level mechanism for your SPARQL endpoint. It enables you to interact securely with your RDF database
from a variety of locations. It also allows you to provide controlled access to private data to selected
user profiles.
  </para>
              </listitem>
              <listitem>
                <para>WebID Protocol ACLs: WebID Protocol is an implementation of a conceptual authentication and authorization
protocol that links a Web ID to a public key to create a global, decentralized/distributed, and open
yet secure authentication system that functions with existing browsers.</para>
              </listitem>
            </itemizedlist>
            <para>Virtuoso Authentication Server can be installed by downloading and installing the
conductor_dav.vad package.</para>
            <para>The Authentication UI is accessible from the Conductor UI -&gt; Linked Data -&gt; Access Control -&gt; SPARQL-WebID. Here is sample scenario:</para>
            <section xml:id="sparqloauthendpointauthexample">
              <title>SPARQL-WebID Authentication Example</title>
              <orderedlist>
                <listitem>
                  <para>Download and install the
                  <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/conductor_dav.vad">conductor_dav.vad</link>
                   package.</para>
                </listitem>
                <listitem>
                  <para><link xlink:href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSGenerateX509Certificate">Generate an X.509 Certificate hosted WebID</link>
                  .</para>
                </listitem>
                <listitem>
                  <para>Go to http://&lt;cname&gt;:&lt;port&gt;/conductor, where &lt;cname&gt;:&lt;port&gt; are replaced by your
      	local server values.</para>
                </listitem>
                <listitem>
                  <para>Log in as user "dba" or another user with DBA privileges.</para>
                </listitem>
                <listitem>
                  <para>Go to Linked Data -&gt; Access Controls -&gt; SPARQL-WebID:
         </para>
                  <figure xml:id="sparqlssl1" floatstyle="1">
                    <title>SPARQL-WebID</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/auth1.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Enter in the presented form Web ID for ex.:
</para>
                  <programlisting>
http://id.myopenlink.net/dataspace/person/demo#this
</programlisting>
                  <para> and select "SPARQL Role" for ex. "Sponge".</para>
                  <figure xml:id="sparqlssl2" floatstyle="1">
                    <title>SPARQL-WebID</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/auth3.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click the "Register" button.</para>
                </listitem>
                <listitem>
                  <para>As result the WebID Protocol ACLs will be created:
         </para>
                  <figure xml:id="sparqlssl3" floatstyle="1">
                    <title>SPARQL-WebID</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/auth4.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Go to the SPARQL-WebID endpoint https://&lt;cname&gt;:&lt;port&gt;/sparql-webid</para>
                </listitem>
                <listitem>
                  <para>Select the user's certificate from above:
         </para>
                  <figure xml:id="sparqlssl4" floatstyle="1">
                    <title>SPARQL-WebID</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/auth5.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>As result the SPARQL Query UI will be presented:
         </para>
                  <figure xml:id="sparqlssl5" floatstyle="1">
                    <title>SPARQL-WebID</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/auth6.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Execute sample query and view the results:
      	 </para>
                  <figure xml:id="sparqlssl7" floatstyle="1">
                    <title>SPARQL-WebID</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/auth6a.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
              </orderedlist>
            </section>
          </section>
          <section xml:id="sparqloauthendpoint">
            <title>SPARQL OAuth Endpoint</title>
            <para>OAuth provides a secure data transmission level mechanism for your SPARQL endpoint.
It enables you to interact securely with your RDF database from a variety of locations. It also
allows you to provide controlled access to private data to selected users.</para>
            <para>Virtuoso OAuth Server can be installed by downloading and installing the <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/ods_framework_dav.vad">ods_framework_dav.vad</link>

   package.
The OAuth UI is accessible from the URL http://cname:port/oauth</para>
            <para>A user must have SQL privileges in order to run secured SPARQL statements.</para>
            <para>Here is a sample scenario:</para>
            <orderedlist>
              <listitem>
                <para>Download and install the
                <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/conductor_dav.vad">conductor_dav.vad</link>

and
                <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/ods_framework_dav.vad">ods_framework_dav.vad</link>
    packages.</para>
              </listitem>
              <listitem>
                <para><link xlink:href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSGenerateX509Certificate">Generate an X.509 Certificate hosted WebID</link>
                .</para>
              </listitem>
              <listitem>
                <para>Go to http://&lt;cname&gt;:&lt;port&gt;/conductor, where &lt;cname&gt;:&lt;port&gt; are replaced by your
  	local server values.</para>
              </listitem>
              <listitem>
                <para>Log in as user "dba" or another user with DBA privileges.</para>
              </listitem>
              <listitem>
                <para>Go to System Admin-&gt;User Accounts:
</para>
                <figure xml:id="sparqloauthendpoint1" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so1.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click "Create New Account":
	</para>
                <figure xml:id="sparqloauthendpoint2" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so2.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>In the presented form enter respectively:
  </para>
                <orderedlist>
                  <listitem>
                    <para>Account name, for ex:demo1; a password and then confirm the password;</para>
                  </listitem>
                  <listitem>
                    <para>User type: SQL/ODBC and WebDAV;</para>
                  </listitem>
                  <listitem>
                    <para>Account role: SPARQL_UPDATE
	  </para>
                    <figure xml:id="sparqloauthendpoint3" floatstyle="1">
                      <title>SPARQL OAuth Endpoint</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/so3.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>Click the "Save" button. </para>
              </listitem>
              <listitem>
                <para>The created user should be shown in the list of registered users:
	</para>
                <figure xml:id="sparqloauthendpoint4" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so4.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Go to http://&lt;cname&gt;:&lt;port&gt;/oauth/, where &lt;cname&gt;:&lt;port&gt; are replaced by your local server values.
	</para>
                <figure xml:id="sparqloauthendpoint5" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so5.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click the "OAuth keys" link:
	</para>
                <figure xml:id="sparqloauthendpoint6" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so6.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Log in as user demo1:
		</para>
                <figure xml:id="sparqloauthendpoint7" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so7.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>The OAuth application registration form will be shown.
		</para>
                <figure xml:id="sparqloauthendpoint8" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so8.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Select SPARQL from the "Application name" list, and click the "Generate Keys" button. </para>
              </listitem>
              <listitem>
                <para>A Consumer Key for SPARQL will be generated:
</para>
                <programlisting>
90baa79108b1d972525bacc76c0279c02d6421e8
</programlisting>
                <figure xml:id="sparqloauthendpoint9" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so9.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click the "Back to main menu" link.</para>
              </listitem>
              <listitem>
                <para>Click the "Protected SPARQL Endpoint" link.</para>
              </listitem>
              <listitem>
                <para>The OpenLink Virtuoso SPARQL Query form will be displayed.
		</para>
                <figure xml:id="sparqloauthendpoint11" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so11.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
                <figure xml:id="sparqloauthendpoint12" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so12.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Enter a simple query, for ex:
</para>
                <programlisting>
SELECT *
WHERE
  {
    ?s ?p ?o
  }
LIMIT 10
</programlisting>
              </listitem>
              <listitem>
                <para>Enter the value from below for the "OAuth token":
</para>
                <programlisting>
90baa79108b1d972525bacc76c0279c02d6421e8
</programlisting>
                <figure xml:id="sparqloauthendpoint13" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so13.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Click the "Run Query" button.</para>
              </listitem>
              <listitem>
                <para>In the OAuth Authorization Service form enter the password for user demo1 and click the "Login" button.
		</para>
                <figure xml:id="sparqloauthendpoint14" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so16.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>Next you should authorize the request:
		</para>
                <figure xml:id="sparqloauthendpoint15" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so15.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
              <listitem>
                <para>On successful authentication and authorization, the query results should be shown:
		</para>
                <figure xml:id="sparqloauthendpoint14_01" floatstyle="1">
                  <title>SPARQL OAuth Endpoint</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/so14.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="sparqloauthendpointfoafssl">
            <title>WebID Protocol ACLs</title>
            <para>WebID Protocol is an implementation of a conceptual authentication and authorization protocol that
links a Web ID to a public key, to create a global decentralized/distributed, and open yet secure
authentication system that functions with existing browsers.</para>
            <para>To use WebID Protocol, download and install the <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/conductor_dav.vad">conductor_dav.vad</link>

VAD package. Once installed, to access the WebID Protocol ACLs UI, go to
URL http://cname:port/conductor -&gt; Linked Data -&gt; Access Controls -&gt; SPARQL-WebID .</para>
            <figure xml:id="sparqloauthendpoint1_01" floatstyle="1">
              <title>WebID</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="ui/auth4.png"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>
Configuring WebID Protocol ACLs is with a WebID Protocol certificate and a Web ID allows secure SPARQL queries to be performed against a Virtuoso SPARQL-WebID endpoint and viewing of the query results.
The SPARQL-WebID endpoint URL is of the form https://cname:port/sparql-webid</para>
            <para>Note: SPARQL-SSL is alias of SPARQL-WebID.</para>
            <para>See <link linkend="sparqloauthendpointauthexample">sample example</link>

   how to configure a sample WebID Protocol ACL are outlined below:</para>
            <tip>
              <title>See Also:</title>
              <para>
                <link linkend="secureodbcx509foafsll">WebID Protocol ODBC Login</link>
              </para>
            </tip>
          </section>
          <section xml:id="sparqloauthendpointfoafsslsparql">
            <title>Creating and Using a SPARQL-WebID based Endpoint</title>
            <para>The following section describes the basic steps for setting up an SSL protected and WebID
based SPARQL Endpoint (SPARQL-WebID). The guide also covers the use of Virtuoso PL functions and
the Virtuoso Conductor for SPARQL endpoint creation and configuration. It also covers the use
of cURL for exercising the newly generated SPARQL-SSL endpoint. Note: SPARQL-SSL is alias of SPARQL-WebID.
</para>
            <orderedlist>
              <listitem>
                <para>
                  <link linkend="vfoafsslst509issuer">Setup the CA issuer and https listener</link>
                </para>
              </listitem>
              <listitem>
                <para>To create the /sparql-webid endpoint, install the
                <link xlink:href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.3/virtuoso/policy_manager_dav.vad">policy_manager.vad</link>
                 manage or manually
  define the /sparql-webid endpoint on an HTTPS based listener (HTTPS service endpoint), for example using Virtuoso PL:

                <programlisting>
DB.DBA.VHOST_DEFINE (
	 lhost=&gt;'127.0.0.1:443',
	 vhost=&gt;'localhost',
	 lpath=&gt;'/sparql-webid',
	 ppath=&gt;'/!sparql/',
	 is_dav=&gt;1,
	 auth_fn=&gt;'DB.DBA.FOAF_SSL_AUTH',
	 vsp_user=&gt;'dba',
	 ses_vars=&gt;0,
	 auth_opts=&gt;vector ( 'https_cert',
	                     'db:https_key_localhost',
	                     'https_key',
	                     'db:https_key_localhost',
	                     'https_verify',
	                     3,
	                     'https_cv_depth',
	                     10 ),
	 opts=&gt;vector ('noinherit', 1),
	 is_default_host=&gt;0
);
</programlisting>
              </para>
              </listitem>
              <listitem>
                <para><link linkend="sparqloauthendpointfoafssl">Setup the SPARQL-WebID endpoint and define
ACLs</link>
                 using the Virtuoso Conductor</para>
              </listitem>
              <listitem>
                <para>Export your private key and its associated WebID based X.509 certificate from your
Firefox browser or System's Key Manager into PEM (PKCS12) file
    </para>
                <orderedlist>
                  <listitem>
                    <para>If using Firefox use the menu path: Advanced -&gt; View Certificates, then click
Backup for your certificate with name "mykey". </para>
                  </listitem>
                  <listitem>
                    <para>The file "mykey.p12" will be created. To disable password protection so that you
can use this file in non-interactive mode (e.g. with cURL and other HTTP clients) execute:
</para>
                    <programlisting>
openssl pkcs12 -in mykey.p12 -out mykey.pem -nodes
</programlisting>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>Test the SPARQL-WebID endpoint with cURL: (listening on default HTTPS 443 port):
    </para>
                <itemizedlist mark="bullet">
                  <listitem>
                    <para>Note: In this example we use the "-k / --insecure" option with cURL since we are going
to be using self-signed X.509 certificates signed by self-signed root CA.</para>
                  </listitem>
                </itemizedlist>
                <programlisting>
	curl -k -E mykey.pem "https://example.com/sparql-webid?query=select+*+where+\{+%3Fx+%3Fy+%3Fz+.+\}+limit+10&amp;format=text%2Fn3"

@prefix res: &lt;http://www.w3.org/2005/sparql-results#&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
_:_ a res:ResultSet .
_:_ res:resultVariable "x" , "y" , "z" .
@prefix ns0:    &lt;https://example.com/tutorial/&gt; .
@prefix rdf:    &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:hosting ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:xml ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:repl ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:rdfview ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:services ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:wap ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:bpeldemo ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:web ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:web2 ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:xmlxslt ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
</programlisting>
              </listitem>
              <listitem>
                <para>Import your key it via Conductor UI:
  	</para>
                <orderedlist>
                  <listitem>
                    <para>Go to Conductor -&gt; System Admin-&gt;User Accounts
     </para>
                    <figure xml:id="foafsslsparql1" floatstyle="1">
                      <title>Import key it via Conductor UI</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/fsp1.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                  <listitem>
                    <para>Click "Edit" for your user
     </para>
                    <figure xml:id="foafsslsparql2" floatstyle="1">
                      <title>Import key it via Conductor UI</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/fsp2.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                  <listitem>
                    <para>Change "User type" to: SQL/ODBC and WebDAV
     </para>
                    <figure xml:id="foafsslsparql3" floatstyle="1">
                      <title>Import key it via Conductor UI</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/fsp3.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                  <listitem>
                    <para>Enter your ODS user WebID:
</para>
                    <programlisting>
http://cname:port/dataspace/person/username#this
</programlisting>
                    <figure xml:id="foafsslsparql4" floatstyle="1">
                      <title>Import key it via Conductor UI</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/fsp4.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                  <listitem>
                    <para>Click "Save"
</para>
                  </listitem>
                  <listitem>
                    <para>Click again "Edit" for your user
</para>
                  </listitem>
                  <listitem>
                    <para>In "PKCS12 file:" click the Browse" button and select your key.
</para>
                  </listitem>
                  <listitem>
                    <para>Enter a local Key Name, for e.g., "cli_key"
</para>
                  </listitem>
                  <listitem>
                    <para>Enter key password
     </para>
                    <figure xml:id="foafsslsparql5" floatstyle="1">
                      <title>Import key it via Conductor UI</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/fsp5.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                  <listitem>
                    <para>Click "Import Key"</para>
                  </listitem>
                  <listitem>
                    <para>As result the key will be stored with name for ex. cli_key
     </para>
                    <figure xml:id="foafsslsparql6" floatstyle="1">
                      <title>Import key it via Conductor UI</title>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="ui/fsp6.png"/>
                        </imageobject>
                      </mediaobject>
                    </figure>
                  </listitem>
                  <listitem>
                    <para>Click "Save"</para>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>Test the SPARQL-WebID endpoint with http_client (listening on default HTTPS 443 port):
  	</para>
                <orderedlist>
                  <listitem>
                    <para>Log in at Virtuos ISQL with your user credentials:
</para>
                    <programlisting>
C:\&gt;isql localhost:1111 johndoe****
Connected to OpenLink Virtuoso
Driver: 06.01.3127 OpenLink Virtuoso ODBC Driver
OpenLink Interactive SQL (Virtuoso), version 0.9849b.
Type HELP; for help and EXIT; to exit.
SQL&gt;
</programlisting>
                  </listitem>
                  <listitem>
                    <para>Execute:
</para>
                    <programlisting>
SQL&gt;select http_client ('https://example.com/sparql-webid?query=select+*+where+{+%3Fx+%3Fy+%3Fz+.+}+limit+10&amp;format=text%2Fn3', cert_file=&gt;'d
b:cli_key', insecure=&gt;1);
callret
VARCHAR
_______________________________________________________________________________

@prefix res: &lt;http://www.w3.org/2005/sparql-results#&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
_:_ a res:ResultSet .
_:_ res:resultVariable "x" , "y" , "z" .
@prefix ns0:    &lt;https://example.com/tutorial/&gt; .
@prefix rdf:    &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:hosting ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:xml ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:repl ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:rdfview ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:services ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:wap ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:bpeldemo ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [
      res:binding [ res:variable "x" ; res:value ns0:web ] ;
      res:binding [ res:variable "y" ; res:value rdf:type ] ;
      res:binding [ res:variable "z" ; res:value "Tutorial" ] ] .
_:_ res:solution [

1 Rows. -- 281 msec.
</programlisting>
                  </listitem>
                </orderedlist>
              </listitem>
            </orderedlist>
            <tip>
              <title>See Also:</title>
              <para><link xlink:href="http://demo.openlinksw.com/tutorial/rdf/fs_s_1/fs_s_1.vsp">Demo Example</link>

   Using HTTP client to perform WebID Protocol connection.</para>
            </tip>
          </section>
          <section xml:id="sparqloauthendpointfoafsslsparqldisable">
            <title>Disable Default SPARQL Endpoint</title>
            <section xml:id="sparqloauthendpointfoafsslsparqldisableisql">
              <title>Using iSQL:</title>
              <orderedlist>
                <listitem>
                  <para>To disable /sparql, execute:
</para>
                  <programlisting>
DB.DBA.VHOST_REMOVE (lpath=&gt;'/sparql');
</programlisting>
                </listitem>
                <listitem>
                  <para>To add the endpoint again via PL, execute:
</para>
                  <programlisting>
DB.DBA.VHOST_DEFINE (lpath=&gt;'/sparql/', ppath =&gt; '/!sparql/', is_dav =&gt; 1, vsp_user =&gt; 'dba', opts =&gt; vector('noinherit', 1));
</programlisting>
                </listitem>
              </orderedlist>
            </section>
            <section xml:id="sparqloauthendpointfoafsslsparqldisablecond">
              <title>Using Conductor UI:</title>
              <orderedlist>
                <listitem>
                  <para>Go to http://cname:port/conductor .</para>
                </listitem>
                <listitem>
                  <para>Enter user dba credentials.</para>
                </listitem>
                <listitem>
                  <para>Go to "Web Application Server" -&gt; "Virtual Domains &amp; Directories".
        </para>
                  <figure xml:id="s1" floatstyle="1">
                    <title>Disable SPARQL Endpoint</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/s1.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Find the logical path "/sparql".
        </para>
                  <figure xml:id="s2" floatstyle="1">
                    <title>Disable SPARQL Endpoint</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/s2.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click "Edit" from the "Action" column.
        </para>
                  <figure xml:id="s3" floatstyle="1">
                    <title>Disable SPARQL Endpoint</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/s3.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Change "VSP User" to "nobody".
        </para>
                  <figure xml:id="s4" floatstyle="1">
                    <title>Disable SPARQL Endpoint</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/s4.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
                <listitem>
                  <para>Click "Save Changes".</para>
                </listitem>
                <listitem>
                  <para>As result the SPARQL Endpoint should be shown as disabled:
        </para>
                  <figure xml:id="s5" floatstyle="1">
                    <title>Disable SPARQL Endpoint</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="ui/s5.png"/>
                      </imageobject>
                    </mediaobject>
                  </figure>
                </listitem>
              </orderedlist>
            </section>
          </section>
        </section>
        <section xml:id="rdfsupportedrequestmethodsofprotocol">
          <title>Request Methods</title>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Methods List</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>Method</entry>
                  <entry>Supported?</entry>
                  <entry>Notes</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>GET</entry>
                  <entry>Yes</entry>
                  <entry>Short queries are sent in GET mode</entry>
                </row>
                <row>
                  <entry>POST</entry>
                  <entry>Yes</entry>
                  <entry>Queries longer than 1900 bytes are POST-ed.</entry>
                </row>
                <row>
                  <entry>DELETE</entry>
                  <entry>No</entry>
                  <entry/>
                </row>
                <row>
                  <entry>PUT</entry>
                  <entry>No</entry>
                  <entry/>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section xml:id="rdfsparqlclientfunctions">
          <title>Functions</title>
          <para>The SPARQL client can be invoked by three similar functions:</para>
          <table colsep="1" frame="all" rowsep="0" shortentry="0" tocentry="1" tabstyle="decimalstyle" orient="land" pgwide="0">
            <title>Functions List</title>
            <tgroup align="char" charoff="50" char="." cols="3">
              <colspec align="left" colnum="1" colsep="0" colwidth="20pc"/>
              <thead>
                <row>
                  <entry>Function</entry>
                  <entry>Notes</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>DB.DBA.SPARQL_REXEC</entry>
                  <entry>Behaves like DBA.SPARQL_EVAL, but executes the query on the specified server. The procedure does not return anything. Instead, it creates a result set. </entry>
                </row>
                <row>
                  <entry>DB.DBA.SPARQL_REXEC_TO_ARRAY</entry>
                  <entry>Behaves like DBA.SPARQL_EXEC_TO_ARRAY (), but executes the query on the specified server. The function return a vector of rows, where every row is represented by a vector of field values.</entry>
                </row>
                <row>
                  <entry>DB.DBA.SPARQL_REXEC_WITH_META</entry>
                  <entry>Has no local 'SPARQL_EVAL' analog. It produces an array of result rows together with an array of result set metadata in the same format as produced by the exec () function.
	This function can be used when the result should be passed later to exec_result_names () and exec_result () built-in functions.
	To process a local query in similar style, an application can use the SQL built-in function exec () - a SPARQL query (with the 'SPARQL' keyword in front) can be passed to exec () instead of a plain SQL SELECT statement.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <programlisting>
create procedure DB.DBA.SPARQL_REXEC (
    in service varchar, in query varchar, in dflt_graph varchar, in named_graphs any,
    in req_hdr any, in maxrows integer, in bnode_dict any );
</programlisting>
          <programlisting>
create function DB.DBA.SPARQL_REXEC_TO_ARRAY (
    in service varchar, in query varchar, in dflt_graph varchar, in named_graphs any,
    in req_hdr any, in maxrows integer, in bnode_dict any )
    returns any;
</programlisting>
          <programlisting>
create procedure DB.DBA.SPARQL_REXEC_WITH_META (
    in service varchar, in query varchar, in dflt_graph varchar, in named_graphs any,
    in req_hdr any, in maxrows integer, in bnode_dict any,
    out metadata any,  -- metadata like exec () returns.
    out resultset any) -- results as 'long valmode' values.
</programlisting>
        </section>
        <section xml:id="rdfsparqlendpointexamples">
          <title>Examples</title>
          <para>Virtuoso's SPARQL demo offers a live demonstration of Virtuoso's implementation of the
<link xlink:href="http://www.w3.org/TR/rdf-dawg-uc/">DAWG's SPARQL test-suite</link>

  ,
a collection of SPARQL query language use cases that enable interactive and simplified testing of a triple store implementation.
If you have installed the SPARQL Demo VAD locally, it can be found at a URL similar to 'http://example.com:8080/sparql_demo/', the exact form will depend on your local configuration. Alternatively, a live
version of the documentation is available at <link xlink:href="http://demo.openlinksw.com/sparql_demo">Virtuoso Demo Server</link>

  .
</para>
          <section xml:id="rdfsparqlendpointexamples1">
            <title>Example SPARQL query issued via curl</title>
            <programlisting>
curl -F "query=SELECT DISTINCT ?p FROM &lt;http://demo.openlinksw.com/DAV/home/demo/rdf_sink/&gt; WHERE {?s ?p ?o}" http://demo.openlinksw.com/sparql
</programlisting>
            <para>The result should be:</para>
            <programlisting>
&lt;?xml version="1.0" ?&gt;
&lt;sparql xmlns="http://www.w3.org/2005/sparql-results#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/sw/DataAccess/rf1/result2.xsd"&gt;
 &lt;head&gt;
  &lt;variable name="p"/&gt;
 &lt;/head&gt;
 &lt;results distinct="false" ordered="true"&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/nick&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/name&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/homepage&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/knows&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/workplaceHomepage&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
  &lt;result&gt;
   &lt;binding name="p"&gt;&lt;uri&gt;http://xmlns.com/foaf/0.1/mbox&lt;/uri&gt;&lt;/binding&gt;
  &lt;/result&gt;
 &lt;/results&gt;
&lt;/sparql&gt;
</programlisting>
          </section>
          <section xml:id="rdfsparqlendpointexamples2">
            <title>Other Examples of SPARQL query issued via curl</title>
            <para>
              <emphasis>Further example SPARQL queries:</emphasis>
            </para>
            <programlisting>
curl -F "query=SELECT DISTINCT ?Concept FROM &lt;http://dbpedia.org&gt; WHERE {?s a ?Concept} LIMIT 10" http://dbpedia.org/sparql
</programlisting>
            <programlisting>
curl -F "query=SELECT DISTINCT ?Concept FROM &lt;http://example.com/dataspace/person/kidehen&gt; WHERE {?s a ?Concept} LIMIT 10" http://demo.openlinksw.com/sparql
</programlisting>
            <programlisting>
curl -F "query=SELECT DISTINCT ?Concept FROM &lt;http://data.openlinksw.com/oplweb/product_family/virtuoso&gt; WHERE {?s a ?Concept} LIMIT 10" http://demo.openlinksw.com/sparql
</programlisting>
            <programlisting>
curl -F "query=SELECT DISTINCT ?Concept FROM &lt;http://openlinksw.com/dataspace/organization/openlink&gt; WHERE {?s a ?Concept} LIMIT 10" http://demo.openlinksw.com/sparql
</programlisting>
          </section>
          <section xml:id="rdfsparqlendpointexamples3">
            <title>Example with curl and SPARQL-WebID endpoint</title>
            <programlisting>
$ curl -H "Accept: text/rdf+n3"  --cert test.pem -k https://demo.openlinksw.com/dataspace/person/demo
Enter PEM pass phrase: *****
@prefix rdf:    &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix ns1:    &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/demo%27s%20AddressBook/1046#&gt; .
@prefix foaf:   &lt;http://xmlns.com/foaf/0.1/&gt; .
ns1:this        rdf:type        foaf:Person .
@prefix ns3:    &lt;http://www.pipian.com/rdf/tami/juliette.n3#&gt; .
ns3:juliette    rdf:type        foaf:Document .
@prefix ns4:    &lt;https://demo.openlinksw.com/dataspace/person/&gt; .
ns4:demo        rdf:type        foaf:PersonalProfileDocument .
@prefix ns5:    &lt;https://demo.openlinksw.com/dataspace/person/demo#&gt; .
@prefix geo:    &lt;http://www.w3.org/2003/01/geo/wgs84_pos#&gt; .
ns5:based_near  rdf:type        geo:Point .
@prefix ns7:    &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/demo%27s%20AddressBook/1042#&gt; .
ns7:this        rdf:type        foaf:Person .
ns5:this        rdf:type        foaf:Person .
@prefix ns8:    &lt;https://demo.openlinksw.com/dataspace/person/demo/online_account/&gt; .
@prefix sioc:   &lt;http://rdfs.org/sioc/ns#&gt; .
ns8:demo        rdf:type        sioc:User .
@prefix ns10:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/myAddressBook/1001#&gt; .
ns10:this       rdf:type        foaf:Person .
@prefix ns11:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/demo%27s%20AddressBook/1045#&gt; .
ns11:this       rdf:type        foaf:Person .
@prefix ns12:   &lt;https://demo.openlinksw.com/dataspace/demo#&gt; .
ns12:this       rdf:type        sioc:User .
ns5:org rdf:type        foaf:Organization .
@prefix ns13:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/demo%27s%20AddressBook/1048#&gt; .
ns13:this       rdf:type        foaf:Person .
@prefix ns14:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/myAddressBook/1001#this#&gt; .
ns14:org        rdf:type        foaf:Organization .
@prefix ns15:   &lt;https://demo.openlinksw.com/dataspace/person/imitko#&gt; .
ns15:this       rdf:type        foaf:Person .
@prefix ns16:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/myAddressBook/1049#&gt; .
ns16:this       rdf:type        foaf:Person .
@prefix ns17:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/myAddressBook/1000#&gt; .
ns17:this       rdf:type        foaf:Person .
ns8:MySpace     rdf:type        sioc:User .
@prefix ns18:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/demo%27s%20AddressBook/1044#&gt; .
ns18:this       rdf:type        foaf:Person .
@prefix dc:     &lt;http://purl.org/dc/elements/1.1/&gt; .
ns4:demo        dc:title        "demo demo's FOAF file" .
ns14:org        dc:title        "OpenLink" .
ns5:org dc:title        "OpenLink" .
ns18:this       foaf:name       "Kingsley Idehen" .
ns13:this       foaf:name       "Juliette" .
ns17:this       foaf:name       "Kingsley Idehen" .
ns5:this        foaf:name       "demo demo" .
ns15:this       foaf:name       "Mitko Iliev" .
ns10:this       foaf:name       "test test12" .
@prefix rdfs:   &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
ns5:this        rdfs:seeAlso    ns4:demo .
ns15:this       rdfs:seeAlso    ns4:imitko .
ns4:demo        foaf:maker      ns5:this .
ns15:this       foaf:nick       "imitko" .
ns7:this        foaf:nick       "Orri Erling" .
ns13:this       foaf:nick       "Juliette" .
ns10:this       foaf:nick       "test1" .
ns5:this        foaf:nick       "demo" .
ns18:this       foaf:nick       "Kingsley" .
ns17:this       foaf:nick       "Kingsley" .
ns16:this       foaf:nick       "test2" .
ns1:this        foaf:nick       "TEST" .
ns11:this       foaf:nick       "TEST" .
ns5:this        foaf:holdsAccount       ns8:demo ,
                ns8:MySpace ,
                ns12:this .
@prefix ns21:   &lt;http://example.com/dataspace/person/imitko#&gt; .
ns5:this        foaf:knows      ns21:this ,
                ns17:this ,
                ns16:this ,
                ns3:juliette ,
                ns10:this ,
                ns7:this .
@prefix ns22:   &lt;http://example.com/dataspace/person/kidehen#&gt; .
ns5:this        foaf:knows      ns22:this ,
                ns18:this ,
                ns11:this ,
                ns1:this .
@prefix ns23:   &lt;http://bblfish.net/people/henry/card#me\u0020&gt; .
ns5:this        foaf:knows      ns23: ,
                ns13:this ,
                ns15:this ;
        foaf:firstName  "demo" ;
        foaf:family_name        "demo" ;
        foaf:gender     "male" ;
        foaf:icqChatID  "125968" ;
        foaf:msnChatID  "45demo78" ;
        foaf:aimChatID  "demo1234" ;
        foaf:yahooChatID        "demo678" ;
        foaf:based_near ns5:based_near .
@prefix ns24:   &lt;http://www.openlinksw.com&gt; .
ns5:this        foaf:workplaceHomepage  ns24: .
ns5:org foaf:homepage   ns24: .
ns5:this        foaf:homepage   ns24: .
ns14:org        foaf:homepage   ns24: .
ns4:demo        foaf:primaryTopic       ns5:this .
ns5:based_near  geo:lat "47.333332" ;
        geo:long        "13.333333" .
@prefix rdf:    &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix ns1:    &lt;https://demo.openlinksw.com/dataspace/demo#&gt; .
@prefix foaf:   &lt;http://xmlns.com/foaf/0.1/&gt; .
ns1:this        rdf:type        foaf:OnlineAccount .
@prefix ns3:    &lt;https://demo.openlinksw.com/dataspace/person/demo/online_account/&gt; .
ns3:MySpace     rdf:type        foaf:OnlineAccount .
ns3:demo        rdf:type        foaf:OnlineAccount .
@prefix ns4:    &lt;https://demo.openlinksw.com/dataspace/person/demo#&gt; .
ns4:this        foaf:holdsAccount       ns3:MySpace ,
                ns1:this ,
                ns3:demo .
@prefix vcard:  &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; .
ns4:this        vcard:ADR       ns4:addr .
ns4:addr        vcard:Country   "United States" ;
        vcard:Locality  "New York" ;
        vcard:Region    "Nebraska" .
@prefix ns6:    &lt;http://myspace.com&gt; .
ns3:MySpace     foaf:accountServiceHomepage     ns6: .
@prefix ns7:    &lt;skype:demo?&gt; .
ns3:demo        foaf:accountServiceHomepage     ns7:chat ;
        foaf:accountName        "demo" .
ns3:MySpace     foaf:accountName        "MySpace" .
@prefix ns8:    &lt;http://vocab.org/bio/0.1/&gt; .
ns4:this        ns8:olb "this is short resume of user Demo." .
@prefix ns9:    &lt;https://demo.openlinksw.com/dataspace/&gt; .
ns4:this        foaf:openid     ns9:demo ;
        ns8:keywords    "demo, openlinksw, virtuoso, weblog, rdf" .
@prefix foaf:   &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix ns1:    &lt;https://demo.openlinksw.com/dataspace/demo/subscriptions/&gt; .
@prefix ns2:    &lt;https://demo.openlinksw.com/dataspace/person/demo#&gt; .
ns1:DemoFeeds   foaf:maker      ns2:this .
@prefix ns3:    &lt;https://demo.openlinksw.com/dataspace/demo/community/&gt; .
ns3:demoCommunity       foaf:maker      ns2:this .
@prefix ns4:    &lt;https://demo.openlinksw.com/dataspace/demo/eCRM/demo%27s%20eCRM&gt; .
ns4:    foaf:maker      ns2:this .
@prefix ns5:    &lt;https://demo.openlinksw.com/dataspace/demo/calendar/&gt; .
ns5:mycalendar  foaf:maker      ns2:this .
@prefix ns6:    &lt;https://demo.openlinksw.com/dataspace/demo/photos/&gt; .
ns6:MyGallery   foaf:maker      ns2:this .
@prefix ns7:    &lt;https://demo.openlinksw.com/dataspace/demo/briefcase/&gt; .
ns7:mybriefcase foaf:maker      ns2:this .
@prefix ns8:    &lt;https://demo.openlinksw.com/dataspace/demo/wiki/&gt; .
ns8:ESBWiki     foaf:maker      ns2:this .
@prefix ns9:    &lt;https://demo.openlinksw.com/dataspace/demo/bookmark/&gt; .
ns9:mybookmarks foaf:maker      ns2:this .
@prefix ns10:   &lt;https://demo.openlinksw.com/dataspace/demo/weblog/&gt; .
ns10:myblog     foaf:maker      ns2:this .
@prefix ns11:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/demo%27s%20AddressBook&gt; .
ns11:   foaf:maker      ns2:this .
@prefix ns12:   &lt;https://demo.openlinksw.com/dataspace/demo/community/demo%27s%20Community&gt; .
ns12:   foaf:maker      ns2:this .
ns8:mywiki      foaf:maker      ns2:this .
@prefix ns13:   &lt;https://demo.openlinksw.com/dataspace/demo/eCRM/demo%20demo%27s%20eCRM&gt; .
ns13:   foaf:maker      ns2:this .
@prefix ns14:   &lt;https://demo.openlinksw.com/dataspace/demo/polls/&gt; .
ns14:mypolls    foaf:maker      ns2:this .
@prefix ns15:   &lt;https://demo.openlinksw.com/dataspace/demo/socialnetwork/&gt; .
ns15:myAddressBook      foaf:maker      ns2:this .
ns3:SP2 foaf:maker      ns2:this .
ns2:this        foaf:made       ns11: ,
                ns4: ,
                ns3:demoCommunity ,
                ns12: ,
                ns15:myAddressBook ,
                ns10:myblog ,
                ns9:mybookmarks ,
                ns7:mybriefcase ,
                ns5:mycalendar ,
                ns14:mypolls ,
                ns8:mywiki ,
                ns1:DemoFeeds ,
                ns8:ESBWiki ,
                ns6:MyGallery ,
                ns3:SP2 ,
                ns13: .
@prefix rdfs:   &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .
ns9:mybookmarks rdfs:label      "demo demo's Bookmarks" .
ns15:myAddressBook      rdfs:label      "demo demo's AddressBook" .
ns4:    rdfs:label      "demo demo's eCRM" .
ns12:   rdfs:label      "demo's Community" .
ns14:mypolls    rdfs:label      "demo demo's Polls" .
ns13:   rdfs:label      "demo demo's eCRM Description" .
ns8:mywiki      rdfs:label      "demo demo's Wiki" .
ns7:mybriefcase rdfs:label      "demo demo's Briefcase" .
ns1:DemoFeeds   rdfs:label      "demo demo's Feeds" .
ns10:myblog     rdfs:label      "demo's Weblog" .
ns5:mycalendar  rdfs:label      "demo demo's Calendar" .
ns11:   rdfs:label      "demo demo's AddressBook" .
ns6:MyGallery   rdfs:label      "demo demo's Gallery" .
ns8:ESBWiki     rdfs:label      "demo demo's Wiki" .
ns3:demoCommunity       rdfs:label      "demo demo's Community" .
ns3:SP2 rdfs:label      "demo demo's Community" .
@prefix rdf:    &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix ns1:    &lt;https://demo.openlinksw.com/dataspace/person/demo#&gt; .
@prefix ns2:    &lt;http://www.w3.org/ns/auth/rsa#&gt; .
ns1:cert        rdf:type        ns2:RSAPublicKey .
@prefix dc:     &lt;http://purl.org/dc/elements/1.1/&gt; .
@prefix ns4:    &lt;https://demo.openlinksw.com/dataspace/person/demo/projects#ods%20project&gt; .
ns4:    dc:title        "ods project" .
@prefix foaf:   &lt;http://xmlns.com/foaf/0.1/&gt; .
ns4:    foaf:maker      ns1:this .
ns1:this        foaf:made       ns4: .
@prefix ns6:    &lt;http://www.w3.org/ns/auth/cert#&gt; .
ns1:cert        ns6:identity    ns1:this ;
        ns2:modulus     ns1:cert_mod .
ns1:cert_mod    ns6:hex "b8edefa13092d05e85257d6be0aca54218091278583f1d18759c4bced0007948fa6e920018abc3c30b8885d303ec2e679f3a7c15036d38452ddd9ebfcbb41
e1bd08dca66b7737b744fd9e441ebefa425311363711714cd0fe3b334a79ce50be9eb3443193bcbf2f1486481e775382f1a1792a2a8438543ca6f478c3b13c5db2a7f9a12a9a5aed5ec498
6be0169a1859d027170812a28914d158fb76a5933f11777a06c8db64d10f7c02900c4bb4bbf2d24c0e34c6ca135fdb5e05241bc029196ceef13a2006f07d1800f17762c0cfe05b3dac3042
09e1b7a3973122e850e96fcd0396544f82f0b11a46f0d868ba0f3d8efd957e7ef224871905a06c3c5d85ac9" .
ns1:cert        ns2:public_exponent     ns1:cert_exp .
ns1:cert_exp    ns6:decimal     "65537" .
@prefix rdf:    &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix ns1:    &lt;https://demo.openlinksw.com/dataspace/person/demo#&gt; .
@prefix ns2:    &lt;http://vocab.org/bio/0.1/&gt; .
ns1:event       rdf:type        ns2:Birth .
@prefix foaf:   &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix ns4:    &lt;mailto:demo@openlinksw.com&gt; .
ns1:this        foaf:mbox       ns4: ;
        foaf:birthday   "01-01" .
@prefix dc:     &lt;http://purl.org/dc/elements/1.1/&gt; .
ns1:event       dc:date "1968-01-01" .
ns1:this        ns2:event       ns1:event .
</programlisting>
          </section>
          <section xml:id="rdfsparqlendpointexamples4">
            <title>Example with curl and SPARQL-OAuth endpoint</title>
            <para>Note: this is just an example as token had expired already. You can go to <link linkend="sparqloauthendpoint">this</link>

   section to see how to interact with our Virtuoso UI.</para>
            <programlisting>
$ curl "http://demo.openlinksw.com/oauth/sparql.vsp?debug=on&amp;default-graph-uri=&amp;format=text%2Fhtml&amp;oauth_consumer_key=27f105a327f5f23163e0636f78901
8dacdd70bb5&amp;oauth_nonce=a14d43339fcb2638&amp;oauth_signature_method=HMAC-SHA1&amp;oauth_timestamp=1242106643&amp;oauth_token=42e2af4d9264ef42521c1010aff99f60a8
ee95a2&amp;oauth_version=1.0&amp;query=select%20distinct%20%3FURI%20%3FObjectType%20where%20%7B%3FURI%20a%20%3FObjectType%7D%20limit%2050&amp;oauth_signature=C
w9yJ2saU1vgHuFxWcughai5cZY%3D"
&lt;table class="sparql" border="1"&gt;
  &lt;tr&gt;
    &lt;th&gt;URI&lt;/th&gt;
    &lt;th&gt;ObjectType&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-nonblank&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-nonblank-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarchar&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarchar-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarbinary&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarbinary-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-uri&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-uri-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-uri&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-uri-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-doubleprecision&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-doubleprecision-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-date&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-date-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-datetime&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-datetime-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#multipart-uri&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#multipart-uri-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#multipart-uri-fn-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#multipart-literal-fn-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-uri-fn&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-uri-fn-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-uri-fn&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-uri-fn-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-literal-fn&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-literal-fn-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-literal-fn&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-integer-literal-fn-nullable&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&lt;/td&gt;
    &lt;td&gt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Property&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-nullable-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-nonblank-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-iid-nonblank-nullable-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#default-nullable-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-nullable-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarchar-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarchar-nullable-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarbinary-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-longvarbinary-nullable-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;http://www.openlinksw.com/virtrdf-data-formats#sql-varchar-uri-SuperFormats&lt;/td&gt;
    &lt;td&gt;http://www.openlinksw.com/schemas/virtrdf#array-of-QuadMapFormat&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</programlisting>
          </section>
          <section xml:id="rdfsparqlendpointexamples5">
            <title>Example with CONSTRUCT</title>
            <para>Go to the sparql endpoint UI: i.e. go to http://host:port/sparql</para>
            <para>For the Default Graph URI enter: http://www.w3.org/2001/sw/DataAccess/proto-tests/data/construct/simple-data.rdf</para>
            <para>Select "Retrieve remote RDF data for all missing source graphs".</para>
            <para>For the query text enter:</para>
            <programlisting>
SELECT * WHERE {?s ?p ?o}
</programlisting>
            <para>Click the "Run Query" button.</para>
            <para>The query results, shown below, are cached locally ( network resources being fetched ). The remote RDF data is saved in the local RDF quad store as  graph http://www.w3.org/2001/sw/DataAccess/proto-tests/data/construct/simple-data.rdf</para>
            <programlisting>
s  	                                  p  	                                           o
http://www.example/jose/foaf.rdf#jose 	  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://xmlns.com/foaf/0.1/Person
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/nick 	           Jo
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/name 	           Jose Jimen~ez
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/knows 	           http://www.example/jose/foaf.rdf#juan
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/homepage 	           http://www.example/jose/
http://www.example/jose/foaf.rdf#jose 	  http://xmlns.com/foaf/0.1/workplaceHomepage 	   http://www.corp.example/
http://www.example/jose/foaf.rdf#kendall  http://xmlns.com/foaf/0.1/knows                  http://www.example/jose/foaf.rdf#edd
http://www.example/jose/foaf.rdf#julia 	  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://xmlns.com/foaf/0.1/Person
http://www.example/jose/foaf.rdf#julia 	  http://xmlns.com/foaf/0.1/mbox 	           mailto:julia@mail.example
http://www.example/jose/foaf.rdf#juan 	  http://www.w3.org/1999/02/22-rdf-syntax-ns#type  http://xmlns.com/foaf/0.1/Person
http://www.example/jose/foaf.rdf#juan 	  http://xmlns.com/foaf/0.1/mbox 	           mailto:juan@mail.example
</programlisting>
            <para>Now let's take the CONSTRUCT query:</para>
            <programlisting>
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
PREFIX myfoaf: &lt;http://www.example/jose/foaf.rdf#&gt;
CONSTRUCT
  { myfoaf:jose foaf:depiction &lt;http://www.example/jose/jose.jpg&gt;.
    myfoaf:jose foaf:schoolHomepage &lt;http://www.edu.example/&gt;.
    ?s ?p ?o.
  }
FROM &lt;http://www.w3.org/2001/sw/DataAccess/proto-tests/data/construct/simple-data.rdf&gt;
WHERE
  {
    ?s ?p ?o. myfoaf:jose foaf:nick "Jo".
    FILTER ( ! (?s = myfoaf:kendall &amp;&amp; ?p = foaf:knows &amp;&amp; ?o = myfoaf:edd )
    &amp;&amp; ! ( ?s = myfoaf:julia &amp;&amp; ?p = foaf:mbox &amp;&amp; ?o = &lt;mailto:julia@mail.example&gt; )
    &amp;&amp; ! ( ?s = myfoaf:julia &amp;&amp; ?p = rdf:type &amp;&amp; ?o = foaf:Person))
  }
</programlisting>
            <para>From an HTTP client, issue the GET command with the above query added as a URL-encoded parameter value:</para>
            <programlisting>
GET -e -s http://host:port/sparql/?query=PREFIX+rdf%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%3E%0D%0APREFIX+foaf%3A+%3Chttp%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%3E%0D%0APREFIX+myfoaf%3A+%3Chttp%3A%2F%2Fwww.example%2Fjose%2Ffoaf.rdf%23%3E%0D%0A%0D%0ACONSTRUCT+%7B+myfoaf%3Ajose+foaf%3Adepiction+%3Chttp%3A%2F%2Fwww.example%2Fjose%2Fjose.jpg%3E.%0D%0A++++++++++++myfoaf%3Ajose+foaf%3AschoolHomepage+%3Chttp%3A%2F%2Fwww.edu.example%2F%3E.%0D%0A++++++++++++%3Fs+%3Fp+%3Fo.%7D%0D%0AFROM+%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2Fsw%2FDataAccess%2Fproto-tests%2Fdata%2Fconstruct%2Fsimple-data.rdf%3E%0D%0AWHERE+%7B+%3Fs+%3Fp+%3Fo.+myfoaf%3Ajose+foaf%3Anick+%22Jo%22.%0D%0A+++++++FILTER+%28+%21+%28%3Fs+%3D+myfoaf%3Akendall+%26%26+%3Fp+%3D+foaf%3Aknows+%26%26+%3Fo+%3D+myfoaf%3Aedd+%29%0D%0A++++++++++++++%26%26+%21+%28+%3Fs+%3D+myfoaf%3Ajulia+%26%26+%3Fp+%3D+foaf%3Ambox+%26%26+%3Fo+%3D+%3Cmailto%3Ajulia%40mail.example%3E+%29%0D%0A++++++++++%26%26+%21+%28+%3Fs+%3D+myfoaf%3Ajulia+%26%26+%3Fp+%3D+rdf%3Atype+%26%26+%3Fo+%3D+foaf%3APerson%29%29%0D%0A%7D%0D%0A&amp;format=application%2Frdf%2Bxml
</programlisting>
            <para>The request response will be similar to:</para>
            <programlisting>
200 OK
Connection: close
Date: Fri, 28 Dec 2007 10:06:14 GMT
Accept-Ranges: bytes
Server: Virtuoso/05.00.3023 (Win32) i686-generic-win-32  VDB
Content-Length: 2073
Content-Type: application/rdf+xml; charset=UTF-8
Client-Date: Fri, 28 Dec 2007 10:06:14 GMT
Client-Peer: 83.176.40.177:port
Client-Response-Num: 1

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#juan"&gt;&lt;ns0pred:mbox xmlns:ns0pred="http://xmlns.com/foaf/0.1/" rdf:resource="mailto:juan@mail.example"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:schoolHomepage xmlns:ns0pred="http://xmlns.com/foaf/0.1/" rdf:resource="http://www.edu.example/"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:type xmlns:ns0pred="http://www.w3.org/1999/02/22-rdf-syntax-ns#" rdf:resource="http://xmlns.com/foaf/0.1/Person"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:homepage xmlns:ns0pred="http://xmlns.com/foaf/0.1/" rdf:resource="http://www.example/jose/"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#juan"&gt;&lt;ns0pred:type xmlns:ns0pred="http://www.w3.org/1999/02/22-rdf-syntax-ns#" rdf:resource="http://xmlns.com/foaf/0.1/Person"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:workplaceHomepage xmlns:ns0pred="http://xmlns.com/foaf/0.1/" rdf:resource="http://www.corp.example/"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:nick xmlns:ns0pred="http://xmlns.com/foaf/0.1/"&gt;Jo&lt;/ns0pred:nick&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:depiction xmlns:ns0pred="http://xmlns.com/foaf/0.1/" rdf:resource="http://www.example/jose/jose.jpg"/&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:name xmlns:ns0pred="http://xmlns.com/foaf/0.1/"&gt;Jose Jime?+ez&lt;/ns0pred:name&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.example/jose/foaf.rdf#jose"&gt;&lt;ns0pred:knows xmlns:ns0pred="http://xmlns.com/foaf/0.1/" rdf:resource="http://www.example/jose/foaf.rdf#juan"/&gt;&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
Done
</programlisting>
          </section>
          <section xml:id="rdfsparqlendpointexamples6">
            <title>Example with extraction part of literal as variable</title>
            <para>The following example shows how to extract a part of a literal as a variable for
use in a numeric comparison using SPARQL</para>
            <para>Suppose there are the following triples inserted:</para>
            <programlisting>
SQL&gt;SPARQL INSERT INTO GRAPH &lt;http://mygraph.com&gt; {  &lt;:a&gt;
                                                     &lt;:p&gt;
                                                     "123 abc" };
callret-0
VARCHAR
_______________________________________________________________________________

Insert into &lt;http://mygraph.com&gt;, 1 triples -- done

1 Rows. -- 30 msec.
SQL&gt;SPARQL INSERT INTO GRAPH &lt;http://mygraph.com&gt; {  &lt;:a&gt;
                                                     &lt;:p&gt;
                                                     "234 abc" };
callret-0
VARCHAR
_______________________________________________________________________________

Insert into &lt;http://mygraph.com&gt;, 1 triples -- done

1 Rows. -- 0 msec.
</programlisting>
            <para>In order to extract the numeric part, and then do a numeric (&lt;.&gt;,=), you can use
atoi (), atol or atof in the filter:</para>
            <programlisting>
SQL&gt;SPARQL
SELECT *
FROM &lt;http://mygraph.com&gt;
WHERE
  {
    ?s ?p ?o . filter (bif:atoi (?o) &gt; 130)
  };
s        p         o
VARCHAR  VARCHAR   VARCHAR
___________________________________

:a       :p        234 abc

1 Rows. -- 10 msec.
</programlisting>
          </section>
          <section xml:id="rdfsparqlendpointexamples7">
            <title>Example how to define rule</title>
            <para>See details <link linkend="rdfsparqlruleexamples">here</link>

   how to define rule context that is
initialized from the contents of a given graph.
</para>
          </section>
        </section>
        <section xml:id="rdfsparqlendpointimplnotes">
          <title>Implementation Notes</title>
          <para>This service has been implemented using <link xlink:href="http://docs.openlinksw.com/virtuoso">Virtuoso Server</link>

  .</para>
        </section>
        <section xml:id="rdftables">
          <title>Virtuoso 'Semantic Bank' End Point</title>
          <para>
            <emphasis>What is Piggy Bank?</emphasis>
          </para>
          <para>
	Piggy Bank is an extension to the Firefox Web browser that turns it into a Semantic Web browser, letting you make use of existing information on the Web in more useful and flexible ways not offered by the original Web sites.
    </para>
          <para>
            <emphasis>What is Semantic Bank?</emphasis>
          </para>
          <para>
	Semantic Bank is the server companion of Piggy Bank that lets you persist, share and publish data collected by individuals, groups or communities. Here is a screen shot of one in action:
    </para>
          <para>
            <emphasis>What can I do with this?</emphasis>
          </para>
          <para>
	A Semantic Bank allows you to:
    </para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>
      Persist your information remotely on a server - This is useful, for example, if you want to share data between two of your computers or to avoid losing it due to mistakes or failure.
    </para>
            </listitem>
            <listitem>
              <para>
	Share information with other people - The ability to tag resources creates a powerful serendipitous categorization (as proven by things like del.icio.us or Flickr).
    </para>
            </listitem>
            <listitem>
              <para>
	Lets you publish your information - Both in the "pure" RDF form (for those who know how to make use of it) or to regular web pages, with the usual Longwell faceted browsing view of it
    </para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>How can I help?</emphasis>
          </para>
          <para>
	Semantic Bank is Open Source software and built around the spirit of open participation and collaboration.
    </para>
          <para>
	There are several ways you can help:
    </para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>Install a Semantic Bank and let us know about it, so that we can update the list of available Semantic Banks.</para>
            </listitem>
            <listitem>
              <para>Subscribe to our mailing lists to show your interest and give us feedback</para>
            </listitem>
            <listitem>
              <para>Report problems and ask for new features through our issue tracking system.</para>
            </listitem>
            <listitem>
              <para>Send us patches or fixes to the code</para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>Licensing and Legal Issues</emphasis>
          </para>
          <para>
	Semantic Bank is open source software and is licensed under the BSD license.
    </para>
          <para><emphasis>Note</emphasis>

  , however, that this software ships with libraries that are not released under the same license; that we interpret their licensing terms to be compatible with ours and that we are redistributing them unmodified. For more information on the licensing terms of the libraries Semantic Bank depends on, please refer to the source code.
    </para>
          <para>
            <emphasis>Download location:</emphasis>
          </para>
          <para>
            <link xlink:href="http://simile.mit.edu/dist/semantic-bank/">"http://simile.mit.edu/dist/semantic-bank/</link>
          </para>
          <para>
            <emphasis>The Virtuoso Semantic Bank End Point</emphasis>
          </para>
          <para>
	Before you can publish, you must register with one or more Semantic Banks:
    </para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>Invoke the menu command Tools &gt; Piggy Bank &gt; My Semantic Bank Accounts ...</para>
            </listitem>
            <listitem>
              <para>Click Add... in the Semantic Bank Accounts dialog box.</para>
            </listitem>
            <listitem>
              <para>In the popup dialog box, type in the URL to the Virtuoso Semantic Bank you want to register with. Example: http://server_name:server_port/bank</para>
            </listitem>
            <listitem>
              <para>Enter the account of a valid Virtuoso DAV user. (Note: currently we do not use encryption during authentication; do not use your precious password here.)</para>
            </listitem>
            <listitem>
              <para>Click OK, wait for the account to be registered, and then dismiss the Semantic Bank Accounts dialog box.</para>
            </listitem>
            <listitem>
              <para>To publish an item, just click the corresponding Publish button (much like how you save the item). To publish all the items being viewed, click the Publish All button.</para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>What is the graph name used by Virtuoso for the triples from PiggyBank?</emphasis>
          </para>
          <para>
	http://simile.org/piggybank/&lt;piggybank-generated-name&gt;
    </para>
          <para>
	The piggybank-generated-name is a Virtuoso DAV user ID.
    </para>
        </section>
        <section xml:id="rdfsparqlexnpointnorthwindexample">
          <title>Making Linked Data Views Dereferenceable - Northwind Example</title>
          <para>Consider an application that makes some relational data available for SPARQL requests, as described in the <link linkend="rdfviewnorthwindexample1">first part of the Northwind Linked Data View example</link>

  . This may be sufficient for some clients but the IRIs of the described subjects are not dereferenceable.
This means that external SPARQL processors cannot retrieve that data using the Virtuoso Sponger or the like. It also means that if some external resources refer to the IRI of
some Northwind subject and a user browses that resource then he cannot look at the application's data by clicking on the subject link.</para>
          <para>To make RDF access complete, applications can do the following:</para>
          <orderedlist>
            <listitem>
              <para>Create a virtual directory</para>
            </listitem>
            <listitem>
              <para>Instruct the server how to prepare RDF resources on demand</para>
            </listitem>
            <listitem>
              <para>Configure rendering of RDF resources for non-RDF clients (including Web search engines)</para>
            </listitem>
            <listitem>
              <para>Make the used ontology available</para>
            </listitem>
            <listitem>
              <para>Provide an index or sitemap page to help users who try to browse published data but do not know the proper URLs</para>
            </listitem>
          </orderedlist>
          <para>The following sequence of operations demonstrates how to implement the listed features without writing any special web pages.
All requests (except the application-specific index/sitemap) will be handled by existing web service endpoints.</para>
          <para>As a precaution, we erase any URL rewriting rule lists created by this example that may be in the database following a previous run of the script.</para>
          <programlisting>
DB.DBA.URLREWRITE_DROP_RULELIST ('demo_nw_rule_list1', 1)
;
</programlisting>
          <para>Do the same for individual rewrite rules:</para>
          <programlisting>
DB.DBA.URLREWRITE_DROP_RULE ('demo_nw_rule1', 1)
;
DB.DBA.URLREWRITE_DROP_RULE ('demo_nw_rule2', 1)
;
DB.DBA.URLREWRITE_DROP_RULE ('demo_nw_rule3', 1)
;
DB.DBA.URLREWRITE_DROP_RULE ('demo_nw_rule4', 1)
;
</programlisting>
          <para>As a sanity check we ensure that there are no other similarly named rules:</para>
          <programlisting>
SQL&gt;SELECT signal ('WEIRD', sprintf ('Rewrite rule "%s" found', URR_RULE))
FROM DB.DBA.URL_REWRITE_RULE WHERE URR_RULE like 'demo_nw%'
;

</programlisting>
          <para>Next we create URI rewrite rules based on regular expressions by calling <link linkend="fn_urlrewrite_create_regex_rule"><function>DB.DBA.URLREWRITE_CREATE_REGEX_RULE</function></link>

  , so the same path will be redirected to different places depending on the MIME types the client can accept.</para>
          <para>
For a given input path, that is a URI identifying a particular Linked Data entity, the rewrite rule below generates an N3 or RDF/XML representation of the entity using a CONSTRUCT
query. (Note: In the regular expression identifying the Accept: MIME types this rule applies to, i.e. in rdf.n3 and rdf.xml, each period (.) replaces a literal character
because some SPARQL web clients published before the relevant W3C recommendations produce slightly incorrect "Accept:" strings.)
</para>
          <programlisting>
SQL&gt;DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    'demo_nw_rule2',
    1,
    '(/[^#]*)',
    vector('path'),
    1,
    '/sparql?query=CONSTRUCT+{+%%3Chttp%%3A//^{URIQADefaultHost}^%U%%23this%%3E+%%3Fp+%%3Fo+}+FROM+%%3Chttp%%3A//^{URIQADefaultHost}^/Northwind%%3E+WHERE+{+%%3Chttp%%3A//^{URIQADefaultHost}^%U%%23this%%3E+%%3Fp+%%3Fo+}&amp;format=%U',
    vector('path', 'path', '*accept*'),
    null,
    '(text/rdf.n3)|(application/rdf.xml)',
    0,
    null
    );
</programlisting>
          <note>
            <para>The request URL for the SPARQL web service looks terrible because it is URL-encoded; the sprintf format string for it is even worse! The easiest way of composing
encoded strings of this sort is to use the Conductor UI for configuring the rewrite rules. Alternatively open the SPARQL endpoint page (assuming it supports a UI for entering queries, if no query string is specified), type in the desired CONSTRUCT or DESCRIBE statement into the web form (using some sample URI), execute it, cut the URL of the page with results
from the address line of the browser window, paste it into the script and then replace the host name with
<emphasis>^{URIQADefaultHost}^</emphasis>

  , every percent with double percent, the parts of the sample IRI to be substituted with <emphasis>%U</emphasis>

  ; finally adjust the vector of replacement parameters so that its length is equal to the number of <emphasis>%U</emphasis>

   or other format specifiers in the template.</para>
          </note>
          <para>The next rule redirects to the RDF browser service to display a description of the subject URI and let the user explore related subjects.</para>
          <programlisting>
SQL&gt;DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    'demo_nw_rule1',
    1,
    '(/[^#]*)',
    vector('path'),
    1,
    '/rdfbrowser/index.html?uri=http%%3A//^{URIQADefaultHost}^%U%%23this',
    vector('path'),
    null,
    '(text/html)|(\\*/\\*)',
    0,
    303
    );
</programlisting>
          <para>This next rule removes any trailing slash from the input path. Note that <emphasis>\x24</emphasis>

   is the hex character code for the
end-of-line pattern <emphasis>$</emphasis>

  . It is written escaped because the dollar sign indicates the beginning of macro in ISQL.</para>
          <programlisting>
SQL&gt;DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    'demo_nw_rule3',
    1,
    '(/[^#]*)/\x24',
    vector('path'),
    1,
    '%s',
    vector('path'),
    null,
    null,
    0,
    null
    );
</programlisting>
          <para>To configure the server to furnish the ontology underpinning the example Northwind Linked Data View, the procedure LOAD_NW_ONTOLOGY_FROM_DAV, listed
below, takes the ontology described in file /DAV/VAD/demo/sql/nw.owl and loads it into graph http://demo.openlinksw.com/schemas/NorthwindOntology/1.0/
in the local quad store. A rewrite rule is then created to query this graph when the input path identifies entities from this ontology.
</para>
          <programlisting>
SQL&gt;create procedure DB.DBA.LOAD_NW_ONTOLOGY_FROM_DAV()
{
  declare content1, urihost varchar;
  SELECT cast (RES_CONTENT as varchar) INTO content1 from WS.WS.SYS_DAV_RES WHERE RES_FULL_PATH = '/DAV/VAD/demo/sql/nw.owl';
  DB.DBA.RDF_LOAD_RDFXML (content1, 'http://demo.openlinksw.com/schemas/northwind#', 'http://demo.openlinksw.com/schemas/NorthwindOntology/1.0/');
  urihost := cfg_item_value(virtuoso_ini_path(), 'URIQA','DefaultHost');
  if (urihost = 'demo.openlinksw.com')
  {
    DB.DBA.VHOST_REMOVE (lpath=&gt;'/schemas/northwind');
    DB.DBA.VHOST_DEFINE (lpath=&gt;'/schemas/northwind', ppath=&gt;'/DAV/VAD/demo/sql/nw.owl', vsp_user=&gt;'dba', is_dav=&gt;1, is_brws=&gt;0);
    DB.DBA.VHOST_REMOVE (lpath=&gt;'/schemas/northwind#');
    DB.DBA.VHOST_DEFINE (lpath=&gt;'/schemas/northwind#', ppath=&gt;'/DAV/VAD/demo/sql/nw.owl', vsp_user=&gt;'dba', is_dav=&gt;1, is_brws=&gt;0);
  }
};

DB.DBA.LOAD_NW_ONTOLOGY_FROM_DAV();

drop procedure DB.DBA.LOAD_NW_ONTOLOGY_FROM_DAV;

DB.DBA.URLREWRITE_CREATE_REGEX_RULE (
    'demo_nw_rule4',
    1,
    '/schemas/northwind#(.*)',
    vector('path'),
    1,
    '/sparql?query=DESCRIBE%20%3Chttp%3A//demo.openlinksw.com/schemas/northwind%23%U%3E%20FROM%20%3Chttp%3A//demo.openlinksw.com/schemas/NorthwindOntology/1.0/%3E',
    vector('path'),
    null,
    '(text/rdf.n3)|(application/rdf.xml)',
    0,
    null
    );
</programlisting>
          <para>Next we define virtual directory <emphasis>/Northwind</emphasis>

   and associate with this a rulelist containing the URL rewriting rules defined
above. Requests matching the rewriting rules should then be properly redirected to produce the requested data. Attempts to access the virtual directory
root will execute the application's default VSP page, namely <emphasis>sfront.vspx</emphasis>

  .</para>
          <programlisting>
SQL&gt;DB.DBA.URLREWRITE_CREATE_RULELIST (
    'demo_nw_rule_list1',
    1,
    vector (
                'demo_nw_rule1',
                'demo_nw_rule2',
                'demo_nw_rule3',
                'demo_nw_rule4'
          ));

VHOST_REMOVE (lpath=&gt;'/Northwind');
DB.DBA.VHOST_DEFINE (lpath=&gt;'/Northwind', ppath=&gt;'/DAV/home/demo/', vsp_user=&gt;'dba', is_dav=&gt;1, def_page=&gt;'sfront.vspx',
          is_brws=&gt;0, opts=&gt;vector ('url_rewrite', 'demo_nw_rule_list1'));
</programlisting>
          <para>Finally, to register the namespace prefix <emphasis>northwind</emphasis>

   as persistent we execute:</para>
          <programlisting>
SQL&gt;DB.DBA.XML_SET_NS_DECL ('northwind', 'http://demo.openlinksw.com/schemas/northwind#', 2);
</programlisting>
        </section>
        <section xml:id="rdfproxyservice">
          <title>Sponger Proxy URI Service</title>
          <para>
In certain cases, such as Ajax applications, it's prohibited to issue HTTP requests to a server other than the original server.
In other cases it is necessary to transform the content of a target to an RDF format. To this end Virtuoso Server provides a Sponger Proxy URI Service.
This service takes as an argument a target URL and may return the target's content "as is" or the Sponger may try to transform the content and return
an RDF representation of the target. When transforming to RDF, the RDF format (RDF/XML, N3, TURTLE etc) of the output can be forced by a URL parameter
or by content negotiation.
</para>
          <para>
When the cartridges_dav.vad package is installed, Virtuoso reserves the path '/about/[id|html|data|rdf]/http/' for the RDF
proxy service. In the current implementation, Virtuoso defines virtual directories for HTTP requests that
come to the port specified as 'ServerPort' in the '[HTTPServer]' section of Virtuoso configuration file
and refer to the above path string. So, if the Virtuoso installation on host example.com listens for HTTP
requests on port 8080, client applications should use the 'service endpoint' string equal to
'http://example.com:8080/about/[id|html|data|rdf]/http/'.
</para>
          <para>
If the cartridges_dav.vad VAD package is not installed, then the path '/proxy/rdf/' is used for the Sponger Proxy URI Service.
</para>
          <para>
The old pattern for the Sponger Proxy URI Service, '/proxy/', is now deprecated.
</para>
          <para><emphasis>Note:</emphasis>

   If you do not have the cartridges package installed, in order for the Sponger Proxy URI Service to work correctly,
you must grant the SPARQL_UPDATE role to user SPARQL and grant execute permission on procedure RDF_SPONGE_UP.
</para>
          <para>
To enable SPARQL_UPDATE using the Conductor UI:
</para>
          <orderedlist>
            <listitem>
              <para>Go to the Virtuoso Administration Conductor i.e. http://host:port/conductor</para>
            </listitem>
            <listitem>
              <para>Login as dba user</para>
            </listitem>
            <listitem>
              <para>Go to System Admin-&gt;User Accounts-&gt;Roles</para>
            </listitem>
            <listitem>
              <para>
                <figure xml:id="rl1" floatstyle="1">
                  <title>Conductor UI</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="ui/cn1.png"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </para>
            </listitem>
            <listitem>
              <para>Click the link "Edit" for "SPARQL_UPDATE</para>
            </listitem>
            <listitem>
              <para>Select from the list of available user/groups "SPARQL" and click the "&gt;&gt;" button so to add it to the right-positioned list.</para>
            </listitem>
            <listitem>
              <figure xml:id="rl2" floatstyle="1">
                <title>Conductor UI</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="ui/cn2.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
            <listitem>
              <para>Click the button "Update".</para>
            </listitem>
          </orderedlist>
          <para>
       To grant execute permission on RDF_SPONGE_UP:
    </para>
          <programlisting>
grant execute on DB.DBA.RDF_SPONGE_UP to "SPARQL";
</programlisting>
          <para>
	When invoked with a URL of the form http://host:port/proxy?..., the Sponger Proxy URI Service accepts the following query string parameters:
    </para>
          <itemizedlist mark="bullet" spacing="compact">
            <listitem>
              <para>
                <emphasis>force</emphasis>
              </para>
              <para> - if 'rdf' is specified, the Sponger will try to extract RDF data from the target and return it</para>
            </listitem>
            <listitem>
              <para>
                <emphasis>header</emphasis>
              </para>
              <para> - HTTP headers to be sent to the target</para>
            </listitem>
            <listitem>
              <para>
                <emphasis>output-format</emphasis>
              </para>
              <para> - if 'force=rdf' is given, designates the desired output MIME type of the RDF data. The default is 'rdf+xml'. Other supported MIME types are 'n3', 'turtle' or 'ttl'.</para>
            </listitem>
          </itemizedlist>
          <para>
	When RDF data is requested and 'output-format' is not specified, the result will be serialized with a MIME type determined by the request 'Accept' headers i.e. the proxy service will do content negotiation.
    </para>
          <para>Example: RDF file with URL: http://www.w3.org/People/Berners-Lee/card</para>
          <programlisting>
-- Access the url in order to view the result in HTML format:
http://host:port/about/html/http/www.w3.org/People/Berners-Lee/card
-- Access the url in order to view the result in RDF:
http://host:port/about/rdf/http://www.w3.org/People/Berners-Lee/card
-- or use the following proxy invocation style:
http://host:port/proxy/rdf/http://www.w3.org/People/Berners-Lee/card
-- or this one:
http://host:port/proxy?url=http://www.w3.org/People/Berners-Lee/card&amp;force=rdf
</programlisting>
          <para>Note: It is not permitted, when using the style http://host:port/proxy/rdf, to pass URL query string parameters to the proxy. </para>
          <para>Now go to the SPARQL endpoint, i.e. http://host:port/sparql</para>
          <para>For the 'Default Graph URI' enter the URL of the RDF file:  http://www.w3.org/People/Berners-Lee/card</para>
          <para>For 'Query' enter:</para>
          <programlisting>
SELECT *
WHERE
  {
    ?s ?p ?o
  }
</programlisting>
          <para>Query result:</para>
          <programlisting>
s  	                                        p  	                                           o
http://www.w3.org/People/Berners-Lee/card 	http://www.w3.org/1999/02/22-rdf-syntax-ns#type    http://xmlns.com/foaf/0.1/PersonalProfileDocument
http://www.w3.org/People/Berners-Lee/card 	http://purl.org/dc/elements/1.1/title 	           Tim Berners-Lee's FOAF file
http://www.w3.org/People/Berners-Lee/card 	http://creativecommons.org/ns#license 	           http://creativecommons.org/licenses/by-nc/3.0/
http://www.w3.org/People/Berners-Lee/card 	http://xmlns.com/foaf/0.1/maker 	           http://www.w3.org/People/Berners-Lee/card#i
etc ...
</programlisting>
        </section>
        <section xml:id="sparqliniservice">
          <title>SPARQL INI service</title>
          <para>
	The <link linkend="ini_sparql">[SPARQL] section</link>

   of the virtuoso.ini configuration file sets parameters and limits for the SPARQL query web service.
	The values contained in the [SPARQL] section can be exposed in RDF form via the URL pattern http://cname/sparql?ini
    </para>
          <para>Example: http://demo.openlinksw.com/sparql?ini</para>
          <programlisting>
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:MaxQueryCostEstimationTime xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;1000&lt;/ns0pred:MaxQueryCostEstimationTime&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:ExternalXsltSource xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;1&lt;/ns0pred:ExternalXsltSource&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:DefaultQuery xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;SELECT ?Subject ?Concept WHERE {?Subject a ?Concept}&lt;/ns0pred:DefaultQuery&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:ResultSetMaxRows xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;100000&lt;/ns0pred:ResultSetMaxRows&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:MaxQueryExecutionTime xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;30&lt;/ns0pred:MaxQueryExecutionTime&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:ExternalQuerySource xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;1&lt;/ns0pred:ExternalQuerySource&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:DefaultGraph xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;http://demo.openlinksw.com/dataspace/person/demo&lt;/ns0pred:DefaultGraph&gt;&lt;/rdf:Description&gt;
&lt;rdf:Description rdf:about="http://www.openlinksw.com/schemas/virtini#SPARQL"&gt;&lt;ns0pred:PingService xmlns:ns0pred="http://www.openlinksw.com/schemas/virtini#"&gt;http://rpc.pingthesemanticweb.com/&lt;/ns0pred:PingService&gt;&lt;/rdf:Description&gt;
&lt;/rdf:RDF&gt;
</programlisting>
        </section>
        <section xml:id="sparqlexcel">
          <title>SPARQL Endpoint with Excel MIME Type Output Option</title>
          <para>The SPARQL endpoint offers an Excel MIME type output option.</para>
          <para>From http://cname:host/sparql, select "Spreadsheet" for the "Display Results As:" option and click the "Run Query" button.</para>
          <figure xml:id="sparqlexcel1" floatstyle="1">
            <title>SPARQL Endpoint with Excel MIME type output</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/Excel1.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>The resulting query string contains a format parameter value of <emphasis>"application/vnd.ms-excel"</emphasis>

  . For example,
<link xlink:href="http://demo.openlinksw.com/sparql?default-graph-uri=http%3A%2F%2Fdemo.openlinksw.com%2Fdataspace%2Fperson%2Fdemo&amp;should-sponge=&amp;query=select+*%0D%0Awhere+%7B%3Fs+%3Fp+%3Fo%7D%0D%0Alimit+10&amp;format=application%2Fvnd.ms-excel&amp;debug=on">A URL such as this one</link>

   will be generated, and can be opened directly with Excel.</para>
          <figure xml:id="sparqlexcel2" floatstyle="1">
            <title>SPARQL Endpoint with Excel MIME type output</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/Excel2.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section xml:id="sparqljson">
          <title>SPARQL Endpoint with RDF+JSON Output: SPARQL UI Example</title>
          <para>The SPARQL endpoint also offers a RDF+JSON output option.</para>
          <para>From http://cname:host/sparql select "JSON" for "Display Results As:"  and click the "Run Query" button.</para>
          <figure xml:id="sparqljson1" floatstyle="1">
            <title>SPARQL Endpoint with RDF+JSON output</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/JSON1.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>As result URL containing as parameter the format <emphasis>application/sparql-results+json</emphasis>

   will be generated and the content should look like:</para>
          <figure xml:id="sparqljson2" floatstyle="1">
            <title>SPARQL Endpoint with JSON+RDF</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="ui/JSON2.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section xml:id="sparqljsonp">
          <title>SPARQL Endpoint with JSON/P Output Option: Curl Example</title>
          <para>The SPARQL endpoint also offers a  JSON/P output option.</para>
          <para>The SPARQL endpoint accepts a 'callback' URL parameter and in this case
when parameter 'format' is 'json', then it will produce JSON/P output.</para>
          <programlisting>
$ curl "http://lod.openlinksw.com/sparql?query=select+*+where+\{+%3Fx+a+%3Fz+.+\}+limit+10&amp;format=json&amp;debug=on&amp;callback=func"
func(

{ "head": { "link": [], "vars": ["x", "z"] },
  "results": { "distinct": false, "ordered": true, "bindings": [
    { "x": { "type": "bnode", "value": "nodeID://b196899188" }  , "z": { "type": "uri", "value": "http://www.w3.org/2000/10/swap

    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2005/04/sparqlette/#profile" } , "z": { "type": "uri", "value":
services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/#b-profile" }   , "z": { "type": "uri",
aml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/#a-profile" }   , "z": { "type": "uri",
aml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/index.rdf#a-profile" }  , "z": { "type":
://www.daml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/index.rdf#b-profile" }  , "z": { "type":
://www.daml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2006/06/blogmatrix/#profile" } , "z": { "type": "uri", "value":
services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/#b-profile" }   , "z": { "type": "uri",
aml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/#a-profile" }   , "z": { "type": "uri",
aml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }},
    { "x": { "type": "uri", "value": "http://www.wasab.dk/morten/2003/12/nearestAirport/#b-profile" }   , "z": { "type": "uri",
aml.org/services/owl-s/1.1/Service.owl#ServiceProfile" }} ] } })
</programlisting>
        </section>
      </section>
