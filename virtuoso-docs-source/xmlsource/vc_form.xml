<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="vc_form">
          <refmeta>
            <refentrytitle>form</refentrytitle>
            <refmiscinfo>vspx_control</refmiscinfo>
          </refmeta>
          <refnamediv>
            <refname>form</refname>
            <refpurpose>Generic scriptable container for elements that may accept user's input.</refpurpose>
          </refnamediv>
          <refsynopsisdiv>
            <funcsynopsis xml:id="vc_syn_form">
              <funcprototype xml:id="vc_proto_form">
                <funcdef>
            &lt;<function>form</function>

 /&gt;</funcdef>
                <paramdef choice="req"><parameter>name</parameter>

   (required) </paramdef>
                <paramdef choice="opt"><parameter>annotation</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>initial-enable</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>enabled</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>instantiate</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>control-udt</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>xsd-stub-xhtml</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>width</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>height</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>type</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>action</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>method</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>table</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>if-not-exists</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>concurrency</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>triggers</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>data-source</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-srcfile</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-srcline</parameter>

   (optional) </paramdef>
                <paramdef choice="opt"><parameter>debug-log</parameter>

   (optional) </paramdef>
              </funcprototype>
            </funcsynopsis>
          </refsynopsisdiv>
          <refsect1 xml:id="vc_desc_form">
            <title>Description</title>
            <para>
    This is a grouping element for controls that handle post data and validation of user's input. In case of type 'update', this is a single row update control for a database table.
This retrieves the data from the row identified by the keys and shows the data in the column bound fields enclosed.  If responding to a post for a submit inside this form, the form updates/inserts the data and shows the resulting state at the render pass.
</para>
          </refsect1>
          <refsect1 xml:id="vc_attrs_form">
            <title>Attributes</title>
            <formalpara>
              <title>name = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>A page level unique name identifying a control.</para>
            </formalpara>
            <formalpara>
              <title>annotation</title>
              <para>A human readable comment.</para>
            </formalpara>
            <formalpara>
              <title>initial-enable = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines  whether  a control is initially visible. True by default. Could be data-bound to an SQL expression.</para>
            </formalpara>
            <formalpara>
              <title>enabled = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines  whether  a control is visible. True by default. Could be data-bound to an SQL expression.</para>
            </formalpara>
            <formalpara>
              <title>instantiate = <link linkend="vc_type_calculateablevalue">CalculateableValue</link>

   </title>
              <para>Determines whether a control instantiate its children. It is true by default. It could be data-bound to an SQL expression. Unlike most of calcucateable attributes, the value of this attribute for a control is calcluated before calling 'on-init' event handler of the control; other values are calculated before calling 'before-data-bind' event handler.</para>
            </formalpara>
            <formalpara>
              <title>control-udt = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>At run time every control is represented as an instance of some user-defined type (UDT). VSPX compiles selects the UDT to use depending on name of the XML element that represents the control and maybe some of its attributes. In some specific cases the application developer may instruct VSPX compiler to use some other UDT, e.g. an application-specific UDT that is derived from the preset one. If specified, the value of 'control-udt' attribute should be equal to the name of the desired target UDT.</para>
            </formalpara>
            <formalpara>
              <title>xsd-stub-xhtml</title>
              <para>This attribute is for internal use only. It has no effect if added to the source VSPX file.</para>
            </formalpara>
            <formalpara>
              <title>width</title>
              <para>Visible width of the control when it is displayed in WYSIWYG tools when the source VSPX text is edited.
The value of this attribute will not be used when the resulting HTML is rendered.</para>
            </formalpara>
            <formalpara>
              <title>height</title>
              <para>Visible width of the control when it is displayed in WYSIWYG tools when the source VSPX text is edited.
The value of this attribute will not be used when the resulting HTML is rendered.</para>
            </formalpara>
            <formalpara>
              <title>type</title>
              <para>Type of form, can be 'simple' or 'update'. When this is 'simple' the vspx_form class will be instantiated, otherwise in case of 'update' vspx_update_form subclass will be used.
              <table><title>Allowed values of the 'type' attribute</title><tgroup cols="2"><tbody><row><entry>simple</entry><entry><para>
Form with no special data binding.
</para></entry></row><row><entry>update</entry><entry><para>
Form that may be used in templates of type 'update' or 'add'.
</para></entry></row></tbody></tgroup></table>
              </para>
            </formalpara>
            <formalpara>
              <title>action</title>
              <para>
      A URL for processing. The data filled-in the form will be submitted to the 'action' page.
      Therefore this is a page where the content of that form will be processed.
      If it is empty, the target is a current page.
				 </para>
            </formalpara>
            <formalpara>
              <title>method</title>
              <para>A method  of transferring the form data, can be POST or GET. The same as 'method' of HTML forms.</para>
            </formalpara>
            <para>The use of 'GET' is not recommended because the length of the URI may easily exceed internal limits of the browser or an intermediate proxy server.</para>
            <formalpara>
              <title>table</title>
              <para>If the value of 'type' attribute is 'update', the form acts as a single row update control for a database table; and the value of 'table' attribute specifies the name of that table.
It retrieves the data from the row identified by the keys and shows the data in the column bound fields enclosed.  If responding to a post for a submit inside this form, the form updates/inserts the data and shows the resulting state at the render pass.
This attribute is required if 'type' is 'update' and prohibited otherwise.</para>
            </formalpara>
            <formalpara>
              <title>if-not-exists</title>
              <para>If the keys do not select any row, and the value of this attribute is 'insert', the update form will be filled in with defaults filled in and will do an insert into the table when the form is submitted.
In this case of course the keys will have to be defaulted after the post or will have to be supplied in the post as fields.
Any defaulting should take place in the v:on-post handler which is before the insert or update in the event of the post.
</para>
            </formalpara>
            <formalpara>
              <title>concurrency</title>
              <para>If true and a previous value was shown in the form before the post being processed, this causes the system to check whether any of the data has been updated between getting it and the post at hand.
This is a sort of optimistic concurrency control at the row level.  If an update is detected, the updated_meanwhile message is set as the error message of the form and no update is made.  The render pass may choose to process this message as it will, the default is to show it as any other error message for form level validation failure.
</para>
            </formalpara>
            <formalpara>
              <title>triggers</title>
              <para>This is applicable for update form only, when this is OFF no PL triggers
	will be fired when inserting or updating.</para>
            </formalpara>
            <formalpara>
              <title>data-source = <link linkend="vc_type_sqlname">SqlName</link>

   </title>
              <para>This is applicable to the update form and is
	An alternative of 'table'. When is specified the value is suppsed to be
	valid reference to existing data-source control. Further the given data-source
	will be used to bind/update the data.
      </para>
            </formalpara>
            <formalpara>
              <title>debug-srcfile</title>
              <para>URI of the source document where the tag comes from.</para>
            </formalpara>
            <formalpara>
              <title>debug-srcline</title>
              <para>Line number in the source document where the tag comes from.</para>
            </formalpara>
            <formalpara>
              <title>debug-log</title>
              <para>This defines what sort of data are saved to the debugging log.
</para>
            </formalpara>
          </refsect1>
          <refsect1 xml:id="vc_udt_form">
            <title>Declaration of type vspx_form</title>
            <para> 
  </para>
            <screen>
create type vspx_form under vspx_control
   as
     (
       uf_action varchar default '',
       uf_method varchar default 'post',
       --uf_inside_form int default 0,
       uf_validators any,
       uf_xmodel any default null,
       uf_xsubmit any default null,
       uf_xschema any default null
     )  temporary self as ref
   constructor method vspx_form (name varchar, parent vspx_control),
   method prologue_render (sid varchar, realm varchar, nonce varchar) returns any,
   method epilogue_render () returns any,
   overriding method vc_set_model () returns any
</screen>
          </refsect1>
          <refsect1 xml:id="vc_ex_form">
            <title>Examples</title>
            <example xml:id="vc_ex_form__0">
              <title>
  Simple entry form
</title>
              <para>
The OK button of the form submits data from the form back to the same page.
</para>
              <screen>
&lt;v:page name="form__0" xmlns:v="http://http://example.com/vspx/"&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;VSPX samples | v:form&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;v:form name="form1" type="simple" action="" method="POST"&gt;
        &lt;v:label name="label1" value="--'Simple form'"/&gt;
        &lt;v:text name="txt1" default=""/&gt;
        &lt;v:text name="txt2" default=""/&gt;
        &lt;v:button name="submit1" action="simple" value="OK"/&gt;
      &lt;/v:form&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/v:page&gt;
</screen>
            </example>
            <example xml:id="vc_ex_form__1">
              <title>
  Simple entry form containing various controls
</title>
              <para>The OK button of the form submits data from the form back to the same page.
The check-box is validated against ragio group:</para>
              <screen>
&lt;v:page name="form__1" xmlns:v="http://http://example.com/vspx/"&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;VSPX samples | v:form | v:validator&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;v:form name="f1" type="simple" method="POST"&gt;
	&lt;v:error-summary/&gt;&lt;br/&gt;
        &lt;v:label name="l1" value="--'Simple form'"/&gt;&lt;br/&gt;
        &lt;v:url name="u1" value="--'This page'" url="--self.f1.uf_action" /&gt;&lt;br/&gt;
        &lt;v:text name="t1" value="--self.rb1.ufl_value"/&gt;&lt;br/&gt;
        &lt;v:text name="t2" value="--'my'||'password'" type="password"/&gt;&lt;br/&gt;
        &lt;v:text name="t3" value="--'something'||'hidden'" type="hidden"/&gt;
	&lt;v:textarea name="ta1" value="--'some text'" /&gt;&lt;br/&gt;
        &lt;v:check-box name="cb1" value="check-box" /&gt;&lt;br/&gt;
	&lt;v:radio-group name="rg1"&gt;
	 &lt;v:radio-button name="rb1" value="one" /&gt;
	 &lt;v:radio-button name="rb2" value="two" /&gt;
        &lt;/v:radio-group&gt;&lt;br/&gt;
        &lt;v:button name="b1" action="simple" value="--'OK'"/&gt;&lt;br/&gt;
 	&lt;v:validator test="sql" message="only when radio is on position one check-box could be checked"&gt;
	if (self.rb2.ufl_selected and self.cb1.ufl_selected)
	  {
	    return 1;
	  }
	&lt;/v:validator&gt;
      &lt;/v:form&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/v:page&gt;
</screen>
            </example>
            <tip>
              <title>See Also: Reference Material in the Tutorial:</title>
              <para>
                <link xlink:href="http://demo.openlinksw.com/tutorial/web/vx_s_2/form.vspx">VX-S-2</link>
              </para>
              <para>
                <link xlink:href="http://demo.openlinksw.com/tutorial/web/vx_s_3/update_form.vspx">VX-S-3</link>
              </para>
            </tip>
          </refsect1>
        </refentry>
