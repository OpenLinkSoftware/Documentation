<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="litsbraceescs">
      <title>Literals, Brace Escapes</title>
      <section xml:id="strings">
        <title>Strings</title>
        <para>
String literals are delimited with single quotes.  A double single
quote is an escape notation for a single quote character inside a
string literal.  Additionally, standard C language escapes are supported.
Support of C escapes can be turned off for compatibility with other SQL databases
by using the SQL_NO_CHAR_C_ESCAPE option in the configuration file or as an
ODBC connection option.
</para>
        <screen>
Literal			meaning
''			&lt;empty&gt;
''''			'
''''''			''
'\t\r\n\\'		tab, carriage return, newline, backslash
'\012'			Character 012 octal, i.e. newline
</screen>
      </section>
      <section xml:id="numbers">
        <title>Numbers</title>
        <para>
An integer constant consist of an optional minus sign followed by
decimal digits.  Integer literals are of the C type long, 32 bit.
</para>
        <para>
Numeric literals with a decimal point literal are internally of the DECIMAL SQL type, a variable
length decimal floating point type.
The Following are examples of decimal literals:
</para>
        <screen>
123.456
-16.0
</screen>
        <para>
Numeric literals which specify an exponent, e.g. 1.2e11 or
2e-3 are read as C doubles, (64 bit IEEE binary floating point). This
is potentially less precise than the DECIMAL SQL type.
</para>
        <para>
Integer literals outside of the 32-bit range are interpreted as DECIMAL.
</para>
      </section>
      <section xml:id="odbcbraceesc">
        <title>ODBC Brace Escapes</title>
        <para>
The Virtuoso SQL parser supports the following ODBC brace escape notations:
</para>
        <screen>
{fn function (argument, ..) }		fm (arguments .)
call procedure a1, ... }

{d 'yyyy.mm.dd'}

{t 'hh:mm.ss' }

{ts 'yyyy.mm.dd hh:mm.s fraction' }

{oj  }		-- outer join
</screen>
      </section>
      <section xml:id="sqlrefhexliterals">
        <title>Hexadecimal Literals</title>
        <para>Hexadecimal values can be specified literally in two ways, prefixing the
   plain value with '0x' or enclosed with single quotes prefixed with 'X'.  The
   case is not important.  Hex characters should always be pairs, representing
   a single byte, and should be at least on pair.  Here are some examples:</para>
        <programlisting>
X'beef'   - valid
0xbeef    - valid

X'abeef'  - not valid
X'0abeef' - valid
X''   - not valid
</programlisting>
        <para><computeroutput>X'&lt;value&gt;'</computeroutput>

   is equivalent
to <computeroutput>0x&lt;value&gt;</computeroutput>

  </para>
      </section>
      <section xml:id="sqlrefbinliterals">
        <title>Binary Literals</title>
        <para>Binary strings can be specified as literals prefixed with 'B' and
  enclosed with single quotes.  The string should not be empty and should
  contain only 1's or 0's.  Binary strings are read from the end to beginning
  forming bytes on each 8-th bit:</para>
        <programlisting>
B'1'    = 0x01
B'1111'   = 0x0F
B'111111111'  = 0x01FF
B'100000001'  = 0x0101
B'', X'' and 0x return binary literals.
</programlisting>
      </section>
    </section>
