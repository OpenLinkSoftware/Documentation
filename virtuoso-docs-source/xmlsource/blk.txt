

RDF Bulk Load Utility 


The RDF loader utility facilitates parallel bulk loading of multiple RDF files.
The utility maintains a database table containing a list of files to load and the status of each file, whether not loaded, loaded or loaded with error.   The table also records load start and end times.

One must have a dba group login for using this and the virtuoso.ini file access comtrol list must be set up so that the Virtuoso server can open  the files to load.

Files are added to the load list with the function ld_dir:

ld_dir (in dir_path varchar, in file_mask varchar, in target_graph varchar);

The file mask is a SQL like pattern to match against the files in the directory.  For example:

ld_dir ('/data8/2848260', '%.gz', 'http://bsbm.org');

would load the RDF in all files ending in .gz from the directory given as first parameter.  The RDF would be loaded in the http://bsbm.org graph.
If NULL is given for the graph, each file may go to a different graph specified in a separate file with the name of the RDF source file plus the  extension .graph.
A .graph file 
Such a file contains the target graph URI without any other content or whitespace.   



The layout of the load_list table is as follows:

create table DB.DBA.LOAD_LIST (
  ll_file varchar,
  ll_graph varchar,
  ll_state int default 0, -- 0 not started, 1 going, 2 done
  ll_started datetime,
  ll_done datetime,
  ll_host int,
  ll_work_time integer,
  ll_error varchar,
  primary key (ll_file))
alter index LOAD_LIST on DB.DBA.LOAD_LIST partition (ll_file varchar)
create index LL_STATE on DB.DBA.LOAD_LIST (ll_state, ll_file, ll_graph) partition (ll_state int)
;


This table may be checked at any time during bulk load for the progress of the load.  ll_state is 1 for files being loaded and 2 for files whose loading has finished.  ll_error is NULL if the load finished without error, else it is the error message.

In order to load data from the files in load_list, run db..rdf_loader_run (); as dba.
One may run several of these commands on parallel sessions for better throughput.
On a cluster one can do cl_exec ('rdf_ld_srv ()'); 
This will start one rdf_loader_run on each node of the cluster.  Note that in such a setting all the server processes must see the same files at the same path.

On an isql session one may execute rdf_loader_run () & several times, forking a new isql for each such command, similarly to what a Unix shell does. 

Because this load is non-transactional and non-logged, one must do an explicit checkpoint after the load to guarantee a persistent state.
On a single server do checkpoint; on a cluster do cl_exec ('checkpoint');

The server(s) are online and can process queries and transactions while a bulk load is in progress.  Periodic checkpoints may occur during the load but the state is guaranteed to be consistent only after running a checkpoint after all the bulk load threads have finished.

A bulk load should not be forcibly stopped. To make a controlled stop, run rdf_load_stop ();. 
This will cause the files being loaded at the time to finish load but no new loads will start until explicitly started with rdf_loader_run ().

Specially note that on a cluster the database will be inconsistent if one server process does a checkpoint and another does not.  Thus guaranteeing a checkpoint on all is necessary.  This is easily done with an isql script with the following content:

 ld_dir ('/data8/2848260', '%.gz', 'http://bsbm.org');

-- Record CPU time 
select getrusage ()[0] + getrusage ()[1];


rdf_loader_run () &
rdf_loader_run () &
rdf_loader_run () &
rdf_loader_run () &
rdf_loader_run () &
rdf_loader_run () &
rdf_loader_run () &
rdf_loader_run () &


wait_for_children;
checkpoint;

-- Record CPU time
select getrusage ()[0] + getrusage ()[1];



For a cluster, the equivalent is:

ld_dir ('/data8/2848260', '%.gz', 'http://bsbm.org');


cl_exec ('DB.DBA.RDF_LD_SRV (2)');

cl_exec ('checkpoint');






rdf_loader_run recognizes several file types, including .ttl, .nt, .xml, .rdf, .owl, .nq, .n4, and others. 
Internally the function uses ttlp or db..rdf_load_rdfxml, as appropriate. 


