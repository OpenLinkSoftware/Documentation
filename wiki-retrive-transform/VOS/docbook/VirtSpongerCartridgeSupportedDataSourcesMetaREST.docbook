<docbook><section><title>VirtSpongerCartridgeSupportedDataSourcesMetaREST</title><para> </para>
<title> Meta Cartridges Usage via REST Request</title> Meta Cartridges Usage via REST Request
Description.vsp underlies the /about/html/ page, and accepts the parameters described below.
<table><title /><tgroup><thead /><tbody>
<row />
<row><entry><emphasis>@Lookup@<emphasis /></emphasis></entry><entry> </entry><entry>The type of lookup</entry><entry> </entry></row>
<row><entry> </entry><entry><emphasis>No Value</emphasis></entry><entry>When value is not given (i.e., <emphasis>@Lookup@=</emphasis>), all will work as if the parameter were not present.  The &quot;Lookup&quot; name is chosen to distinguish between parameters belonging to the URL being processed, and parameters for the Sponger.</entry><entry><ulink url="http://linkeddata.uriburner.com/about/html/http://www.apple.com/?@Lookup@=&amp;refresh=0">Refresh the graph with all current cartridges, either type</ulink> </entry></row>
<row><entry> </entry><entry><emphasis>0</emphasis></entry><entry>NLP meta only</entry><entry><ulink url="http://linkeddata.uriburner.com/about/html/http://www.apple.com/?@Lookup@=0&amp;refresh=0">Execute only NLP meta extraction</ulink></entry></row>
<row><entry> </entry><entry><emphasis>-2</emphasis></entry><entry>Keywords-based only</entry><entry><ulink url="http://linkeddata.uriburner.com/about/html/http://www.apple.com/?@Lookup@=-2&amp;refresh=0">Execute only keywords-based meta extraction</ulink></entry></row>
<row><entry> </entry><entry><emphasis><emphasis>x,y...</emphasis></emphasis></entry><entry>A list of meta cartridges to be executed, by their unique IDs. The ID column can be found in <emphasis>Conductor -&gt; RDF -&gt; Sponger -&gt; Meta Cartridges</emphasis></entry><entry><ulink url="http://linkeddata.uriburner.com/about/html/http://www.apple.com/?@Lookup@=19,22&amp;refresh=0">Execute only CNET (ID=19) and NYT: The TimesTags (ID=22) meta cartridges</ulink></entry></row>
<row><entry><emphasis>refresh</emphasis></entry><entry>0,1,2 etc. </entry><entry><emphasis>Usage</emphasis>: for cache invalidation. When used 1 or larger number (n), adds <emphasis>get:refresh &quot;N&quot;</emphasis>(explicit refresh interval in seconds) as a directive to Sponger. A refresh of zero (&quot;0&quot;) seconds will make a new graph on the next lookup with the &#39;@Lookup@&#39; parameter value.</entry><entry><ulink url="http://linkeddata.uriburner.com/about/html/http://www.apple.com/?@Lookup@=&amp;refresh=0">Refresh the graph with all current cartridges</ulink></entry></row>
<row><entry><emphasis>refresh</emphasis></entry><entry>clean </entry><entry><emphasis>Usage</emphasis>: for overwriting. The &#39;clean&#39; usage explicitly clears the graph i.e. will cause the Sponger to drop cache even if it is marked to be in the fly.Thus, if fetched cache by some reason is left in some inconsistent state like shutdown during Network Resource fetching, then &#39;clean&#39; is required as it doesn&#39;t check cache state.<emphasis>Note</emphasis>: must be used with caution as other threads may be doing fetching of network resources at same time. </entry><entry> <ulink url="http://linkeddata.uriburner.com/about/html/http://linkeddata.uriburner.com/about/id/entity/http/twitter.com/kidehen?@Lookup@=&amp;refresh=clean">Explicitly clear the graph</ulink></entry></row>
<row><entry><emphasis>sponger:get</emphasis></entry><entry>add </entry><entry><emphasis>Usage</emphasis>: Add new triples to named graphs, progressively. This is the default value for the parameter sponger:get. May be used together with refresh=&lt;seconds&gt; to overwrite the expiration in the cache. </entry><entry> <ulink url="http://linkeddata.uriburner.com/about/html/http://linkeddata.uriburner.com/about/id/entity/http/twitter.com/kidehen?sponger:get=add&amp;refresh=10">Add new triples and refresh on every 10 seconds</ulink></entry></row>
<row><entry><emphasis>sponger:get</emphasis></entry><entry> soft</entry><entry><emphasis>Usage</emphasis>: Network Resource Fetch data subject to cache invalidation mode and associated rules of instance. May be used together with refresh=&lt;seconds&gt; to overwrite the expiration in the cache. </entry><entry> <ulink url="http://linkeddata.uriburner.com/about/html/http://linkeddata.uriburner.com/about/id/entity/http/twitter.com/kidehen?sponger:get=soft&amp;refresh=10">Network Resource Fetch data with option <emphasis>soft</emphasis> and refresh on every 10 seconds</ulink></entry></row>
<row><entry><emphasis>sponger:get</emphasis></entry><entry>replace </entry><entry><emphasis>Usage</emphasis>: Replace subject to cache invalidation mode and rules, but coverage includes non fetched triples if such exist in a given named graph. may be used together with refresh=&lt;seconds&gt; to overwrite the expiration in the cache. </entry><entry> <ulink url="http://linkeddata.uriburner.com/about/html/http://linkeddata.uriburner.com/about/id/entity/http/twitter.com/kidehen?sponger:get=replace&amp;refresh=10">Replace data and refresh on every 10 seconds</ulink></entry></row>
</tbody></tgroup></table>
<para> </para>
<bridgehead class="http://www.w3.org/1999/xhtml:h2">Related</bridgehead>
<itemizedlist mark="bullet" spacing="compact"><listitem><ulink url="VirtSponger">Virtuoso Sponger</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesMeta">Supported Meta Cartridges in Virtuoso</ulink> </listitem>
<listitem><ulink url="VirtSpongerCartridgeSupportedDataSourcesMetaRESTExamples">Parametrized Examples of Meta Cartridge Usage via REST Request</ulink> </listitem>
</itemizedlist></section></docbook>