<docbook><section><title>DevelopingADONetApps</title><title> Developing an Application with the ADO.NET Data Provider </title> Developing an Application with the ADO.NET Data Provider 
<para>The namespaces for our ADO.NET Data Providers are:
</para><table><title /><tgroup><thead /><tbody>
<row><entry> 100% Managed Multi-Tier Generic Client ADO.NET Provider  </entry><entry>  OpenLink.Data.GenericClient  </entry></row>
<row><entry> 100% Managed Single-Tier ADO.NET Provider for Microsoft SQL Server Data Sources  </entry><entry>  OpenLink.Data.SQLServer  </entry></row>
<row><entry> 100% Managed Single-Tier ADO.NET Provider for Sybase Data Sources  </entry><entry>  OpenLink.Data.Sybase  </entry></row>
<row><entry> 100% Managed Single-Tier ADO.NET Provider for Virtuoso Data Sources  </entry><entry>  OpenLink.Data.Virtuoso  </entry></row>
<row><entry> Partially Managed Single-Tier ADO.NET Provider for ODBC Data Sources  </entry><entry>  OpenLink.Data.OdbcClient  </entry></row>
</tbody></tgroup></table>
<para>An ADO.NET data provider provides functionality for connecting to a data source, executing commands, and retrieving results.
 Those results can be processed directly, or placed in an ADO.NET DataSet for further processing while in a disconnected state.
 While in the DataSet, data can be exposed to the user, combined with other data from multiple sources, or passed remotely between tiers.
 Any processing performed on the data while in the DataSet can then be reconciled to the data source.</para><para>All .NET data providers are designed to be lightweight.
 They consist of a minimal layer between the data source and your code.
 This extends functionality without sacrificing performance.</para><para>There are four core objects that make up a .NET data provider.
 The following table describes those objects and their function.</para><para>Table: 6.2.1.
 Core Classes
</para><table><title /><tgroup><thead /><tbody>
<row><entry><emphasis>Object</emphasis></entry><entry> 	<emphasis>Description</emphasis></entry></row>
<row><entry>Connection</entry><entry>	Establishes a connection to a specific data source and can begin a Transaction.</entry></row>
<row><entry>Command </entry><entry>	Executes a command at a data source, and exposes Parameters.</entry></row>
<row><entry>DataReader</entry><entry> 	Exposes and reads a forward-only stream of data from a data source.</entry></row>
<row><entry>DataAdapter</entry><entry> 	Populates a DataSet and resolves updates with the data source.</entry></row>
</tbody></tgroup></table>
<para>Along with the core classes listed in the preceding table, a .NET data provider also contains the classes listed in the following table.</para><para>Table: 6.2.2.
 Additional Classes
</para><table><title /><tgroup><thead /><tbody>
<row><entry><emphasis>Object</emphasis></entry><entry> 	<emphasis>Description</emphasis></entry></row>
<row><entry>ClientPermission</entry><entry> 	Provided for .NET data provider code access security attributes.</entry></row>
<row><entry>CommandBuilder</entry><entry> 	A helper object that will automatically generate command properties of a DataAdapter or will derive parameter information from a stored procedure and populate the Parameters collection of a Command object.</entry></row>
<row><entry>Error </entry><entry>	Exposes the information from a warning or error returned by a data source.</entry></row>
<row><entry>Exception</entry><entry> 	Returned when an error is encountered at the data source. For an error encountered at the client, .NET data providers throw a .NET Framework exception.</entry></row>
<row><entry>Parameter</entry><entry> 	Defines input, output, and return value parameters for commands and stored procedures.</entry></row>
<row><entry>Transaction</entry><entry> 	Enables you to enlist commands in transactions at the data source.</entry></row>
</tbody></tgroup></table>
<para>During the installation process the OpenLink .Net Data Provider is registered in the system GAC (Global Assembly Cache) enabling it for use by .Net applications.
 To use our ADO.NET Data Providers, the application must add an imports or using statement for the .Net Data Provider namespace, as the following code illustrates:</para><programlisting>[Visual Basic]
Imports OpenLink.Data.GenericClient     // Managed Multi-Tier Generic Client
//     or
Imports OpenLink.Data.SQLServer         // Managed Microsoft SQL Server
//     or
Imports OpenLink.Data.Sybase            // Managed Sybase
//     or
Imports OpenLink.Data.OdbcClient        // Unmanaged ODBC based

[C#]
using OpenLink.Data.GenericClient;      // Managed VDB Generic Multi-Tier
//     or
using OpenLink.Data.SQLServer;          // Managed Microsoft SQL Server
//     or
using OpenLink.Data.Sybase;             // Managed Sybase 
//     or
using OpenLink.Data.Virtuoso;           // Managed Virtuoso
//     or
using OpenLink.Data.OdbcClient;         // Unmanaged ODBC based
</programlisting><para> You must also include a reference to the .DLL when you compile your code.
 For example, if you are compiling a MicrosoftÂ® Visual C# program, your command line should include:</para><programlisting>csc /r:OpenLink.Data.GenericClient.dll  ; Managed VDB Generic Multi-Tier
;     or
csc /r:OpenLink.Data.SQLServer.dll      ; Managed Microsoft SQLServer
;     or
csc /r:OpenLink.Data.Virtuoso.dll       ; Managed Virtuoso
;     or
csc /r:OpenLink.Data.Sybase.dll         ; Managed Sybase SQLServer
;     or
csc /r:OpenLink.Data.OdbcClient.dll     ; Unmanaged ODBC based
</programlisting><para> </para></section></docbook>