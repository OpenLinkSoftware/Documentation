%META:TOPICPARENT{name="OATDOCIndex"}%
---+ xml.js

Useful function for XML access and manipulation.

%TOC%

---++ Functions

---+++ OAT.Xml.createXmlDoc(string)

Parses a string of XML data and returns a document object.

---+++ OAT.Xml.transformXSLT(xmlDoc, xslDoc[, paramsArray])

Applies a XSLT template. <tt>xslDoc</tt> is a template to be applied to <tt>xmlDoc</tt>. Both arguments must be valid XML documents (not strings). The third (optional) argument is an array of XSLT parameters. Each parameter is a triple (array), which consists of <tt>Namespace</tt>, <tt>Name</tt>, and <tt>Value</tt>.

---+++ OAT.Xml.textValue(node)

Returns a text value of <tt>node</tt>. So, for the markup below, the <tt>textValue</tt>of tag is <tt>content</tt> --

<verbatim>
<tag>content</tag>
</verbatim>

---+++ OAT.Xml.localName(node)

Returns <tt>node</tt>'s local name - the part without namespace prefix.&lt;xsl:template&gt; has a <tt>localName</tt> template.

---+++ OAT.Xml.childElements(node)

Returns all child nodes which are ordinary elements (i.e., no#textnodes, etc.).

---+++ OAT.Xml.getElementsByLocalName(node, localName)

Identical to <tt>getElementsByTagName</tt>, but looks only into non-namespace part of tag name.

---+++ OAT.Xml.getLocalAttribute(node, attributeName)

Returns a value of attribute whose non-prefixed name is <tt>attributeName</tt>

---+++ OAT.Xml.removeDefaultNamespace(string)

Takes an XML document in <tt>string</tt> form and removes default namespace. This is useful when we want to use XPath queries against such a document, since these cannot be executed against documents with default namespaces. Returns XML string.

---+++ OAT.Xml.xpath(xmlDoc, xPathQuery, nsObject)

Runs an XPath query (xPathQuery) against <tt>xmlDoc</tt>. Namespaces are resolved as properties of <tt>nsObject</tt>.

---+++ OAT.Xml.escape(xml)

Returns escaped.

---+++ OAT.Xml.unescape(txt)

Returns unescaped.

---++ Examples

---+++ Example 1

<verbatim>
var xmlDoc, xslDoc; // somehow fill these with data
var params = [
        ["myNS","myparam1","myvalue1"],
        ["myNS","myparam2","myvalue2"]
]
var result = OAT.Xml.transformXSLT(xmlDoc, xslDoc, params);
</verbatim>

---+++ Example 2

<verbatim>
var xmlString = '<?xml version="1.0" ?><document><node>value</node><node /></document>';
var xmlDoc = OAT.Xml.createXmlDoc(xmlString);
var nodeArray = OAT.Xml.xpath(xmlDoc, '//node', {});
alert(nodeArray.length); // 2
</verbatim>

CategoryDocumentation CategoryOAT CategoryOpenSource
